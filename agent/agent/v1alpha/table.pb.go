// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: agent/agent/v1alpha/table.proto

package agentv1alpha

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CellStatus represents the status of a cell.
type CellStatus int32

const (
	// The cell status is not specified.
	CellStatus_CELL_STATUS_UNSPECIFIED CellStatus = 0
	// The cell is idle.
	CellStatus_CELL_STATUS_IDLE CellStatus = 1
	// The cell is pending.
	CellStatus_CELL_STATUS_PENDING CellStatus = 2
	// The cell is processing.
	CellStatus_CELL_STATUS_PROCESSING CellStatus = 3
	// The cell is failed.
	CellStatus_CELL_STATUS_FAILED CellStatus = 4
	// The cell is completed.
	CellStatus_CELL_STATUS_COMPLETED CellStatus = 5
)

// Enum value maps for CellStatus.
var (
	CellStatus_name = map[int32]string{
		0: "CELL_STATUS_UNSPECIFIED",
		1: "CELL_STATUS_IDLE",
		2: "CELL_STATUS_PENDING",
		3: "CELL_STATUS_PROCESSING",
		4: "CELL_STATUS_FAILED",
		5: "CELL_STATUS_COMPLETED",
	}
	CellStatus_value = map[string]int32{
		"CELL_STATUS_UNSPECIFIED": 0,
		"CELL_STATUS_IDLE":        1,
		"CELL_STATUS_PENDING":     2,
		"CELL_STATUS_PROCESSING":  3,
		"CELL_STATUS_FAILED":      4,
		"CELL_STATUS_COMPLETED":   5,
	}
)

func (x CellStatus) Enum() *CellStatus {
	p := new(CellStatus)
	*p = x
	return p
}

func (x CellStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_agent_v1alpha_table_proto_enumTypes[0].Descriptor()
}

func (CellStatus) Type() protoreflect.EnumType {
	return &file_agent_agent_v1alpha_table_proto_enumTypes[0]
}

func (x CellStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellStatus.Descriptor instead.
func (CellStatus) EnumDescriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{0}
}

// ExportFormat represents the format to export the data in.
type ExportFormat int32

const (
	// The format is not specified.
	ExportFormat_EXPORT_FORMAT_UNSPECIFIED ExportFormat = 0
	// The format is CSV.
	ExportFormat_EXPORT_FORMAT_CSV ExportFormat = 1
	// The format is Parquet.
	ExportFormat_EXPORT_FORMAT_PARQUET ExportFormat = 2
)

// Enum value maps for ExportFormat.
var (
	ExportFormat_name = map[int32]string{
		0: "EXPORT_FORMAT_UNSPECIFIED",
		1: "EXPORT_FORMAT_CSV",
		2: "EXPORT_FORMAT_PARQUET",
	}
	ExportFormat_value = map[string]int32{
		"EXPORT_FORMAT_UNSPECIFIED": 0,
		"EXPORT_FORMAT_CSV":         1,
		"EXPORT_FORMAT_PARQUET":     2,
	}
)

func (x ExportFormat) Enum() *ExportFormat {
	p := new(ExportFormat)
	*p = x
	return p
}

func (x ExportFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExportFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_agent_v1alpha_table_proto_enumTypes[1].Descriptor()
}

func (ExportFormat) Type() protoreflect.EnumType {
	return &file_agent_agent_v1alpha_table_proto_enumTypes[1]
}

func (x ExportFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportFormat.Descriptor instead.
func (ExportFormat) EnumDescriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{1}
}

// The sort of the column.
type ColumnDefinition_Sort int32

const (
	// The sort is not specified.
	ColumnDefinition_SORT_UNSPECIFIED ColumnDefinition_Sort = 0
	// The sort is ascending.
	ColumnDefinition_SORT_ASCENDING ColumnDefinition_Sort = 1
	// The sort is descending.
	ColumnDefinition_SORT_DESCENDING ColumnDefinition_Sort = 2
)

// Enum value maps for ColumnDefinition_Sort.
var (
	ColumnDefinition_Sort_name = map[int32]string{
		0: "SORT_UNSPECIFIED",
		1: "SORT_ASCENDING",
		2: "SORT_DESCENDING",
	}
	ColumnDefinition_Sort_value = map[string]int32{
		"SORT_UNSPECIFIED": 0,
		"SORT_ASCENDING":   1,
		"SORT_DESCENDING":  2,
	}
)

func (x ColumnDefinition_Sort) Enum() *ColumnDefinition_Sort {
	p := new(ColumnDefinition_Sort)
	*p = x
	return p
}

func (x ColumnDefinition_Sort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnDefinition_Sort) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_agent_v1alpha_table_proto_enumTypes[2].Descriptor()
}

func (ColumnDefinition_Sort) Type() protoreflect.EnumType {
	return &file_agent_agent_v1alpha_table_proto_enumTypes[2]
}

func (x ColumnDefinition_Sort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnDefinition_Sort.Descriptor instead.
func (ColumnDefinition_Sort) EnumDescriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{11, 0}
}

// The mode to generate mock data.
type GenerateMockTableRequest_Mode int32

const (
	// The mode is not specified.
	GenerateMockTableRequest_MODE_UNSPECIFIED GenerateMockTableRequest_Mode = 0
	// The mode is to generate mock data for a file-type table.
	GenerateMockTableRequest_MODE_FILE GenerateMockTableRequest_Mode = 1
	// The mode is to generate mock data for a sheet-type table.
	GenerateMockTableRequest_MODE_SHEET GenerateMockTableRequest_Mode = 2
)

// Enum value maps for GenerateMockTableRequest_Mode.
var (
	GenerateMockTableRequest_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_FILE",
		2: "MODE_SHEET",
	}
	GenerateMockTableRequest_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"MODE_FILE":        1,
		"MODE_SHEET":       2,
	}
)

func (x GenerateMockTableRequest_Mode) Enum() *GenerateMockTableRequest_Mode {
	p := new(GenerateMockTableRequest_Mode)
	*p = x
	return p
}

func (x GenerateMockTableRequest_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerateMockTableRequest_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_agent_agent_v1alpha_table_proto_enumTypes[3].Descriptor()
}

func (GenerateMockTableRequest_Mode) Type() protoreflect.EnumType {
	return &file_agent_agent_v1alpha_table_proto_enumTypes[3]
}

func (x GenerateMockTableRequest_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerateMockTableRequest_Mode.Descriptor instead.
func (GenerateMockTableRequest_Mode) EnumDescriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{54, 0}
}

// Table represents a table resource.
type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the table.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// The ID of the table.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The title of the table.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// A description of the table.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Additional metadata associated with the table.
	Metadata *structpb.Struct `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The timestamp when the table was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The timestamp when the table was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The configuration for the agent.
	AgentConfig *Table_AgentConfig `protobuf:"bytes,8,opt,name=agent_config,json=agentConfig,proto3" json:"agent_config,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{0}
}

func (x *Table) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Table) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Table) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Table) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Table) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Table) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Table) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Table) GetAgentConfig() *Table_AgentConfig {
	if x != nil {
		return x.AgentConfig
	}
	return nil
}

// ListTablesRequest represents a request to list tables.
type ListTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the tables.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The page token for pagination.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// The maximum number of tables to return.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListTablesRequest) Reset() {
	*x = ListTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesRequest) ProtoMessage() {}

func (x *ListTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesRequest.ProtoReflect.Descriptor instead.
func (*ListTablesRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{1}
}

func (x *ListTablesRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *ListTablesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListTablesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// ListTablesResponse contains the list of tables.
type ListTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of tables.
	Tables []*Table `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	// The token for the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of tables.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListTablesResponse) Reset() {
	*x = ListTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesResponse) ProtoMessage() {}

func (x *ListTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesResponse.ProtoReflect.Descriptor instead.
func (*ListTablesResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{2}
}

func (x *ListTablesResponse) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *ListTablesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListTablesResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// CreateTableRequest represents a request to create a table.
type CreateTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace where the table will be created.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The table resource to create.
	Table *Table `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *CreateTableRequest) Reset() {
	*x = CreateTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableRequest) ProtoMessage() {}

func (x *CreateTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableRequest.ProtoReflect.Descriptor instead.
func (*CreateTableRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTableRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *CreateTableRequest) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

// CreateTableResponse contains the created table.
type CreateTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created table resource.
	Table *Table `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *CreateTableResponse) Reset() {
	*x = CreateTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableResponse) ProtoMessage() {}

func (x *CreateTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableResponse.ProtoReflect.Descriptor instead.
func (*CreateTableResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTableResponse) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

// GetTableRequest represents a request to fetch a table.
type GetTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table to fetch.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
}

func (x *GetTableRequest) Reset() {
	*x = GetTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableRequest) ProtoMessage() {}

func (x *GetTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableRequest.ProtoReflect.Descriptor instead.
func (*GetTableRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{5}
}

func (x *GetTableRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *GetTableRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

// GetTableResponse contains the requested table.
type GetTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The table resource.
	Table *Table `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *GetTableResponse) Reset() {
	*x = GetTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableResponse) ProtoMessage() {}

func (x *GetTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableResponse.ProtoReflect.Descriptor instead.
func (*GetTableResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{6}
}

func (x *GetTableResponse) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

// UpdateTableRequest represents a request to update a table.
type UpdateTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table to update.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
	// The table fields that will replace the existing ones.
	Table *Table `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	// The update mask specifies the subset of fields that should be modified.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateTableRequest) Reset() {
	*x = UpdateTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTableRequest) ProtoMessage() {}

func (x *UpdateTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTableRequest.ProtoReflect.Descriptor instead.
func (*UpdateTableRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTableRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *UpdateTableRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

func (x *UpdateTableRequest) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *UpdateTableRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdateTableResponse contains the updated table.
type UpdateTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated table resource.
	Table *Table `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *UpdateTableResponse) Reset() {
	*x = UpdateTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTableResponse) ProtoMessage() {}

func (x *UpdateTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTableResponse.ProtoReflect.Descriptor instead.
func (*UpdateTableResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateTableResponse) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

// DeleteTableRequest represents a request to delete a table.
type DeleteTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table to delete.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
}

func (x *DeleteTableRequest) Reset() {
	*x = DeleteTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableRequest) ProtoMessage() {}

func (x *DeleteTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableRequest.ProtoReflect.Descriptor instead.
func (*DeleteTableRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteTableRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *DeleteTableRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

// DeleteTableResponse is an empty response for deleting a table.
type DeleteTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTableResponse) Reset() {
	*x = DeleteTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableResponse) ProtoMessage() {}

func (x *DeleteTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableResponse.ProtoReflect.Descriptor instead.
func (*DeleteTableResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{10}
}

// ColumnDefinition represents a column definition in a table.
type ColumnDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the column.
	ColumnUid string `protobuf:"bytes,1,opt,name=column_uid,json=columnUid,proto3" json:"column_uid,omitempty"`
	// The name of the column.
	// The name of the column. If this differs from the key in the ColumnDefinitions map,
	// the key will be updated to match this value.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The type of the column.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The order of the column in the table, starting at 1. This determines the column's position
	// when displaying or processing table data.
	Order int32 `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	// The configuration for the agent.
	AgentConfig *ColumnDefinition_AgentConfig `protobuf:"bytes,5,opt,name=agent_config,json=agentConfig,proto3" json:"agent_config,omitempty"`
	// The sort of the column.
	Sort ColumnDefinition_Sort `protobuf:"varint,6,opt,name=sort,proto3,enum=agent.agent.v1alpha.ColumnDefinition_Sort" json:"sort,omitempty"`
}

func (x *ColumnDefinition) Reset() {
	*x = ColumnDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnDefinition) ProtoMessage() {}

func (x *ColumnDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnDefinition.ProtoReflect.Descriptor instead.
func (*ColumnDefinition) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{11}
}

func (x *ColumnDefinition) GetColumnUid() string {
	if x != nil {
		return x.ColumnUid
	}
	return ""
}

func (x *ColumnDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnDefinition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ColumnDefinition) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ColumnDefinition) GetAgentConfig() *ColumnDefinition_AgentConfig {
	if x != nil {
		return x.AgentConfig
	}
	return nil
}

func (x *ColumnDefinition) GetSort() ColumnDefinition_Sort {
	if x != nil {
		return x.Sort
	}
	return ColumnDefinition_SORT_UNSPECIFIED
}

// GetColumnDefinitionsRequest represents a request to fetch column definitions.
type GetColumnDefinitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table whose columns to fetch.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
}

func (x *GetColumnDefinitionsRequest) Reset() {
	*x = GetColumnDefinitionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetColumnDefinitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetColumnDefinitionsRequest) ProtoMessage() {}

func (x *GetColumnDefinitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetColumnDefinitionsRequest.ProtoReflect.Descriptor instead.
func (*GetColumnDefinitionsRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{12}
}

func (x *GetColumnDefinitionsRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *GetColumnDefinitionsRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

// GetColumnDefinitionsResponse contains the column definitions.
type GetColumnDefinitionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of column names to their definitions.
	ColumnDefinitions map[string]*ColumnDefinition `protobuf:"bytes,1,rep,name=column_definitions,json=columnDefinitions,proto3" json:"column_definitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetColumnDefinitionsResponse) Reset() {
	*x = GetColumnDefinitionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetColumnDefinitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetColumnDefinitionsResponse) ProtoMessage() {}

func (x *GetColumnDefinitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetColumnDefinitionsResponse.ProtoReflect.Descriptor instead.
func (*GetColumnDefinitionsResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{13}
}

func (x *GetColumnDefinitionsResponse) GetColumnDefinitions() map[string]*ColumnDefinition {
	if x != nil {
		return x.ColumnDefinitions
	}
	return nil
}

// UpdateColumnDefinitionsRequest represents a request to update column definitions.
type UpdateColumnDefinitionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table whose columns to update.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
	// Map of column names to their new definitions.
	ColumnDefinitions map[string]*ColumnDefinition `protobuf:"bytes,3,rep,name=column_definitions,json=columnDefinitions,proto3" json:"column_definitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateColumnDefinitionsRequest) Reset() {
	*x = UpdateColumnDefinitionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateColumnDefinitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateColumnDefinitionsRequest) ProtoMessage() {}

func (x *UpdateColumnDefinitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateColumnDefinitionsRequest.ProtoReflect.Descriptor instead.
func (*UpdateColumnDefinitionsRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateColumnDefinitionsRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *UpdateColumnDefinitionsRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

func (x *UpdateColumnDefinitionsRequest) GetColumnDefinitions() map[string]*ColumnDefinition {
	if x != nil {
		return x.ColumnDefinitions
	}
	return nil
}

// UpdateColumnDefinitionsResponse contains the updated column definitions.
type UpdateColumnDefinitionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated column definitions.
	ColumnDefinitions map[string]*ColumnDefinition `protobuf:"bytes,1,rep,name=column_definitions,json=columnDefinitions,proto3" json:"column_definitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateColumnDefinitionsResponse) Reset() {
	*x = UpdateColumnDefinitionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateColumnDefinitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateColumnDefinitionsResponse) ProtoMessage() {}

func (x *UpdateColumnDefinitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateColumnDefinitionsResponse.ProtoReflect.Descriptor instead.
func (*UpdateColumnDefinitionsResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateColumnDefinitionsResponse) GetColumnDefinitions() map[string]*ColumnDefinition {
	if x != nil {
		return x.ColumnDefinitions
	}
	return nil
}

// Cell represents a cell in a table.
type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the cell.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// The unique identifier of the column this cell belongs to.
	ColumnUid string `protobuf:"bytes,2,opt,name=column_uid,json=columnUid,proto3" json:"column_uid,omitempty"`
	// The row that this cell belongs to.
	RowUid string `protobuf:"bytes,3,opt,name=row_uid,json=rowUid,proto3" json:"row_uid,omitempty"`
	// The timestamp when the cell was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The type of the cell's value.
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// The value of the cell as a string.
	//
	// Types that are assignable to Value:
	//
	//	*Cell_StringValue
	//	*Cell_NumberValue
	//	*Cell_BooleanValue
	//	*Cell_FileValue
	//	*Cell_DocumentValue
	//	*Cell_ImageValue
	//	*Cell_VideoValue
	//	*Cell_AudioValue
	//	*Cell_NullValue
	Value isCell_Value `protobuf_oneof:"value"`
	// Additional metadata for the cell.
	Metadata *structpb.Struct `protobuf:"bytes,15,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The status of the cell.
	Status CellStatus `protobuf:"varint,16,opt,name=status,proto3,enum=agent.agent.v1alpha.CellStatus" json:"status,omitempty"`
	// The faithfulness checking result for the cell.
	FaithfulnessCheckingResult *Cell_FaithfulnessCheckingResult `protobuf:"bytes,17,opt,name=faithfulness_checking_result,json=faithfulnessCheckingResult,proto3" json:"faithfulness_checking_result,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{16}
}

func (x *Cell) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Cell) GetColumnUid() string {
	if x != nil {
		return x.ColumnUid
	}
	return ""
}

func (x *Cell) GetRowUid() string {
	if x != nil {
		return x.RowUid
	}
	return ""
}

func (x *Cell) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Cell) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (m *Cell) GetValue() isCell_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Cell) GetStringValue() *StringCell {
	if x, ok := x.GetValue().(*Cell_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Cell) GetNumberValue() *NumberCell {
	if x, ok := x.GetValue().(*Cell_NumberValue); ok {
		return x.NumberValue
	}
	return nil
}

func (x *Cell) GetBooleanValue() *BooleanCell {
	if x, ok := x.GetValue().(*Cell_BooleanValue); ok {
		return x.BooleanValue
	}
	return nil
}

func (x *Cell) GetFileValue() *FileCell {
	if x, ok := x.GetValue().(*Cell_FileValue); ok {
		return x.FileValue
	}
	return nil
}

func (x *Cell) GetDocumentValue() *DocumentCell {
	if x, ok := x.GetValue().(*Cell_DocumentValue); ok {
		return x.DocumentValue
	}
	return nil
}

func (x *Cell) GetImageValue() *ImageCell {
	if x, ok := x.GetValue().(*Cell_ImageValue); ok {
		return x.ImageValue
	}
	return nil
}

func (x *Cell) GetVideoValue() *VideoCell {
	if x, ok := x.GetValue().(*Cell_VideoValue); ok {
		return x.VideoValue
	}
	return nil
}

func (x *Cell) GetAudioValue() *AudioCell {
	if x, ok := x.GetValue().(*Cell_AudioValue); ok {
		return x.AudioValue
	}
	return nil
}

func (x *Cell) GetNullValue() *NullCell {
	if x, ok := x.GetValue().(*Cell_NullValue); ok {
		return x.NullValue
	}
	return nil
}

func (x *Cell) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Cell) GetStatus() CellStatus {
	if x != nil {
		return x.Status
	}
	return CellStatus_CELL_STATUS_UNSPECIFIED
}

func (x *Cell) GetFaithfulnessCheckingResult() *Cell_FaithfulnessCheckingResult {
	if x != nil {
		return x.FaithfulnessCheckingResult
	}
	return nil
}

type isCell_Value interface {
	isCell_Value()
}

type Cell_StringValue struct {
	// The value of the cell as a string.
	StringValue *StringCell `protobuf:"bytes,6,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Cell_NumberValue struct {
	// The value of the cell as a number.
	NumberValue *NumberCell `protobuf:"bytes,7,opt,name=number_value,json=numberValue,proto3,oneof"`
}

type Cell_BooleanValue struct {
	// The value of the cell as a boolean.
	BooleanValue *BooleanCell `protobuf:"bytes,8,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

type Cell_FileValue struct {
	// The value of the cell as a url of a file resource.
	FileValue *FileCell `protobuf:"bytes,9,opt,name=file_value,json=fileValue,proto3,oneof"`
}

type Cell_DocumentValue struct {
	// The value of the cell as a url of a document resource.
	DocumentValue *DocumentCell `protobuf:"bytes,10,opt,name=document_value,json=documentValue,proto3,oneof"`
}

type Cell_ImageValue struct {
	// The value of the cell as a url of an image resource.
	ImageValue *ImageCell `protobuf:"bytes,11,opt,name=image_value,json=imageValue,proto3,oneof"`
}

type Cell_VideoValue struct {
	// The value of the cell as a url of a video resource.
	VideoValue *VideoCell `protobuf:"bytes,12,opt,name=video_value,json=videoValue,proto3,oneof"`
}

type Cell_AudioValue struct {
	// The value of the cell as a url of an audio resource.
	AudioValue *AudioCell `protobuf:"bytes,13,opt,name=audio_value,json=audioValue,proto3,oneof"`
}

type Cell_NullValue struct {
	// The value of the cell as a null cell.
	NullValue *NullCell `protobuf:"bytes,14,opt,name=null_value,json=nullValue,proto3,oneof"`
}

func (*Cell_StringValue) isCell_Value() {}

func (*Cell_NumberValue) isCell_Value() {}

func (*Cell_BooleanValue) isCell_Value() {}

func (*Cell_FileValue) isCell_Value() {}

func (*Cell_DocumentValue) isCell_Value() {}

func (*Cell_ImageValue) isCell_Value() {}

func (*Cell_VideoValue) isCell_Value() {}

func (*Cell_AudioValue) isCell_Value() {}

func (*Cell_NullValue) isCell_Value() {}

// NullCell represents a null cell.
type NullCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NullCell) Reset() {
	*x = NullCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullCell) ProtoMessage() {}

func (x *NullCell) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullCell.ProtoReflect.Descriptor instead.
func (*NullCell) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{17}
}

// StringCell represents a cell with a string value.
type StringCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the cell as a string.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StringCell) Reset() {
	*x = StringCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringCell) ProtoMessage() {}

func (x *StringCell) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringCell.ProtoReflect.Descriptor instead.
func (*StringCell) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{18}
}

func (x *StringCell) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// NumberCell represents a cell with a number value.
type NumberCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the cell as a number.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NumberCell) Reset() {
	*x = NumberCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberCell) ProtoMessage() {}

func (x *NumberCell) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberCell.ProtoReflect.Descriptor instead.
func (*NumberCell) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{19}
}

func (x *NumberCell) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// BooleanCell represents a cell with a boolean value.
type BooleanCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the cell as a boolean.
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BooleanCell) Reset() {
	*x = BooleanCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanCell) ProtoMessage() {}

func (x *BooleanCell) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanCell.ProtoReflect.Descriptor instead.
func (*BooleanCell) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{20}
}

func (x *BooleanCell) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

// FileCell represents a cell with a url of a file resource.
type FileCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL of the file resource.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *FileCell) Reset() {
	*x = FileCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileCell) ProtoMessage() {}

func (x *FileCell) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileCell.ProtoReflect.Descriptor instead.
func (*FileCell) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{21}
}

func (x *FileCell) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// DocumentCell represents a cell with a url of a document resource.
type DocumentCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL of the document resource.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DocumentCell) Reset() {
	*x = DocumentCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentCell) ProtoMessage() {}

func (x *DocumentCell) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentCell.ProtoReflect.Descriptor instead.
func (*DocumentCell) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{22}
}

func (x *DocumentCell) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// ImageCell represents a cell with a url of an image resource.
type ImageCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL of the image resource.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *ImageCell) Reset() {
	*x = ImageCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageCell) ProtoMessage() {}

func (x *ImageCell) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageCell.ProtoReflect.Descriptor instead.
func (*ImageCell) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{23}
}

func (x *ImageCell) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// VideoCell represents a cell with a url of a video resource.
type VideoCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL of the video resource.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *VideoCell) Reset() {
	*x = VideoCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoCell) ProtoMessage() {}

func (x *VideoCell) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoCell.ProtoReflect.Descriptor instead.
func (*VideoCell) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{24}
}

func (x *VideoCell) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// AudioCell represents a cell with a url of an audio resource.
type AudioCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL of the audio resource.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *AudioCell) Reset() {
	*x = AudioCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioCell) ProtoMessage() {}

func (x *AudioCell) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioCell.ProtoReflect.Descriptor instead.
func (*AudioCell) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{25}
}

func (x *AudioCell) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Row represents a row in a table.
type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the row.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Map of column names to their cell values.
	Cells map[string]*Cell `protobuf:"bytes,2,rep,name=cells,proto3" json:"cells,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The order of the row in the table, starting at 1. This determines the row's position
	// when displaying or processing table data.
	Order int32 `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	// The timestamp when the row was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The timestamp when the row was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{26}
}

func (x *Row) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Row) GetCells() map[string]*Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *Row) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Row) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Row) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// ListRowsRequest represents a request to fetch rows from a table.
type ListRowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table whose rows to fetch.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
	// The maximum number of rows to return.
	PageSize int32 `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// The page token for pagination.
	PageToken string `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListRowsRequest) Reset() {
	*x = ListRowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRowsRequest) ProtoMessage() {}

func (x *ListRowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRowsRequest.ProtoReflect.Descriptor instead.
func (*ListRowsRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{27}
}

func (x *ListRowsRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *ListRowsRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

func (x *ListRowsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRowsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// ListRowsResponse contains the requested rows.
type ListRowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rows.
	Rows []*Row `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	// The token for the next page of results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of rows that match the request.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListRowsResponse) Reset() {
	*x = ListRowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRowsResponse) ProtoMessage() {}

func (x *ListRowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRowsResponse.ProtoReflect.Descriptor instead.
func (*ListRowsResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{28}
}

func (x *ListRowsResponse) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *ListRowsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListRowsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// InsertRowRequest represents a request to insert a row into a table.
type InsertRowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table to insert rows into.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
	// The rows to insert.
	Row *Row `protobuf:"bytes,3,opt,name=row,proto3" json:"row,omitempty"`
	// The unique identifier of the row to insert before.
	BeforeRowUid *string `protobuf:"bytes,4,opt,name=before_row_uid,json=beforeRowUid,proto3,oneof" json:"before_row_uid,omitempty"`
}

func (x *InsertRowRequest) Reset() {
	*x = InsertRowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRowRequest) ProtoMessage() {}

func (x *InsertRowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRowRequest.ProtoReflect.Descriptor instead.
func (*InsertRowRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{29}
}

func (x *InsertRowRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *InsertRowRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

func (x *InsertRowRequest) GetRow() *Row {
	if x != nil {
		return x.Row
	}
	return nil
}

func (x *InsertRowRequest) GetBeforeRowUid() string {
	if x != nil && x.BeforeRowUid != nil {
		return *x.BeforeRowUid
	}
	return ""
}

// InsertRowResponse contains the inserted row.
type InsertRowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The inserted row resource.
	Row *Row `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
}

func (x *InsertRowResponse) Reset() {
	*x = InsertRowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertRowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRowResponse) ProtoMessage() {}

func (x *InsertRowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRowResponse.ProtoReflect.Descriptor instead.
func (*InsertRowResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{30}
}

func (x *InsertRowResponse) GetRow() *Row {
	if x != nil {
		return x.Row
	}
	return nil
}

// UpdateRowRequest represents a request to update a row.
type UpdateRowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table containing the row.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
	// The unique identifier of the row to update.
	RowUid string `protobuf:"bytes,3,opt,name=row_uid,json=rowUid,proto3" json:"row_uid,omitempty"`
	// The new row data.
	Row *Row `protobuf:"bytes,4,opt,name=row,proto3" json:"row,omitempty"`
}

func (x *UpdateRowRequest) Reset() {
	*x = UpdateRowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRowRequest) ProtoMessage() {}

func (x *UpdateRowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRowRequest.ProtoReflect.Descriptor instead.
func (*UpdateRowRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateRowRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *UpdateRowRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

func (x *UpdateRowRequest) GetRowUid() string {
	if x != nil {
		return x.RowUid
	}
	return ""
}

func (x *UpdateRowRequest) GetRow() *Row {
	if x != nil {
		return x.Row
	}
	return nil
}

// UpdateRowResponse contains the updated row.
type UpdateRowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated row resource.
	Row *Row `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
}

func (x *UpdateRowResponse) Reset() {
	*x = UpdateRowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRowResponse) ProtoMessage() {}

func (x *UpdateRowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRowResponse.ProtoReflect.Descriptor instead.
func (*UpdateRowResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateRowResponse) GetRow() *Row {
	if x != nil {
		return x.Row
	}
	return nil
}

// UpdateRowsRequest represents a request to update multiple rows.
type UpdateRowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table containing the rows.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
	// The rows to update.
	Rows []*Row `protobuf:"bytes,3,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *UpdateRowsRequest) Reset() {
	*x = UpdateRowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRowsRequest) ProtoMessage() {}

func (x *UpdateRowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRowsRequest.ProtoReflect.Descriptor instead.
func (*UpdateRowsRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateRowsRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *UpdateRowsRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

func (x *UpdateRowsRequest) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

// UpdateRowsResponse contains the updated rows.
type UpdateRowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated row resources.
	Rows []*Row `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *UpdateRowsResponse) Reset() {
	*x = UpdateRowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRowsResponse) ProtoMessage() {}

func (x *UpdateRowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRowsResponse.ProtoReflect.Descriptor instead.
func (*UpdateRowsResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{34}
}

func (x *UpdateRowsResponse) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

// DeleteRowRequest represents a request to delete a row.
type DeleteRowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table containing the row.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
	// The unique identifier of the row to delete.
	RowUid string `protobuf:"bytes,3,opt,name=row_uid,json=rowUid,proto3" json:"row_uid,omitempty"`
}

func (x *DeleteRowRequest) Reset() {
	*x = DeleteRowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRowRequest) ProtoMessage() {}

func (x *DeleteRowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRowRequest.ProtoReflect.Descriptor instead.
func (*DeleteRowRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteRowRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *DeleteRowRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

func (x *DeleteRowRequest) GetRowUid() string {
	if x != nil {
		return x.RowUid
	}
	return ""
}

// DeleteRowResponse is an empty response for deleting a row.
type DeleteRowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRowResponse) Reset() {
	*x = DeleteRowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRowResponse) ProtoMessage() {}

func (x *DeleteRowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRowResponse.ProtoReflect.Descriptor instead.
func (*DeleteRowResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{36}
}

// DeleteRowsRequest represents a request to delete multiple rows.
type DeleteRowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table containing the rows.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
	// The unique identifiers of the rows to delete.
	RowUids []string `protobuf:"bytes,3,rep,name=row_uids,json=rowUids,proto3" json:"row_uids,omitempty"`
}

func (x *DeleteRowsRequest) Reset() {
	*x = DeleteRowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRowsRequest) ProtoMessage() {}

func (x *DeleteRowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRowsRequest.ProtoReflect.Descriptor instead.
func (*DeleteRowsRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteRowsRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *DeleteRowsRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

func (x *DeleteRowsRequest) GetRowUids() []string {
	if x != nil {
		return x.RowUids
	}
	return nil
}

// DeleteRowsResponse is an empty response for deleting multiple rows.
type DeleteRowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRowsResponse) Reset() {
	*x = DeleteRowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRowsResponse) ProtoMessage() {}

func (x *DeleteRowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRowsResponse.ProtoReflect.Descriptor instead.
func (*DeleteRowsResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{38}
}

// MoveRowsRequest represents a request to move multiple rows.
type MoveRowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table containing the row.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
	// The unique identifiers of the rows to be moved.
	RowUids []string `protobuf:"bytes,3,rep,name=row_uids,json=rowUids,proto3" json:"row_uids,omitempty"`
	// The unique identifier of the row to move before.
	BeforeRowUid *string `protobuf:"bytes,4,opt,name=before_row_uid,json=beforeRowUid,proto3,oneof" json:"before_row_uid,omitempty"`
}

func (x *MoveRowsRequest) Reset() {
	*x = MoveRowsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRowsRequest) ProtoMessage() {}

func (x *MoveRowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRowsRequest.ProtoReflect.Descriptor instead.
func (*MoveRowsRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{39}
}

func (x *MoveRowsRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *MoveRowsRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

func (x *MoveRowsRequest) GetRowUids() []string {
	if x != nil {
		return x.RowUids
	}
	return nil
}

func (x *MoveRowsRequest) GetBeforeRowUid() string {
	if x != nil && x.BeforeRowUid != nil {
		return *x.BeforeRowUid
	}
	return ""
}

// MoveRowsResponse is an empty response for moving multiple rows.
type MoveRowsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MoveRowsResponse) Reset() {
	*x = MoveRowsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRowsResponse) ProtoMessage() {}

func (x *MoveRowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRowsResponse.ProtoReflect.Descriptor instead.
func (*MoveRowsResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{40}
}

// ExportTableRequest represents a request to export table data.
type ExportTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table to export.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
	// The format to export the data in.
	Format ExportFormat `protobuf:"varint,3,opt,name=format,proto3,enum=agent.agent.v1alpha.ExportFormat" json:"format,omitempty"`
}

func (x *ExportTableRequest) Reset() {
	*x = ExportTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportTableRequest) ProtoMessage() {}

func (x *ExportTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportTableRequest.ProtoReflect.Descriptor instead.
func (*ExportTableRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{41}
}

func (x *ExportTableRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *ExportTableRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

func (x *ExportTableRequest) GetFormat() ExportFormat {
	if x != nil {
		return x.Format
	}
	return ExportFormat_EXPORT_FORMAT_UNSPECIFIED
}

// ExportTableResponse is an empty response for exporting table data.
type ExportTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The exported data.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ExportTableResponse) Reset() {
	*x = ExportTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportTableResponse) ProtoMessage() {}

func (x *ExportTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportTableResponse.ProtoReflect.Descriptor instead.
func (*ExportTableResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{42}
}

func (x *ExportTableResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetTableEventsRequest represents a request to fetch events for a table.
type GetTableEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table to fetch events for.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
}

func (x *GetTableEventsRequest) Reset() {
	*x = GetTableEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableEventsRequest) ProtoMessage() {}

func (x *GetTableEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableEventsRequest.ProtoReflect.Descriptor instead.
func (*GetTableEventsRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{43}
}

func (x *GetTableEventsRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *GetTableEventsRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

// GetTableEventsResponse contains the events for a table.
type GetTableEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The events for the table.
	Event *TableEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *GetTableEventsResponse) Reset() {
	*x = GetTableEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableEventsResponse) ProtoMessage() {}

func (x *GetTableEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableEventsResponse.ProtoReflect.Descriptor instead.
func (*GetTableEventsResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{44}
}

func (x *GetTableEventsResponse) GetEvent() *TableEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

// TableEvent represents an event for a table.
type TableEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The event type.
	// In text/event-stream format, this maps to the `event` field.
	Event string `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	// The ID of the event.
	// In text/event-stream format, this maps to the `id` field.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The data of the event.
	// In text/event-stream format, this maps to the `data` field.
	//
	// Types that are assignable to Data:
	//
	//	*TableEvent_TableUpdatedEvent
	//	*TableEvent_TableDeletedEvent
	//	*TableEvent_ColumnDefinitionsUpdatedEvent
	//	*TableEvent_RowInsertedEvent
	//	*TableEvent_RowUpdatedEvent
	//	*TableEvent_RowDeletedEvent
	//	*TableEvent_RowsMovedEvent
	//	*TableEvent_CellUpdatedEvent
	Data isTableEvent_Data `protobuf_oneof:"data"`
}

func (x *TableEvent) Reset() {
	*x = TableEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableEvent) ProtoMessage() {}

func (x *TableEvent) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableEvent.ProtoReflect.Descriptor instead.
func (*TableEvent) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{45}
}

func (x *TableEvent) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *TableEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *TableEvent) GetData() isTableEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *TableEvent) GetTableUpdatedEvent() *TableUpdatedEvent {
	if x, ok := x.GetData().(*TableEvent_TableUpdatedEvent); ok {
		return x.TableUpdatedEvent
	}
	return nil
}

func (x *TableEvent) GetTableDeletedEvent() *TableDeletedEvent {
	if x, ok := x.GetData().(*TableEvent_TableDeletedEvent); ok {
		return x.TableDeletedEvent
	}
	return nil
}

func (x *TableEvent) GetColumnDefinitionsUpdatedEvent() *ColumnDefinitionsUpdatedEvent {
	if x, ok := x.GetData().(*TableEvent_ColumnDefinitionsUpdatedEvent); ok {
		return x.ColumnDefinitionsUpdatedEvent
	}
	return nil
}

func (x *TableEvent) GetRowInsertedEvent() *RowInsertedEvent {
	if x, ok := x.GetData().(*TableEvent_RowInsertedEvent); ok {
		return x.RowInsertedEvent
	}
	return nil
}

func (x *TableEvent) GetRowUpdatedEvent() *RowUpdatedEvent {
	if x, ok := x.GetData().(*TableEvent_RowUpdatedEvent); ok {
		return x.RowUpdatedEvent
	}
	return nil
}

func (x *TableEvent) GetRowDeletedEvent() *RowDeletedEvent {
	if x, ok := x.GetData().(*TableEvent_RowDeletedEvent); ok {
		return x.RowDeletedEvent
	}
	return nil
}

func (x *TableEvent) GetRowsMovedEvent() *RowsMovedEvent {
	if x, ok := x.GetData().(*TableEvent_RowsMovedEvent); ok {
		return x.RowsMovedEvent
	}
	return nil
}

func (x *TableEvent) GetCellUpdatedEvent() *CellUpdatedEvent {
	if x, ok := x.GetData().(*TableEvent_CellUpdatedEvent); ok {
		return x.CellUpdatedEvent
	}
	return nil
}

type isTableEvent_Data interface {
	isTableEvent_Data()
}

type TableEvent_TableUpdatedEvent struct {
	// The table that was updated.
	TableUpdatedEvent *TableUpdatedEvent `protobuf:"bytes,3,opt,name=table_updated_event,json=tableUpdatedEvent,proto3,oneof"`
}

type TableEvent_TableDeletedEvent struct {
	// The table that was deleted.
	TableDeletedEvent *TableDeletedEvent `protobuf:"bytes,4,opt,name=table_deleted_event,json=tableDeletedEvent,proto3,oneof"`
}

type TableEvent_ColumnDefinitionsUpdatedEvent struct {
	// The column definitions that were updated.
	ColumnDefinitionsUpdatedEvent *ColumnDefinitionsUpdatedEvent `protobuf:"bytes,5,opt,name=column_definitions_updated_event,json=columnDefinitionsUpdatedEvent,proto3,oneof"`
}

type TableEvent_RowInsertedEvent struct {
	// The row that was inserted.
	RowInsertedEvent *RowInsertedEvent `protobuf:"bytes,6,opt,name=row_inserted_event,json=rowInsertedEvent,proto3,oneof"`
}

type TableEvent_RowUpdatedEvent struct {
	// The row that was updated.
	RowUpdatedEvent *RowUpdatedEvent `protobuf:"bytes,7,opt,name=row_updated_event,json=rowUpdatedEvent,proto3,oneof"`
}

type TableEvent_RowDeletedEvent struct {
	// The row that was deleted.
	RowDeletedEvent *RowDeletedEvent `protobuf:"bytes,8,opt,name=row_deleted_event,json=rowDeletedEvent,proto3,oneof"`
}

type TableEvent_RowsMovedEvent struct {
	// The rows that were moved.
	RowsMovedEvent *RowsMovedEvent `protobuf:"bytes,9,opt,name=rows_moved_event,json=rowsMovedEvent,proto3,oneof"`
}

type TableEvent_CellUpdatedEvent struct {
	// The cell that was updated.
	CellUpdatedEvent *CellUpdatedEvent `protobuf:"bytes,10,opt,name=cell_updated_event,json=cellUpdatedEvent,proto3,oneof"`
}

func (*TableEvent_TableUpdatedEvent) isTableEvent_Data() {}

func (*TableEvent_TableDeletedEvent) isTableEvent_Data() {}

func (*TableEvent_ColumnDefinitionsUpdatedEvent) isTableEvent_Data() {}

func (*TableEvent_RowInsertedEvent) isTableEvent_Data() {}

func (*TableEvent_RowUpdatedEvent) isTableEvent_Data() {}

func (*TableEvent_RowDeletedEvent) isTableEvent_Data() {}

func (*TableEvent_RowsMovedEvent) isTableEvent_Data() {}

func (*TableEvent_CellUpdatedEvent) isTableEvent_Data() {}

// TableUpdatedEvent represents an event for a table being updated.
type TableUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The table that was updated.
	Table *Table `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *TableUpdatedEvent) Reset() {
	*x = TableUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableUpdatedEvent) ProtoMessage() {}

func (x *TableUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableUpdatedEvent.ProtoReflect.Descriptor instead.
func (*TableUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{46}
}

func (x *TableUpdatedEvent) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

// TableDeletedEvent represents an event for a table being deleted.
type TableDeletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TableDeletedEvent) Reset() {
	*x = TableDeletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDeletedEvent) ProtoMessage() {}

func (x *TableDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDeletedEvent.ProtoReflect.Descriptor instead.
func (*TableDeletedEvent) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{47}
}

// ColumnDefinitionsUpdatedEvent represents an event for column definitions being updated.
type ColumnDefinitionsUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column definitions that were updated.
	ColumnDefinitions map[string]*ColumnDefinition `protobuf:"bytes,1,rep,name=column_definitions,json=columnDefinitions,proto3" json:"column_definitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ColumnDefinitionsUpdatedEvent) Reset() {
	*x = ColumnDefinitionsUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnDefinitionsUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnDefinitionsUpdatedEvent) ProtoMessage() {}

func (x *ColumnDefinitionsUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnDefinitionsUpdatedEvent.ProtoReflect.Descriptor instead.
func (*ColumnDefinitionsUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{48}
}

func (x *ColumnDefinitionsUpdatedEvent) GetColumnDefinitions() map[string]*ColumnDefinition {
	if x != nil {
		return x.ColumnDefinitions
	}
	return nil
}

// RowInsertedEvent represents an event for a row being inserted.
type RowInsertedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The row that was inserted.
	// Note: Only the row metadata is returned, not the cell data.
	Row *Row `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
	// The unique identifier of the row that was inserted before.
	BeforeRowUid string `protobuf:"bytes,2,opt,name=before_row_uid,json=beforeRowUid,proto3" json:"before_row_uid,omitempty"`
}

func (x *RowInsertedEvent) Reset() {
	*x = RowInsertedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowInsertedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowInsertedEvent) ProtoMessage() {}

func (x *RowInsertedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowInsertedEvent.ProtoReflect.Descriptor instead.
func (*RowInsertedEvent) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{49}
}

func (x *RowInsertedEvent) GetRow() *Row {
	if x != nil {
		return x.Row
	}
	return nil
}

func (x *RowInsertedEvent) GetBeforeRowUid() string {
	if x != nil {
		return x.BeforeRowUid
	}
	return ""
}

// RowUpdatedEvent represents an event for a row being updated.
type RowUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The row that was updated.
	// Note: Only the row metadata is returned, not the cell data.
	Row *Row `protobuf:"bytes,1,opt,name=row,proto3" json:"row,omitempty"`
}

func (x *RowUpdatedEvent) Reset() {
	*x = RowUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowUpdatedEvent) ProtoMessage() {}

func (x *RowUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowUpdatedEvent.ProtoReflect.Descriptor instead.
func (*RowUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{50}
}

func (x *RowUpdatedEvent) GetRow() *Row {
	if x != nil {
		return x.Row
	}
	return nil
}

// RowDeletedEvent represents an event for a row being deleted.
type RowDeletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the row that was deleted.
	RowUid string `protobuf:"bytes,1,opt,name=row_uid,json=rowUid,proto3" json:"row_uid,omitempty"`
}

func (x *RowDeletedEvent) Reset() {
	*x = RowDeletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowDeletedEvent) ProtoMessage() {}

func (x *RowDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowDeletedEvent.ProtoReflect.Descriptor instead.
func (*RowDeletedEvent) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{51}
}

func (x *RowDeletedEvent) GetRowUid() string {
	if x != nil {
		return x.RowUid
	}
	return ""
}

// RowsMovedEvent represents an event for multiple rows being moved.
type RowsMovedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifiers of the rows that were moved.
	RowUids []string `protobuf:"bytes,1,rep,name=row_uids,json=rowUids,proto3" json:"row_uids,omitempty"`
	// The unique identifier of the row that was moved before.
	BeforeRowUid *string `protobuf:"bytes,2,opt,name=before_row_uid,json=beforeRowUid,proto3,oneof" json:"before_row_uid,omitempty"`
}

func (x *RowsMovedEvent) Reset() {
	*x = RowsMovedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowsMovedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowsMovedEvent) ProtoMessage() {}

func (x *RowsMovedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowsMovedEvent.ProtoReflect.Descriptor instead.
func (*RowsMovedEvent) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{52}
}

func (x *RowsMovedEvent) GetRowUids() []string {
	if x != nil {
		return x.RowUids
	}
	return nil
}

func (x *RowsMovedEvent) GetBeforeRowUid() string {
	if x != nil && x.BeforeRowUid != nil {
		return *x.BeforeRowUid
	}
	return ""
}

// CellUpdatedEvent represents an event for a cell being updated.
type CellUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cell that was updated.
	Cell *Cell `protobuf:"bytes,1,opt,name=cell,proto3" json:"cell,omitempty"`
	// Whether the event is a delta update.
	// Only cells with string type can be returned in delta mode. Delta mode returns
	// only the changes made to the cell value rather than the full value.
	DeltaMode bool `protobuf:"varint,2,opt,name=delta_mode,json=deltaMode,proto3" json:"delta_mode,omitempty"`
}

func (x *CellUpdatedEvent) Reset() {
	*x = CellUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellUpdatedEvent) ProtoMessage() {}

func (x *CellUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellUpdatedEvent.ProtoReflect.Descriptor instead.
func (*CellUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{53}
}

func (x *CellUpdatedEvent) GetCell() *Cell {
	if x != nil {
		return x.Cell
	}
	return nil
}

func (x *CellUpdatedEvent) GetDeltaMode() bool {
	if x != nil {
		return x.DeltaMode
	}
	return false
}

// GenerateMockTableRequest represents a request to generate mock table data.
type GenerateMockTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the table to generate mock data for.
	TableUid string `protobuf:"bytes,2,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
	// The number of rows to generate.
	NumRows *int32 `protobuf:"varint,3,opt,name=num_rows,json=numRows,proto3,oneof" json:"num_rows,omitempty"`
	// Whether to enable faithfulness checking for the mock data.
	EnableFaithfulnessChecking *bool `protobuf:"varint,4,opt,name=enable_faithfulness_checking,json=enableFaithfulnessChecking,proto3,oneof" json:"enable_faithfulness_checking,omitempty"`
	// The mode to generate mock data.
	Mode GenerateMockTableRequest_Mode `protobuf:"varint,5,opt,name=mode,proto3,enum=agent.agent.v1alpha.GenerateMockTableRequest_Mode" json:"mode,omitempty"`
}

func (x *GenerateMockTableRequest) Reset() {
	*x = GenerateMockTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateMockTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateMockTableRequest) ProtoMessage() {}

func (x *GenerateMockTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateMockTableRequest.ProtoReflect.Descriptor instead.
func (*GenerateMockTableRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{54}
}

func (x *GenerateMockTableRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *GenerateMockTableRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

func (x *GenerateMockTableRequest) GetNumRows() int32 {
	if x != nil && x.NumRows != nil {
		return *x.NumRows
	}
	return 0
}

func (x *GenerateMockTableRequest) GetEnableFaithfulnessChecking() bool {
	if x != nil && x.EnableFaithfulnessChecking != nil {
		return *x.EnableFaithfulnessChecking
	}
	return false
}

func (x *GenerateMockTableRequest) GetMode() GenerateMockTableRequest_Mode {
	if x != nil {
		return x.Mode
	}
	return GenerateMockTableRequest_MODE_UNSPECIFIED
}

// GenerateMockTableResponse is an empty response for generating mock table data.
type GenerateMockTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GenerateMockTableResponse) Reset() {
	*x = GenerateMockTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateMockTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateMockTableResponse) ProtoMessage() {}

func (x *GenerateMockTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateMockTableResponse.ProtoReflect.Descriptor instead.
func (*GenerateMockTableResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{55}
}

// BindChatTableRequest represents a request to bind a table to a chat.
type BindChatTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the chat to bind the table to.
	ChatUid string `protobuf:"bytes,2,opt,name=chat_uid,json=chatUid,proto3" json:"chat_uid,omitempty"`
	// The UID of the table to bind to the chat.
	TableUid string `protobuf:"bytes,3,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
}

func (x *BindChatTableRequest) Reset() {
	*x = BindChatTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindChatTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindChatTableRequest) ProtoMessage() {}

func (x *BindChatTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindChatTableRequest.ProtoReflect.Descriptor instead.
func (*BindChatTableRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{56}
}

func (x *BindChatTableRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *BindChatTableRequest) GetChatUid() string {
	if x != nil {
		return x.ChatUid
	}
	return ""
}

func (x *BindChatTableRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

// BindChatTableResponse is an empty response for binding a table to a chat.
type BindChatTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BindChatTableResponse) Reset() {
	*x = BindChatTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindChatTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindChatTableResponse) ProtoMessage() {}

func (x *BindChatTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindChatTableResponse.ProtoReflect.Descriptor instead.
func (*BindChatTableResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{57}
}

// UnbindChatTableRequest represents a request to unbind a table from a chat.
type UnbindChatTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the chat to unbind the table from.
	ChatUid string `protobuf:"bytes,2,opt,name=chat_uid,json=chatUid,proto3" json:"chat_uid,omitempty"`
	// The UID of the table to unbind from the chat.
	TableUid string `protobuf:"bytes,3,opt,name=table_uid,json=tableUid,proto3" json:"table_uid,omitempty"`
}

func (x *UnbindChatTableRequest) Reset() {
	*x = UnbindChatTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbindChatTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindChatTableRequest) ProtoMessage() {}

func (x *UnbindChatTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindChatTableRequest.ProtoReflect.Descriptor instead.
func (*UnbindChatTableRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{58}
}

func (x *UnbindChatTableRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *UnbindChatTableRequest) GetChatUid() string {
	if x != nil {
		return x.ChatUid
	}
	return ""
}

func (x *UnbindChatTableRequest) GetTableUid() string {
	if x != nil {
		return x.TableUid
	}
	return ""
}

// UnbindChatTableResponse is an empty response for unbinding a table from a chat.
type UnbindChatTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnbindChatTableResponse) Reset() {
	*x = UnbindChatTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbindChatTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindChatTableResponse) ProtoMessage() {}

func (x *UnbindChatTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindChatTableResponse.ProtoReflect.Descriptor instead.
func (*UnbindChatTableResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{59}
}

// ListChatTablesRequest represents a request to list tables bound to a chat.
type ListChatTablesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the namespace that owns the table.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The UID of the chat to list tables for.
	ChatUid string `protobuf:"bytes,2,opt,name=chat_uid,json=chatUid,proto3" json:"chat_uid,omitempty"`
}

func (x *ListChatTablesRequest) Reset() {
	*x = ListChatTablesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChatTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChatTablesRequest) ProtoMessage() {}

func (x *ListChatTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChatTablesRequest.ProtoReflect.Descriptor instead.
func (*ListChatTablesRequest) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{60}
}

func (x *ListChatTablesRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *ListChatTablesRequest) GetChatUid() string {
	if x != nil {
		return x.ChatUid
	}
	return ""
}

// ListChatTablesResponse contains the list of tables bound to a chat.
type ListChatTablesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tables bound to the chat.
	Tables []*Table `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *ListChatTablesResponse) Reset() {
	*x = ListChatTablesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChatTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChatTablesResponse) ProtoMessage() {}

func (x *ListChatTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChatTablesResponse.ProtoReflect.Descriptor instead.
func (*ListChatTablesResponse) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{61}
}

func (x *ListChatTablesResponse) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

// The configuration for the agent.
type Table_AgentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to enable faithfulness checking for the table.
	EnableFaithfulnessChecking bool `protobuf:"varint,1,opt,name=enable_faithfulness_checking,json=enableFaithfulnessChecking,proto3" json:"enable_faithfulness_checking,omitempty"`
}

func (x *Table_AgentConfig) Reset() {
	*x = Table_AgentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table_AgentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table_AgentConfig) ProtoMessage() {}

func (x *Table_AgentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table_AgentConfig.ProtoReflect.Descriptor instead.
func (*Table_AgentConfig) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Table_AgentConfig) GetEnableFaithfulnessChecking() bool {
	if x != nil {
		return x.EnableFaithfulnessChecking
	}
	return false
}

// The configuration for the agent.
type ColumnDefinition_AgentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The instructions for the agent.
	Instructions string `protobuf:"bytes,1,opt,name=instructions,proto3" json:"instructions,omitempty"`
	// Whether to enable web search for the agent.
	EnableWebSearch bool `protobuf:"varint,2,opt,name=enable_web_search,json=enableWebSearch,proto3" json:"enable_web_search,omitempty"`
}

func (x *ColumnDefinition_AgentConfig) Reset() {
	*x = ColumnDefinition_AgentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnDefinition_AgentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnDefinition_AgentConfig) ProtoMessage() {}

func (x *ColumnDefinition_AgentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnDefinition_AgentConfig.ProtoReflect.Descriptor instead.
func (*ColumnDefinition_AgentConfig) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ColumnDefinition_AgentConfig) GetInstructions() string {
	if x != nil {
		return x.Instructions
	}
	return ""
}

func (x *ColumnDefinition_AgentConfig) GetEnableWebSearch() bool {
	if x != nil {
		return x.EnableWebSearch
	}
	return false
}

// The faithfulness checking result for the cell.
type Cell_FaithfulnessCheckingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text of the faithfulness checking result.
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// The confidence score for the faithfulness checking result.
	ConfidenceScore float64 `protobuf:"fixed64,2,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"`
}

func (x *Cell_FaithfulnessCheckingResult) Reset() {
	*x = Cell_FaithfulnessCheckingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_agent_agent_v1alpha_table_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell_FaithfulnessCheckingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell_FaithfulnessCheckingResult) ProtoMessage() {}

func (x *Cell_FaithfulnessCheckingResult) ProtoReflect() protoreflect.Message {
	mi := &file_agent_agent_v1alpha_table_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell_FaithfulnessCheckingResult.ProtoReflect.Descriptor instead.
func (*Cell_FaithfulnessCheckingResult) Descriptor() ([]byte, []int) {
	return file_agent_agent_v1alpha_table_proto_rawDescGZIP(), []int{16, 0}
}

func (x *Cell_FaithfulnessCheckingResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *Cell_FaithfulnessCheckingResult) GetConfidenceScore() float64 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

var File_agent_agent_v1alpha_table_proto protoreflect.FileDescriptor

var file_agent_agent_v1alpha_table_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf, 0x03, 0x0a, 0x05, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49,
	0x0a, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x4f, 0x0a, 0x0b, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x1c, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x74, 0x68, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x74, 0x68, 0x66, 0x75, 0x6c, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9e,
	0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x73, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x4c, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x5b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x22,
	0x49, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0x4c, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5e, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x22, 0x15, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x03, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0c, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x1a, 0x5d, 0x0a, 0x0b, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x57, 0x65, 0x62, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x45, 0x0a, 0x04, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x52, 0x54, 0x5f,
	0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x4f, 0x52, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x22, 0x67, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x12, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6b, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd2, 0x02, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x79, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6b, 0x0a,
	0x16, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8f, 0x02, 0x0a, 0x1f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f,
	0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x6b, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8d, 0x09, 0x0a,
	0x04, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x44, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e,
	0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x65, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a,
	0x0a, 0x0e, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x65,
	0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x41, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7b, 0x0a, 0x1c, 0x66,
	0x61, 0x69, 0x74, 0x68, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x2e, 0x46, 0x61, 0x69,
	0x74, 0x68, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1a, 0x66, 0x61,
	0x69, 0x74, 0x68, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x69, 0x0a, 0x1a, 0x46, 0x61, 0x69, 0x74,
	0x68, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x0a, 0x0a, 0x08,
	0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x65, 0x6c, 0x6c, 0x22, 0x27, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x27, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x12,
	0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x28, 0x0a, 0x0b, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x21, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c,
	0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x25, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x22,
	0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x22, 0x22, 0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x65, 0x6c, 0x6c, 0x12,
	0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x22, 0x0a, 0x09, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x65, 0x6c, 0x6c, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xd0, 0x02, 0x0a, 0x03, 0x52,
	0x6f, 0x77, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52,
	0x6f, 0x77, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x53, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad, 0x01,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x96, 0x01,
	0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x03, 0x72, 0x6f,
	0x77, 0x12, 0x2e, 0x0a, 0x0e, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00,
	0x52, 0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x77,
	0x5f, 0x75, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x72, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x77,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0xa6, 0x01, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x72, 0x6f, 0x77,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x06, 0x72, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x03,
	0x72, 0x6f, 0x77, 0x22, 0x44, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x77, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f,
	0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x47, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x52, 0x6f, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x22, 0x7a, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x07, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x72, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x22, 0x13, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x7d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x73,
	0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x4d, 0x6f, 0x76, 0x65, 0x52,
	0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x72, 0x6f, 0x77,
	0x55, 0x69, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x0e, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x72,
	0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x6f, 0x77, 0x55, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f,
	0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x4d, 0x6f, 0x76, 0x65, 0x52,
	0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x12,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x2e, 0x0a, 0x13,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x61, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x22,
	0x54, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x9e, 0x06, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x58,
	0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x20, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x72, 0x6f, 0x77, 0x5f, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x72, 0x6f,
	0x77, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x52,
	0x0a, 0x11, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x52, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x72, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x72, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x10, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x6f, 0x77, 0x73, 0x4d, 0x6f, 0x76,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x63, 0x65,
	0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x1d, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x12, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x6b, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6e, 0x0a, 0x10, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x72, 0x6f, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x77,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x29, 0x0a, 0x0e, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52,
	0x6f, 0x77, 0x55, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x0f, 0x52, 0x6f, 0x77, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x6f, 0x77, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0x2f, 0x0a, 0x0f, 0x52, 0x6f, 0x77,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x07,
	0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x06, 0x72, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x22, 0x73, 0x0a, 0x0e, 0x52, 0x6f,
	0x77, 0x73, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x08,
	0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x0e,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x52, 0x6f, 0x77, 0x55, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x75, 0x69, 0x64, 0x22,
	0x6a, 0x0a, 0x10, 0x43, 0x65, 0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x8d, 0x03, 0x0a, 0x18,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x75, 0x6d,
	0x52, 0x6f, 0x77, 0x73, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x61, 0x69, 0x74, 0x68, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x01, 0x52, 0x1a, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x69, 0x74,
	0x68, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x3b, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x48, 0x45, 0x45, 0x54, 0x10, 0x02, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x74, 0x68, 0x66, 0x75, 0x6c, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x1b, 0x0a, 0x19, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x42, 0x69, 0x6e,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x42,
	0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x74, 0x55, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x6e, 0x62,
	0x69, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5f, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x55, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2a, 0xa7, 0x01, 0x0a, 0x0a, 0x43, 0x65, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x45, 0x4c, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x45,
	0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x45, 0x4c, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x2a, 0x5f, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x43, 0x53, 0x56, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x51, 0x55, 0x45,
	0x54, 0x10, 0x02, 0x42, 0xd7, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42,
	0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c,
	0x6c, 0x2d, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x3b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0xa2, 0x02, 0x03, 0x41, 0x41, 0x58, 0xaa, 0x02, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x13,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x5c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0xe2, 0x02, 0x1f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x5c, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_agent_agent_v1alpha_table_proto_rawDescOnce sync.Once
	file_agent_agent_v1alpha_table_proto_rawDescData = file_agent_agent_v1alpha_table_proto_rawDesc
)

func file_agent_agent_v1alpha_table_proto_rawDescGZIP() []byte {
	file_agent_agent_v1alpha_table_proto_rawDescOnce.Do(func() {
		file_agent_agent_v1alpha_table_proto_rawDescData = protoimpl.X.CompressGZIP(file_agent_agent_v1alpha_table_proto_rawDescData)
	})
	return file_agent_agent_v1alpha_table_proto_rawDescData
}

var file_agent_agent_v1alpha_table_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_agent_agent_v1alpha_table_proto_msgTypes = make([]protoimpl.MessageInfo, 70)
var file_agent_agent_v1alpha_table_proto_goTypes = []interface{}{
	(CellStatus)(0),                         // 0: agent.agent.v1alpha.CellStatus
	(ExportFormat)(0),                       // 1: agent.agent.v1alpha.ExportFormat
	(ColumnDefinition_Sort)(0),              // 2: agent.agent.v1alpha.ColumnDefinition.Sort
	(GenerateMockTableRequest_Mode)(0),      // 3: agent.agent.v1alpha.GenerateMockTableRequest.Mode
	(*Table)(nil),                           // 4: agent.agent.v1alpha.Table
	(*ListTablesRequest)(nil),               // 5: agent.agent.v1alpha.ListTablesRequest
	(*ListTablesResponse)(nil),              // 6: agent.agent.v1alpha.ListTablesResponse
	(*CreateTableRequest)(nil),              // 7: agent.agent.v1alpha.CreateTableRequest
	(*CreateTableResponse)(nil),             // 8: agent.agent.v1alpha.CreateTableResponse
	(*GetTableRequest)(nil),                 // 9: agent.agent.v1alpha.GetTableRequest
	(*GetTableResponse)(nil),                // 10: agent.agent.v1alpha.GetTableResponse
	(*UpdateTableRequest)(nil),              // 11: agent.agent.v1alpha.UpdateTableRequest
	(*UpdateTableResponse)(nil),             // 12: agent.agent.v1alpha.UpdateTableResponse
	(*DeleteTableRequest)(nil),              // 13: agent.agent.v1alpha.DeleteTableRequest
	(*DeleteTableResponse)(nil),             // 14: agent.agent.v1alpha.DeleteTableResponse
	(*ColumnDefinition)(nil),                // 15: agent.agent.v1alpha.ColumnDefinition
	(*GetColumnDefinitionsRequest)(nil),     // 16: agent.agent.v1alpha.GetColumnDefinitionsRequest
	(*GetColumnDefinitionsResponse)(nil),    // 17: agent.agent.v1alpha.GetColumnDefinitionsResponse
	(*UpdateColumnDefinitionsRequest)(nil),  // 18: agent.agent.v1alpha.UpdateColumnDefinitionsRequest
	(*UpdateColumnDefinitionsResponse)(nil), // 19: agent.agent.v1alpha.UpdateColumnDefinitionsResponse
	(*Cell)(nil),                            // 20: agent.agent.v1alpha.Cell
	(*NullCell)(nil),                        // 21: agent.agent.v1alpha.NullCell
	(*StringCell)(nil),                      // 22: agent.agent.v1alpha.StringCell
	(*NumberCell)(nil),                      // 23: agent.agent.v1alpha.NumberCell
	(*BooleanCell)(nil),                     // 24: agent.agent.v1alpha.BooleanCell
	(*FileCell)(nil),                        // 25: agent.agent.v1alpha.FileCell
	(*DocumentCell)(nil),                    // 26: agent.agent.v1alpha.DocumentCell
	(*ImageCell)(nil),                       // 27: agent.agent.v1alpha.ImageCell
	(*VideoCell)(nil),                       // 28: agent.agent.v1alpha.VideoCell
	(*AudioCell)(nil),                       // 29: agent.agent.v1alpha.AudioCell
	(*Row)(nil),                             // 30: agent.agent.v1alpha.Row
	(*ListRowsRequest)(nil),                 // 31: agent.agent.v1alpha.ListRowsRequest
	(*ListRowsResponse)(nil),                // 32: agent.agent.v1alpha.ListRowsResponse
	(*InsertRowRequest)(nil),                // 33: agent.agent.v1alpha.InsertRowRequest
	(*InsertRowResponse)(nil),               // 34: agent.agent.v1alpha.InsertRowResponse
	(*UpdateRowRequest)(nil),                // 35: agent.agent.v1alpha.UpdateRowRequest
	(*UpdateRowResponse)(nil),               // 36: agent.agent.v1alpha.UpdateRowResponse
	(*UpdateRowsRequest)(nil),               // 37: agent.agent.v1alpha.UpdateRowsRequest
	(*UpdateRowsResponse)(nil),              // 38: agent.agent.v1alpha.UpdateRowsResponse
	(*DeleteRowRequest)(nil),                // 39: agent.agent.v1alpha.DeleteRowRequest
	(*DeleteRowResponse)(nil),               // 40: agent.agent.v1alpha.DeleteRowResponse
	(*DeleteRowsRequest)(nil),               // 41: agent.agent.v1alpha.DeleteRowsRequest
	(*DeleteRowsResponse)(nil),              // 42: agent.agent.v1alpha.DeleteRowsResponse
	(*MoveRowsRequest)(nil),                 // 43: agent.agent.v1alpha.MoveRowsRequest
	(*MoveRowsResponse)(nil),                // 44: agent.agent.v1alpha.MoveRowsResponse
	(*ExportTableRequest)(nil),              // 45: agent.agent.v1alpha.ExportTableRequest
	(*ExportTableResponse)(nil),             // 46: agent.agent.v1alpha.ExportTableResponse
	(*GetTableEventsRequest)(nil),           // 47: agent.agent.v1alpha.GetTableEventsRequest
	(*GetTableEventsResponse)(nil),          // 48: agent.agent.v1alpha.GetTableEventsResponse
	(*TableEvent)(nil),                      // 49: agent.agent.v1alpha.TableEvent
	(*TableUpdatedEvent)(nil),               // 50: agent.agent.v1alpha.TableUpdatedEvent
	(*TableDeletedEvent)(nil),               // 51: agent.agent.v1alpha.TableDeletedEvent
	(*ColumnDefinitionsUpdatedEvent)(nil),   // 52: agent.agent.v1alpha.ColumnDefinitionsUpdatedEvent
	(*RowInsertedEvent)(nil),                // 53: agent.agent.v1alpha.RowInsertedEvent
	(*RowUpdatedEvent)(nil),                 // 54: agent.agent.v1alpha.RowUpdatedEvent
	(*RowDeletedEvent)(nil),                 // 55: agent.agent.v1alpha.RowDeletedEvent
	(*RowsMovedEvent)(nil),                  // 56: agent.agent.v1alpha.RowsMovedEvent
	(*CellUpdatedEvent)(nil),                // 57: agent.agent.v1alpha.CellUpdatedEvent
	(*GenerateMockTableRequest)(nil),        // 58: agent.agent.v1alpha.GenerateMockTableRequest
	(*GenerateMockTableResponse)(nil),       // 59: agent.agent.v1alpha.GenerateMockTableResponse
	(*BindChatTableRequest)(nil),            // 60: agent.agent.v1alpha.BindChatTableRequest
	(*BindChatTableResponse)(nil),           // 61: agent.agent.v1alpha.BindChatTableResponse
	(*UnbindChatTableRequest)(nil),          // 62: agent.agent.v1alpha.UnbindChatTableRequest
	(*UnbindChatTableResponse)(nil),         // 63: agent.agent.v1alpha.UnbindChatTableResponse
	(*ListChatTablesRequest)(nil),           // 64: agent.agent.v1alpha.ListChatTablesRequest
	(*ListChatTablesResponse)(nil),          // 65: agent.agent.v1alpha.ListChatTablesResponse
	(*Table_AgentConfig)(nil),               // 66: agent.agent.v1alpha.Table.AgentConfig
	(*ColumnDefinition_AgentConfig)(nil),    // 67: agent.agent.v1alpha.ColumnDefinition.AgentConfig
	nil,                                     // 68: agent.agent.v1alpha.GetColumnDefinitionsResponse.ColumnDefinitionsEntry
	nil,                                     // 69: agent.agent.v1alpha.UpdateColumnDefinitionsRequest.ColumnDefinitionsEntry
	nil,                                     // 70: agent.agent.v1alpha.UpdateColumnDefinitionsResponse.ColumnDefinitionsEntry
	(*Cell_FaithfulnessCheckingResult)(nil), // 71: agent.agent.v1alpha.Cell.FaithfulnessCheckingResult
	nil,                                     // 72: agent.agent.v1alpha.Row.CellsEntry
	nil,                                     // 73: agent.agent.v1alpha.ColumnDefinitionsUpdatedEvent.ColumnDefinitionsEntry
	(*structpb.Struct)(nil),                 // 74: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),           // 75: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),           // 76: google.protobuf.FieldMask
}
var file_agent_agent_v1alpha_table_proto_depIdxs = []int32{
	74, // 0: agent.agent.v1alpha.Table.metadata:type_name -> google.protobuf.Struct
	75, // 1: agent.agent.v1alpha.Table.create_time:type_name -> google.protobuf.Timestamp
	75, // 2: agent.agent.v1alpha.Table.update_time:type_name -> google.protobuf.Timestamp
	66, // 3: agent.agent.v1alpha.Table.agent_config:type_name -> agent.agent.v1alpha.Table.AgentConfig
	4,  // 4: agent.agent.v1alpha.ListTablesResponse.tables:type_name -> agent.agent.v1alpha.Table
	4,  // 5: agent.agent.v1alpha.CreateTableRequest.table:type_name -> agent.agent.v1alpha.Table
	4,  // 6: agent.agent.v1alpha.CreateTableResponse.table:type_name -> agent.agent.v1alpha.Table
	4,  // 7: agent.agent.v1alpha.GetTableResponse.table:type_name -> agent.agent.v1alpha.Table
	4,  // 8: agent.agent.v1alpha.UpdateTableRequest.table:type_name -> agent.agent.v1alpha.Table
	76, // 9: agent.agent.v1alpha.UpdateTableRequest.update_mask:type_name -> google.protobuf.FieldMask
	4,  // 10: agent.agent.v1alpha.UpdateTableResponse.table:type_name -> agent.agent.v1alpha.Table
	67, // 11: agent.agent.v1alpha.ColumnDefinition.agent_config:type_name -> agent.agent.v1alpha.ColumnDefinition.AgentConfig
	2,  // 12: agent.agent.v1alpha.ColumnDefinition.sort:type_name -> agent.agent.v1alpha.ColumnDefinition.Sort
	68, // 13: agent.agent.v1alpha.GetColumnDefinitionsResponse.column_definitions:type_name -> agent.agent.v1alpha.GetColumnDefinitionsResponse.ColumnDefinitionsEntry
	69, // 14: agent.agent.v1alpha.UpdateColumnDefinitionsRequest.column_definitions:type_name -> agent.agent.v1alpha.UpdateColumnDefinitionsRequest.ColumnDefinitionsEntry
	70, // 15: agent.agent.v1alpha.UpdateColumnDefinitionsResponse.column_definitions:type_name -> agent.agent.v1alpha.UpdateColumnDefinitionsResponse.ColumnDefinitionsEntry
	75, // 16: agent.agent.v1alpha.Cell.update_time:type_name -> google.protobuf.Timestamp
	22, // 17: agent.agent.v1alpha.Cell.string_value:type_name -> agent.agent.v1alpha.StringCell
	23, // 18: agent.agent.v1alpha.Cell.number_value:type_name -> agent.agent.v1alpha.NumberCell
	24, // 19: agent.agent.v1alpha.Cell.boolean_value:type_name -> agent.agent.v1alpha.BooleanCell
	25, // 20: agent.agent.v1alpha.Cell.file_value:type_name -> agent.agent.v1alpha.FileCell
	26, // 21: agent.agent.v1alpha.Cell.document_value:type_name -> agent.agent.v1alpha.DocumentCell
	27, // 22: agent.agent.v1alpha.Cell.image_value:type_name -> agent.agent.v1alpha.ImageCell
	28, // 23: agent.agent.v1alpha.Cell.video_value:type_name -> agent.agent.v1alpha.VideoCell
	29, // 24: agent.agent.v1alpha.Cell.audio_value:type_name -> agent.agent.v1alpha.AudioCell
	21, // 25: agent.agent.v1alpha.Cell.null_value:type_name -> agent.agent.v1alpha.NullCell
	74, // 26: agent.agent.v1alpha.Cell.metadata:type_name -> google.protobuf.Struct
	0,  // 27: agent.agent.v1alpha.Cell.status:type_name -> agent.agent.v1alpha.CellStatus
	71, // 28: agent.agent.v1alpha.Cell.faithfulness_checking_result:type_name -> agent.agent.v1alpha.Cell.FaithfulnessCheckingResult
	72, // 29: agent.agent.v1alpha.Row.cells:type_name -> agent.agent.v1alpha.Row.CellsEntry
	75, // 30: agent.agent.v1alpha.Row.create_time:type_name -> google.protobuf.Timestamp
	75, // 31: agent.agent.v1alpha.Row.update_time:type_name -> google.protobuf.Timestamp
	30, // 32: agent.agent.v1alpha.ListRowsResponse.rows:type_name -> agent.agent.v1alpha.Row
	30, // 33: agent.agent.v1alpha.InsertRowRequest.row:type_name -> agent.agent.v1alpha.Row
	30, // 34: agent.agent.v1alpha.InsertRowResponse.row:type_name -> agent.agent.v1alpha.Row
	30, // 35: agent.agent.v1alpha.UpdateRowRequest.row:type_name -> agent.agent.v1alpha.Row
	30, // 36: agent.agent.v1alpha.UpdateRowResponse.row:type_name -> agent.agent.v1alpha.Row
	30, // 37: agent.agent.v1alpha.UpdateRowsRequest.rows:type_name -> agent.agent.v1alpha.Row
	30, // 38: agent.agent.v1alpha.UpdateRowsResponse.rows:type_name -> agent.agent.v1alpha.Row
	1,  // 39: agent.agent.v1alpha.ExportTableRequest.format:type_name -> agent.agent.v1alpha.ExportFormat
	49, // 40: agent.agent.v1alpha.GetTableEventsResponse.event:type_name -> agent.agent.v1alpha.TableEvent
	50, // 41: agent.agent.v1alpha.TableEvent.table_updated_event:type_name -> agent.agent.v1alpha.TableUpdatedEvent
	51, // 42: agent.agent.v1alpha.TableEvent.table_deleted_event:type_name -> agent.agent.v1alpha.TableDeletedEvent
	52, // 43: agent.agent.v1alpha.TableEvent.column_definitions_updated_event:type_name -> agent.agent.v1alpha.ColumnDefinitionsUpdatedEvent
	53, // 44: agent.agent.v1alpha.TableEvent.row_inserted_event:type_name -> agent.agent.v1alpha.RowInsertedEvent
	54, // 45: agent.agent.v1alpha.TableEvent.row_updated_event:type_name -> agent.agent.v1alpha.RowUpdatedEvent
	55, // 46: agent.agent.v1alpha.TableEvent.row_deleted_event:type_name -> agent.agent.v1alpha.RowDeletedEvent
	56, // 47: agent.agent.v1alpha.TableEvent.rows_moved_event:type_name -> agent.agent.v1alpha.RowsMovedEvent
	57, // 48: agent.agent.v1alpha.TableEvent.cell_updated_event:type_name -> agent.agent.v1alpha.CellUpdatedEvent
	4,  // 49: agent.agent.v1alpha.TableUpdatedEvent.table:type_name -> agent.agent.v1alpha.Table
	73, // 50: agent.agent.v1alpha.ColumnDefinitionsUpdatedEvent.column_definitions:type_name -> agent.agent.v1alpha.ColumnDefinitionsUpdatedEvent.ColumnDefinitionsEntry
	30, // 51: agent.agent.v1alpha.RowInsertedEvent.row:type_name -> agent.agent.v1alpha.Row
	30, // 52: agent.agent.v1alpha.RowUpdatedEvent.row:type_name -> agent.agent.v1alpha.Row
	20, // 53: agent.agent.v1alpha.CellUpdatedEvent.cell:type_name -> agent.agent.v1alpha.Cell
	3,  // 54: agent.agent.v1alpha.GenerateMockTableRequest.mode:type_name -> agent.agent.v1alpha.GenerateMockTableRequest.Mode
	4,  // 55: agent.agent.v1alpha.ListChatTablesResponse.tables:type_name -> agent.agent.v1alpha.Table
	15, // 56: agent.agent.v1alpha.GetColumnDefinitionsResponse.ColumnDefinitionsEntry.value:type_name -> agent.agent.v1alpha.ColumnDefinition
	15, // 57: agent.agent.v1alpha.UpdateColumnDefinitionsRequest.ColumnDefinitionsEntry.value:type_name -> agent.agent.v1alpha.ColumnDefinition
	15, // 58: agent.agent.v1alpha.UpdateColumnDefinitionsResponse.ColumnDefinitionsEntry.value:type_name -> agent.agent.v1alpha.ColumnDefinition
	20, // 59: agent.agent.v1alpha.Row.CellsEntry.value:type_name -> agent.agent.v1alpha.Cell
	15, // 60: agent.agent.v1alpha.ColumnDefinitionsUpdatedEvent.ColumnDefinitionsEntry.value:type_name -> agent.agent.v1alpha.ColumnDefinition
	61, // [61:61] is the sub-list for method output_type
	61, // [61:61] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_agent_agent_v1alpha_table_proto_init() }
func file_agent_agent_v1alpha_table_proto_init() {
	if File_agent_agent_v1alpha_table_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_agent_agent_v1alpha_table_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetColumnDefinitionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetColumnDefinitionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateColumnDefinitionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateColumnDefinitionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertRowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertRowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveRowsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveRowsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableDeletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnDefinitionsUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowInsertedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowDeletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowsMovedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateMockTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateMockTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindChatTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindChatTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbindChatTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbindChatTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChatTablesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChatTablesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table_AgentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnDefinition_AgentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_agent_agent_v1alpha_table_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell_FaithfulnessCheckingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_agent_agent_v1alpha_table_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Cell_StringValue)(nil),
		(*Cell_NumberValue)(nil),
		(*Cell_BooleanValue)(nil),
		(*Cell_FileValue)(nil),
		(*Cell_DocumentValue)(nil),
		(*Cell_ImageValue)(nil),
		(*Cell_VideoValue)(nil),
		(*Cell_AudioValue)(nil),
		(*Cell_NullValue)(nil),
	}
	file_agent_agent_v1alpha_table_proto_msgTypes[29].OneofWrappers = []interface{}{}
	file_agent_agent_v1alpha_table_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_agent_agent_v1alpha_table_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*TableEvent_TableUpdatedEvent)(nil),
		(*TableEvent_TableDeletedEvent)(nil),
		(*TableEvent_ColumnDefinitionsUpdatedEvent)(nil),
		(*TableEvent_RowInsertedEvent)(nil),
		(*TableEvent_RowUpdatedEvent)(nil),
		(*TableEvent_RowDeletedEvent)(nil),
		(*TableEvent_RowsMovedEvent)(nil),
		(*TableEvent_CellUpdatedEvent)(nil),
	}
	file_agent_agent_v1alpha_table_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_agent_agent_v1alpha_table_proto_msgTypes[54].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_agent_agent_v1alpha_table_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   70,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_agent_agent_v1alpha_table_proto_goTypes,
		DependencyIndexes: file_agent_agent_v1alpha_table_proto_depIdxs,
		EnumInfos:         file_agent_agent_v1alpha_table_proto_enumTypes,
		MessageInfos:      file_agent_agent_v1alpha_table_proto_msgTypes,
	}.Build()
	File_agent_agent_v1alpha_table_proto = out.File
	file_agent_agent_v1alpha_table_proto_rawDesc = nil
	file_agent_agent_v1alpha_table_proto_goTypes = nil
	file_agent_agent_v1alpha_table_proto_depIdxs = nil
}
