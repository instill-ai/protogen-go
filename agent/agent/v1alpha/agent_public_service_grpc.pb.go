// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: agent/agent/v1alpha/agent_public_service.proto

package agentv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AgentPublicService_Liveness_FullMethodName                      = "/agent.agent.v1alpha.AgentPublicService/Liveness"
	AgentPublicService_Readiness_FullMethodName                     = "/agent.agent.v1alpha.AgentPublicService/Readiness"
	AgentPublicService_CreateChat_FullMethodName                    = "/agent.agent.v1alpha.AgentPublicService/CreateChat"
	AgentPublicService_ListChats_FullMethodName                     = "/agent.agent.v1alpha.AgentPublicService/ListChats"
	AgentPublicService_UpdateChat_FullMethodName                    = "/agent.agent.v1alpha.AgentPublicService/UpdateChat"
	AgentPublicService_GetChat_FullMethodName                       = "/agent.agent.v1alpha.AgentPublicService/GetChat"
	AgentPublicService_DeleteChat_FullMethodName                    = "/agent.agent.v1alpha.AgentPublicService/DeleteChat"
	AgentPublicService_ListMessages_FullMethodName                  = "/agent.agent.v1alpha.AgentPublicService/ListMessages"
	AgentPublicService_ChatWithAgent_FullMethodName                 = "/agent.agent.v1alpha.AgentPublicService/ChatWithAgent"
	AgentPublicService_BindChatTable_FullMethodName                 = "/agent.agent.v1alpha.AgentPublicService/BindChatTable"
	AgentPublicService_UnbindChatTable_FullMethodName               = "/agent.agent.v1alpha.AgentPublicService/UnbindChatTable"
	AgentPublicService_ListChatTables_FullMethodName                = "/agent.agent.v1alpha.AgentPublicService/ListChatTables"
	AgentPublicService_ListTables_FullMethodName                    = "/agent.agent.v1alpha.AgentPublicService/ListTables"
	AgentPublicService_CreateTableFromTemplate_FullMethodName       = "/agent.agent.v1alpha.AgentPublicService/CreateTableFromTemplate"
	AgentPublicService_CreateTable_FullMethodName                   = "/agent.agent.v1alpha.AgentPublicService/CreateTable"
	AgentPublicService_GetTable_FullMethodName                      = "/agent.agent.v1alpha.AgentPublicService/GetTable"
	AgentPublicService_UpdateTable_FullMethodName                   = "/agent.agent.v1alpha.AgentPublicService/UpdateTable"
	AgentPublicService_DeleteTable_FullMethodName                   = "/agent.agent.v1alpha.AgentPublicService/DeleteTable"
	AgentPublicService_ChatWithTableBuilderAgent_FullMethodName     = "/agent.agent.v1alpha.AgentPublicService/ChatWithTableBuilderAgent"
	AgentPublicService_ListTableBuilderAgentMessages_FullMethodName = "/agent.agent.v1alpha.AgentPublicService/ListTableBuilderAgentMessages"
	AgentPublicService_GetColumnDefinitions_FullMethodName          = "/agent.agent.v1alpha.AgentPublicService/GetColumnDefinitions"
	AgentPublicService_UpdateColumnDefinitions_FullMethodName       = "/agent.agent.v1alpha.AgentPublicService/UpdateColumnDefinitions"
	AgentPublicService_GetColumnDefinition_FullMethodName           = "/agent.agent.v1alpha.AgentPublicService/GetColumnDefinition"
	AgentPublicService_RecomputeColumn_FullMethodName               = "/agent.agent.v1alpha.AgentPublicService/RecomputeColumn"
	AgentPublicService_ListRows_FullMethodName                      = "/agent.agent.v1alpha.AgentPublicService/ListRows"
	AgentPublicService_GetRow_FullMethodName                        = "/agent.agent.v1alpha.AgentPublicService/GetRow"
	AgentPublicService_InsertRow_FullMethodName                     = "/agent.agent.v1alpha.AgentPublicService/InsertRow"
	AgentPublicService_UpdateRow_FullMethodName                     = "/agent.agent.v1alpha.AgentPublicService/UpdateRow"
	AgentPublicService_UpdateRows_FullMethodName                    = "/agent.agent.v1alpha.AgentPublicService/UpdateRows"
	AgentPublicService_DeleteRow_FullMethodName                     = "/agent.agent.v1alpha.AgentPublicService/DeleteRow"
	AgentPublicService_DeleteRows_FullMethodName                    = "/agent.agent.v1alpha.AgentPublicService/DeleteRows"
	AgentPublicService_MoveRows_FullMethodName                      = "/agent.agent.v1alpha.AgentPublicService/MoveRows"
	AgentPublicService_GetCell_FullMethodName                       = "/agent.agent.v1alpha.AgentPublicService/GetCell"
	AgentPublicService_UpdateCell_FullMethodName                    = "/agent.agent.v1alpha.AgentPublicService/UpdateCell"
	AgentPublicService_ResetCell_FullMethodName                     = "/agent.agent.v1alpha.AgentPublicService/ResetCell"
	AgentPublicService_RecomputeCell_FullMethodName                 = "/agent.agent.v1alpha.AgentPublicService/RecomputeCell"
	AgentPublicService_LockCell_FullMethodName                      = "/agent.agent.v1alpha.AgentPublicService/LockCell"
	AgentPublicService_UnlockCell_FullMethodName                    = "/agent.agent.v1alpha.AgentPublicService/UnlockCell"
	AgentPublicService_GetTableEvents_FullMethodName                = "/agent.agent.v1alpha.AgentPublicService/GetTableEvents"
	AgentPublicService_ExportTable_FullMethodName                   = "/agent.agent.v1alpha.AgentPublicService/ExportTable"
)

// AgentPublicServiceClient is the client API for AgentPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AgentPublicService exposes the public endpoints that allow clients to
// manage agents.
type AgentPublicServiceClient interface {
	// Check if the agent server is alive
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Check if the agent server is ready
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// Create a chat
	//
	// Creates a chat.
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error)
	// List chats
	//
	// Returns a list of chats.
	ListChats(ctx context.Context, in *ListChatsRequest, opts ...grpc.CallOption) (*ListChatsResponse, error)
	// Update a chat
	//
	// Updates a chat.
	UpdateChat(ctx context.Context, in *UpdateChatRequest, opts ...grpc.CallOption) (*UpdateChatResponse, error)
	// Get a chat
	//
	// Gets a chat.
	GetChat(ctx context.Context, in *GetChatRequest, opts ...grpc.CallOption) (*GetChatResponse, error)
	// Delete a chat
	//
	// Deletes a chat.
	DeleteChat(ctx context.Context, in *DeleteChatRequest, opts ...grpc.CallOption) (*DeleteChatResponse, error)
	// List messages
	//
	// Returns a paginated list of messages.
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	// Chat with agent
	//
	// Chat with the agent.
	ChatWithAgent(ctx context.Context, in *ChatWithAgentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatWithAgentResponse], error)
	// Bind table to chat
	//
	// Binds a table to a chat.
	BindChatTable(ctx context.Context, in *BindChatTableRequest, opts ...grpc.CallOption) (*BindChatTableResponse, error)
	// Unbind table from chat
	//
	// Unbinds a table from a chat.
	UnbindChatTable(ctx context.Context, in *UnbindChatTableRequest, opts ...grpc.CallOption) (*UnbindChatTableResponse, error)
	// List chat tables
	//
	// Returns a list of tables bound to a chat.
	ListChatTables(ctx context.Context, in *ListChatTablesRequest, opts ...grpc.CallOption) (*ListChatTablesResponse, error)
	// List tables
	//
	// Returns a paginated list of tables.
	ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error)
	// Create a table from a table template
	//
	// Creates a table from a table template.
	CreateTableFromTemplate(ctx context.Context, in *CreateTableFromTemplateRequest, opts ...grpc.CallOption) (*CreateTableFromTemplateResponse, error)
	// Create a table
	//
	// Creates a table.
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	// Get table
	//
	// Gets a table.
	GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error)
	// Update table
	//
	// Updates a table.
	UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*UpdateTableResponse, error)
	// Delete table
	//
	// Deletes a table.
	DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error)
	// Chat with table builder agent
	//
	// Chat with the table builder agent.
	ChatWithTableBuilderAgent(ctx context.Context, in *ChatWithTableBuilderAgentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatWithTableBuilderAgentResponse], error)
	// List table builder agent messages
	//
	// Lists the messages from the table builder agent.
	ListTableBuilderAgentMessages(ctx context.Context, in *ListTableBuilderAgentMessagesRequest, opts ...grpc.CallOption) (*ListTableBuilderAgentMessagesResponse, error)
	// Get column definitions
	//
	// Gets column definitions for a table.
	GetColumnDefinitions(ctx context.Context, in *GetColumnDefinitionsRequest, opts ...grpc.CallOption) (*GetColumnDefinitionsResponse, error)
	// Update column definitions
	//
	// Updates column definitions for a table. When updating the column
	// definitions, if the column's agent instructions are updated, the existing
	// cells in that column will be cleared and recomputed. This ensures that all
	// data reflects the latest instructions.
	UpdateColumnDefinitions(ctx context.Context, in *UpdateColumnDefinitionsRequest, opts ...grpc.CallOption) (*UpdateColumnDefinitionsResponse, error)
	// Get column definition
	//
	// Gets a column definition for a table.
	GetColumnDefinition(ctx context.Context, in *GetColumnDefinitionRequest, opts ...grpc.CallOption) (*GetColumnDefinitionResponse, error)
	// Recompute column
	//
	// Recomputes all the cells in a column.
	RecomputeColumn(ctx context.Context, in *RecomputeColumnRequest, opts ...grpc.CallOption) (*RecomputeColumnResponse, error)
	// List rows
	//
	// Returns list of rows.
	ListRows(ctx context.Context, in *ListRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error)
	// Get row
	//
	// Gets a row from a table.
	GetRow(ctx context.Context, in *GetRowRequest, opts ...grpc.CallOption) (*GetRowResponse, error)
	// Insert row
	//
	// Inserts a row into a table.
	InsertRow(ctx context.Context, in *InsertRowRequest, opts ...grpc.CallOption) (*InsertRowResponse, error)
	// Update row
	//
	// Updates a row in a table.
	UpdateRow(ctx context.Context, in *UpdateRowRequest, opts ...grpc.CallOption) (*UpdateRowResponse, error)
	// Update rows
	//
	// Updates multiple rows in a table.
	UpdateRows(ctx context.Context, in *UpdateRowsRequest, opts ...grpc.CallOption) (*UpdateRowsResponse, error)
	// Delete row
	//
	// Deletes a row from a table.
	DeleteRow(ctx context.Context, in *DeleteRowRequest, opts ...grpc.CallOption) (*DeleteRowResponse, error)
	// Delete rows
	//
	// Deletes multiple rows from a table.
	DeleteRows(ctx context.Context, in *DeleteRowsRequest, opts ...grpc.CallOption) (*DeleteRowsResponse, error)
	// Move row
	//
	// Moves a row to a new position in a table.
	MoveRows(ctx context.Context, in *MoveRowsRequest, opts ...grpc.CallOption) (*MoveRowsResponse, error)
	// Get cell
	//
	// Gets a cell from a table.
	GetCell(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (*GetCellResponse, error)
	// Update cell
	//
	// Updates a cell in a table.
	UpdateCell(ctx context.Context, in *UpdateCellRequest, opts ...grpc.CallOption) (*UpdateCellResponse, error)
	// Reset cell
	//
	// Resets a cell in a table. Resetting a cell clears its user input and
	// reverts to using the computed value if available. This operation only
	// affects cells that have a user input set.
	ResetCell(ctx context.Context, in *ResetCellRequest, opts ...grpc.CallOption) (*ResetCellResponse, error)
	// Recompute cell
	//
	// Recomputes a cell in a table.
	RecomputeCell(ctx context.Context, in *RecomputeCellRequest, opts ...grpc.CallOption) (*RecomputeCellResponse, error)
	// Lock cell
	//
	// Locks a cell in a table.
	LockCell(ctx context.Context, in *LockCellRequest, opts ...grpc.CallOption) (*LockCellResponse, error)
	// Unlock cell
	//
	// Unlocks a cell in a table.
	UnlockCell(ctx context.Context, in *UnlockCellRequest, opts ...grpc.CallOption) (*UnlockCellResponse, error)
	// Get table events
	//
	// Returns a list of events for a table.
	GetTableEvents(ctx context.Context, in *GetTableEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTableEventsResponse], error)
	// Export table
	//
	// Exports table data.
	ExportTable(ctx context.Context, in *ExportTableRequest, opts ...grpc.CallOption) (*ExportTableResponse, error)
}

type agentPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentPublicServiceClient(cc grpc.ClientConnInterface) AgentPublicServiceClient {
	return &agentPublicServiceClient{cc}
}

func (c *agentPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_Liveness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_Readiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChatResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_CreateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) ListChats(ctx context.Context, in *ListChatsRequest, opts ...grpc.CallOption) (*ListChatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChatsResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_ListChats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) UpdateChat(ctx context.Context, in *UpdateChatRequest, opts ...grpc.CallOption) (*UpdateChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateChatResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_UpdateChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) GetChat(ctx context.Context, in *GetChatRequest, opts ...grpc.CallOption) (*GetChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_GetChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) DeleteChat(ctx context.Context, in *DeleteChatRequest, opts ...grpc.CallOption) (*DeleteChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChatResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_DeleteChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_ListMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) ChatWithAgent(ctx context.Context, in *ChatWithAgentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatWithAgentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentPublicService_ServiceDesc.Streams[0], AgentPublicService_ChatWithAgent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatWithAgentRequest, ChatWithAgentResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentPublicService_ChatWithAgentClient = grpc.ServerStreamingClient[ChatWithAgentResponse]

func (c *agentPublicServiceClient) BindChatTable(ctx context.Context, in *BindChatTableRequest, opts ...grpc.CallOption) (*BindChatTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindChatTableResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_BindChatTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) UnbindChatTable(ctx context.Context, in *UnbindChatTableRequest, opts ...grpc.CallOption) (*UnbindChatTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnbindChatTableResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_UnbindChatTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) ListChatTables(ctx context.Context, in *ListChatTablesRequest, opts ...grpc.CallOption) (*ListChatTablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChatTablesResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_ListChatTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTablesResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_ListTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) CreateTableFromTemplate(ctx context.Context, in *CreateTableFromTemplateRequest, opts ...grpc.CallOption) (*CreateTableFromTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTableFromTemplateResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_CreateTableFromTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_CreateTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTableResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_GetTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*UpdateTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTableResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_UpdateTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTableResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_DeleteTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) ChatWithTableBuilderAgent(ctx context.Context, in *ChatWithTableBuilderAgentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatWithTableBuilderAgentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentPublicService_ServiceDesc.Streams[1], AgentPublicService_ChatWithTableBuilderAgent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatWithTableBuilderAgentRequest, ChatWithTableBuilderAgentResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentPublicService_ChatWithTableBuilderAgentClient = grpc.ServerStreamingClient[ChatWithTableBuilderAgentResponse]

func (c *agentPublicServiceClient) ListTableBuilderAgentMessages(ctx context.Context, in *ListTableBuilderAgentMessagesRequest, opts ...grpc.CallOption) (*ListTableBuilderAgentMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTableBuilderAgentMessagesResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_ListTableBuilderAgentMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) GetColumnDefinitions(ctx context.Context, in *GetColumnDefinitionsRequest, opts ...grpc.CallOption) (*GetColumnDefinitionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetColumnDefinitionsResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_GetColumnDefinitions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) UpdateColumnDefinitions(ctx context.Context, in *UpdateColumnDefinitionsRequest, opts ...grpc.CallOption) (*UpdateColumnDefinitionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateColumnDefinitionsResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_UpdateColumnDefinitions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) GetColumnDefinition(ctx context.Context, in *GetColumnDefinitionRequest, opts ...grpc.CallOption) (*GetColumnDefinitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetColumnDefinitionResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_GetColumnDefinition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) RecomputeColumn(ctx context.Context, in *RecomputeColumnRequest, opts ...grpc.CallOption) (*RecomputeColumnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecomputeColumnResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_RecomputeColumn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) ListRows(ctx context.Context, in *ListRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRowsResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_ListRows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) GetRow(ctx context.Context, in *GetRowRequest, opts ...grpc.CallOption) (*GetRowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRowResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_GetRow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) InsertRow(ctx context.Context, in *InsertRowRequest, opts ...grpc.CallOption) (*InsertRowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertRowResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_InsertRow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) UpdateRow(ctx context.Context, in *UpdateRowRequest, opts ...grpc.CallOption) (*UpdateRowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRowResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_UpdateRow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) UpdateRows(ctx context.Context, in *UpdateRowsRequest, opts ...grpc.CallOption) (*UpdateRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRowsResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_UpdateRows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) DeleteRow(ctx context.Context, in *DeleteRowRequest, opts ...grpc.CallOption) (*DeleteRowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRowResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_DeleteRow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) DeleteRows(ctx context.Context, in *DeleteRowsRequest, opts ...grpc.CallOption) (*DeleteRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRowsResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_DeleteRows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) MoveRows(ctx context.Context, in *MoveRowsRequest, opts ...grpc.CallOption) (*MoveRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveRowsResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_MoveRows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) GetCell(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (*GetCellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCellResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_GetCell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) UpdateCell(ctx context.Context, in *UpdateCellRequest, opts ...grpc.CallOption) (*UpdateCellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCellResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_UpdateCell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) ResetCell(ctx context.Context, in *ResetCellRequest, opts ...grpc.CallOption) (*ResetCellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetCellResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_ResetCell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) RecomputeCell(ctx context.Context, in *RecomputeCellRequest, opts ...grpc.CallOption) (*RecomputeCellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecomputeCellResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_RecomputeCell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) LockCell(ctx context.Context, in *LockCellRequest, opts ...grpc.CallOption) (*LockCellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockCellResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_LockCell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) UnlockCell(ctx context.Context, in *UnlockCellRequest, opts ...grpc.CallOption) (*UnlockCellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnlockCellResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_UnlockCell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentPublicServiceClient) GetTableEvents(ctx context.Context, in *GetTableEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTableEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AgentPublicService_ServiceDesc.Streams[2], AgentPublicService_GetTableEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTableEventsRequest, GetTableEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentPublicService_GetTableEventsClient = grpc.ServerStreamingClient[GetTableEventsResponse]

func (c *agentPublicServiceClient) ExportTable(ctx context.Context, in *ExportTableRequest, opts ...grpc.CallOption) (*ExportTableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportTableResponse)
	err := c.cc.Invoke(ctx, AgentPublicService_ExportTable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentPublicServiceServer is the server API for AgentPublicService service.
// All implementations should embed UnimplementedAgentPublicServiceServer
// for forward compatibility.
//
// AgentPublicService exposes the public endpoints that allow clients to
// manage agents.
type AgentPublicServiceServer interface {
	// Check if the agent server is alive
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Check if the agent server is ready
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// Create a chat
	//
	// Creates a chat.
	CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error)
	// List chats
	//
	// Returns a list of chats.
	ListChats(context.Context, *ListChatsRequest) (*ListChatsResponse, error)
	// Update a chat
	//
	// Updates a chat.
	UpdateChat(context.Context, *UpdateChatRequest) (*UpdateChatResponse, error)
	// Get a chat
	//
	// Gets a chat.
	GetChat(context.Context, *GetChatRequest) (*GetChatResponse, error)
	// Delete a chat
	//
	// Deletes a chat.
	DeleteChat(context.Context, *DeleteChatRequest) (*DeleteChatResponse, error)
	// List messages
	//
	// Returns a paginated list of messages.
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	// Chat with agent
	//
	// Chat with the agent.
	ChatWithAgent(*ChatWithAgentRequest, grpc.ServerStreamingServer[ChatWithAgentResponse]) error
	// Bind table to chat
	//
	// Binds a table to a chat.
	BindChatTable(context.Context, *BindChatTableRequest) (*BindChatTableResponse, error)
	// Unbind table from chat
	//
	// Unbinds a table from a chat.
	UnbindChatTable(context.Context, *UnbindChatTableRequest) (*UnbindChatTableResponse, error)
	// List chat tables
	//
	// Returns a list of tables bound to a chat.
	ListChatTables(context.Context, *ListChatTablesRequest) (*ListChatTablesResponse, error)
	// List tables
	//
	// Returns a paginated list of tables.
	ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error)
	// Create a table from a table template
	//
	// Creates a table from a table template.
	CreateTableFromTemplate(context.Context, *CreateTableFromTemplateRequest) (*CreateTableFromTemplateResponse, error)
	// Create a table
	//
	// Creates a table.
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	// Get table
	//
	// Gets a table.
	GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error)
	// Update table
	//
	// Updates a table.
	UpdateTable(context.Context, *UpdateTableRequest) (*UpdateTableResponse, error)
	// Delete table
	//
	// Deletes a table.
	DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error)
	// Chat with table builder agent
	//
	// Chat with the table builder agent.
	ChatWithTableBuilderAgent(*ChatWithTableBuilderAgentRequest, grpc.ServerStreamingServer[ChatWithTableBuilderAgentResponse]) error
	// List table builder agent messages
	//
	// Lists the messages from the table builder agent.
	ListTableBuilderAgentMessages(context.Context, *ListTableBuilderAgentMessagesRequest) (*ListTableBuilderAgentMessagesResponse, error)
	// Get column definitions
	//
	// Gets column definitions for a table.
	GetColumnDefinitions(context.Context, *GetColumnDefinitionsRequest) (*GetColumnDefinitionsResponse, error)
	// Update column definitions
	//
	// Updates column definitions for a table. When updating the column
	// definitions, if the column's agent instructions are updated, the existing
	// cells in that column will be cleared and recomputed. This ensures that all
	// data reflects the latest instructions.
	UpdateColumnDefinitions(context.Context, *UpdateColumnDefinitionsRequest) (*UpdateColumnDefinitionsResponse, error)
	// Get column definition
	//
	// Gets a column definition for a table.
	GetColumnDefinition(context.Context, *GetColumnDefinitionRequest) (*GetColumnDefinitionResponse, error)
	// Recompute column
	//
	// Recomputes all the cells in a column.
	RecomputeColumn(context.Context, *RecomputeColumnRequest) (*RecomputeColumnResponse, error)
	// List rows
	//
	// Returns list of rows.
	ListRows(context.Context, *ListRowsRequest) (*ListRowsResponse, error)
	// Get row
	//
	// Gets a row from a table.
	GetRow(context.Context, *GetRowRequest) (*GetRowResponse, error)
	// Insert row
	//
	// Inserts a row into a table.
	InsertRow(context.Context, *InsertRowRequest) (*InsertRowResponse, error)
	// Update row
	//
	// Updates a row in a table.
	UpdateRow(context.Context, *UpdateRowRequest) (*UpdateRowResponse, error)
	// Update rows
	//
	// Updates multiple rows in a table.
	UpdateRows(context.Context, *UpdateRowsRequest) (*UpdateRowsResponse, error)
	// Delete row
	//
	// Deletes a row from a table.
	DeleteRow(context.Context, *DeleteRowRequest) (*DeleteRowResponse, error)
	// Delete rows
	//
	// Deletes multiple rows from a table.
	DeleteRows(context.Context, *DeleteRowsRequest) (*DeleteRowsResponse, error)
	// Move row
	//
	// Moves a row to a new position in a table.
	MoveRows(context.Context, *MoveRowsRequest) (*MoveRowsResponse, error)
	// Get cell
	//
	// Gets a cell from a table.
	GetCell(context.Context, *GetCellRequest) (*GetCellResponse, error)
	// Update cell
	//
	// Updates a cell in a table.
	UpdateCell(context.Context, *UpdateCellRequest) (*UpdateCellResponse, error)
	// Reset cell
	//
	// Resets a cell in a table. Resetting a cell clears its user input and
	// reverts to using the computed value if available. This operation only
	// affects cells that have a user input set.
	ResetCell(context.Context, *ResetCellRequest) (*ResetCellResponse, error)
	// Recompute cell
	//
	// Recomputes a cell in a table.
	RecomputeCell(context.Context, *RecomputeCellRequest) (*RecomputeCellResponse, error)
	// Lock cell
	//
	// Locks a cell in a table.
	LockCell(context.Context, *LockCellRequest) (*LockCellResponse, error)
	// Unlock cell
	//
	// Unlocks a cell in a table.
	UnlockCell(context.Context, *UnlockCellRequest) (*UnlockCellResponse, error)
	// Get table events
	//
	// Returns a list of events for a table.
	GetTableEvents(*GetTableEventsRequest, grpc.ServerStreamingServer[GetTableEventsResponse]) error
	// Export table
	//
	// Exports table data.
	ExportTable(context.Context, *ExportTableRequest) (*ExportTableResponse, error)
}

// UnimplementedAgentPublicServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentPublicServiceServer struct{}

func (UnimplementedAgentPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedAgentPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedAgentPublicServiceServer) CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedAgentPublicServiceServer) ListChats(context.Context, *ListChatsRequest) (*ListChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChats not implemented")
}
func (UnimplementedAgentPublicServiceServer) UpdateChat(context.Context, *UpdateChatRequest) (*UpdateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChat not implemented")
}
func (UnimplementedAgentPublicServiceServer) GetChat(context.Context, *GetChatRequest) (*GetChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChat not implemented")
}
func (UnimplementedAgentPublicServiceServer) DeleteChat(context.Context, *DeleteChatRequest) (*DeleteChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (UnimplementedAgentPublicServiceServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedAgentPublicServiceServer) ChatWithAgent(*ChatWithAgentRequest, grpc.ServerStreamingServer[ChatWithAgentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ChatWithAgent not implemented")
}
func (UnimplementedAgentPublicServiceServer) BindChatTable(context.Context, *BindChatTableRequest) (*BindChatTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindChatTable not implemented")
}
func (UnimplementedAgentPublicServiceServer) UnbindChatTable(context.Context, *UnbindChatTableRequest) (*UnbindChatTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindChatTable not implemented")
}
func (UnimplementedAgentPublicServiceServer) ListChatTables(context.Context, *ListChatTablesRequest) (*ListChatTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChatTables not implemented")
}
func (UnimplementedAgentPublicServiceServer) ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (UnimplementedAgentPublicServiceServer) CreateTableFromTemplate(context.Context, *CreateTableFromTemplateRequest) (*CreateTableFromTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTableFromTemplate not implemented")
}
func (UnimplementedAgentPublicServiceServer) CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedAgentPublicServiceServer) GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTable not implemented")
}
func (UnimplementedAgentPublicServiceServer) UpdateTable(context.Context, *UpdateTableRequest) (*UpdateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTable not implemented")
}
func (UnimplementedAgentPublicServiceServer) DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedAgentPublicServiceServer) ChatWithTableBuilderAgent(*ChatWithTableBuilderAgentRequest, grpc.ServerStreamingServer[ChatWithTableBuilderAgentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ChatWithTableBuilderAgent not implemented")
}
func (UnimplementedAgentPublicServiceServer) ListTableBuilderAgentMessages(context.Context, *ListTableBuilderAgentMessagesRequest) (*ListTableBuilderAgentMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTableBuilderAgentMessages not implemented")
}
func (UnimplementedAgentPublicServiceServer) GetColumnDefinitions(context.Context, *GetColumnDefinitionsRequest) (*GetColumnDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumnDefinitions not implemented")
}
func (UnimplementedAgentPublicServiceServer) UpdateColumnDefinitions(context.Context, *UpdateColumnDefinitionsRequest) (*UpdateColumnDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateColumnDefinitions not implemented")
}
func (UnimplementedAgentPublicServiceServer) GetColumnDefinition(context.Context, *GetColumnDefinitionRequest) (*GetColumnDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumnDefinition not implemented")
}
func (UnimplementedAgentPublicServiceServer) RecomputeColumn(context.Context, *RecomputeColumnRequest) (*RecomputeColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecomputeColumn not implemented")
}
func (UnimplementedAgentPublicServiceServer) ListRows(context.Context, *ListRowsRequest) (*ListRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRows not implemented")
}
func (UnimplementedAgentPublicServiceServer) GetRow(context.Context, *GetRowRequest) (*GetRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRow not implemented")
}
func (UnimplementedAgentPublicServiceServer) InsertRow(context.Context, *InsertRowRequest) (*InsertRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertRow not implemented")
}
func (UnimplementedAgentPublicServiceServer) UpdateRow(context.Context, *UpdateRowRequest) (*UpdateRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRow not implemented")
}
func (UnimplementedAgentPublicServiceServer) UpdateRows(context.Context, *UpdateRowsRequest) (*UpdateRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRows not implemented")
}
func (UnimplementedAgentPublicServiceServer) DeleteRow(context.Context, *DeleteRowRequest) (*DeleteRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRow not implemented")
}
func (UnimplementedAgentPublicServiceServer) DeleteRows(context.Context, *DeleteRowsRequest) (*DeleteRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRows not implemented")
}
func (UnimplementedAgentPublicServiceServer) MoveRows(context.Context, *MoveRowsRequest) (*MoveRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveRows not implemented")
}
func (UnimplementedAgentPublicServiceServer) GetCell(context.Context, *GetCellRequest) (*GetCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCell not implemented")
}
func (UnimplementedAgentPublicServiceServer) UpdateCell(context.Context, *UpdateCellRequest) (*UpdateCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCell not implemented")
}
func (UnimplementedAgentPublicServiceServer) ResetCell(context.Context, *ResetCellRequest) (*ResetCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCell not implemented")
}
func (UnimplementedAgentPublicServiceServer) RecomputeCell(context.Context, *RecomputeCellRequest) (*RecomputeCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecomputeCell not implemented")
}
func (UnimplementedAgentPublicServiceServer) LockCell(context.Context, *LockCellRequest) (*LockCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockCell not implemented")
}
func (UnimplementedAgentPublicServiceServer) UnlockCell(context.Context, *UnlockCellRequest) (*UnlockCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockCell not implemented")
}
func (UnimplementedAgentPublicServiceServer) GetTableEvents(*GetTableEventsRequest, grpc.ServerStreamingServer[GetTableEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTableEvents not implemented")
}
func (UnimplementedAgentPublicServiceServer) ExportTable(context.Context, *ExportTableRequest) (*ExportTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportTable not implemented")
}
func (UnimplementedAgentPublicServiceServer) testEmbeddedByValue() {}

// UnsafeAgentPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentPublicServiceServer will
// result in compilation errors.
type UnsafeAgentPublicServiceServer interface {
	mustEmbedUnimplementedAgentPublicServiceServer()
}

func RegisterAgentPublicServiceServer(s grpc.ServiceRegistrar, srv AgentPublicServiceServer) {
	// If the following call pancis, it indicates UnimplementedAgentPublicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AgentPublicService_ServiceDesc, srv)
}

func _AgentPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_CreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_ListChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).ListChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_ListChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).ListChats(ctx, req.(*ListChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_UpdateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).UpdateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_UpdateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).UpdateChat(ctx, req.(*UpdateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_GetChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).GetChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_GetChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).GetChat(ctx, req.(*GetChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_DeleteChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).DeleteChat(ctx, req.(*DeleteChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_ChatWithAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatWithAgentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentPublicServiceServer).ChatWithAgent(m, &grpc.GenericServerStream[ChatWithAgentRequest, ChatWithAgentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentPublicService_ChatWithAgentServer = grpc.ServerStreamingServer[ChatWithAgentResponse]

func _AgentPublicService_BindChatTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindChatTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).BindChatTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_BindChatTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).BindChatTable(ctx, req.(*BindChatTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_UnbindChatTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindChatTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).UnbindChatTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_UnbindChatTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).UnbindChatTable(ctx, req.(*UnbindChatTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_ListChatTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).ListChatTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_ListChatTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).ListChatTables(ctx, req.(*ListChatTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_ListTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).ListTables(ctx, req.(*ListTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_CreateTableFromTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableFromTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).CreateTableFromTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_CreateTableFromTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).CreateTableFromTemplate(ctx, req.(*CreateTableFromTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_CreateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_GetTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).GetTable(ctx, req.(*GetTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_UpdateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).UpdateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_UpdateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).UpdateTable(ctx, req.(*UpdateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_DeleteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).DeleteTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_ChatWithTableBuilderAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatWithTableBuilderAgentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentPublicServiceServer).ChatWithTableBuilderAgent(m, &grpc.GenericServerStream[ChatWithTableBuilderAgentRequest, ChatWithTableBuilderAgentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentPublicService_ChatWithTableBuilderAgentServer = grpc.ServerStreamingServer[ChatWithTableBuilderAgentResponse]

func _AgentPublicService_ListTableBuilderAgentMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTableBuilderAgentMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).ListTableBuilderAgentMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_ListTableBuilderAgentMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).ListTableBuilderAgentMessages(ctx, req.(*ListTableBuilderAgentMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_GetColumnDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColumnDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).GetColumnDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_GetColumnDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).GetColumnDefinitions(ctx, req.(*GetColumnDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_UpdateColumnDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateColumnDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).UpdateColumnDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_UpdateColumnDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).UpdateColumnDefinitions(ctx, req.(*UpdateColumnDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_GetColumnDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColumnDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).GetColumnDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_GetColumnDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).GetColumnDefinition(ctx, req.(*GetColumnDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_RecomputeColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecomputeColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).RecomputeColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_RecomputeColumn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).RecomputeColumn(ctx, req.(*RecomputeColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_ListRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).ListRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_ListRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).ListRows(ctx, req.(*ListRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_GetRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).GetRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_GetRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).GetRow(ctx, req.(*GetRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_InsertRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).InsertRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_InsertRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).InsertRow(ctx, req.(*InsertRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_UpdateRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).UpdateRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_UpdateRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).UpdateRow(ctx, req.(*UpdateRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_UpdateRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).UpdateRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_UpdateRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).UpdateRows(ctx, req.(*UpdateRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_DeleteRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).DeleteRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_DeleteRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).DeleteRow(ctx, req.(*DeleteRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_DeleteRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).DeleteRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_DeleteRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).DeleteRows(ctx, req.(*DeleteRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_MoveRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).MoveRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_MoveRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).MoveRows(ctx, req.(*MoveRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_GetCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).GetCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_GetCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).GetCell(ctx, req.(*GetCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_UpdateCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).UpdateCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_UpdateCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).UpdateCell(ctx, req.(*UpdateCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_ResetCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).ResetCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_ResetCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).ResetCell(ctx, req.(*ResetCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_RecomputeCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecomputeCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).RecomputeCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_RecomputeCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).RecomputeCell(ctx, req.(*RecomputeCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_LockCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).LockCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_LockCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).LockCell(ctx, req.(*LockCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_UnlockCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).UnlockCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_UnlockCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).UnlockCell(ctx, req.(*UnlockCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentPublicService_GetTableEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTableEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentPublicServiceServer).GetTableEvents(m, &grpc.GenericServerStream[GetTableEventsRequest, GetTableEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AgentPublicService_GetTableEventsServer = grpc.ServerStreamingServer[GetTableEventsResponse]

func _AgentPublicService_ExportTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentPublicServiceServer).ExportTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentPublicService_ExportTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentPublicServiceServer).ExportTable(ctx, req.(*ExportTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentPublicService_ServiceDesc is the grpc.ServiceDesc for AgentPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.agent.v1alpha.AgentPublicService",
	HandlerType: (*AgentPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _AgentPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _AgentPublicService_Readiness_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _AgentPublicService_CreateChat_Handler,
		},
		{
			MethodName: "ListChats",
			Handler:    _AgentPublicService_ListChats_Handler,
		},
		{
			MethodName: "UpdateChat",
			Handler:    _AgentPublicService_UpdateChat_Handler,
		},
		{
			MethodName: "GetChat",
			Handler:    _AgentPublicService_GetChat_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _AgentPublicService_DeleteChat_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _AgentPublicService_ListMessages_Handler,
		},
		{
			MethodName: "BindChatTable",
			Handler:    _AgentPublicService_BindChatTable_Handler,
		},
		{
			MethodName: "UnbindChatTable",
			Handler:    _AgentPublicService_UnbindChatTable_Handler,
		},
		{
			MethodName: "ListChatTables",
			Handler:    _AgentPublicService_ListChatTables_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _AgentPublicService_ListTables_Handler,
		},
		{
			MethodName: "CreateTableFromTemplate",
			Handler:    _AgentPublicService_CreateTableFromTemplate_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _AgentPublicService_CreateTable_Handler,
		},
		{
			MethodName: "GetTable",
			Handler:    _AgentPublicService_GetTable_Handler,
		},
		{
			MethodName: "UpdateTable",
			Handler:    _AgentPublicService_UpdateTable_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _AgentPublicService_DeleteTable_Handler,
		},
		{
			MethodName: "ListTableBuilderAgentMessages",
			Handler:    _AgentPublicService_ListTableBuilderAgentMessages_Handler,
		},
		{
			MethodName: "GetColumnDefinitions",
			Handler:    _AgentPublicService_GetColumnDefinitions_Handler,
		},
		{
			MethodName: "UpdateColumnDefinitions",
			Handler:    _AgentPublicService_UpdateColumnDefinitions_Handler,
		},
		{
			MethodName: "GetColumnDefinition",
			Handler:    _AgentPublicService_GetColumnDefinition_Handler,
		},
		{
			MethodName: "RecomputeColumn",
			Handler:    _AgentPublicService_RecomputeColumn_Handler,
		},
		{
			MethodName: "ListRows",
			Handler:    _AgentPublicService_ListRows_Handler,
		},
		{
			MethodName: "GetRow",
			Handler:    _AgentPublicService_GetRow_Handler,
		},
		{
			MethodName: "InsertRow",
			Handler:    _AgentPublicService_InsertRow_Handler,
		},
		{
			MethodName: "UpdateRow",
			Handler:    _AgentPublicService_UpdateRow_Handler,
		},
		{
			MethodName: "UpdateRows",
			Handler:    _AgentPublicService_UpdateRows_Handler,
		},
		{
			MethodName: "DeleteRow",
			Handler:    _AgentPublicService_DeleteRow_Handler,
		},
		{
			MethodName: "DeleteRows",
			Handler:    _AgentPublicService_DeleteRows_Handler,
		},
		{
			MethodName: "MoveRows",
			Handler:    _AgentPublicService_MoveRows_Handler,
		},
		{
			MethodName: "GetCell",
			Handler:    _AgentPublicService_GetCell_Handler,
		},
		{
			MethodName: "UpdateCell",
			Handler:    _AgentPublicService_UpdateCell_Handler,
		},
		{
			MethodName: "ResetCell",
			Handler:    _AgentPublicService_ResetCell_Handler,
		},
		{
			MethodName: "RecomputeCell",
			Handler:    _AgentPublicService_RecomputeCell_Handler,
		},
		{
			MethodName: "LockCell",
			Handler:    _AgentPublicService_LockCell_Handler,
		},
		{
			MethodName: "UnlockCell",
			Handler:    _AgentPublicService_UnlockCell_Handler,
		},
		{
			MethodName: "ExportTable",
			Handler:    _AgentPublicService_ExportTable_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatWithAgent",
			Handler:       _AgentPublicService_ChatWithAgent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ChatWithTableBuilderAgent",
			Handler:       _AgentPublicService_ChatWithTableBuilderAgent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTableEvents",
			Handler:       _AgentPublicService_GetTableEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agent/agent/v1alpha/agent_public_service.proto",
}
