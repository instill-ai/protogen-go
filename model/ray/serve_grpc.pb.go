// Copyright 2017 The Ray Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: model/ray/serve.proto

package ray

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RayServeAPIService_ListApplications_FullMethodName = "/ray.serve.RayServeAPIService/ListApplications"
	RayServeAPIService_Healthz_FullMethodName          = "/ray.serve.RayServeAPIService/Healthz"
)

// RayServeAPIServiceClient is the client API for RayServeAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RayServeAPIServiceClient interface {
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
}

type rayServeAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRayServeAPIServiceClient(cc grpc.ClientConnInterface) RayServeAPIServiceClient {
	return &rayServeAPIServiceClient{cc}
}

func (c *rayServeAPIServiceClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApplicationsResponse)
	err := c.cc.Invoke(ctx, RayServeAPIService_ListApplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rayServeAPIServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, RayServeAPIService_Healthz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RayServeAPIServiceServer is the server API for RayServeAPIService service.
// All implementations should embed UnimplementedRayServeAPIServiceServer
// for forward compatibility.
type RayServeAPIServiceServer interface {
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error)
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
}

// UnimplementedRayServeAPIServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRayServeAPIServiceServer struct{}

func (UnimplementedRayServeAPIServiceServer) ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (UnimplementedRayServeAPIServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedRayServeAPIServiceServer) testEmbeddedByValue() {}

// UnsafeRayServeAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RayServeAPIServiceServer will
// result in compilation errors.
type UnsafeRayServeAPIServiceServer interface {
	mustEmbedUnimplementedRayServeAPIServiceServer()
}

func RegisterRayServeAPIServiceServer(s grpc.ServiceRegistrar, srv RayServeAPIServiceServer) {
	// If the following call pancis, it indicates UnimplementedRayServeAPIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RayServeAPIService_ServiceDesc, srv)
}

func _RayServeAPIService_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RayServeAPIServiceServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RayServeAPIService_ListApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RayServeAPIServiceServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RayServeAPIService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RayServeAPIServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RayServeAPIService_Healthz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RayServeAPIServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RayServeAPIService_ServiceDesc is the grpc.ServiceDesc for RayServeAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RayServeAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.serve.RayServeAPIService",
	HandlerType: (*RayServeAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApplications",
			Handler:    _RayServeAPIService_ListApplications_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _RayServeAPIService_Healthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/ray/serve.proto",
}

const (
	UserDefinedService_XCall___FullMethodName   = "/ray.serve.UserDefinedService/__call__"
	UserDefinedService_Method1_FullMethodName   = "/ray.serve.UserDefinedService/Method1"
	UserDefinedService_Method2_FullMethodName   = "/ray.serve.UserDefinedService/Method2"
	UserDefinedService_Streaming_FullMethodName = "/ray.serve.UserDefinedService/Streaming"
)

// UserDefinedServiceClient is the client API for UserDefinedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDefinedServiceClient interface {
	XCall__(ctx context.Context, in *UserDefinedMessage, opts ...grpc.CallOption) (*UserDefinedResponse, error)
	Method1(ctx context.Context, in *UserDefinedMessage, opts ...grpc.CallOption) (*UserDefinedResponse, error)
	Method2(ctx context.Context, in *UserDefinedMessage2, opts ...grpc.CallOption) (*UserDefinedResponse2, error)
	Streaming(ctx context.Context, in *UserDefinedMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserDefinedResponse], error)
}

type userDefinedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDefinedServiceClient(cc grpc.ClientConnInterface) UserDefinedServiceClient {
	return &userDefinedServiceClient{cc}
}

func (c *userDefinedServiceClient) XCall__(ctx context.Context, in *UserDefinedMessage, opts ...grpc.CallOption) (*UserDefinedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDefinedResponse)
	err := c.cc.Invoke(ctx, UserDefinedService_XCall___FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDefinedServiceClient) Method1(ctx context.Context, in *UserDefinedMessage, opts ...grpc.CallOption) (*UserDefinedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDefinedResponse)
	err := c.cc.Invoke(ctx, UserDefinedService_Method1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDefinedServiceClient) Method2(ctx context.Context, in *UserDefinedMessage2, opts ...grpc.CallOption) (*UserDefinedResponse2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDefinedResponse2)
	err := c.cc.Invoke(ctx, UserDefinedService_Method2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDefinedServiceClient) Streaming(ctx context.Context, in *UserDefinedMessage, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserDefinedResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &UserDefinedService_ServiceDesc.Streams[0], UserDefinedService_Streaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UserDefinedMessage, UserDefinedResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserDefinedService_StreamingClient = grpc.ServerStreamingClient[UserDefinedResponse]

// UserDefinedServiceServer is the server API for UserDefinedService service.
// All implementations should embed UnimplementedUserDefinedServiceServer
// for forward compatibility.
type UserDefinedServiceServer interface {
	XCall__(context.Context, *UserDefinedMessage) (*UserDefinedResponse, error)
	Method1(context.Context, *UserDefinedMessage) (*UserDefinedResponse, error)
	Method2(context.Context, *UserDefinedMessage2) (*UserDefinedResponse2, error)
	Streaming(*UserDefinedMessage, grpc.ServerStreamingServer[UserDefinedResponse]) error
}

// UnimplementedUserDefinedServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserDefinedServiceServer struct{}

func (UnimplementedUserDefinedServiceServer) XCall__(context.Context, *UserDefinedMessage) (*UserDefinedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XCall__ not implemented")
}
func (UnimplementedUserDefinedServiceServer) Method1(context.Context, *UserDefinedMessage) (*UserDefinedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method1 not implemented")
}
func (UnimplementedUserDefinedServiceServer) Method2(context.Context, *UserDefinedMessage2) (*UserDefinedResponse2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Method2 not implemented")
}
func (UnimplementedUserDefinedServiceServer) Streaming(*UserDefinedMessage, grpc.ServerStreamingServer[UserDefinedResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Streaming not implemented")
}
func (UnimplementedUserDefinedServiceServer) testEmbeddedByValue() {}

// UnsafeUserDefinedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDefinedServiceServer will
// result in compilation errors.
type UnsafeUserDefinedServiceServer interface {
	mustEmbedUnimplementedUserDefinedServiceServer()
}

func RegisterUserDefinedServiceServer(s grpc.ServiceRegistrar, srv UserDefinedServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserDefinedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserDefinedService_ServiceDesc, srv)
}

func _UserDefinedService_XCall___Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDefinedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDefinedServiceServer).XCall__(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDefinedService_XCall___FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDefinedServiceServer).XCall__(ctx, req.(*UserDefinedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDefinedService_Method1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDefinedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDefinedServiceServer).Method1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDefinedService_Method1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDefinedServiceServer).Method1(ctx, req.(*UserDefinedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDefinedService_Method2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDefinedMessage2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDefinedServiceServer).Method2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDefinedService_Method2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDefinedServiceServer).Method2(ctx, req.(*UserDefinedMessage2))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDefinedService_Streaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserDefinedMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserDefinedServiceServer).Streaming(m, &grpc.GenericServerStream[UserDefinedMessage, UserDefinedResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type UserDefinedService_StreamingServer = grpc.ServerStreamingServer[UserDefinedResponse]

// UserDefinedService_ServiceDesc is the grpc.ServiceDesc for UserDefinedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDefinedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.serve.UserDefinedService",
	HandlerType: (*UserDefinedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "__call__",
			Handler:    _UserDefinedService_XCall___Handler,
		},
		{
			MethodName: "Method1",
			Handler:    _UserDefinedService_Method1_Handler,
		},
		{
			MethodName: "Method2",
			Handler:    _UserDefinedService_Method2_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Streaming",
			Handler:       _UserDefinedService_Streaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "model/ray/serve.proto",
}

const (
	FruitService_FruitStand_FullMethodName = "/ray.serve.FruitService/FruitStand"
)

// FruitServiceClient is the client API for FruitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FruitServiceClient interface {
	FruitStand(ctx context.Context, in *FruitAmounts, opts ...grpc.CallOption) (*FruitCosts, error)
}

type fruitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFruitServiceClient(cc grpc.ClientConnInterface) FruitServiceClient {
	return &fruitServiceClient{cc}
}

func (c *fruitServiceClient) FruitStand(ctx context.Context, in *FruitAmounts, opts ...grpc.CallOption) (*FruitCosts, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FruitCosts)
	err := c.cc.Invoke(ctx, FruitService_FruitStand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FruitServiceServer is the server API for FruitService service.
// All implementations should embed UnimplementedFruitServiceServer
// for forward compatibility.
type FruitServiceServer interface {
	FruitStand(context.Context, *FruitAmounts) (*FruitCosts, error)
}

// UnimplementedFruitServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFruitServiceServer struct{}

func (UnimplementedFruitServiceServer) FruitStand(context.Context, *FruitAmounts) (*FruitCosts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FruitStand not implemented")
}
func (UnimplementedFruitServiceServer) testEmbeddedByValue() {}

// UnsafeFruitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FruitServiceServer will
// result in compilation errors.
type UnsafeFruitServiceServer interface {
	mustEmbedUnimplementedFruitServiceServer()
}

func RegisterFruitServiceServer(s grpc.ServiceRegistrar, srv FruitServiceServer) {
	// If the following call pancis, it indicates UnimplementedFruitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FruitService_ServiceDesc, srv)
}

func _FruitService_FruitStand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FruitAmounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FruitServiceServer).FruitStand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FruitService_FruitStand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FruitServiceServer).FruitStand(ctx, req.(*FruitAmounts))
	}
	return interceptor(ctx, in, info, handler)
}

// FruitService_ServiceDesc is the grpc.ServiceDesc for FruitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FruitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.serve.FruitService",
	HandlerType: (*FruitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FruitStand",
			Handler:    _FruitService_FruitStand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/ray/serve.proto",
}

const (
	RayServeBenchmarkService_GrpcCall_FullMethodName       = "/ray.serve.RayServeBenchmarkService/grpc_call"
	RayServeBenchmarkService_CallWithString_FullMethodName = "/ray.serve.RayServeBenchmarkService/call_with_string"
)

// RayServeBenchmarkServiceClient is the client API for RayServeBenchmarkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RayServeBenchmarkServiceClient interface {
	GrpcCall(ctx context.Context, in *ArrayData, opts ...grpc.CallOption) (*ModelOutput, error)
	CallWithString(ctx context.Context, in *StringData, opts ...grpc.CallOption) (*ModelOutput, error)
}

type rayServeBenchmarkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRayServeBenchmarkServiceClient(cc grpc.ClientConnInterface) RayServeBenchmarkServiceClient {
	return &rayServeBenchmarkServiceClient{cc}
}

func (c *rayServeBenchmarkServiceClient) GrpcCall(ctx context.Context, in *ArrayData, opts ...grpc.CallOption) (*ModelOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModelOutput)
	err := c.cc.Invoke(ctx, RayServeBenchmarkService_GrpcCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rayServeBenchmarkServiceClient) CallWithString(ctx context.Context, in *StringData, opts ...grpc.CallOption) (*ModelOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModelOutput)
	err := c.cc.Invoke(ctx, RayServeBenchmarkService_CallWithString_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RayServeBenchmarkServiceServer is the server API for RayServeBenchmarkService service.
// All implementations should embed UnimplementedRayServeBenchmarkServiceServer
// for forward compatibility.
type RayServeBenchmarkServiceServer interface {
	GrpcCall(context.Context, *ArrayData) (*ModelOutput, error)
	CallWithString(context.Context, *StringData) (*ModelOutput, error)
}

// UnimplementedRayServeBenchmarkServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRayServeBenchmarkServiceServer struct{}

func (UnimplementedRayServeBenchmarkServiceServer) GrpcCall(context.Context, *ArrayData) (*ModelOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcCall not implemented")
}
func (UnimplementedRayServeBenchmarkServiceServer) CallWithString(context.Context, *StringData) (*ModelOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallWithString not implemented")
}
func (UnimplementedRayServeBenchmarkServiceServer) testEmbeddedByValue() {}

// UnsafeRayServeBenchmarkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RayServeBenchmarkServiceServer will
// result in compilation errors.
type UnsafeRayServeBenchmarkServiceServer interface {
	mustEmbedUnimplementedRayServeBenchmarkServiceServer()
}

func RegisterRayServeBenchmarkServiceServer(s grpc.ServiceRegistrar, srv RayServeBenchmarkServiceServer) {
	// If the following call pancis, it indicates UnimplementedRayServeBenchmarkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RayServeBenchmarkService_ServiceDesc, srv)
}

func _RayServeBenchmarkService_GrpcCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArrayData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RayServeBenchmarkServiceServer).GrpcCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RayServeBenchmarkService_GrpcCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RayServeBenchmarkServiceServer).GrpcCall(ctx, req.(*ArrayData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RayServeBenchmarkService_CallWithString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RayServeBenchmarkServiceServer).CallWithString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RayServeBenchmarkService_CallWithString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RayServeBenchmarkServiceServer).CallWithString(ctx, req.(*StringData))
	}
	return interceptor(ctx, in, info, handler)
}

// RayServeBenchmarkService_ServiceDesc is the grpc.ServiceDesc for RayServeBenchmarkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RayServeBenchmarkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ray.serve.RayServeBenchmarkService",
	HandlerType: (*RayServeBenchmarkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "grpc_call",
			Handler:    _RayServeBenchmarkService_GrpcCall_Handler,
		},
		{
			MethodName: "call_with_string",
			Handler:    _RayServeBenchmarkService_CallWithString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/ray/serve.proto",
}
