// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: model/model/v1alpha/model_private_service.proto

package modelv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModelPrivateService_ListModelsAdmin_FullMethodName                = "/model.model.v1alpha.ModelPrivateService/ListModelsAdmin"
	ModelPrivateService_LookUpModelAdmin_FullMethodName               = "/model.model.v1alpha.ModelPrivateService/LookUpModelAdmin"
	ModelPrivateService_DeployNamespaceModelAdmin_FullMethodName      = "/model.model.v1alpha.ModelPrivateService/DeployNamespaceModelAdmin"
	ModelPrivateService_DeployUserModelAdmin_FullMethodName           = "/model.model.v1alpha.ModelPrivateService/DeployUserModelAdmin"
	ModelPrivateService_DeployOrganizationModelAdmin_FullMethodName   = "/model.model.v1alpha.ModelPrivateService/DeployOrganizationModelAdmin"
	ModelPrivateService_UndeployUserModelAdmin_FullMethodName         = "/model.model.v1alpha.ModelPrivateService/UndeployUserModelAdmin"
	ModelPrivateService_UndeployNamespaceModelAdmin_FullMethodName    = "/model.model.v1alpha.ModelPrivateService/UndeployNamespaceModelAdmin"
	ModelPrivateService_UndeployOrganizationModelAdmin_FullMethodName = "/model.model.v1alpha.ModelPrivateService/UndeployOrganizationModelAdmin"
	ModelPrivateService_ListRepositoryTags_FullMethodName             = "/model.model.v1alpha.ModelPrivateService/ListRepositoryTags"
	ModelPrivateService_GetRepositoryTag_FullMethodName               = "/model.model.v1alpha.ModelPrivateService/GetRepositoryTag"
	ModelPrivateService_CreateRepositoryTag_FullMethodName            = "/model.model.v1alpha.ModelPrivateService/CreateRepositoryTag"
	ModelPrivateService_DeleteRepositoryTag_FullMethodName            = "/model.model.v1alpha.ModelPrivateService/DeleteRepositoryTag"
)

// ModelPrivateServiceClient is the client API for ModelPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Model service responds to internal access
type ModelPrivateServiceClient interface {
	// ListModelsAdmin method receives a ListModelsAdminRequest message and
	// returns a ListModelsAdminResponse
	ListModelsAdmin(ctx context.Context, in *ListModelsAdminRequest, opts ...grpc.CallOption) (*ListModelsAdminResponse, error)
	// LookUpModelAdmin method receives a LookUpModelAdminRequest message and
	// returns a LookUpModelAdminResponse
	LookUpModelAdmin(ctx context.Context, in *LookUpModelAdminRequest, opts ...grpc.CallOption) (*LookUpModelAdminResponse, error)
	// DeployNamespaceModelAdmin deploy a model to online state
	DeployNamespaceModelAdmin(ctx context.Context, in *DeployNamespaceModelAdminRequest, opts ...grpc.CallOption) (*DeployNamespaceModelAdminResponse, error)
	// DeployUserModelAdmin deploy a model to online state
	DeployUserModelAdmin(ctx context.Context, in *DeployUserModelAdminRequest, opts ...grpc.CallOption) (*DeployUserModelAdminResponse, error)
	// DeployOrganizationModelAdmin deploy a model to online state
	DeployOrganizationModelAdmin(ctx context.Context, in *DeployOrganizationModelAdminRequest, opts ...grpc.CallOption) (*DeployOrganizationModelAdminResponse, error)
	// UndeployUserModelAdmin undeploy a model to offline state
	UndeployUserModelAdmin(ctx context.Context, in *UndeployUserModelAdminRequest, opts ...grpc.CallOption) (*UndeployUserModelAdminResponse, error)
	// UndeployNamespaceModelAdmin undeploy a model to offline state
	UndeployNamespaceModelAdmin(ctx context.Context, in *UndeployNamespaceModelAdminRequest, opts ...grpc.CallOption) (*UndeployNamespaceModelAdminResponse, error)
	// UndeployOrganizationModelAdmin undeploy a model to offline state
	UndeployOrganizationModelAdmin(ctx context.Context, in *UndeployOrganizationModelAdminRequest, opts ...grpc.CallOption) (*UndeployOrganizationModelAdminResponse, error)
	// List the tags in a repository.
	//
	// Returns a portion of the versions that the specified repository holds.
	ListRepositoryTags(ctx context.Context, in *ListRepositoryTagsRequest, opts ...grpc.CallOption) (*ListRepositoryTagsResponse, error)
	// Get details of repository tag.
	GetRepositoryTag(ctx context.Context, in *GetRepositoryTagRequest, opts ...grpc.CallOption) (*GetRepositoryTagResponse, error)
	// Create a new repository tag.
	//
	// Adds a tag to a given repository. Note that this operation is only
	// intended to register the information of an *already created* tag. This
	// method should be called as part of the content push operation, right after
	// the [PUT Manifest](https://distribution.github.io/distribution/#put-manifest) has
	// succeeded. The distribution registry won't hold data such as the push time
	// or the tag digest, so `model-backend` will hold this information locally.
	CreateRepositoryTag(ctx context.Context, in *CreateRepositoryTagRequest, opts ...grpc.CallOption) (*CreateRepositoryTagResponse, error)
	// Delete a repository tag.
	DeleteRepositoryTag(ctx context.Context, in *DeleteRepositoryTagRequest, opts ...grpc.CallOption) (*DeleteRepositoryTagResponse, error)
}

type modelPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelPrivateServiceClient(cc grpc.ClientConnInterface) ModelPrivateServiceClient {
	return &modelPrivateServiceClient{cc}
}

func (c *modelPrivateServiceClient) ListModelsAdmin(ctx context.Context, in *ListModelsAdminRequest, opts ...grpc.CallOption) (*ListModelsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsAdminResponse)
	err := c.cc.Invoke(ctx, ModelPrivateService_ListModelsAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPrivateServiceClient) LookUpModelAdmin(ctx context.Context, in *LookUpModelAdminRequest, opts ...grpc.CallOption) (*LookUpModelAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LookUpModelAdminResponse)
	err := c.cc.Invoke(ctx, ModelPrivateService_LookUpModelAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPrivateServiceClient) DeployNamespaceModelAdmin(ctx context.Context, in *DeployNamespaceModelAdminRequest, opts ...grpc.CallOption) (*DeployNamespaceModelAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeployNamespaceModelAdminResponse)
	err := c.cc.Invoke(ctx, ModelPrivateService_DeployNamespaceModelAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPrivateServiceClient) DeployUserModelAdmin(ctx context.Context, in *DeployUserModelAdminRequest, opts ...grpc.CallOption) (*DeployUserModelAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeployUserModelAdminResponse)
	err := c.cc.Invoke(ctx, ModelPrivateService_DeployUserModelAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPrivateServiceClient) DeployOrganizationModelAdmin(ctx context.Context, in *DeployOrganizationModelAdminRequest, opts ...grpc.CallOption) (*DeployOrganizationModelAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeployOrganizationModelAdminResponse)
	err := c.cc.Invoke(ctx, ModelPrivateService_DeployOrganizationModelAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPrivateServiceClient) UndeployUserModelAdmin(ctx context.Context, in *UndeployUserModelAdminRequest, opts ...grpc.CallOption) (*UndeployUserModelAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UndeployUserModelAdminResponse)
	err := c.cc.Invoke(ctx, ModelPrivateService_UndeployUserModelAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPrivateServiceClient) UndeployNamespaceModelAdmin(ctx context.Context, in *UndeployNamespaceModelAdminRequest, opts ...grpc.CallOption) (*UndeployNamespaceModelAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UndeployNamespaceModelAdminResponse)
	err := c.cc.Invoke(ctx, ModelPrivateService_UndeployNamespaceModelAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPrivateServiceClient) UndeployOrganizationModelAdmin(ctx context.Context, in *UndeployOrganizationModelAdminRequest, opts ...grpc.CallOption) (*UndeployOrganizationModelAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UndeployOrganizationModelAdminResponse)
	err := c.cc.Invoke(ctx, ModelPrivateService_UndeployOrganizationModelAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPrivateServiceClient) ListRepositoryTags(ctx context.Context, in *ListRepositoryTagsRequest, opts ...grpc.CallOption) (*ListRepositoryTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRepositoryTagsResponse)
	err := c.cc.Invoke(ctx, ModelPrivateService_ListRepositoryTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPrivateServiceClient) GetRepositoryTag(ctx context.Context, in *GetRepositoryTagRequest, opts ...grpc.CallOption) (*GetRepositoryTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepositoryTagResponse)
	err := c.cc.Invoke(ctx, ModelPrivateService_GetRepositoryTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPrivateServiceClient) CreateRepositoryTag(ctx context.Context, in *CreateRepositoryTagRequest, opts ...grpc.CallOption) (*CreateRepositoryTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRepositoryTagResponse)
	err := c.cc.Invoke(ctx, ModelPrivateService_CreateRepositoryTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPrivateServiceClient) DeleteRepositoryTag(ctx context.Context, in *DeleteRepositoryTagRequest, opts ...grpc.CallOption) (*DeleteRepositoryTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRepositoryTagResponse)
	err := c.cc.Invoke(ctx, ModelPrivateService_DeleteRepositoryTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelPrivateServiceServer is the server API for ModelPrivateService service.
// All implementations should embed UnimplementedModelPrivateServiceServer
// for forward compatibility.
//
// Model service responds to internal access
type ModelPrivateServiceServer interface {
	// ListModelsAdmin method receives a ListModelsAdminRequest message and
	// returns a ListModelsAdminResponse
	ListModelsAdmin(context.Context, *ListModelsAdminRequest) (*ListModelsAdminResponse, error)
	// LookUpModelAdmin method receives a LookUpModelAdminRequest message and
	// returns a LookUpModelAdminResponse
	LookUpModelAdmin(context.Context, *LookUpModelAdminRequest) (*LookUpModelAdminResponse, error)
	// DeployNamespaceModelAdmin deploy a model to online state
	DeployNamespaceModelAdmin(context.Context, *DeployNamespaceModelAdminRequest) (*DeployNamespaceModelAdminResponse, error)
	// DeployUserModelAdmin deploy a model to online state
	DeployUserModelAdmin(context.Context, *DeployUserModelAdminRequest) (*DeployUserModelAdminResponse, error)
	// DeployOrganizationModelAdmin deploy a model to online state
	DeployOrganizationModelAdmin(context.Context, *DeployOrganizationModelAdminRequest) (*DeployOrganizationModelAdminResponse, error)
	// UndeployUserModelAdmin undeploy a model to offline state
	UndeployUserModelAdmin(context.Context, *UndeployUserModelAdminRequest) (*UndeployUserModelAdminResponse, error)
	// UndeployNamespaceModelAdmin undeploy a model to offline state
	UndeployNamespaceModelAdmin(context.Context, *UndeployNamespaceModelAdminRequest) (*UndeployNamespaceModelAdminResponse, error)
	// UndeployOrganizationModelAdmin undeploy a model to offline state
	UndeployOrganizationModelAdmin(context.Context, *UndeployOrganizationModelAdminRequest) (*UndeployOrganizationModelAdminResponse, error)
	// List the tags in a repository.
	//
	// Returns a portion of the versions that the specified repository holds.
	ListRepositoryTags(context.Context, *ListRepositoryTagsRequest) (*ListRepositoryTagsResponse, error)
	// Get details of repository tag.
	GetRepositoryTag(context.Context, *GetRepositoryTagRequest) (*GetRepositoryTagResponse, error)
	// Create a new repository tag.
	//
	// Adds a tag to a given repository. Note that this operation is only
	// intended to register the information of an *already created* tag. This
	// method should be called as part of the content push operation, right after
	// the [PUT Manifest](https://distribution.github.io/distribution/#put-manifest) has
	// succeeded. The distribution registry won't hold data such as the push time
	// or the tag digest, so `model-backend` will hold this information locally.
	CreateRepositoryTag(context.Context, *CreateRepositoryTagRequest) (*CreateRepositoryTagResponse, error)
	// Delete a repository tag.
	DeleteRepositoryTag(context.Context, *DeleteRepositoryTagRequest) (*DeleteRepositoryTagResponse, error)
}

// UnimplementedModelPrivateServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModelPrivateServiceServer struct{}

func (UnimplementedModelPrivateServiceServer) ListModelsAdmin(context.Context, *ListModelsAdminRequest) (*ListModelsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelsAdmin not implemented")
}
func (UnimplementedModelPrivateServiceServer) LookUpModelAdmin(context.Context, *LookUpModelAdminRequest) (*LookUpModelAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpModelAdmin not implemented")
}
func (UnimplementedModelPrivateServiceServer) DeployNamespaceModelAdmin(context.Context, *DeployNamespaceModelAdminRequest) (*DeployNamespaceModelAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployNamespaceModelAdmin not implemented")
}
func (UnimplementedModelPrivateServiceServer) DeployUserModelAdmin(context.Context, *DeployUserModelAdminRequest) (*DeployUserModelAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployUserModelAdmin not implemented")
}
func (UnimplementedModelPrivateServiceServer) DeployOrganizationModelAdmin(context.Context, *DeployOrganizationModelAdminRequest) (*DeployOrganizationModelAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployOrganizationModelAdmin not implemented")
}
func (UnimplementedModelPrivateServiceServer) UndeployUserModelAdmin(context.Context, *UndeployUserModelAdminRequest) (*UndeployUserModelAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeployUserModelAdmin not implemented")
}
func (UnimplementedModelPrivateServiceServer) UndeployNamespaceModelAdmin(context.Context, *UndeployNamespaceModelAdminRequest) (*UndeployNamespaceModelAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeployNamespaceModelAdmin not implemented")
}
func (UnimplementedModelPrivateServiceServer) UndeployOrganizationModelAdmin(context.Context, *UndeployOrganizationModelAdminRequest) (*UndeployOrganizationModelAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeployOrganizationModelAdmin not implemented")
}
func (UnimplementedModelPrivateServiceServer) ListRepositoryTags(context.Context, *ListRepositoryTagsRequest) (*ListRepositoryTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositoryTags not implemented")
}
func (UnimplementedModelPrivateServiceServer) GetRepositoryTag(context.Context, *GetRepositoryTagRequest) (*GetRepositoryTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryTag not implemented")
}
func (UnimplementedModelPrivateServiceServer) CreateRepositoryTag(context.Context, *CreateRepositoryTagRequest) (*CreateRepositoryTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepositoryTag not implemented")
}
func (UnimplementedModelPrivateServiceServer) DeleteRepositoryTag(context.Context, *DeleteRepositoryTagRequest) (*DeleteRepositoryTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepositoryTag not implemented")
}
func (UnimplementedModelPrivateServiceServer) testEmbeddedByValue() {}

// UnsafeModelPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelPrivateServiceServer will
// result in compilation errors.
type UnsafeModelPrivateServiceServer interface {
	mustEmbedUnimplementedModelPrivateServiceServer()
}

func RegisterModelPrivateServiceServer(s grpc.ServiceRegistrar, srv ModelPrivateServiceServer) {
	// If the following call pancis, it indicates UnimplementedModelPrivateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModelPrivateService_ServiceDesc, srv)
}

func _ModelPrivateService_ListModelsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPrivateServiceServer).ListModelsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPrivateService_ListModelsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPrivateServiceServer).ListModelsAdmin(ctx, req.(*ListModelsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPrivateService_LookUpModelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpModelAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPrivateServiceServer).LookUpModelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPrivateService_LookUpModelAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPrivateServiceServer).LookUpModelAdmin(ctx, req.(*LookUpModelAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPrivateService_DeployNamespaceModelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployNamespaceModelAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPrivateServiceServer).DeployNamespaceModelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPrivateService_DeployNamespaceModelAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPrivateServiceServer).DeployNamespaceModelAdmin(ctx, req.(*DeployNamespaceModelAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPrivateService_DeployUserModelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployUserModelAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPrivateServiceServer).DeployUserModelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPrivateService_DeployUserModelAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPrivateServiceServer).DeployUserModelAdmin(ctx, req.(*DeployUserModelAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPrivateService_DeployOrganizationModelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployOrganizationModelAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPrivateServiceServer).DeployOrganizationModelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPrivateService_DeployOrganizationModelAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPrivateServiceServer).DeployOrganizationModelAdmin(ctx, req.(*DeployOrganizationModelAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPrivateService_UndeployUserModelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployUserModelAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPrivateServiceServer).UndeployUserModelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPrivateService_UndeployUserModelAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPrivateServiceServer).UndeployUserModelAdmin(ctx, req.(*UndeployUserModelAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPrivateService_UndeployNamespaceModelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployNamespaceModelAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPrivateServiceServer).UndeployNamespaceModelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPrivateService_UndeployNamespaceModelAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPrivateServiceServer).UndeployNamespaceModelAdmin(ctx, req.(*UndeployNamespaceModelAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPrivateService_UndeployOrganizationModelAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployOrganizationModelAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPrivateServiceServer).UndeployOrganizationModelAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPrivateService_UndeployOrganizationModelAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPrivateServiceServer).UndeployOrganizationModelAdmin(ctx, req.(*UndeployOrganizationModelAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPrivateService_ListRepositoryTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoryTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPrivateServiceServer).ListRepositoryTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPrivateService_ListRepositoryTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPrivateServiceServer).ListRepositoryTags(ctx, req.(*ListRepositoryTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPrivateService_GetRepositoryTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPrivateServiceServer).GetRepositoryTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPrivateService_GetRepositoryTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPrivateServiceServer).GetRepositoryTag(ctx, req.(*GetRepositoryTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPrivateService_CreateRepositoryTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepositoryTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPrivateServiceServer).CreateRepositoryTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPrivateService_CreateRepositoryTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPrivateServiceServer).CreateRepositoryTag(ctx, req.(*CreateRepositoryTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPrivateService_DeleteRepositoryTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepositoryTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPrivateServiceServer).DeleteRepositoryTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPrivateService_DeleteRepositoryTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPrivateServiceServer).DeleteRepositoryTag(ctx, req.(*DeleteRepositoryTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelPrivateService_ServiceDesc is the grpc.ServiceDesc for ModelPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.model.v1alpha.ModelPrivateService",
	HandlerType: (*ModelPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListModelsAdmin",
			Handler:    _ModelPrivateService_ListModelsAdmin_Handler,
		},
		{
			MethodName: "LookUpModelAdmin",
			Handler:    _ModelPrivateService_LookUpModelAdmin_Handler,
		},
		{
			MethodName: "DeployNamespaceModelAdmin",
			Handler:    _ModelPrivateService_DeployNamespaceModelAdmin_Handler,
		},
		{
			MethodName: "DeployUserModelAdmin",
			Handler:    _ModelPrivateService_DeployUserModelAdmin_Handler,
		},
		{
			MethodName: "DeployOrganizationModelAdmin",
			Handler:    _ModelPrivateService_DeployOrganizationModelAdmin_Handler,
		},
		{
			MethodName: "UndeployUserModelAdmin",
			Handler:    _ModelPrivateService_UndeployUserModelAdmin_Handler,
		},
		{
			MethodName: "UndeployNamespaceModelAdmin",
			Handler:    _ModelPrivateService_UndeployNamespaceModelAdmin_Handler,
		},
		{
			MethodName: "UndeployOrganizationModelAdmin",
			Handler:    _ModelPrivateService_UndeployOrganizationModelAdmin_Handler,
		},
		{
			MethodName: "ListRepositoryTags",
			Handler:    _ModelPrivateService_ListRepositoryTags_Handler,
		},
		{
			MethodName: "GetRepositoryTag",
			Handler:    _ModelPrivateService_GetRepositoryTag_Handler,
		},
		{
			MethodName: "CreateRepositoryTag",
			Handler:    _ModelPrivateService_CreateRepositoryTag_Handler,
		},
		{
			MethodName: "DeleteRepositoryTag",
			Handler:    _ModelPrivateService_DeleteRepositoryTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/model/v1alpha/model_private_service.proto",
}
