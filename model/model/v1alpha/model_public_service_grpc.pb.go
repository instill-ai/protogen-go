// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: model/model/v1alpha/model_public_service.proto

package modelv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ModelPublicService_Liveness_FullMethodName                                 = "/model.model.v1alpha.ModelPublicService/Liveness"
	ModelPublicService_Readiness_FullMethodName                                = "/model.model.v1alpha.ModelPublicService/Readiness"
	ModelPublicService_ListModelDefinitions_FullMethodName                     = "/model.model.v1alpha.ModelPublicService/ListModelDefinitions"
	ModelPublicService_ListAvailableRegions_FullMethodName                     = "/model.model.v1alpha.ModelPublicService/ListAvailableRegions"
	ModelPublicService_GetModelDefinition_FullMethodName                       = "/model.model.v1alpha.ModelPublicService/GetModelDefinition"
	ModelPublicService_ListModels_FullMethodName                               = "/model.model.v1alpha.ModelPublicService/ListModels"
	ModelPublicService_LookUpModel_FullMethodName                              = "/model.model.v1alpha.ModelPublicService/LookUpModel"
	ModelPublicService_ListUserModels_FullMethodName                           = "/model.model.v1alpha.ModelPublicService/ListUserModels"
	ModelPublicService_CreateUserModel_FullMethodName                          = "/model.model.v1alpha.ModelPublicService/CreateUserModel"
	ModelPublicService_GetUserModel_FullMethodName                             = "/model.model.v1alpha.ModelPublicService/GetUserModel"
	ModelPublicService_UpdateUserModel_FullMethodName                          = "/model.model.v1alpha.ModelPublicService/UpdateUserModel"
	ModelPublicService_DeleteUserModel_FullMethodName                          = "/model.model.v1alpha.ModelPublicService/DeleteUserModel"
	ModelPublicService_RenameUserModel_FullMethodName                          = "/model.model.v1alpha.ModelPublicService/RenameUserModel"
	ModelPublicService_PublishUserModel_FullMethodName                         = "/model.model.v1alpha.ModelPublicService/PublishUserModel"
	ModelPublicService_UnpublishUserModel_FullMethodName                       = "/model.model.v1alpha.ModelPublicService/UnpublishUserModel"
	ModelPublicService_GetUserModelCard_FullMethodName                         = "/model.model.v1alpha.ModelPublicService/GetUserModelCard"
	ModelPublicService_WatchUserModel_FullMethodName                           = "/model.model.v1alpha.ModelPublicService/WatchUserModel"
	ModelPublicService_WatchUserLatestModel_FullMethodName                     = "/model.model.v1alpha.ModelPublicService/WatchUserLatestModel"
	ModelPublicService_ListUserModelVersions_FullMethodName                    = "/model.model.v1alpha.ModelPublicService/ListUserModelVersions"
	ModelPublicService_TriggerUserModel_FullMethodName                         = "/model.model.v1alpha.ModelPublicService/TriggerUserModel"
	ModelPublicService_TriggerAsyncUserModel_FullMethodName                    = "/model.model.v1alpha.ModelPublicService/TriggerAsyncUserModel"
	ModelPublicService_TriggerUserLatestModel_FullMethodName                   = "/model.model.v1alpha.ModelPublicService/TriggerUserLatestModel"
	ModelPublicService_TriggerAsyncUserLatestModel_FullMethodName              = "/model.model.v1alpha.ModelPublicService/TriggerAsyncUserLatestModel"
	ModelPublicService_TriggerUserModelBinaryFileUpload_FullMethodName         = "/model.model.v1alpha.ModelPublicService/TriggerUserModelBinaryFileUpload"
	ModelPublicService_ListOrganizationModels_FullMethodName                   = "/model.model.v1alpha.ModelPublicService/ListOrganizationModels"
	ModelPublicService_CreateOrganizationModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/CreateOrganizationModel"
	ModelPublicService_GetOrganizationModel_FullMethodName                     = "/model.model.v1alpha.ModelPublicService/GetOrganizationModel"
	ModelPublicService_UpdateOrganizationModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/UpdateOrganizationModel"
	ModelPublicService_DeleteOrganizationModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/DeleteOrganizationModel"
	ModelPublicService_RenameOrganizationModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/RenameOrganizationModel"
	ModelPublicService_PublishOrganizationModel_FullMethodName                 = "/model.model.v1alpha.ModelPublicService/PublishOrganizationModel"
	ModelPublicService_UnpublishOrganizationModel_FullMethodName               = "/model.model.v1alpha.ModelPublicService/UnpublishOrganizationModel"
	ModelPublicService_GetOrganizationModelCard_FullMethodName                 = "/model.model.v1alpha.ModelPublicService/GetOrganizationModelCard"
	ModelPublicService_WatchOrganizationModel_FullMethodName                   = "/model.model.v1alpha.ModelPublicService/WatchOrganizationModel"
	ModelPublicService_WatchOrganizationLatestModel_FullMethodName             = "/model.model.v1alpha.ModelPublicService/WatchOrganizationLatestModel"
	ModelPublicService_ListOrganizationModelVersions_FullMethodName            = "/model.model.v1alpha.ModelPublicService/ListOrganizationModelVersions"
	ModelPublicService_TriggerOrganizationModel_FullMethodName                 = "/model.model.v1alpha.ModelPublicService/TriggerOrganizationModel"
	ModelPublicService_TriggerAsyncOrganizationModel_FullMethodName            = "/model.model.v1alpha.ModelPublicService/TriggerAsyncOrganizationModel"
	ModelPublicService_TriggerOrganizationLatestModel_FullMethodName           = "/model.model.v1alpha.ModelPublicService/TriggerOrganizationLatestModel"
	ModelPublicService_TriggerAsyncOrganizationLatestModel_FullMethodName      = "/model.model.v1alpha.ModelPublicService/TriggerAsyncOrganizationLatestModel"
	ModelPublicService_TriggerOrganizationModelBinaryFileUpload_FullMethodName = "/model.model.v1alpha.ModelPublicService/TriggerOrganizationModelBinaryFileUpload"
	ModelPublicService_GetModelOperation_FullMethodName                        = "/model.model.v1alpha.ModelPublicService/GetModelOperation"
	ModelPublicService_GetUserLatestModelOperation_FullMethodName              = "/model.model.v1alpha.ModelPublicService/GetUserLatestModelOperation"
	ModelPublicService_GetOrganizationLatestModelOperation_FullMethodName      = "/model.model.v1alpha.ModelPublicService/GetOrganizationLatestModelOperation"
)

// ModelPublicServiceClient is the client API for ModelPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelPublicServiceClient interface {
	// Check if the model server is alive
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Check if the model server is ready
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// List model definitions
	//
	// Returns a paginated list of model definitions.
	ListModelDefinitions(ctx context.Context, in *ListModelDefinitionsRequest, opts ...grpc.CallOption) (*ListModelDefinitionsResponse, error)
	// List available regions
	//
	// Returns a paginated list of available regions.
	ListAvailableRegions(ctx context.Context, in *ListAvailableRegionsRequest, opts ...grpc.CallOption) (*ListAvailableRegionsResponse, error)
	// Get a model definition
	//
	// Returns the details of a model definition.
	GetModelDefinition(ctx context.Context, in *GetModelDefinitionRequest, opts ...grpc.CallOption) (*GetModelDefinitionResponse, error)
	// List models
	//
	// Returns a paginated list of models.
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// Get a model by UID
	//
	// Returns the details of a model by a permalink defined by the resource UID.
	LookUpModel(ctx context.Context, in *LookUpModelRequest, opts ...grpc.CallOption) (*LookUpModelResponse, error)
	// List user models
	//
	// Returns a paginated list of models that belong to the specified user. The
	// parent user may be different from the authenticated user, in which case
	// the results will contain the models that are visible to the latter.
	ListUserModels(ctx context.Context, in *ListUserModelsRequest, opts ...grpc.CallOption) (*ListUserModelsResponse, error)
	// Create a new model
	//
	// Creates a new model under the parenthood of a user. This is an
	// asynchronous endpoint, i.e., the server will not wait for the model to be
	// created in order to respond. Instead, it will return a response with the
	// necessary information to access the result and status of the creation
	// operation.
	CreateUserModel(ctx context.Context, in *CreateUserModelRequest, opts ...grpc.CallOption) (*CreateUserModelResponse, error)
	// Get a model
	//
	// Returns the detail of a model, accessing it by the model ID and its parent user.
	GetUserModel(ctx context.Context, in *GetUserModelRequest, opts ...grpc.CallOption) (*GetUserModelResponse, error)
	// Update a model
	//
	// Updates a model, accessing it by its resource name, which is defined by
	// the parent user and the ID of the model.
	//
	// In REST requests, only the supplied model fields will be taken into
	// account when updating the resource.
	UpdateUserModel(ctx context.Context, in *UpdateUserModelRequest, opts ...grpc.CallOption) (*UpdateUserModelResponse, error)
	// Delete a model
	//
	// Deletes a model, accesing it by its resource name, which is defined by the
	// parent user and the ID of the model.
	DeleteUserModel(ctx context.Context, in *DeleteUserModelRequest, opts ...grpc.CallOption) (*DeleteUserModelResponse, error)
	// Rename a model
	//
	// Renames a model, accesing it by its resource name, which is defined by the
	// parent user and the ID of the model.
	RenameUserModel(ctx context.Context, in *RenameUserModelRequest, opts ...grpc.CallOption) (*RenameUserModelResponse, error)
	// Publish a model
	//
	// Updates the visibility in a model to PUBLIC. The model is accessed by its
	// resource name, defined by the model ID and its parent user.
	PublishUserModel(ctx context.Context, in *PublishUserModelRequest, opts ...grpc.CallOption) (*PublishUserModelResponse, error)
	// Unpublish a model
	//
	// Updates the visibility in a model to PRIVATE. The model is accessed by its
	// resource name, defined by the model ID and its parent user.
	UnpublishUserModel(ctx context.Context, in *UnpublishUserModelRequest, opts ...grpc.CallOption) (*UnpublishUserModelResponse, error)
	// Get a model card
	//
	// Returns the README file that accompanies a model, describing it and
	// enhancing it with metadata. The model is accessed by its resource name.
	GetUserModelCard(ctx context.Context, in *GetUserModelCardRequest, opts ...grpc.CallOption) (*GetUserModelCardResponse, error)
	// Watch the state of a model version
	//
	// Returns the state of a model. The deploy / undeploy actions take some
	// time, during which a model will be in an UNSPECIFIED state. This endpoint
	// allows clients to track the state and progress of the model.
	WatchUserModel(ctx context.Context, in *WatchUserModelRequest, opts ...grpc.CallOption) (*WatchUserModelResponse, error)
	// Watch the state of the latest model version
	//
	// Returns the state of the latest model version. The deploy / undeploy actions take some
	// time, during which a model will be in an UNSPECIFIED state. This endpoint
	// allows clients to track the state and progress of the model.
	WatchUserLatestModel(ctx context.Context, in *WatchUserLatestModelRequest, opts ...grpc.CallOption) (*WatchUserLatestModelResponse, error)
	// List user model versions
	//
	// Returns a paginated list of version of a model namespace that belong to the specified user.
	// Contains model version and digest.
	ListUserModelVersions(ctx context.Context, in *ListUserModelVersionsRequest, opts ...grpc.CallOption) (*ListUserModelVersionsResponse, error)
	// Trigger model inference
	//
	// Triggers a deployed model to infer the result of a set of task or
	// questions.
	TriggerUserModel(ctx context.Context, in *TriggerUserModelRequest, opts ...grpc.CallOption) (*TriggerUserModelResponse, error)
	// Trigger model inference asynchronously
	//
	// Triggers a deployed model to infer the result of a set of task or
	// questions.
	TriggerAsyncUserModel(ctx context.Context, in *TriggerAsyncUserModelRequest, opts ...grpc.CallOption) (*TriggerAsyncUserModelResponse, error)
	// Trigger model inference
	//
	// Triggers the latest deployed model version to infer the result of a set of task or
	// questions.
	TriggerUserLatestModel(ctx context.Context, in *TriggerUserLatestModelRequest, opts ...grpc.CallOption) (*TriggerUserLatestModelResponse, error)
	// Trigger model inference asynchronously
	//
	// Triggers the latest deployed model version to infer the result of a set of task or
	// questions.
	TriggerAsyncUserLatestModel(ctx context.Context, in *TriggerAsyncUserLatestModelRequest, opts ...grpc.CallOption) (*TriggerAsyncUserLatestModelResponse, error)
	// Trigger model inference with a binary input
	//
	// Triggers a deployed model to infer the result of a task or question,
	// submitted as a binary file.
	TriggerUserModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TriggerUserModelBinaryFileUploadClient, error)
	// List organization models
	//
	// Returns a paginated list of models that belong to the specified organization. The
	// parent organization may be different from the authenticated organization, in which case
	// the results will contain the models that are visible to the latter.
	ListOrganizationModels(ctx context.Context, in *ListOrganizationModelsRequest, opts ...grpc.CallOption) (*ListOrganizationModelsResponse, error)
	// Create a new model
	//
	// Creates a new model under the parenthood of an organization. This is an
	// asynchronous endpoint, i.e., the server will not wait for the model to be
	// created in order to respond. Instead, it will return a response with the
	// necessary information to access the result and status of the creation
	// operation.
	CreateOrganizationModel(ctx context.Context, in *CreateOrganizationModelRequest, opts ...grpc.CallOption) (*CreateOrganizationModelResponse, error)
	// Get a model
	//
	// Returns the detail of a model, accessing it by the model ID and its parent organization.
	GetOrganizationModel(ctx context.Context, in *GetOrganizationModelRequest, opts ...grpc.CallOption) (*GetOrganizationModelResponse, error)
	// Update a model
	//
	// Updates a model, accessing it by its resource name, which is defined by
	// the parent organization and the ID of the model.
	//
	// In REST requests, only the supplied model fields will be taken into
	// account when updating the resource.
	UpdateOrganizationModel(ctx context.Context, in *UpdateOrganizationModelRequest, opts ...grpc.CallOption) (*UpdateOrganizationModelResponse, error)
	// Delete a model
	//
	// Deletes a model, accesing it by its resource name, which is defined by the
	// parent organization and the ID of the model.
	DeleteOrganizationModel(ctx context.Context, in *DeleteOrganizationModelRequest, opts ...grpc.CallOption) (*DeleteOrganizationModelResponse, error)
	// Rename a model
	//
	// Renames a model, accesing it by its resource name, which is defined by the
	// parent organization and the ID of the model.
	RenameOrganizationModel(ctx context.Context, in *RenameOrganizationModelRequest, opts ...grpc.CallOption) (*RenameOrganizationModelResponse, error)
	// Publish a model
	//
	// Updates the visibility in a model to PUBLIC. The model is accessed by its
	// resource name, defined by the model ID and its parent organization.
	PublishOrganizationModel(ctx context.Context, in *PublishOrganizationModelRequest, opts ...grpc.CallOption) (*PublishOrganizationModelResponse, error)
	// Unpublish a model
	//
	// Updates the visibility in a model to PRIVATE. The model is accessed by its
	// resource name, defined by the model ID and its parent organization.
	UnpublishOrganizationModel(ctx context.Context, in *UnpublishOrganizationModelRequest, opts ...grpc.CallOption) (*UnpublishOrganizationModelResponse, error)
	// Get a model card
	//
	// Returns the README file that accompanies a model, describing it and
	// enhancing it with metadata. The model is accessed by its resource name.
	GetOrganizationModelCard(ctx context.Context, in *GetOrganizationModelCardRequest, opts ...grpc.CallOption) (*GetOrganizationModelCardResponse, error)
	// Watch the state of a model version
	//
	// Returns the state of a model. The deploy / undeploy actions take some
	// time, during which a model will be in an UNSPECIFIED state. This endpoint
	// allows clients to track the state and progress of the model.
	WatchOrganizationModel(ctx context.Context, in *WatchOrganizationModelRequest, opts ...grpc.CallOption) (*WatchOrganizationModelResponse, error)
	// Watch the state of the latest model version
	//
	// Returns the state of the latest model version. The deploy / undeploy actions take some
	// time, during which a model will be in an UNSPECIFIED state. This endpoint
	// allows clients to track the state and progress of the model.
	WatchOrganizationLatestModel(ctx context.Context, in *WatchOrganizationLatestModelRequest, opts ...grpc.CallOption) (*WatchOrganizationLatestModelResponse, error)
	// List organization model versions
	//
	// Returns a paginated list of version of a model namespace that belong to the specified organization.
	// Contains model version and digest.
	ListOrganizationModelVersions(ctx context.Context, in *ListOrganizationModelVersionsRequest, opts ...grpc.CallOption) (*ListOrganizationModelVersionsResponse, error)
	// Trigger model inference
	//
	// Triggers a deployed model to infer the result of a set of task or
	// questions.
	TriggerOrganizationModel(ctx context.Context, in *TriggerOrganizationModelRequest, opts ...grpc.CallOption) (*TriggerOrganizationModelResponse, error)
	// Trigger model inference asynchronously
	//
	// Triggers a deployed model to infer the result of a set of task or
	// questions.
	TriggerAsyncOrganizationModel(ctx context.Context, in *TriggerAsyncOrganizationModelRequest, opts ...grpc.CallOption) (*TriggerAsyncOrganizationModelResponse, error)
	// Trigger model inference
	//
	// Triggers the latest deployed model version to infer the result of a set of task or
	// questions.
	TriggerOrganizationLatestModel(ctx context.Context, in *TriggerOrganizationLatestModelRequest, opts ...grpc.CallOption) (*TriggerOrganizationLatestModelResponse, error)
	// Trigger model inference asynchronously
	//
	// Triggers the latest deployed model version to infer the result of a set of task or
	// questions.
	TriggerAsyncOrganizationLatestModel(ctx context.Context, in *TriggerAsyncOrganizationLatestModelRequest, opts ...grpc.CallOption) (*TriggerAsyncOrganizationLatestModelResponse, error)
	// Trigger model inference with a binary input
	//
	// Triggers a deployed model to infer the result of a task or question,
	// submitted as a binary file.
	TriggerOrganizationModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TriggerOrganizationModelBinaryFileUploadClient, error)
	// Get the details of a long-running operation
	//
	// This method allows requesters to request the status and outcome of
	// long-running operations in a model, such as deployment.
	GetModelOperation(ctx context.Context, in *GetModelOperationRequest, opts ...grpc.CallOption) (*GetModelOperationResponse, error)
	// Get the details of the latest long-running operation from a user model
	//
	// This method allows requesters to request the status and outcome of
	// long-running operations in a model, such as deployment.
	GetUserLatestModelOperation(ctx context.Context, in *GetUserLatestModelOperationRequest, opts ...grpc.CallOption) (*GetUserLatestModelOperationResponse, error)
	// Get the details of the latest long-running operation from a organization model
	//
	// This method allows requesters to request the status and outcome of
	// long-running operations in a model, such as deployment.
	GetOrganizationLatestModelOperation(ctx context.Context, in *GetOrganizationLatestModelOperationRequest, opts ...grpc.CallOption) (*GetOrganizationLatestModelOperationResponse, error)
}

type modelPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelPublicServiceClient(cc grpc.ClientConnInterface) ModelPublicServiceClient {
	return &modelPublicServiceClient{cc}
}

func (c *modelPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_Liveness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_Readiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListModelDefinitions(ctx context.Context, in *ListModelDefinitionsRequest, opts ...grpc.CallOption) (*ListModelDefinitionsResponse, error) {
	out := new(ListModelDefinitionsResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_ListModelDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListAvailableRegions(ctx context.Context, in *ListAvailableRegionsRequest, opts ...grpc.CallOption) (*ListAvailableRegionsResponse, error) {
	out := new(ListAvailableRegionsResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_ListAvailableRegions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) GetModelDefinition(ctx context.Context, in *GetModelDefinitionRequest, opts ...grpc.CallOption) (*GetModelDefinitionResponse, error) {
	out := new(GetModelDefinitionResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetModelDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_ListModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) LookUpModel(ctx context.Context, in *LookUpModelRequest, opts ...grpc.CallOption) (*LookUpModelResponse, error) {
	out := new(LookUpModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_LookUpModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListUserModels(ctx context.Context, in *ListUserModelsRequest, opts ...grpc.CallOption) (*ListUserModelsResponse, error) {
	out := new(ListUserModelsResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_ListUserModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) CreateUserModel(ctx context.Context, in *CreateUserModelRequest, opts ...grpc.CallOption) (*CreateUserModelResponse, error) {
	out := new(CreateUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_CreateUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) GetUserModel(ctx context.Context, in *GetUserModelRequest, opts ...grpc.CallOption) (*GetUserModelResponse, error) {
	out := new(GetUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) UpdateUserModel(ctx context.Context, in *UpdateUserModelRequest, opts ...grpc.CallOption) (*UpdateUserModelResponse, error) {
	out := new(UpdateUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_UpdateUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) DeleteUserModel(ctx context.Context, in *DeleteUserModelRequest, opts ...grpc.CallOption) (*DeleteUserModelResponse, error) {
	out := new(DeleteUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_DeleteUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) RenameUserModel(ctx context.Context, in *RenameUserModelRequest, opts ...grpc.CallOption) (*RenameUserModelResponse, error) {
	out := new(RenameUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_RenameUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) PublishUserModel(ctx context.Context, in *PublishUserModelRequest, opts ...grpc.CallOption) (*PublishUserModelResponse, error) {
	out := new(PublishUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_PublishUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) UnpublishUserModel(ctx context.Context, in *UnpublishUserModelRequest, opts ...grpc.CallOption) (*UnpublishUserModelResponse, error) {
	out := new(UnpublishUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_UnpublishUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) GetUserModelCard(ctx context.Context, in *GetUserModelCardRequest, opts ...grpc.CallOption) (*GetUserModelCardResponse, error) {
	out := new(GetUserModelCardResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetUserModelCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) WatchUserModel(ctx context.Context, in *WatchUserModelRequest, opts ...grpc.CallOption) (*WatchUserModelResponse, error) {
	out := new(WatchUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_WatchUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) WatchUserLatestModel(ctx context.Context, in *WatchUserLatestModelRequest, opts ...grpc.CallOption) (*WatchUserLatestModelResponse, error) {
	out := new(WatchUserLatestModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_WatchUserLatestModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListUserModelVersions(ctx context.Context, in *ListUserModelVersionsRequest, opts ...grpc.CallOption) (*ListUserModelVersionsResponse, error) {
	out := new(ListUserModelVersionsResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_ListUserModelVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerUserModel(ctx context.Context, in *TriggerUserModelRequest, opts ...grpc.CallOption) (*TriggerUserModelResponse, error) {
	out := new(TriggerUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_TriggerUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerAsyncUserModel(ctx context.Context, in *TriggerAsyncUserModelRequest, opts ...grpc.CallOption) (*TriggerAsyncUserModelResponse, error) {
	out := new(TriggerAsyncUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_TriggerAsyncUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerUserLatestModel(ctx context.Context, in *TriggerUserLatestModelRequest, opts ...grpc.CallOption) (*TriggerUserLatestModelResponse, error) {
	out := new(TriggerUserLatestModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_TriggerUserLatestModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerAsyncUserLatestModel(ctx context.Context, in *TriggerAsyncUserLatestModelRequest, opts ...grpc.CallOption) (*TriggerAsyncUserLatestModelResponse, error) {
	out := new(TriggerAsyncUserLatestModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_TriggerAsyncUserLatestModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerUserModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TriggerUserModelBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelPublicService_ServiceDesc.Streams[0], ModelPublicService_TriggerUserModelBinaryFileUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &modelPublicServiceTriggerUserModelBinaryFileUploadClient{stream}
	return x, nil
}

type ModelPublicService_TriggerUserModelBinaryFileUploadClient interface {
	Send(*TriggerUserModelBinaryFileUploadRequest) error
	CloseAndRecv() (*TriggerUserModelBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type modelPublicServiceTriggerUserModelBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *modelPublicServiceTriggerUserModelBinaryFileUploadClient) Send(m *TriggerUserModelBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelPublicServiceTriggerUserModelBinaryFileUploadClient) CloseAndRecv() (*TriggerUserModelBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TriggerUserModelBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelPublicServiceClient) ListOrganizationModels(ctx context.Context, in *ListOrganizationModelsRequest, opts ...grpc.CallOption) (*ListOrganizationModelsResponse, error) {
	out := new(ListOrganizationModelsResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_ListOrganizationModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) CreateOrganizationModel(ctx context.Context, in *CreateOrganizationModelRequest, opts ...grpc.CallOption) (*CreateOrganizationModelResponse, error) {
	out := new(CreateOrganizationModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_CreateOrganizationModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) GetOrganizationModel(ctx context.Context, in *GetOrganizationModelRequest, opts ...grpc.CallOption) (*GetOrganizationModelResponse, error) {
	out := new(GetOrganizationModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetOrganizationModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) UpdateOrganizationModel(ctx context.Context, in *UpdateOrganizationModelRequest, opts ...grpc.CallOption) (*UpdateOrganizationModelResponse, error) {
	out := new(UpdateOrganizationModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_UpdateOrganizationModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) DeleteOrganizationModel(ctx context.Context, in *DeleteOrganizationModelRequest, opts ...grpc.CallOption) (*DeleteOrganizationModelResponse, error) {
	out := new(DeleteOrganizationModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_DeleteOrganizationModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) RenameOrganizationModel(ctx context.Context, in *RenameOrganizationModelRequest, opts ...grpc.CallOption) (*RenameOrganizationModelResponse, error) {
	out := new(RenameOrganizationModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_RenameOrganizationModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) PublishOrganizationModel(ctx context.Context, in *PublishOrganizationModelRequest, opts ...grpc.CallOption) (*PublishOrganizationModelResponse, error) {
	out := new(PublishOrganizationModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_PublishOrganizationModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) UnpublishOrganizationModel(ctx context.Context, in *UnpublishOrganizationModelRequest, opts ...grpc.CallOption) (*UnpublishOrganizationModelResponse, error) {
	out := new(UnpublishOrganizationModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_UnpublishOrganizationModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) GetOrganizationModelCard(ctx context.Context, in *GetOrganizationModelCardRequest, opts ...grpc.CallOption) (*GetOrganizationModelCardResponse, error) {
	out := new(GetOrganizationModelCardResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetOrganizationModelCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) WatchOrganizationModel(ctx context.Context, in *WatchOrganizationModelRequest, opts ...grpc.CallOption) (*WatchOrganizationModelResponse, error) {
	out := new(WatchOrganizationModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_WatchOrganizationModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) WatchOrganizationLatestModel(ctx context.Context, in *WatchOrganizationLatestModelRequest, opts ...grpc.CallOption) (*WatchOrganizationLatestModelResponse, error) {
	out := new(WatchOrganizationLatestModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_WatchOrganizationLatestModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListOrganizationModelVersions(ctx context.Context, in *ListOrganizationModelVersionsRequest, opts ...grpc.CallOption) (*ListOrganizationModelVersionsResponse, error) {
	out := new(ListOrganizationModelVersionsResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_ListOrganizationModelVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerOrganizationModel(ctx context.Context, in *TriggerOrganizationModelRequest, opts ...grpc.CallOption) (*TriggerOrganizationModelResponse, error) {
	out := new(TriggerOrganizationModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_TriggerOrganizationModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerAsyncOrganizationModel(ctx context.Context, in *TriggerAsyncOrganizationModelRequest, opts ...grpc.CallOption) (*TriggerAsyncOrganizationModelResponse, error) {
	out := new(TriggerAsyncOrganizationModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_TriggerAsyncOrganizationModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerOrganizationLatestModel(ctx context.Context, in *TriggerOrganizationLatestModelRequest, opts ...grpc.CallOption) (*TriggerOrganizationLatestModelResponse, error) {
	out := new(TriggerOrganizationLatestModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_TriggerOrganizationLatestModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerAsyncOrganizationLatestModel(ctx context.Context, in *TriggerAsyncOrganizationLatestModelRequest, opts ...grpc.CallOption) (*TriggerAsyncOrganizationLatestModelResponse, error) {
	out := new(TriggerAsyncOrganizationLatestModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_TriggerAsyncOrganizationLatestModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerOrganizationModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TriggerOrganizationModelBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelPublicService_ServiceDesc.Streams[1], ModelPublicService_TriggerOrganizationModelBinaryFileUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &modelPublicServiceTriggerOrganizationModelBinaryFileUploadClient{stream}
	return x, nil
}

type ModelPublicService_TriggerOrganizationModelBinaryFileUploadClient interface {
	Send(*TriggerOrganizationModelBinaryFileUploadRequest) error
	CloseAndRecv() (*TriggerOrganizationModelBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type modelPublicServiceTriggerOrganizationModelBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *modelPublicServiceTriggerOrganizationModelBinaryFileUploadClient) Send(m *TriggerOrganizationModelBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelPublicServiceTriggerOrganizationModelBinaryFileUploadClient) CloseAndRecv() (*TriggerOrganizationModelBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TriggerOrganizationModelBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelPublicServiceClient) GetModelOperation(ctx context.Context, in *GetModelOperationRequest, opts ...grpc.CallOption) (*GetModelOperationResponse, error) {
	out := new(GetModelOperationResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetModelOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) GetUserLatestModelOperation(ctx context.Context, in *GetUserLatestModelOperationRequest, opts ...grpc.CallOption) (*GetUserLatestModelOperationResponse, error) {
	out := new(GetUserLatestModelOperationResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetUserLatestModelOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) GetOrganizationLatestModelOperation(ctx context.Context, in *GetOrganizationLatestModelOperationRequest, opts ...grpc.CallOption) (*GetOrganizationLatestModelOperationResponse, error) {
	out := new(GetOrganizationLatestModelOperationResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetOrganizationLatestModelOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelPublicServiceServer is the server API for ModelPublicService service.
// All implementations should embed UnimplementedModelPublicServiceServer
// for forward compatibility
type ModelPublicServiceServer interface {
	// Check if the model server is alive
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Check if the model server is ready
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// List model definitions
	//
	// Returns a paginated list of model definitions.
	ListModelDefinitions(context.Context, *ListModelDefinitionsRequest) (*ListModelDefinitionsResponse, error)
	// List available regions
	//
	// Returns a paginated list of available regions.
	ListAvailableRegions(context.Context, *ListAvailableRegionsRequest) (*ListAvailableRegionsResponse, error)
	// Get a model definition
	//
	// Returns the details of a model definition.
	GetModelDefinition(context.Context, *GetModelDefinitionRequest) (*GetModelDefinitionResponse, error)
	// List models
	//
	// Returns a paginated list of models.
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// Get a model by UID
	//
	// Returns the details of a model by a permalink defined by the resource UID.
	LookUpModel(context.Context, *LookUpModelRequest) (*LookUpModelResponse, error)
	// List user models
	//
	// Returns a paginated list of models that belong to the specified user. The
	// parent user may be different from the authenticated user, in which case
	// the results will contain the models that are visible to the latter.
	ListUserModels(context.Context, *ListUserModelsRequest) (*ListUserModelsResponse, error)
	// Create a new model
	//
	// Creates a new model under the parenthood of a user. This is an
	// asynchronous endpoint, i.e., the server will not wait for the model to be
	// created in order to respond. Instead, it will return a response with the
	// necessary information to access the result and status of the creation
	// operation.
	CreateUserModel(context.Context, *CreateUserModelRequest) (*CreateUserModelResponse, error)
	// Get a model
	//
	// Returns the detail of a model, accessing it by the model ID and its parent user.
	GetUserModel(context.Context, *GetUserModelRequest) (*GetUserModelResponse, error)
	// Update a model
	//
	// Updates a model, accessing it by its resource name, which is defined by
	// the parent user and the ID of the model.
	//
	// In REST requests, only the supplied model fields will be taken into
	// account when updating the resource.
	UpdateUserModel(context.Context, *UpdateUserModelRequest) (*UpdateUserModelResponse, error)
	// Delete a model
	//
	// Deletes a model, accesing it by its resource name, which is defined by the
	// parent user and the ID of the model.
	DeleteUserModel(context.Context, *DeleteUserModelRequest) (*DeleteUserModelResponse, error)
	// Rename a model
	//
	// Renames a model, accesing it by its resource name, which is defined by the
	// parent user and the ID of the model.
	RenameUserModel(context.Context, *RenameUserModelRequest) (*RenameUserModelResponse, error)
	// Publish a model
	//
	// Updates the visibility in a model to PUBLIC. The model is accessed by its
	// resource name, defined by the model ID and its parent user.
	PublishUserModel(context.Context, *PublishUserModelRequest) (*PublishUserModelResponse, error)
	// Unpublish a model
	//
	// Updates the visibility in a model to PRIVATE. The model is accessed by its
	// resource name, defined by the model ID and its parent user.
	UnpublishUserModel(context.Context, *UnpublishUserModelRequest) (*UnpublishUserModelResponse, error)
	// Get a model card
	//
	// Returns the README file that accompanies a model, describing it and
	// enhancing it with metadata. The model is accessed by its resource name.
	GetUserModelCard(context.Context, *GetUserModelCardRequest) (*GetUserModelCardResponse, error)
	// Watch the state of a model version
	//
	// Returns the state of a model. The deploy / undeploy actions take some
	// time, during which a model will be in an UNSPECIFIED state. This endpoint
	// allows clients to track the state and progress of the model.
	WatchUserModel(context.Context, *WatchUserModelRequest) (*WatchUserModelResponse, error)
	// Watch the state of the latest model version
	//
	// Returns the state of the latest model version. The deploy / undeploy actions take some
	// time, during which a model will be in an UNSPECIFIED state. This endpoint
	// allows clients to track the state and progress of the model.
	WatchUserLatestModel(context.Context, *WatchUserLatestModelRequest) (*WatchUserLatestModelResponse, error)
	// List user model versions
	//
	// Returns a paginated list of version of a model namespace that belong to the specified user.
	// Contains model version and digest.
	ListUserModelVersions(context.Context, *ListUserModelVersionsRequest) (*ListUserModelVersionsResponse, error)
	// Trigger model inference
	//
	// Triggers a deployed model to infer the result of a set of task or
	// questions.
	TriggerUserModel(context.Context, *TriggerUserModelRequest) (*TriggerUserModelResponse, error)
	// Trigger model inference asynchronously
	//
	// Triggers a deployed model to infer the result of a set of task or
	// questions.
	TriggerAsyncUserModel(context.Context, *TriggerAsyncUserModelRequest) (*TriggerAsyncUserModelResponse, error)
	// Trigger model inference
	//
	// Triggers the latest deployed model version to infer the result of a set of task or
	// questions.
	TriggerUserLatestModel(context.Context, *TriggerUserLatestModelRequest) (*TriggerUserLatestModelResponse, error)
	// Trigger model inference asynchronously
	//
	// Triggers the latest deployed model version to infer the result of a set of task or
	// questions.
	TriggerAsyncUserLatestModel(context.Context, *TriggerAsyncUserLatestModelRequest) (*TriggerAsyncUserLatestModelResponse, error)
	// Trigger model inference with a binary input
	//
	// Triggers a deployed model to infer the result of a task or question,
	// submitted as a binary file.
	TriggerUserModelBinaryFileUpload(ModelPublicService_TriggerUserModelBinaryFileUploadServer) error
	// List organization models
	//
	// Returns a paginated list of models that belong to the specified organization. The
	// parent organization may be different from the authenticated organization, in which case
	// the results will contain the models that are visible to the latter.
	ListOrganizationModels(context.Context, *ListOrganizationModelsRequest) (*ListOrganizationModelsResponse, error)
	// Create a new model
	//
	// Creates a new model under the parenthood of an organization. This is an
	// asynchronous endpoint, i.e., the server will not wait for the model to be
	// created in order to respond. Instead, it will return a response with the
	// necessary information to access the result and status of the creation
	// operation.
	CreateOrganizationModel(context.Context, *CreateOrganizationModelRequest) (*CreateOrganizationModelResponse, error)
	// Get a model
	//
	// Returns the detail of a model, accessing it by the model ID and its parent organization.
	GetOrganizationModel(context.Context, *GetOrganizationModelRequest) (*GetOrganizationModelResponse, error)
	// Update a model
	//
	// Updates a model, accessing it by its resource name, which is defined by
	// the parent organization and the ID of the model.
	//
	// In REST requests, only the supplied model fields will be taken into
	// account when updating the resource.
	UpdateOrganizationModel(context.Context, *UpdateOrganizationModelRequest) (*UpdateOrganizationModelResponse, error)
	// Delete a model
	//
	// Deletes a model, accesing it by its resource name, which is defined by the
	// parent organization and the ID of the model.
	DeleteOrganizationModel(context.Context, *DeleteOrganizationModelRequest) (*DeleteOrganizationModelResponse, error)
	// Rename a model
	//
	// Renames a model, accesing it by its resource name, which is defined by the
	// parent organization and the ID of the model.
	RenameOrganizationModel(context.Context, *RenameOrganizationModelRequest) (*RenameOrganizationModelResponse, error)
	// Publish a model
	//
	// Updates the visibility in a model to PUBLIC. The model is accessed by its
	// resource name, defined by the model ID and its parent organization.
	PublishOrganizationModel(context.Context, *PublishOrganizationModelRequest) (*PublishOrganizationModelResponse, error)
	// Unpublish a model
	//
	// Updates the visibility in a model to PRIVATE. The model is accessed by its
	// resource name, defined by the model ID and its parent organization.
	UnpublishOrganizationModel(context.Context, *UnpublishOrganizationModelRequest) (*UnpublishOrganizationModelResponse, error)
	// Get a model card
	//
	// Returns the README file that accompanies a model, describing it and
	// enhancing it with metadata. The model is accessed by its resource name.
	GetOrganizationModelCard(context.Context, *GetOrganizationModelCardRequest) (*GetOrganizationModelCardResponse, error)
	// Watch the state of a model version
	//
	// Returns the state of a model. The deploy / undeploy actions take some
	// time, during which a model will be in an UNSPECIFIED state. This endpoint
	// allows clients to track the state and progress of the model.
	WatchOrganizationModel(context.Context, *WatchOrganizationModelRequest) (*WatchOrganizationModelResponse, error)
	// Watch the state of the latest model version
	//
	// Returns the state of the latest model version. The deploy / undeploy actions take some
	// time, during which a model will be in an UNSPECIFIED state. This endpoint
	// allows clients to track the state and progress of the model.
	WatchOrganizationLatestModel(context.Context, *WatchOrganizationLatestModelRequest) (*WatchOrganizationLatestModelResponse, error)
	// List organization model versions
	//
	// Returns a paginated list of version of a model namespace that belong to the specified organization.
	// Contains model version and digest.
	ListOrganizationModelVersions(context.Context, *ListOrganizationModelVersionsRequest) (*ListOrganizationModelVersionsResponse, error)
	// Trigger model inference
	//
	// Triggers a deployed model to infer the result of a set of task or
	// questions.
	TriggerOrganizationModel(context.Context, *TriggerOrganizationModelRequest) (*TriggerOrganizationModelResponse, error)
	// Trigger model inference asynchronously
	//
	// Triggers a deployed model to infer the result of a set of task or
	// questions.
	TriggerAsyncOrganizationModel(context.Context, *TriggerAsyncOrganizationModelRequest) (*TriggerAsyncOrganizationModelResponse, error)
	// Trigger model inference
	//
	// Triggers the latest deployed model version to infer the result of a set of task or
	// questions.
	TriggerOrganizationLatestModel(context.Context, *TriggerOrganizationLatestModelRequest) (*TriggerOrganizationLatestModelResponse, error)
	// Trigger model inference asynchronously
	//
	// Triggers the latest deployed model version to infer the result of a set of task or
	// questions.
	TriggerAsyncOrganizationLatestModel(context.Context, *TriggerAsyncOrganizationLatestModelRequest) (*TriggerAsyncOrganizationLatestModelResponse, error)
	// Trigger model inference with a binary input
	//
	// Triggers a deployed model to infer the result of a task or question,
	// submitted as a binary file.
	TriggerOrganizationModelBinaryFileUpload(ModelPublicService_TriggerOrganizationModelBinaryFileUploadServer) error
	// Get the details of a long-running operation
	//
	// This method allows requesters to request the status and outcome of
	// long-running operations in a model, such as deployment.
	GetModelOperation(context.Context, *GetModelOperationRequest) (*GetModelOperationResponse, error)
	// Get the details of the latest long-running operation from a user model
	//
	// This method allows requesters to request the status and outcome of
	// long-running operations in a model, such as deployment.
	GetUserLatestModelOperation(context.Context, *GetUserLatestModelOperationRequest) (*GetUserLatestModelOperationResponse, error)
	// Get the details of the latest long-running operation from a organization model
	//
	// This method allows requesters to request the status and outcome of
	// long-running operations in a model, such as deployment.
	GetOrganizationLatestModelOperation(context.Context, *GetOrganizationLatestModelOperationRequest) (*GetOrganizationLatestModelOperationResponse, error)
}

// UnimplementedModelPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedModelPublicServiceServer struct {
}

func (UnimplementedModelPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedModelPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedModelPublicServiceServer) ListModelDefinitions(context.Context, *ListModelDefinitionsRequest) (*ListModelDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelDefinitions not implemented")
}
func (UnimplementedModelPublicServiceServer) ListAvailableRegions(context.Context, *ListAvailableRegionsRequest) (*ListAvailableRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAvailableRegions not implemented")
}
func (UnimplementedModelPublicServiceServer) GetModelDefinition(context.Context, *GetModelDefinitionRequest) (*GetModelDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelDefinition not implemented")
}
func (UnimplementedModelPublicServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedModelPublicServiceServer) LookUpModel(context.Context, *LookUpModelRequest) (*LookUpModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpModel not implemented")
}
func (UnimplementedModelPublicServiceServer) ListUserModels(context.Context, *ListUserModelsRequest) (*ListUserModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserModels not implemented")
}
func (UnimplementedModelPublicServiceServer) CreateUserModel(context.Context, *CreateUserModelRequest) (*CreateUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) GetUserModel(context.Context, *GetUserModelRequest) (*GetUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) UpdateUserModel(context.Context, *UpdateUserModelRequest) (*UpdateUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) DeleteUserModel(context.Context, *DeleteUserModelRequest) (*DeleteUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) RenameUserModel(context.Context, *RenameUserModelRequest) (*RenameUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) PublishUserModel(context.Context, *PublishUserModelRequest) (*PublishUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) UnpublishUserModel(context.Context, *UnpublishUserModelRequest) (*UnpublishUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) GetUserModelCard(context.Context, *GetUserModelCardRequest) (*GetUserModelCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserModelCard not implemented")
}
func (UnimplementedModelPublicServiceServer) WatchUserModel(context.Context, *WatchUserModelRequest) (*WatchUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) WatchUserLatestModel(context.Context, *WatchUserLatestModelRequest) (*WatchUserLatestModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchUserLatestModel not implemented")
}
func (UnimplementedModelPublicServiceServer) ListUserModelVersions(context.Context, *ListUserModelVersionsRequest) (*ListUserModelVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserModelVersions not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerUserModel(context.Context, *TriggerUserModelRequest) (*TriggerUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerAsyncUserModel(context.Context, *TriggerAsyncUserModelRequest) (*TriggerAsyncUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerUserLatestModel(context.Context, *TriggerUserLatestModelRequest) (*TriggerUserLatestModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerUserLatestModel not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerAsyncUserLatestModel(context.Context, *TriggerAsyncUserLatestModelRequest) (*TriggerAsyncUserLatestModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncUserLatestModel not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerUserModelBinaryFileUpload(ModelPublicService_TriggerUserModelBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method TriggerUserModelBinaryFileUpload not implemented")
}
func (UnimplementedModelPublicServiceServer) ListOrganizationModels(context.Context, *ListOrganizationModelsRequest) (*ListOrganizationModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationModels not implemented")
}
func (UnimplementedModelPublicServiceServer) CreateOrganizationModel(context.Context, *CreateOrganizationModelRequest) (*CreateOrganizationModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationModel not implemented")
}
func (UnimplementedModelPublicServiceServer) GetOrganizationModel(context.Context, *GetOrganizationModelRequest) (*GetOrganizationModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationModel not implemented")
}
func (UnimplementedModelPublicServiceServer) UpdateOrganizationModel(context.Context, *UpdateOrganizationModelRequest) (*UpdateOrganizationModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationModel not implemented")
}
func (UnimplementedModelPublicServiceServer) DeleteOrganizationModel(context.Context, *DeleteOrganizationModelRequest) (*DeleteOrganizationModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationModel not implemented")
}
func (UnimplementedModelPublicServiceServer) RenameOrganizationModel(context.Context, *RenameOrganizationModelRequest) (*RenameOrganizationModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameOrganizationModel not implemented")
}
func (UnimplementedModelPublicServiceServer) PublishOrganizationModel(context.Context, *PublishOrganizationModelRequest) (*PublishOrganizationModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishOrganizationModel not implemented")
}
func (UnimplementedModelPublicServiceServer) UnpublishOrganizationModel(context.Context, *UnpublishOrganizationModelRequest) (*UnpublishOrganizationModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishOrganizationModel not implemented")
}
func (UnimplementedModelPublicServiceServer) GetOrganizationModelCard(context.Context, *GetOrganizationModelCardRequest) (*GetOrganizationModelCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationModelCard not implemented")
}
func (UnimplementedModelPublicServiceServer) WatchOrganizationModel(context.Context, *WatchOrganizationModelRequest) (*WatchOrganizationModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchOrganizationModel not implemented")
}
func (UnimplementedModelPublicServiceServer) WatchOrganizationLatestModel(context.Context, *WatchOrganizationLatestModelRequest) (*WatchOrganizationLatestModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchOrganizationLatestModel not implemented")
}
func (UnimplementedModelPublicServiceServer) ListOrganizationModelVersions(context.Context, *ListOrganizationModelVersionsRequest) (*ListOrganizationModelVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationModelVersions not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerOrganizationModel(context.Context, *TriggerOrganizationModelRequest) (*TriggerOrganizationModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerOrganizationModel not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerAsyncOrganizationModel(context.Context, *TriggerAsyncOrganizationModelRequest) (*TriggerAsyncOrganizationModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncOrganizationModel not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerOrganizationLatestModel(context.Context, *TriggerOrganizationLatestModelRequest) (*TriggerOrganizationLatestModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerOrganizationLatestModel not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerAsyncOrganizationLatestModel(context.Context, *TriggerAsyncOrganizationLatestModelRequest) (*TriggerAsyncOrganizationLatestModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncOrganizationLatestModel not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerOrganizationModelBinaryFileUpload(ModelPublicService_TriggerOrganizationModelBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method TriggerOrganizationModelBinaryFileUpload not implemented")
}
func (UnimplementedModelPublicServiceServer) GetModelOperation(context.Context, *GetModelOperationRequest) (*GetModelOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelOperation not implemented")
}
func (UnimplementedModelPublicServiceServer) GetUserLatestModelOperation(context.Context, *GetUserLatestModelOperationRequest) (*GetUserLatestModelOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLatestModelOperation not implemented")
}
func (UnimplementedModelPublicServiceServer) GetOrganizationLatestModelOperation(context.Context, *GetOrganizationLatestModelOperationRequest) (*GetOrganizationLatestModelOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationLatestModelOperation not implemented")
}

// UnsafeModelPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelPublicServiceServer will
// result in compilation errors.
type UnsafeModelPublicServiceServer interface {
	mustEmbedUnimplementedModelPublicServiceServer()
}

func RegisterModelPublicServiceServer(s grpc.ServiceRegistrar, srv ModelPublicServiceServer) {
	s.RegisterService(&ModelPublicService_ServiceDesc, srv)
}

func _ModelPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListModelDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListModelDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_ListModelDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListModelDefinitions(ctx, req.(*ListModelDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListAvailableRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAvailableRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListAvailableRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_ListAvailableRegions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListAvailableRegions(ctx, req.(*ListAvailableRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_GetModelDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetModelDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetModelDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetModelDefinition(ctx, req.(*GetModelDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_LookUpModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).LookUpModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_LookUpModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).LookUpModel(ctx, req.(*LookUpModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListUserModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListUserModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_ListUserModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListUserModels(ctx, req.(*ListUserModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_CreateUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).CreateUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_CreateUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).CreateUserModel(ctx, req.(*CreateUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_GetUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetUserModel(ctx, req.(*GetUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_UpdateUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).UpdateUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_UpdateUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).UpdateUserModel(ctx, req.(*UpdateUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_DeleteUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).DeleteUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_DeleteUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).DeleteUserModel(ctx, req.(*DeleteUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_RenameUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).RenameUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_RenameUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).RenameUserModel(ctx, req.(*RenameUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_PublishUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).PublishUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_PublishUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).PublishUserModel(ctx, req.(*PublishUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_UnpublishUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).UnpublishUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_UnpublishUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).UnpublishUserModel(ctx, req.(*UnpublishUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_GetUserModelCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserModelCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetUserModelCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetUserModelCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetUserModelCard(ctx, req.(*GetUserModelCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_WatchUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).WatchUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_WatchUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).WatchUserModel(ctx, req.(*WatchUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_WatchUserLatestModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchUserLatestModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).WatchUserLatestModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_WatchUserLatestModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).WatchUserLatestModel(ctx, req.(*WatchUserLatestModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListUserModelVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserModelVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListUserModelVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_ListUserModelVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListUserModelVersions(ctx, req.(*ListUserModelVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).TriggerUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_TriggerUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).TriggerUserModel(ctx, req.(*TriggerUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerAsyncUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).TriggerAsyncUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_TriggerAsyncUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).TriggerAsyncUserModel(ctx, req.(*TriggerAsyncUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerUserLatestModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerUserLatestModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).TriggerUserLatestModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_TriggerUserLatestModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).TriggerUserLatestModel(ctx, req.(*TriggerUserLatestModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerAsyncUserLatestModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncUserLatestModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).TriggerAsyncUserLatestModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_TriggerAsyncUserLatestModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).TriggerAsyncUserLatestModel(ctx, req.(*TriggerAsyncUserLatestModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerUserModelBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelPublicServiceServer).TriggerUserModelBinaryFileUpload(&modelPublicServiceTriggerUserModelBinaryFileUploadServer{stream})
}

type ModelPublicService_TriggerUserModelBinaryFileUploadServer interface {
	SendAndClose(*TriggerUserModelBinaryFileUploadResponse) error
	Recv() (*TriggerUserModelBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type modelPublicServiceTriggerUserModelBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *modelPublicServiceTriggerUserModelBinaryFileUploadServer) SendAndClose(m *TriggerUserModelBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelPublicServiceTriggerUserModelBinaryFileUploadServer) Recv() (*TriggerUserModelBinaryFileUploadRequest, error) {
	m := new(TriggerUserModelBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelPublicService_ListOrganizationModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListOrganizationModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_ListOrganizationModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListOrganizationModels(ctx, req.(*ListOrganizationModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_CreateOrganizationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).CreateOrganizationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_CreateOrganizationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).CreateOrganizationModel(ctx, req.(*CreateOrganizationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_GetOrganizationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetOrganizationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetOrganizationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetOrganizationModel(ctx, req.(*GetOrganizationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_UpdateOrganizationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).UpdateOrganizationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_UpdateOrganizationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).UpdateOrganizationModel(ctx, req.(*UpdateOrganizationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_DeleteOrganizationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).DeleteOrganizationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_DeleteOrganizationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).DeleteOrganizationModel(ctx, req.(*DeleteOrganizationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_RenameOrganizationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameOrganizationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).RenameOrganizationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_RenameOrganizationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).RenameOrganizationModel(ctx, req.(*RenameOrganizationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_PublishOrganizationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishOrganizationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).PublishOrganizationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_PublishOrganizationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).PublishOrganizationModel(ctx, req.(*PublishOrganizationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_UnpublishOrganizationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishOrganizationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).UnpublishOrganizationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_UnpublishOrganizationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).UnpublishOrganizationModel(ctx, req.(*UnpublishOrganizationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_GetOrganizationModelCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationModelCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetOrganizationModelCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetOrganizationModelCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetOrganizationModelCard(ctx, req.(*GetOrganizationModelCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_WatchOrganizationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchOrganizationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).WatchOrganizationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_WatchOrganizationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).WatchOrganizationModel(ctx, req.(*WatchOrganizationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_WatchOrganizationLatestModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchOrganizationLatestModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).WatchOrganizationLatestModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_WatchOrganizationLatestModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).WatchOrganizationLatestModel(ctx, req.(*WatchOrganizationLatestModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListOrganizationModelVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationModelVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListOrganizationModelVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_ListOrganizationModelVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListOrganizationModelVersions(ctx, req.(*ListOrganizationModelVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerOrganizationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerOrganizationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).TriggerOrganizationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_TriggerOrganizationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).TriggerOrganizationModel(ctx, req.(*TriggerOrganizationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerAsyncOrganizationModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncOrganizationModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).TriggerAsyncOrganizationModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_TriggerAsyncOrganizationModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).TriggerAsyncOrganizationModel(ctx, req.(*TriggerAsyncOrganizationModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerOrganizationLatestModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerOrganizationLatestModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).TriggerOrganizationLatestModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_TriggerOrganizationLatestModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).TriggerOrganizationLatestModel(ctx, req.(*TriggerOrganizationLatestModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerAsyncOrganizationLatestModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncOrganizationLatestModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).TriggerAsyncOrganizationLatestModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_TriggerAsyncOrganizationLatestModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).TriggerAsyncOrganizationLatestModel(ctx, req.(*TriggerAsyncOrganizationLatestModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerOrganizationModelBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelPublicServiceServer).TriggerOrganizationModelBinaryFileUpload(&modelPublicServiceTriggerOrganizationModelBinaryFileUploadServer{stream})
}

type ModelPublicService_TriggerOrganizationModelBinaryFileUploadServer interface {
	SendAndClose(*TriggerOrganizationModelBinaryFileUploadResponse) error
	Recv() (*TriggerOrganizationModelBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type modelPublicServiceTriggerOrganizationModelBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *modelPublicServiceTriggerOrganizationModelBinaryFileUploadServer) SendAndClose(m *TriggerOrganizationModelBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelPublicServiceTriggerOrganizationModelBinaryFileUploadServer) Recv() (*TriggerOrganizationModelBinaryFileUploadRequest, error) {
	m := new(TriggerOrganizationModelBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelPublicService_GetModelOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetModelOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetModelOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetModelOperation(ctx, req.(*GetModelOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_GetUserLatestModelOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLatestModelOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetUserLatestModelOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetUserLatestModelOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetUserLatestModelOperation(ctx, req.(*GetUserLatestModelOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_GetOrganizationLatestModelOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationLatestModelOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetOrganizationLatestModelOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetOrganizationLatestModelOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetOrganizationLatestModelOperation(ctx, req.(*GetOrganizationLatestModelOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelPublicService_ServiceDesc is the grpc.ServiceDesc for ModelPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.model.v1alpha.ModelPublicService",
	HandlerType: (*ModelPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _ModelPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _ModelPublicService_Readiness_Handler,
		},
		{
			MethodName: "ListModelDefinitions",
			Handler:    _ModelPublicService_ListModelDefinitions_Handler,
		},
		{
			MethodName: "ListAvailableRegions",
			Handler:    _ModelPublicService_ListAvailableRegions_Handler,
		},
		{
			MethodName: "GetModelDefinition",
			Handler:    _ModelPublicService_GetModelDefinition_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _ModelPublicService_ListModels_Handler,
		},
		{
			MethodName: "LookUpModel",
			Handler:    _ModelPublicService_LookUpModel_Handler,
		},
		{
			MethodName: "ListUserModels",
			Handler:    _ModelPublicService_ListUserModels_Handler,
		},
		{
			MethodName: "CreateUserModel",
			Handler:    _ModelPublicService_CreateUserModel_Handler,
		},
		{
			MethodName: "GetUserModel",
			Handler:    _ModelPublicService_GetUserModel_Handler,
		},
		{
			MethodName: "UpdateUserModel",
			Handler:    _ModelPublicService_UpdateUserModel_Handler,
		},
		{
			MethodName: "DeleteUserModel",
			Handler:    _ModelPublicService_DeleteUserModel_Handler,
		},
		{
			MethodName: "RenameUserModel",
			Handler:    _ModelPublicService_RenameUserModel_Handler,
		},
		{
			MethodName: "PublishUserModel",
			Handler:    _ModelPublicService_PublishUserModel_Handler,
		},
		{
			MethodName: "UnpublishUserModel",
			Handler:    _ModelPublicService_UnpublishUserModel_Handler,
		},
		{
			MethodName: "GetUserModelCard",
			Handler:    _ModelPublicService_GetUserModelCard_Handler,
		},
		{
			MethodName: "WatchUserModel",
			Handler:    _ModelPublicService_WatchUserModel_Handler,
		},
		{
			MethodName: "WatchUserLatestModel",
			Handler:    _ModelPublicService_WatchUserLatestModel_Handler,
		},
		{
			MethodName: "ListUserModelVersions",
			Handler:    _ModelPublicService_ListUserModelVersions_Handler,
		},
		{
			MethodName: "TriggerUserModel",
			Handler:    _ModelPublicService_TriggerUserModel_Handler,
		},
		{
			MethodName: "TriggerAsyncUserModel",
			Handler:    _ModelPublicService_TriggerAsyncUserModel_Handler,
		},
		{
			MethodName: "TriggerUserLatestModel",
			Handler:    _ModelPublicService_TriggerUserLatestModel_Handler,
		},
		{
			MethodName: "TriggerAsyncUserLatestModel",
			Handler:    _ModelPublicService_TriggerAsyncUserLatestModel_Handler,
		},
		{
			MethodName: "ListOrganizationModels",
			Handler:    _ModelPublicService_ListOrganizationModels_Handler,
		},
		{
			MethodName: "CreateOrganizationModel",
			Handler:    _ModelPublicService_CreateOrganizationModel_Handler,
		},
		{
			MethodName: "GetOrganizationModel",
			Handler:    _ModelPublicService_GetOrganizationModel_Handler,
		},
		{
			MethodName: "UpdateOrganizationModel",
			Handler:    _ModelPublicService_UpdateOrganizationModel_Handler,
		},
		{
			MethodName: "DeleteOrganizationModel",
			Handler:    _ModelPublicService_DeleteOrganizationModel_Handler,
		},
		{
			MethodName: "RenameOrganizationModel",
			Handler:    _ModelPublicService_RenameOrganizationModel_Handler,
		},
		{
			MethodName: "PublishOrganizationModel",
			Handler:    _ModelPublicService_PublishOrganizationModel_Handler,
		},
		{
			MethodName: "UnpublishOrganizationModel",
			Handler:    _ModelPublicService_UnpublishOrganizationModel_Handler,
		},
		{
			MethodName: "GetOrganizationModelCard",
			Handler:    _ModelPublicService_GetOrganizationModelCard_Handler,
		},
		{
			MethodName: "WatchOrganizationModel",
			Handler:    _ModelPublicService_WatchOrganizationModel_Handler,
		},
		{
			MethodName: "WatchOrganizationLatestModel",
			Handler:    _ModelPublicService_WatchOrganizationLatestModel_Handler,
		},
		{
			MethodName: "ListOrganizationModelVersions",
			Handler:    _ModelPublicService_ListOrganizationModelVersions_Handler,
		},
		{
			MethodName: "TriggerOrganizationModel",
			Handler:    _ModelPublicService_TriggerOrganizationModel_Handler,
		},
		{
			MethodName: "TriggerAsyncOrganizationModel",
			Handler:    _ModelPublicService_TriggerAsyncOrganizationModel_Handler,
		},
		{
			MethodName: "TriggerOrganizationLatestModel",
			Handler:    _ModelPublicService_TriggerOrganizationLatestModel_Handler,
		},
		{
			MethodName: "TriggerAsyncOrganizationLatestModel",
			Handler:    _ModelPublicService_TriggerAsyncOrganizationLatestModel_Handler,
		},
		{
			MethodName: "GetModelOperation",
			Handler:    _ModelPublicService_GetModelOperation_Handler,
		},
		{
			MethodName: "GetUserLatestModelOperation",
			Handler:    _ModelPublicService_GetUserLatestModelOperation_Handler,
		},
		{
			MethodName: "GetOrganizationLatestModelOperation",
			Handler:    _ModelPublicService_GetOrganizationLatestModelOperation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TriggerUserModelBinaryFileUpload",
			Handler:       _ModelPublicService_TriggerUserModelBinaryFileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TriggerOrganizationModelBinaryFileUpload",
			Handler:       _ModelPublicService_TriggerOrganizationModelBinaryFileUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "model/model/v1alpha/model_public_service.proto",
}
