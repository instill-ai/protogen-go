// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: model/model/v1alpha/model_public_service.proto

package modelv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ModelPublicService_Liveness_FullMethodName                     = "/model.model.v1alpha.ModelPublicService/Liveness"
	ModelPublicService_Readiness_FullMethodName                    = "/model.model.v1alpha.ModelPublicService/Readiness"
	ModelPublicService_ListModelDefinitions_FullMethodName         = "/model.model.v1alpha.ModelPublicService/ListModelDefinitions"
	ModelPublicService_GetModelDefinition_FullMethodName           = "/model.model.v1alpha.ModelPublicService/GetModelDefinition"
	ModelPublicService_ListModels_FullMethodName                   = "/model.model.v1alpha.ModelPublicService/ListModels"
	ModelPublicService_CreateModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/CreateModel"
	ModelPublicService_CreateModelBinaryFileUpload_FullMethodName  = "/model.model.v1alpha.ModelPublicService/CreateModelBinaryFileUpload"
	ModelPublicService_GetModel_FullMethodName                     = "/model.model.v1alpha.ModelPublicService/GetModel"
	ModelPublicService_UpdateModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/UpdateModel"
	ModelPublicService_DeleteModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/DeleteModel"
	ModelPublicService_LookUpModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/LookUpModel"
	ModelPublicService_RenameModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/RenameModel"
	ModelPublicService_PublishModel_FullMethodName                 = "/model.model.v1alpha.ModelPublicService/PublishModel"
	ModelPublicService_UnpublishModel_FullMethodName               = "/model.model.v1alpha.ModelPublicService/UnpublishModel"
	ModelPublicService_DeployModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/DeployModel"
	ModelPublicService_UndeployModel_FullMethodName                = "/model.model.v1alpha.ModelPublicService/UndeployModel"
	ModelPublicService_GetModelCard_FullMethodName                 = "/model.model.v1alpha.ModelPublicService/GetModelCard"
	ModelPublicService_WatchModel_FullMethodName                   = "/model.model.v1alpha.ModelPublicService/WatchModel"
	ModelPublicService_TriggerModel_FullMethodName                 = "/model.model.v1alpha.ModelPublicService/TriggerModel"
	ModelPublicService_TriggerModelBinaryFileUpload_FullMethodName = "/model.model.v1alpha.ModelPublicService/TriggerModelBinaryFileUpload"
	ModelPublicService_TestModel_FullMethodName                    = "/model.model.v1alpha.ModelPublicService/TestModel"
	ModelPublicService_TestModelBinaryFileUpload_FullMethodName    = "/model.model.v1alpha.ModelPublicService/TestModelBinaryFileUpload"
	ModelPublicService_GetModelOperation_FullMethodName            = "/model.model.v1alpha.ModelPublicService/GetModelOperation"
)

// ModelPublicServiceClient is the client API for ModelPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelPublicServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// ListModelDefinitions method receives a ListModelDefinitionsRequest message
	// and returns a ListModelDefinitionsResponse
	ListModelDefinitions(ctx context.Context, in *ListModelDefinitionsRequest, opts ...grpc.CallOption) (*ListModelDefinitionsResponse, error)
	// GetModelDefinition method receives a GetModelDefinitionRequest message and
	// returns a GetModelDefinitionResponse
	GetModelDefinition(ctx context.Context, in *GetModelDefinitionRequest, opts ...grpc.CallOption) (*GetModelDefinitionResponse, error)
	// ListModels method receives a ListModelsRequest message and returns a
	// ListModelsResponse
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// CreateModel method receives a CreateModelRequest message and returns a
	// CreateModelResponse
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error)
	// CreateModelBinaryFileUpload method receives a
	// CreateModelBinaryFileUploadRequest message and returns a
	// CreateModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST /v1alpha/models:multipart"
	CreateModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_CreateModelBinaryFileUploadClient, error)
	// GetModel method receives a GetModelRequest message and returns a
	// GetModelResponse
	GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*GetModelResponse, error)
	// UpdateModel method receives a UpdateModelRequest message and returns a
	// UpdateModelResponse
	UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*UpdateModelResponse, error)
	// DeleteModel method receives a DeleteModelRequest message and returns a
	// DeleteModelResponse
	DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*DeleteModelResponse, error)
	// LookUpModel method receives a LookUpModelRequest message and returns a
	// LookUpModelResponse
	LookUpModel(ctx context.Context, in *LookUpModelRequest, opts ...grpc.CallOption) (*LookUpModelResponse, error)
	// RenameModel method rename a model
	RenameModel(ctx context.Context, in *RenameModelRequest, opts ...grpc.CallOption) (*RenameModelResponse, error)
	// PublishModel method receives a PublishModelRequest message and returns a
	// PublishModelResponse
	PublishModel(ctx context.Context, in *PublishModelRequest, opts ...grpc.CallOption) (*PublishModelResponse, error)
	// UnpublishModel method receives a UnpublishModelRequest message and returns
	// a UnpublishModelResponse
	UnpublishModel(ctx context.Context, in *UnpublishModelRequest, opts ...grpc.CallOption) (*UnpublishModelResponse, error)
	// DeployModel deploy a model to online state
	DeployModel(ctx context.Context, in *DeployModelRequest, opts ...grpc.CallOption) (*DeployModelResponse, error)
	// UndeployModel undeploy a model to offline state
	UndeployModel(ctx context.Context, in *UndeployModelRequest, opts ...grpc.CallOption) (*UndeployModelResponse, error)
	// GetModelCard method receives a GetModelCardRequest message
	// and returns a GetModelCardResponse
	GetModelCard(ctx context.Context, in *GetModelCardRequest, opts ...grpc.CallOption) (*GetModelCardResponse, error)
	// WatchModel method receives a WatchModelRequest message
	// and returns a WatchModelResponse
	WatchModel(ctx context.Context, in *WatchModelRequest, opts ...grpc.CallOption) (*WatchModelResponse, error)
	// /////////////////////////////////////////////////////
	//
	// TriggerModel method receives a TriggerModelRequest message
	// and returns a TriggerModelResponse message.
	TriggerModel(ctx context.Context, in *TriggerModelRequest, opts ...grpc.CallOption) (*TriggerModelResponse, error)
	// TriggerModelBinaryFileUpload method receives a
	// TriggerModelBinaryFileUploadRequest message and returns a
	// TriggerModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST/v1alpha/{name=models/*}/trigger-multipart"
	TriggerModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TriggerModelBinaryFileUploadClient, error)
	// TestModel method receives a TestModelRequest message
	// and returns a TestModelResponse message.
	TestModel(ctx context.Context, in *TestModelRequest, opts ...grpc.CallOption) (*TestModelResponse, error)
	// TestModelBinaryFileUpload method receives a
	// TestModelBinaryFileUploadRequest message and returns a
	// TestModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST/v1alpha/{name=models/*}/test-multipart"
	TestModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TestModelBinaryFileUploadClient, error)
	// GetModelOperation method receives a
	// GetModelOperationRequest message and returns a
	// GetModelOperationResponse message.
	GetModelOperation(ctx context.Context, in *GetModelOperationRequest, opts ...grpc.CallOption) (*GetModelOperationResponse, error)
}

type modelPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelPublicServiceClient(cc grpc.ClientConnInterface) ModelPublicServiceClient {
	return &modelPublicServiceClient{cc}
}

func (c *modelPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_Liveness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_Readiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListModelDefinitions(ctx context.Context, in *ListModelDefinitionsRequest, opts ...grpc.CallOption) (*ListModelDefinitionsResponse, error) {
	out := new(ListModelDefinitionsResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_ListModelDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) GetModelDefinition(ctx context.Context, in *GetModelDefinitionRequest, opts ...grpc.CallOption) (*GetModelDefinitionResponse, error) {
	out := new(GetModelDefinitionResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetModelDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_ListModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error) {
	out := new(CreateModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_CreateModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) CreateModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_CreateModelBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelPublicService_ServiceDesc.Streams[0], ModelPublicService_CreateModelBinaryFileUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &modelPublicServiceCreateModelBinaryFileUploadClient{stream}
	return x, nil
}

type ModelPublicService_CreateModelBinaryFileUploadClient interface {
	Send(*CreateModelBinaryFileUploadRequest) error
	CloseAndRecv() (*CreateModelBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type modelPublicServiceCreateModelBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *modelPublicServiceCreateModelBinaryFileUploadClient) Send(m *CreateModelBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelPublicServiceCreateModelBinaryFileUploadClient) CloseAndRecv() (*CreateModelBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateModelBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelPublicServiceClient) GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*GetModelResponse, error) {
	out := new(GetModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*UpdateModelResponse, error) {
	out := new(UpdateModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_UpdateModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*DeleteModelResponse, error) {
	out := new(DeleteModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_DeleteModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) LookUpModel(ctx context.Context, in *LookUpModelRequest, opts ...grpc.CallOption) (*LookUpModelResponse, error) {
	out := new(LookUpModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_LookUpModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) RenameModel(ctx context.Context, in *RenameModelRequest, opts ...grpc.CallOption) (*RenameModelResponse, error) {
	out := new(RenameModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_RenameModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) PublishModel(ctx context.Context, in *PublishModelRequest, opts ...grpc.CallOption) (*PublishModelResponse, error) {
	out := new(PublishModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_PublishModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) UnpublishModel(ctx context.Context, in *UnpublishModelRequest, opts ...grpc.CallOption) (*UnpublishModelResponse, error) {
	out := new(UnpublishModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_UnpublishModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) DeployModel(ctx context.Context, in *DeployModelRequest, opts ...grpc.CallOption) (*DeployModelResponse, error) {
	out := new(DeployModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_DeployModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) UndeployModel(ctx context.Context, in *UndeployModelRequest, opts ...grpc.CallOption) (*UndeployModelResponse, error) {
	out := new(UndeployModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_UndeployModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) GetModelCard(ctx context.Context, in *GetModelCardRequest, opts ...grpc.CallOption) (*GetModelCardResponse, error) {
	out := new(GetModelCardResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetModelCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) WatchModel(ctx context.Context, in *WatchModelRequest, opts ...grpc.CallOption) (*WatchModelResponse, error) {
	out := new(WatchModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_WatchModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerModel(ctx context.Context, in *TriggerModelRequest, opts ...grpc.CallOption) (*TriggerModelResponse, error) {
	out := new(TriggerModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_TriggerModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TriggerModelBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelPublicService_ServiceDesc.Streams[1], ModelPublicService_TriggerModelBinaryFileUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &modelPublicServiceTriggerModelBinaryFileUploadClient{stream}
	return x, nil
}

type ModelPublicService_TriggerModelBinaryFileUploadClient interface {
	Send(*TriggerModelBinaryFileUploadRequest) error
	CloseAndRecv() (*TriggerModelBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type modelPublicServiceTriggerModelBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *modelPublicServiceTriggerModelBinaryFileUploadClient) Send(m *TriggerModelBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelPublicServiceTriggerModelBinaryFileUploadClient) CloseAndRecv() (*TriggerModelBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TriggerModelBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelPublicServiceClient) TestModel(ctx context.Context, in *TestModelRequest, opts ...grpc.CallOption) (*TestModelResponse, error) {
	out := new(TestModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_TestModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TestModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TestModelBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelPublicService_ServiceDesc.Streams[2], ModelPublicService_TestModelBinaryFileUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &modelPublicServiceTestModelBinaryFileUploadClient{stream}
	return x, nil
}

type ModelPublicService_TestModelBinaryFileUploadClient interface {
	Send(*TestModelBinaryFileUploadRequest) error
	CloseAndRecv() (*TestModelBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type modelPublicServiceTestModelBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *modelPublicServiceTestModelBinaryFileUploadClient) Send(m *TestModelBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelPublicServiceTestModelBinaryFileUploadClient) CloseAndRecv() (*TestModelBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestModelBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelPublicServiceClient) GetModelOperation(ctx context.Context, in *GetModelOperationRequest, opts ...grpc.CallOption) (*GetModelOperationResponse, error) {
	out := new(GetModelOperationResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetModelOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelPublicServiceServer is the server API for ModelPublicService service.
// All implementations should embed UnimplementedModelPublicServiceServer
// for forward compatibility
type ModelPublicServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// ListModelDefinitions method receives a ListModelDefinitionsRequest message
	// and returns a ListModelDefinitionsResponse
	ListModelDefinitions(context.Context, *ListModelDefinitionsRequest) (*ListModelDefinitionsResponse, error)
	// GetModelDefinition method receives a GetModelDefinitionRequest message and
	// returns a GetModelDefinitionResponse
	GetModelDefinition(context.Context, *GetModelDefinitionRequest) (*GetModelDefinitionResponse, error)
	// ListModels method receives a ListModelsRequest message and returns a
	// ListModelsResponse
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// CreateModel method receives a CreateModelRequest message and returns a
	// CreateModelResponse
	CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error)
	// CreateModelBinaryFileUpload method receives a
	// CreateModelBinaryFileUploadRequest message and returns a
	// CreateModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST /v1alpha/models:multipart"
	CreateModelBinaryFileUpload(ModelPublicService_CreateModelBinaryFileUploadServer) error
	// GetModel method receives a GetModelRequest message and returns a
	// GetModelResponse
	GetModel(context.Context, *GetModelRequest) (*GetModelResponse, error)
	// UpdateModel method receives a UpdateModelRequest message and returns a
	// UpdateModelResponse
	UpdateModel(context.Context, *UpdateModelRequest) (*UpdateModelResponse, error)
	// DeleteModel method receives a DeleteModelRequest message and returns a
	// DeleteModelResponse
	DeleteModel(context.Context, *DeleteModelRequest) (*DeleteModelResponse, error)
	// LookUpModel method receives a LookUpModelRequest message and returns a
	// LookUpModelResponse
	LookUpModel(context.Context, *LookUpModelRequest) (*LookUpModelResponse, error)
	// RenameModel method rename a model
	RenameModel(context.Context, *RenameModelRequest) (*RenameModelResponse, error)
	// PublishModel method receives a PublishModelRequest message and returns a
	// PublishModelResponse
	PublishModel(context.Context, *PublishModelRequest) (*PublishModelResponse, error)
	// UnpublishModel method receives a UnpublishModelRequest message and returns
	// a UnpublishModelResponse
	UnpublishModel(context.Context, *UnpublishModelRequest) (*UnpublishModelResponse, error)
	// DeployModel deploy a model to online state
	DeployModel(context.Context, *DeployModelRequest) (*DeployModelResponse, error)
	// UndeployModel undeploy a model to offline state
	UndeployModel(context.Context, *UndeployModelRequest) (*UndeployModelResponse, error)
	// GetModelCard method receives a GetModelCardRequest message
	// and returns a GetModelCardResponse
	GetModelCard(context.Context, *GetModelCardRequest) (*GetModelCardResponse, error)
	// WatchModel method receives a WatchModelRequest message
	// and returns a WatchModelResponse
	WatchModel(context.Context, *WatchModelRequest) (*WatchModelResponse, error)
	// /////////////////////////////////////////////////////
	//
	// TriggerModel method receives a TriggerModelRequest message
	// and returns a TriggerModelResponse message.
	TriggerModel(context.Context, *TriggerModelRequest) (*TriggerModelResponse, error)
	// TriggerModelBinaryFileUpload method receives a
	// TriggerModelBinaryFileUploadRequest message and returns a
	// TriggerModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST/v1alpha/{name=models/*}/trigger-multipart"
	TriggerModelBinaryFileUpload(ModelPublicService_TriggerModelBinaryFileUploadServer) error
	// TestModel method receives a TestModelRequest message
	// and returns a TestModelResponse message.
	TestModel(context.Context, *TestModelRequest) (*TestModelResponse, error)
	// TestModelBinaryFileUpload method receives a
	// TestModelBinaryFileUploadRequest message and returns a
	// TestModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST/v1alpha/{name=models/*}/test-multipart"
	TestModelBinaryFileUpload(ModelPublicService_TestModelBinaryFileUploadServer) error
	// GetModelOperation method receives a
	// GetModelOperationRequest message and returns a
	// GetModelOperationResponse message.
	GetModelOperation(context.Context, *GetModelOperationRequest) (*GetModelOperationResponse, error)
}

// UnimplementedModelPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedModelPublicServiceServer struct {
}

func (UnimplementedModelPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedModelPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedModelPublicServiceServer) ListModelDefinitions(context.Context, *ListModelDefinitionsRequest) (*ListModelDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelDefinitions not implemented")
}
func (UnimplementedModelPublicServiceServer) GetModelDefinition(context.Context, *GetModelDefinitionRequest) (*GetModelDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelDefinition not implemented")
}
func (UnimplementedModelPublicServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedModelPublicServiceServer) CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedModelPublicServiceServer) CreateModelBinaryFileUpload(ModelPublicService_CreateModelBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateModelBinaryFileUpload not implemented")
}
func (UnimplementedModelPublicServiceServer) GetModel(context.Context, *GetModelRequest) (*GetModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedModelPublicServiceServer) UpdateModel(context.Context, *UpdateModelRequest) (*UpdateModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedModelPublicServiceServer) DeleteModel(context.Context, *DeleteModelRequest) (*DeleteModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (UnimplementedModelPublicServiceServer) LookUpModel(context.Context, *LookUpModelRequest) (*LookUpModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpModel not implemented")
}
func (UnimplementedModelPublicServiceServer) RenameModel(context.Context, *RenameModelRequest) (*RenameModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameModel not implemented")
}
func (UnimplementedModelPublicServiceServer) PublishModel(context.Context, *PublishModelRequest) (*PublishModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishModel not implemented")
}
func (UnimplementedModelPublicServiceServer) UnpublishModel(context.Context, *UnpublishModelRequest) (*UnpublishModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishModel not implemented")
}
func (UnimplementedModelPublicServiceServer) DeployModel(context.Context, *DeployModelRequest) (*DeployModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployModel not implemented")
}
func (UnimplementedModelPublicServiceServer) UndeployModel(context.Context, *UndeployModelRequest) (*UndeployModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeployModel not implemented")
}
func (UnimplementedModelPublicServiceServer) GetModelCard(context.Context, *GetModelCardRequest) (*GetModelCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelCard not implemented")
}
func (UnimplementedModelPublicServiceServer) WatchModel(context.Context, *WatchModelRequest) (*WatchModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchModel not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerModel(context.Context, *TriggerModelRequest) (*TriggerModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerModel not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerModelBinaryFileUpload(ModelPublicService_TriggerModelBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method TriggerModelBinaryFileUpload not implemented")
}
func (UnimplementedModelPublicServiceServer) TestModel(context.Context, *TestModelRequest) (*TestModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestModel not implemented")
}
func (UnimplementedModelPublicServiceServer) TestModelBinaryFileUpload(ModelPublicService_TestModelBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method TestModelBinaryFileUpload not implemented")
}
func (UnimplementedModelPublicServiceServer) GetModelOperation(context.Context, *GetModelOperationRequest) (*GetModelOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelOperation not implemented")
}

// UnsafeModelPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelPublicServiceServer will
// result in compilation errors.
type UnsafeModelPublicServiceServer interface {
	mustEmbedUnimplementedModelPublicServiceServer()
}

func RegisterModelPublicServiceServer(s grpc.ServiceRegistrar, srv ModelPublicServiceServer) {
	s.RegisterService(&ModelPublicService_ServiceDesc, srv)
}

func _ModelPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListModelDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListModelDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_ListModelDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListModelDefinitions(ctx, req.(*ListModelDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_GetModelDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetModelDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetModelDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetModelDefinition(ctx, req.(*GetModelDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_CreateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_CreateModelBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelPublicServiceServer).CreateModelBinaryFileUpload(&modelPublicServiceCreateModelBinaryFileUploadServer{stream})
}

type ModelPublicService_CreateModelBinaryFileUploadServer interface {
	SendAndClose(*CreateModelBinaryFileUploadResponse) error
	Recv() (*CreateModelBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type modelPublicServiceCreateModelBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *modelPublicServiceCreateModelBinaryFileUploadServer) SendAndClose(m *CreateModelBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelPublicServiceCreateModelBinaryFileUploadServer) Recv() (*CreateModelBinaryFileUploadRequest, error) {
	m := new(CreateModelBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelPublicService_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_UpdateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).UpdateModel(ctx, req.(*UpdateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_DeleteModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).DeleteModel(ctx, req.(*DeleteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_LookUpModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).LookUpModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_LookUpModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).LookUpModel(ctx, req.(*LookUpModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_RenameModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).RenameModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_RenameModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).RenameModel(ctx, req.(*RenameModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_PublishModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).PublishModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_PublishModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).PublishModel(ctx, req.(*PublishModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_UnpublishModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).UnpublishModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_UnpublishModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).UnpublishModel(ctx, req.(*UnpublishModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_DeployModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).DeployModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_DeployModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).DeployModel(ctx, req.(*DeployModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_UndeployModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).UndeployModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_UndeployModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).UndeployModel(ctx, req.(*UndeployModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_GetModelCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetModelCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetModelCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetModelCard(ctx, req.(*GetModelCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_WatchModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).WatchModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_WatchModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).WatchModel(ctx, req.(*WatchModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).TriggerModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_TriggerModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).TriggerModel(ctx, req.(*TriggerModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerModelBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelPublicServiceServer).TriggerModelBinaryFileUpload(&modelPublicServiceTriggerModelBinaryFileUploadServer{stream})
}

type ModelPublicService_TriggerModelBinaryFileUploadServer interface {
	SendAndClose(*TriggerModelBinaryFileUploadResponse) error
	Recv() (*TriggerModelBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type modelPublicServiceTriggerModelBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *modelPublicServiceTriggerModelBinaryFileUploadServer) SendAndClose(m *TriggerModelBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelPublicServiceTriggerModelBinaryFileUploadServer) Recv() (*TriggerModelBinaryFileUploadRequest, error) {
	m := new(TriggerModelBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelPublicService_TestModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).TestModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_TestModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).TestModel(ctx, req.(*TestModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TestModelBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelPublicServiceServer).TestModelBinaryFileUpload(&modelPublicServiceTestModelBinaryFileUploadServer{stream})
}

type ModelPublicService_TestModelBinaryFileUploadServer interface {
	SendAndClose(*TestModelBinaryFileUploadResponse) error
	Recv() (*TestModelBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type modelPublicServiceTestModelBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *modelPublicServiceTestModelBinaryFileUploadServer) SendAndClose(m *TestModelBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelPublicServiceTestModelBinaryFileUploadServer) Recv() (*TestModelBinaryFileUploadRequest, error) {
	m := new(TestModelBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelPublicService_GetModelOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetModelOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetModelOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetModelOperation(ctx, req.(*GetModelOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelPublicService_ServiceDesc is the grpc.ServiceDesc for ModelPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.model.v1alpha.ModelPublicService",
	HandlerType: (*ModelPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _ModelPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _ModelPublicService_Readiness_Handler,
		},
		{
			MethodName: "ListModelDefinitions",
			Handler:    _ModelPublicService_ListModelDefinitions_Handler,
		},
		{
			MethodName: "GetModelDefinition",
			Handler:    _ModelPublicService_GetModelDefinition_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _ModelPublicService_ListModels_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _ModelPublicService_CreateModel_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _ModelPublicService_GetModel_Handler,
		},
		{
			MethodName: "UpdateModel",
			Handler:    _ModelPublicService_UpdateModel_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _ModelPublicService_DeleteModel_Handler,
		},
		{
			MethodName: "LookUpModel",
			Handler:    _ModelPublicService_LookUpModel_Handler,
		},
		{
			MethodName: "RenameModel",
			Handler:    _ModelPublicService_RenameModel_Handler,
		},
		{
			MethodName: "PublishModel",
			Handler:    _ModelPublicService_PublishModel_Handler,
		},
		{
			MethodName: "UnpublishModel",
			Handler:    _ModelPublicService_UnpublishModel_Handler,
		},
		{
			MethodName: "DeployModel",
			Handler:    _ModelPublicService_DeployModel_Handler,
		},
		{
			MethodName: "UndeployModel",
			Handler:    _ModelPublicService_UndeployModel_Handler,
		},
		{
			MethodName: "GetModelCard",
			Handler:    _ModelPublicService_GetModelCard_Handler,
		},
		{
			MethodName: "WatchModel",
			Handler:    _ModelPublicService_WatchModel_Handler,
		},
		{
			MethodName: "TriggerModel",
			Handler:    _ModelPublicService_TriggerModel_Handler,
		},
		{
			MethodName: "TestModel",
			Handler:    _ModelPublicService_TestModel_Handler,
		},
		{
			MethodName: "GetModelOperation",
			Handler:    _ModelPublicService_GetModelOperation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateModelBinaryFileUpload",
			Handler:       _ModelPublicService_CreateModelBinaryFileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TriggerModelBinaryFileUpload",
			Handler:       _ModelPublicService_TriggerModelBinaryFileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TestModelBinaryFileUpload",
			Handler:       _ModelPublicService_TestModelBinaryFileUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "model/model/v1alpha/model_public_service.proto",
}
