// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: model/model/v1alpha/model_public_service.proto

package modelv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ModelPublicService_Liveness_FullMethodName                         = "/model.model.v1alpha.ModelPublicService/Liveness"
	ModelPublicService_Readiness_FullMethodName                        = "/model.model.v1alpha.ModelPublicService/Readiness"
	ModelPublicService_ListModelDefinitions_FullMethodName             = "/model.model.v1alpha.ModelPublicService/ListModelDefinitions"
	ModelPublicService_GetModelDefinition_FullMethodName               = "/model.model.v1alpha.ModelPublicService/GetModelDefinition"
	ModelPublicService_ListModels_FullMethodName                       = "/model.model.v1alpha.ModelPublicService/ListModels"
	ModelPublicService_ListUserModels_FullMethodName                   = "/model.model.v1alpha.ModelPublicService/ListUserModels"
	ModelPublicService_CreateUserModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/CreateUserModel"
	ModelPublicService_CreateUserModelBinaryFileUpload_FullMethodName  = "/model.model.v1alpha.ModelPublicService/CreateUserModelBinaryFileUpload"
	ModelPublicService_GetUserModel_FullMethodName                     = "/model.model.v1alpha.ModelPublicService/GetUserModel"
	ModelPublicService_UpdateUserModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/UpdateUserModel"
	ModelPublicService_DeleteUserModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/DeleteUserModel"
	ModelPublicService_LookUpUserModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/LookUpUserModel"
	ModelPublicService_RenameUserModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/RenameUserModel"
	ModelPublicService_PublishUserModel_FullMethodName                 = "/model.model.v1alpha.ModelPublicService/PublishUserModel"
	ModelPublicService_UnpublishUserModel_FullMethodName               = "/model.model.v1alpha.ModelPublicService/UnpublishUserModel"
	ModelPublicService_DeployUserModel_FullMethodName                  = "/model.model.v1alpha.ModelPublicService/DeployUserModel"
	ModelPublicService_UndeployUserModel_FullMethodName                = "/model.model.v1alpha.ModelPublicService/UndeployUserModel"
	ModelPublicService_GetUserModelCard_FullMethodName                 = "/model.model.v1alpha.ModelPublicService/GetUserModelCard"
	ModelPublicService_WatchUserModel_FullMethodName                   = "/model.model.v1alpha.ModelPublicService/WatchUserModel"
	ModelPublicService_TriggerUserModel_FullMethodName                 = "/model.model.v1alpha.ModelPublicService/TriggerUserModel"
	ModelPublicService_TriggerUserModelBinaryFileUpload_FullMethodName = "/model.model.v1alpha.ModelPublicService/TriggerUserModelBinaryFileUpload"
	ModelPublicService_TestUserModel_FullMethodName                    = "/model.model.v1alpha.ModelPublicService/TestUserModel"
	ModelPublicService_TestUserModelBinaryFileUpload_FullMethodName    = "/model.model.v1alpha.ModelPublicService/TestUserModelBinaryFileUpload"
	ModelPublicService_GetModelOperation_FullMethodName                = "/model.model.v1alpha.ModelPublicService/GetModelOperation"
)

// ModelPublicServiceClient is the client API for ModelPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelPublicServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// ListModelDefinitions method receives a ListModelDefinitionsRequest message
	// and returns a ListModelDefinitionsResponse
	ListModelDefinitions(ctx context.Context, in *ListModelDefinitionsRequest, opts ...grpc.CallOption) (*ListModelDefinitionsResponse, error)
	// GetModelDefinition method receives a GetModelDefinitionRequest message and
	// returns a GetModelDefinitionResponse
	GetModelDefinition(ctx context.Context, in *GetModelDefinitionRequest, opts ...grpc.CallOption) (*GetModelDefinitionResponse, error)
	// ListModels method receives a ListModelsRequest message and returns a
	// ListModelsResponse
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// LisUsertModels method receives a ListUserModelsRequest message and returns a
	// ListUserModelsResponse
	ListUserModels(ctx context.Context, in *ListUserModelsRequest, opts ...grpc.CallOption) (*ListUserModelsResponse, error)
	// CreateUserModel method receives a CreateUserModelRequest message and returns a
	// CreateUserModelResponse
	CreateUserModel(ctx context.Context, in *CreateUserModelRequest, opts ...grpc.CallOption) (*CreateUserModelResponse, error)
	// CreateUserModelBinaryFileUpload method receives a
	// CreateUserModelBinaryFileUploadRequest message and returns a
	// CreateUserModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST /v1alpha/users/*/models:multipart"
	CreateUserModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_CreateUserModelBinaryFileUploadClient, error)
	// GetUserModel method receives a GetUserModelRequest message and returns a
	// GetUserModelResponse
	GetUserModel(ctx context.Context, in *GetUserModelRequest, opts ...grpc.CallOption) (*GetUserModelResponse, error)
	// UpdateUserModel method receives a UpdateUserModelRequest message and returns a
	// UpdateUserModelResponse
	UpdateUserModel(ctx context.Context, in *UpdateUserModelRequest, opts ...grpc.CallOption) (*UpdateUserModelResponse, error)
	// DeleteUserModel method receives a DeleteUserModelRequest message and returns a
	// DeleteUserModelResponse
	DeleteUserModel(ctx context.Context, in *DeleteUserModelRequest, opts ...grpc.CallOption) (*DeleteUserModelResponse, error)
	// LookUpUserModel method receives a LookUpUserModelRequest message and returns a
	// LookUpUserModelResponse
	LookUpUserModel(ctx context.Context, in *LookUpUserModelRequest, opts ...grpc.CallOption) (*LookUpUserModelResponse, error)
	// RenameUserModel method rename a model
	RenameUserModel(ctx context.Context, in *RenameUserModelRequest, opts ...grpc.CallOption) (*RenameUserModelResponse, error)
	// PublishUserModel method receives a PublisUserhModelRequest message and returns a
	// PublishUserModelResponse
	PublishUserModel(ctx context.Context, in *PublishUserModelRequest, opts ...grpc.CallOption) (*PublishUserModelResponse, error)
	// UnpublishUserModel method receives a UnpublishUserModelRequest message and returns
	// a UnpublishUserModelResponse
	UnpublishUserModel(ctx context.Context, in *UnpublishUserModelRequest, opts ...grpc.CallOption) (*UnpublishUserModelResponse, error)
	// DeployUserModel deploy a model to online state
	DeployUserModel(ctx context.Context, in *DeployUserModelRequest, opts ...grpc.CallOption) (*DeployUserModelResponse, error)
	// UndeployUserModel undeploy a model to offline state
	UndeployUserModel(ctx context.Context, in *UndeployUserModelRequest, opts ...grpc.CallOption) (*UndeployUserModelResponse, error)
	// GetUserModelCard method receives a GetUserModelCardRequest message
	// and returns a GetUserModelCardResponseUser
	GetUserModelCard(ctx context.Context, in *GetUserModelCardRequest, opts ...grpc.CallOption) (*GetUserModelCardResponse, error)
	// WatchUserModel method receives a WatchUserModelRequest message
	// and returns a WatchModelResponse
	WatchUserModel(ctx context.Context, in *WatchUserModelRequest, opts ...grpc.CallOption) (*WatchUserModelResponse, error)
	// /////////////////////////////////////////////////////
	//
	// TriggerUserModel method receives a TriggerUserModelRequest message
	// and returns a TriggerUserModelResponse message.
	TriggerUserModel(ctx context.Context, in *TriggerUserModelRequest, opts ...grpc.CallOption) (*TriggerUserModelResponse, error)
	// TriggerUserModelBinaryFileUpload method receives a
	// TriggerUserModelBinaryFileUploadRequest message and returns a
	// TriggerUserModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST/v1alpha/{name=models/*}/trigger-multipart"
	TriggerUserModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TriggerUserModelBinaryFileUploadClient, error)
	// TestUserModel method receives a TestUserModelRequest message
	// and returns a TestUserModelResponse message.
	TestUserModel(ctx context.Context, in *TestUserModelRequest, opts ...grpc.CallOption) (*TestUserModelResponse, error)
	// TestUserModelBinaryFileUpload method receives a
	// TestUserModelBinaryFileUploadRequest message and returns a
	// TestUserModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST/v1alpha/{name=users/*/models/*}/test-multipart"
	TestUserModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TestUserModelBinaryFileUploadClient, error)
	// GetModelOperation method receives a
	// GetModelOperationRequest message and returns a
	// GetModelOperationResponse message.
	GetModelOperation(ctx context.Context, in *GetModelOperationRequest, opts ...grpc.CallOption) (*GetModelOperationResponse, error)
}

type modelPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelPublicServiceClient(cc grpc.ClientConnInterface) ModelPublicServiceClient {
	return &modelPublicServiceClient{cc}
}

func (c *modelPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_Liveness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_Readiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListModelDefinitions(ctx context.Context, in *ListModelDefinitionsRequest, opts ...grpc.CallOption) (*ListModelDefinitionsResponse, error) {
	out := new(ListModelDefinitionsResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_ListModelDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) GetModelDefinition(ctx context.Context, in *GetModelDefinitionRequest, opts ...grpc.CallOption) (*GetModelDefinitionResponse, error) {
	out := new(GetModelDefinitionResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetModelDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_ListModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListUserModels(ctx context.Context, in *ListUserModelsRequest, opts ...grpc.CallOption) (*ListUserModelsResponse, error) {
	out := new(ListUserModelsResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_ListUserModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) CreateUserModel(ctx context.Context, in *CreateUserModelRequest, opts ...grpc.CallOption) (*CreateUserModelResponse, error) {
	out := new(CreateUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_CreateUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) CreateUserModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_CreateUserModelBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelPublicService_ServiceDesc.Streams[0], ModelPublicService_CreateUserModelBinaryFileUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &modelPublicServiceCreateUserModelBinaryFileUploadClient{stream}
	return x, nil
}

type ModelPublicService_CreateUserModelBinaryFileUploadClient interface {
	Send(*CreateUserModelBinaryFileUploadRequest) error
	CloseAndRecv() (*CreateUserModelBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type modelPublicServiceCreateUserModelBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *modelPublicServiceCreateUserModelBinaryFileUploadClient) Send(m *CreateUserModelBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelPublicServiceCreateUserModelBinaryFileUploadClient) CloseAndRecv() (*CreateUserModelBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateUserModelBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelPublicServiceClient) GetUserModel(ctx context.Context, in *GetUserModelRequest, opts ...grpc.CallOption) (*GetUserModelResponse, error) {
	out := new(GetUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) UpdateUserModel(ctx context.Context, in *UpdateUserModelRequest, opts ...grpc.CallOption) (*UpdateUserModelResponse, error) {
	out := new(UpdateUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_UpdateUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) DeleteUserModel(ctx context.Context, in *DeleteUserModelRequest, opts ...grpc.CallOption) (*DeleteUserModelResponse, error) {
	out := new(DeleteUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_DeleteUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) LookUpUserModel(ctx context.Context, in *LookUpUserModelRequest, opts ...grpc.CallOption) (*LookUpUserModelResponse, error) {
	out := new(LookUpUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_LookUpUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) RenameUserModel(ctx context.Context, in *RenameUserModelRequest, opts ...grpc.CallOption) (*RenameUserModelResponse, error) {
	out := new(RenameUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_RenameUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) PublishUserModel(ctx context.Context, in *PublishUserModelRequest, opts ...grpc.CallOption) (*PublishUserModelResponse, error) {
	out := new(PublishUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_PublishUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) UnpublishUserModel(ctx context.Context, in *UnpublishUserModelRequest, opts ...grpc.CallOption) (*UnpublishUserModelResponse, error) {
	out := new(UnpublishUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_UnpublishUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) DeployUserModel(ctx context.Context, in *DeployUserModelRequest, opts ...grpc.CallOption) (*DeployUserModelResponse, error) {
	out := new(DeployUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_DeployUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) UndeployUserModel(ctx context.Context, in *UndeployUserModelRequest, opts ...grpc.CallOption) (*UndeployUserModelResponse, error) {
	out := new(UndeployUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_UndeployUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) GetUserModelCard(ctx context.Context, in *GetUserModelCardRequest, opts ...grpc.CallOption) (*GetUserModelCardResponse, error) {
	out := new(GetUserModelCardResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetUserModelCard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) WatchUserModel(ctx context.Context, in *WatchUserModelRequest, opts ...grpc.CallOption) (*WatchUserModelResponse, error) {
	out := new(WatchUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_WatchUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerUserModel(ctx context.Context, in *TriggerUserModelRequest, opts ...grpc.CallOption) (*TriggerUserModelResponse, error) {
	out := new(TriggerUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_TriggerUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerUserModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TriggerUserModelBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelPublicService_ServiceDesc.Streams[1], ModelPublicService_TriggerUserModelBinaryFileUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &modelPublicServiceTriggerUserModelBinaryFileUploadClient{stream}
	return x, nil
}

type ModelPublicService_TriggerUserModelBinaryFileUploadClient interface {
	Send(*TriggerUserModelBinaryFileUploadRequest) error
	CloseAndRecv() (*TriggerUserModelBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type modelPublicServiceTriggerUserModelBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *modelPublicServiceTriggerUserModelBinaryFileUploadClient) Send(m *TriggerUserModelBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelPublicServiceTriggerUserModelBinaryFileUploadClient) CloseAndRecv() (*TriggerUserModelBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TriggerUserModelBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelPublicServiceClient) TestUserModel(ctx context.Context, in *TestUserModelRequest, opts ...grpc.CallOption) (*TestUserModelResponse, error) {
	out := new(TestUserModelResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_TestUserModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TestUserModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TestUserModelBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelPublicService_ServiceDesc.Streams[2], ModelPublicService_TestUserModelBinaryFileUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &modelPublicServiceTestUserModelBinaryFileUploadClient{stream}
	return x, nil
}

type ModelPublicService_TestUserModelBinaryFileUploadClient interface {
	Send(*TestUserModelBinaryFileUploadRequest) error
	CloseAndRecv() (*TestUserModelBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type modelPublicServiceTestUserModelBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *modelPublicServiceTestUserModelBinaryFileUploadClient) Send(m *TestUserModelBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelPublicServiceTestUserModelBinaryFileUploadClient) CloseAndRecv() (*TestUserModelBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestUserModelBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelPublicServiceClient) GetModelOperation(ctx context.Context, in *GetModelOperationRequest, opts ...grpc.CallOption) (*GetModelOperationResponse, error) {
	out := new(GetModelOperationResponse)
	err := c.cc.Invoke(ctx, ModelPublicService_GetModelOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelPublicServiceServer is the server API for ModelPublicService service.
// All implementations should embed UnimplementedModelPublicServiceServer
// for forward compatibility
type ModelPublicServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// ListModelDefinitions method receives a ListModelDefinitionsRequest message
	// and returns a ListModelDefinitionsResponse
	ListModelDefinitions(context.Context, *ListModelDefinitionsRequest) (*ListModelDefinitionsResponse, error)
	// GetModelDefinition method receives a GetModelDefinitionRequest message and
	// returns a GetModelDefinitionResponse
	GetModelDefinition(context.Context, *GetModelDefinitionRequest) (*GetModelDefinitionResponse, error)
	// ListModels method receives a ListModelsRequest message and returns a
	// ListModelsResponse
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// LisUsertModels method receives a ListUserModelsRequest message and returns a
	// ListUserModelsResponse
	ListUserModels(context.Context, *ListUserModelsRequest) (*ListUserModelsResponse, error)
	// CreateUserModel method receives a CreateUserModelRequest message and returns a
	// CreateUserModelResponse
	CreateUserModel(context.Context, *CreateUserModelRequest) (*CreateUserModelResponse, error)
	// CreateUserModelBinaryFileUpload method receives a
	// CreateUserModelBinaryFileUploadRequest message and returns a
	// CreateUserModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST /v1alpha/users/*/models:multipart"
	CreateUserModelBinaryFileUpload(ModelPublicService_CreateUserModelBinaryFileUploadServer) error
	// GetUserModel method receives a GetUserModelRequest message and returns a
	// GetUserModelResponse
	GetUserModel(context.Context, *GetUserModelRequest) (*GetUserModelResponse, error)
	// UpdateUserModel method receives a UpdateUserModelRequest message and returns a
	// UpdateUserModelResponse
	UpdateUserModel(context.Context, *UpdateUserModelRequest) (*UpdateUserModelResponse, error)
	// DeleteUserModel method receives a DeleteUserModelRequest message and returns a
	// DeleteUserModelResponse
	DeleteUserModel(context.Context, *DeleteUserModelRequest) (*DeleteUserModelResponse, error)
	// LookUpUserModel method receives a LookUpUserModelRequest message and returns a
	// LookUpUserModelResponse
	LookUpUserModel(context.Context, *LookUpUserModelRequest) (*LookUpUserModelResponse, error)
	// RenameUserModel method rename a model
	RenameUserModel(context.Context, *RenameUserModelRequest) (*RenameUserModelResponse, error)
	// PublishUserModel method receives a PublisUserhModelRequest message and returns a
	// PublishUserModelResponse
	PublishUserModel(context.Context, *PublishUserModelRequest) (*PublishUserModelResponse, error)
	// UnpublishUserModel method receives a UnpublishUserModelRequest message and returns
	// a UnpublishUserModelResponse
	UnpublishUserModel(context.Context, *UnpublishUserModelRequest) (*UnpublishUserModelResponse, error)
	// DeployUserModel deploy a model to online state
	DeployUserModel(context.Context, *DeployUserModelRequest) (*DeployUserModelResponse, error)
	// UndeployUserModel undeploy a model to offline state
	UndeployUserModel(context.Context, *UndeployUserModelRequest) (*UndeployUserModelResponse, error)
	// GetUserModelCard method receives a GetUserModelCardRequest message
	// and returns a GetUserModelCardResponseUser
	GetUserModelCard(context.Context, *GetUserModelCardRequest) (*GetUserModelCardResponse, error)
	// WatchUserModel method receives a WatchUserModelRequest message
	// and returns a WatchModelResponse
	WatchUserModel(context.Context, *WatchUserModelRequest) (*WatchUserModelResponse, error)
	// /////////////////////////////////////////////////////
	//
	// TriggerUserModel method receives a TriggerUserModelRequest message
	// and returns a TriggerUserModelResponse message.
	TriggerUserModel(context.Context, *TriggerUserModelRequest) (*TriggerUserModelResponse, error)
	// TriggerUserModelBinaryFileUpload method receives a
	// TriggerUserModelBinaryFileUploadRequest message and returns a
	// TriggerUserModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST/v1alpha/{name=models/*}/trigger-multipart"
	TriggerUserModelBinaryFileUpload(ModelPublicService_TriggerUserModelBinaryFileUploadServer) error
	// TestUserModel method receives a TestUserModelRequest message
	// and returns a TestUserModelResponse message.
	TestUserModel(context.Context, *TestUserModelRequest) (*TestUserModelResponse, error)
	// TestUserModelBinaryFileUpload method receives a
	// TestUserModelBinaryFileUploadRequest message and returns a
	// TestUserModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST/v1alpha/{name=users/*/models/*}/test-multipart"
	TestUserModelBinaryFileUpload(ModelPublicService_TestUserModelBinaryFileUploadServer) error
	// GetModelOperation method receives a
	// GetModelOperationRequest message and returns a
	// GetModelOperationResponse message.
	GetModelOperation(context.Context, *GetModelOperationRequest) (*GetModelOperationResponse, error)
}

// UnimplementedModelPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedModelPublicServiceServer struct {
}

func (UnimplementedModelPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedModelPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedModelPublicServiceServer) ListModelDefinitions(context.Context, *ListModelDefinitionsRequest) (*ListModelDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelDefinitions not implemented")
}
func (UnimplementedModelPublicServiceServer) GetModelDefinition(context.Context, *GetModelDefinitionRequest) (*GetModelDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelDefinition not implemented")
}
func (UnimplementedModelPublicServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedModelPublicServiceServer) ListUserModels(context.Context, *ListUserModelsRequest) (*ListUserModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserModels not implemented")
}
func (UnimplementedModelPublicServiceServer) CreateUserModel(context.Context, *CreateUserModelRequest) (*CreateUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) CreateUserModelBinaryFileUpload(ModelPublicService_CreateUserModelBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateUserModelBinaryFileUpload not implemented")
}
func (UnimplementedModelPublicServiceServer) GetUserModel(context.Context, *GetUserModelRequest) (*GetUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) UpdateUserModel(context.Context, *UpdateUserModelRequest) (*UpdateUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) DeleteUserModel(context.Context, *DeleteUserModelRequest) (*DeleteUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) LookUpUserModel(context.Context, *LookUpUserModelRequest) (*LookUpUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) RenameUserModel(context.Context, *RenameUserModelRequest) (*RenameUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) PublishUserModel(context.Context, *PublishUserModelRequest) (*PublishUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) UnpublishUserModel(context.Context, *UnpublishUserModelRequest) (*UnpublishUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) DeployUserModel(context.Context, *DeployUserModelRequest) (*DeployUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) UndeployUserModel(context.Context, *UndeployUserModelRequest) (*UndeployUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeployUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) GetUserModelCard(context.Context, *GetUserModelCardRequest) (*GetUserModelCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserModelCard not implemented")
}
func (UnimplementedModelPublicServiceServer) WatchUserModel(context.Context, *WatchUserModelRequest) (*WatchUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerUserModel(context.Context, *TriggerUserModelRequest) (*TriggerUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerUserModelBinaryFileUpload(ModelPublicService_TriggerUserModelBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method TriggerUserModelBinaryFileUpload not implemented")
}
func (UnimplementedModelPublicServiceServer) TestUserModel(context.Context, *TestUserModelRequest) (*TestUserModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUserModel not implemented")
}
func (UnimplementedModelPublicServiceServer) TestUserModelBinaryFileUpload(ModelPublicService_TestUserModelBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method TestUserModelBinaryFileUpload not implemented")
}
func (UnimplementedModelPublicServiceServer) GetModelOperation(context.Context, *GetModelOperationRequest) (*GetModelOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelOperation not implemented")
}

// UnsafeModelPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelPublicServiceServer will
// result in compilation errors.
type UnsafeModelPublicServiceServer interface {
	mustEmbedUnimplementedModelPublicServiceServer()
}

func RegisterModelPublicServiceServer(s grpc.ServiceRegistrar, srv ModelPublicServiceServer) {
	s.RegisterService(&ModelPublicService_ServiceDesc, srv)
}

func _ModelPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListModelDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListModelDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_ListModelDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListModelDefinitions(ctx, req.(*ListModelDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_GetModelDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetModelDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetModelDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetModelDefinition(ctx, req.(*GetModelDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListUserModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListUserModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_ListUserModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListUserModels(ctx, req.(*ListUserModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_CreateUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).CreateUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_CreateUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).CreateUserModel(ctx, req.(*CreateUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_CreateUserModelBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelPublicServiceServer).CreateUserModelBinaryFileUpload(&modelPublicServiceCreateUserModelBinaryFileUploadServer{stream})
}

type ModelPublicService_CreateUserModelBinaryFileUploadServer interface {
	SendAndClose(*CreateUserModelBinaryFileUploadResponse) error
	Recv() (*CreateUserModelBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type modelPublicServiceCreateUserModelBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *modelPublicServiceCreateUserModelBinaryFileUploadServer) SendAndClose(m *CreateUserModelBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelPublicServiceCreateUserModelBinaryFileUploadServer) Recv() (*CreateUserModelBinaryFileUploadRequest, error) {
	m := new(CreateUserModelBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelPublicService_GetUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetUserModel(ctx, req.(*GetUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_UpdateUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).UpdateUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_UpdateUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).UpdateUserModel(ctx, req.(*UpdateUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_DeleteUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).DeleteUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_DeleteUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).DeleteUserModel(ctx, req.(*DeleteUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_LookUpUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).LookUpUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_LookUpUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).LookUpUserModel(ctx, req.(*LookUpUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_RenameUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).RenameUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_RenameUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).RenameUserModel(ctx, req.(*RenameUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_PublishUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).PublishUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_PublishUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).PublishUserModel(ctx, req.(*PublishUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_UnpublishUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).UnpublishUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_UnpublishUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).UnpublishUserModel(ctx, req.(*UnpublishUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_DeployUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).DeployUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_DeployUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).DeployUserModel(ctx, req.(*DeployUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_UndeployUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).UndeployUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_UndeployUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).UndeployUserModel(ctx, req.(*UndeployUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_GetUserModelCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserModelCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetUserModelCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetUserModelCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetUserModelCard(ctx, req.(*GetUserModelCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_WatchUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).WatchUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_WatchUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).WatchUserModel(ctx, req.(*WatchUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).TriggerUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_TriggerUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).TriggerUserModel(ctx, req.(*TriggerUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerUserModelBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelPublicServiceServer).TriggerUserModelBinaryFileUpload(&modelPublicServiceTriggerUserModelBinaryFileUploadServer{stream})
}

type ModelPublicService_TriggerUserModelBinaryFileUploadServer interface {
	SendAndClose(*TriggerUserModelBinaryFileUploadResponse) error
	Recv() (*TriggerUserModelBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type modelPublicServiceTriggerUserModelBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *modelPublicServiceTriggerUserModelBinaryFileUploadServer) SendAndClose(m *TriggerUserModelBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelPublicServiceTriggerUserModelBinaryFileUploadServer) Recv() (*TriggerUserModelBinaryFileUploadRequest, error) {
	m := new(TriggerUserModelBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelPublicService_TestUserModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestUserModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).TestUserModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_TestUserModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).TestUserModel(ctx, req.(*TestUserModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TestUserModelBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelPublicServiceServer).TestUserModelBinaryFileUpload(&modelPublicServiceTestUserModelBinaryFileUploadServer{stream})
}

type ModelPublicService_TestUserModelBinaryFileUploadServer interface {
	SendAndClose(*TestUserModelBinaryFileUploadResponse) error
	Recv() (*TestUserModelBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type modelPublicServiceTestUserModelBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *modelPublicServiceTestUserModelBinaryFileUploadServer) SendAndClose(m *TestUserModelBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelPublicServiceTestUserModelBinaryFileUploadServer) Recv() (*TestUserModelBinaryFileUploadRequest, error) {
	m := new(TestUserModelBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelPublicService_GetModelOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetModelOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelPublicService_GetModelOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetModelOperation(ctx, req.(*GetModelOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelPublicService_ServiceDesc is the grpc.ServiceDesc for ModelPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.model.v1alpha.ModelPublicService",
	HandlerType: (*ModelPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _ModelPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _ModelPublicService_Readiness_Handler,
		},
		{
			MethodName: "ListModelDefinitions",
			Handler:    _ModelPublicService_ListModelDefinitions_Handler,
		},
		{
			MethodName: "GetModelDefinition",
			Handler:    _ModelPublicService_GetModelDefinition_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _ModelPublicService_ListModels_Handler,
		},
		{
			MethodName: "ListUserModels",
			Handler:    _ModelPublicService_ListUserModels_Handler,
		},
		{
			MethodName: "CreateUserModel",
			Handler:    _ModelPublicService_CreateUserModel_Handler,
		},
		{
			MethodName: "GetUserModel",
			Handler:    _ModelPublicService_GetUserModel_Handler,
		},
		{
			MethodName: "UpdateUserModel",
			Handler:    _ModelPublicService_UpdateUserModel_Handler,
		},
		{
			MethodName: "DeleteUserModel",
			Handler:    _ModelPublicService_DeleteUserModel_Handler,
		},
		{
			MethodName: "LookUpUserModel",
			Handler:    _ModelPublicService_LookUpUserModel_Handler,
		},
		{
			MethodName: "RenameUserModel",
			Handler:    _ModelPublicService_RenameUserModel_Handler,
		},
		{
			MethodName: "PublishUserModel",
			Handler:    _ModelPublicService_PublishUserModel_Handler,
		},
		{
			MethodName: "UnpublishUserModel",
			Handler:    _ModelPublicService_UnpublishUserModel_Handler,
		},
		{
			MethodName: "DeployUserModel",
			Handler:    _ModelPublicService_DeployUserModel_Handler,
		},
		{
			MethodName: "UndeployUserModel",
			Handler:    _ModelPublicService_UndeployUserModel_Handler,
		},
		{
			MethodName: "GetUserModelCard",
			Handler:    _ModelPublicService_GetUserModelCard_Handler,
		},
		{
			MethodName: "WatchUserModel",
			Handler:    _ModelPublicService_WatchUserModel_Handler,
		},
		{
			MethodName: "TriggerUserModel",
			Handler:    _ModelPublicService_TriggerUserModel_Handler,
		},
		{
			MethodName: "TestUserModel",
			Handler:    _ModelPublicService_TestUserModel_Handler,
		},
		{
			MethodName: "GetModelOperation",
			Handler:    _ModelPublicService_GetModelOperation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateUserModelBinaryFileUpload",
			Handler:       _ModelPublicService_CreateUserModelBinaryFileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TriggerUserModelBinaryFileUpload",
			Handler:       _ModelPublicService_TriggerUserModelBinaryFileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TestUserModelBinaryFileUpload",
			Handler:       _ModelPublicService_TestUserModelBinaryFileUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "model/model/v1alpha/model_public_service.proto",
}
