// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: vdp/pipeline/v1beta/pipeline_public_service.proto

package pipelinev1beta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PipelinePublicService_Liveness_FullMethodName                                = "/vdp.pipeline.v1beta.PipelinePublicService/Liveness"
	PipelinePublicService_Readiness_FullMethodName                               = "/vdp.pipeline.v1beta.PipelinePublicService/Readiness"
	PipelinePublicService_GetHubStats_FullMethodName                             = "/vdp.pipeline.v1beta.PipelinePublicService/GetHubStats"
	PipelinePublicService_ListPipelines_FullMethodName                           = "/vdp.pipeline.v1beta.PipelinePublicService/ListPipelines"
	PipelinePublicService_LookUpPipeline_FullMethodName                          = "/vdp.pipeline.v1beta.PipelinePublicService/LookUpPipeline"
	PipelinePublicService_ListNamespacePipelines_FullMethodName                  = "/vdp.pipeline.v1beta.PipelinePublicService/ListNamespacePipelines"
	PipelinePublicService_CreateNamespacePipeline_FullMethodName                 = "/vdp.pipeline.v1beta.PipelinePublicService/CreateNamespacePipeline"
	PipelinePublicService_GetNamespacePipeline_FullMethodName                    = "/vdp.pipeline.v1beta.PipelinePublicService/GetNamespacePipeline"
	PipelinePublicService_UpdateNamespacePipeline_FullMethodName                 = "/vdp.pipeline.v1beta.PipelinePublicService/UpdateNamespacePipeline"
	PipelinePublicService_DeleteNamespacePipeline_FullMethodName                 = "/vdp.pipeline.v1beta.PipelinePublicService/DeleteNamespacePipeline"
	PipelinePublicService_ValidateNamespacePipeline_FullMethodName               = "/vdp.pipeline.v1beta.PipelinePublicService/ValidateNamespacePipeline"
	PipelinePublicService_RenameNamespacePipeline_FullMethodName                 = "/vdp.pipeline.v1beta.PipelinePublicService/RenameNamespacePipeline"
	PipelinePublicService_CloneNamespacePipeline_FullMethodName                  = "/vdp.pipeline.v1beta.PipelinePublicService/CloneNamespacePipeline"
	PipelinePublicService_DispatchPipelineWebhookEvent_FullMethodName            = "/vdp.pipeline.v1beta.PipelinePublicService/DispatchPipelineWebhookEvent"
	PipelinePublicService_TriggerNamespacePipeline_FullMethodName                = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerNamespacePipeline"
	PipelinePublicService_TriggerNamespacePipelineWithStream_FullMethodName      = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerNamespacePipelineWithStream"
	PipelinePublicService_TriggerAsyncNamespacePipeline_FullMethodName           = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerAsyncNamespacePipeline"
	PipelinePublicService_CreateNamespacePipelineRelease_FullMethodName          = "/vdp.pipeline.v1beta.PipelinePublicService/CreateNamespacePipelineRelease"
	PipelinePublicService_ListNamespacePipelineReleases_FullMethodName           = "/vdp.pipeline.v1beta.PipelinePublicService/ListNamespacePipelineReleases"
	PipelinePublicService_GetNamespacePipelineRelease_FullMethodName             = "/vdp.pipeline.v1beta.PipelinePublicService/GetNamespacePipelineRelease"
	PipelinePublicService_UpdateNamespacePipelineRelease_FullMethodName          = "/vdp.pipeline.v1beta.PipelinePublicService/UpdateNamespacePipelineRelease"
	PipelinePublicService_DeleteNamespacePipelineRelease_FullMethodName          = "/vdp.pipeline.v1beta.PipelinePublicService/DeleteNamespacePipelineRelease"
	PipelinePublicService_CloneNamespacePipelineRelease_FullMethodName           = "/vdp.pipeline.v1beta.PipelinePublicService/CloneNamespacePipelineRelease"
	PipelinePublicService_TriggerNamespacePipelineRelease_FullMethodName         = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerNamespacePipelineRelease"
	PipelinePublicService_TriggerAsyncNamespacePipelineRelease_FullMethodName    = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerAsyncNamespacePipelineRelease"
	PipelinePublicService_CreateNamespaceSecret_FullMethodName                   = "/vdp.pipeline.v1beta.PipelinePublicService/CreateNamespaceSecret"
	PipelinePublicService_ListNamespaceSecrets_FullMethodName                    = "/vdp.pipeline.v1beta.PipelinePublicService/ListNamespaceSecrets"
	PipelinePublicService_GetNamespaceSecret_FullMethodName                      = "/vdp.pipeline.v1beta.PipelinePublicService/GetNamespaceSecret"
	PipelinePublicService_UpdateNamespaceSecret_FullMethodName                   = "/vdp.pipeline.v1beta.PipelinePublicService/UpdateNamespaceSecret"
	PipelinePublicService_DeleteNamespaceSecret_FullMethodName                   = "/vdp.pipeline.v1beta.PipelinePublicService/DeleteNamespaceSecret"
	PipelinePublicService_ListComponentDefinitions_FullMethodName                = "/vdp.pipeline.v1beta.PipelinePublicService/ListComponentDefinitions"
	PipelinePublicService_GetOperation_FullMethodName                            = "/vdp.pipeline.v1beta.PipelinePublicService/GetOperation"
	PipelinePublicService_CreateUserPipeline_FullMethodName                      = "/vdp.pipeline.v1beta.PipelinePublicService/CreateUserPipeline"
	PipelinePublicService_ListUserPipelines_FullMethodName                       = "/vdp.pipeline.v1beta.PipelinePublicService/ListUserPipelines"
	PipelinePublicService_GetUserPipeline_FullMethodName                         = "/vdp.pipeline.v1beta.PipelinePublicService/GetUserPipeline"
	PipelinePublicService_UpdateUserPipeline_FullMethodName                      = "/vdp.pipeline.v1beta.PipelinePublicService/UpdateUserPipeline"
	PipelinePublicService_DeleteUserPipeline_FullMethodName                      = "/vdp.pipeline.v1beta.PipelinePublicService/DeleteUserPipeline"
	PipelinePublicService_ValidateUserPipeline_FullMethodName                    = "/vdp.pipeline.v1beta.PipelinePublicService/ValidateUserPipeline"
	PipelinePublicService_RenameUserPipeline_FullMethodName                      = "/vdp.pipeline.v1beta.PipelinePublicService/RenameUserPipeline"
	PipelinePublicService_TriggerUserPipeline_FullMethodName                     = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerUserPipeline"
	PipelinePublicService_TriggerUserPipelineWithStream_FullMethodName           = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerUserPipelineWithStream"
	PipelinePublicService_TriggerAsyncUserPipeline_FullMethodName                = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerAsyncUserPipeline"
	PipelinePublicService_CreateUserPipelineRelease_FullMethodName               = "/vdp.pipeline.v1beta.PipelinePublicService/CreateUserPipelineRelease"
	PipelinePublicService_ListUserPipelineReleases_FullMethodName                = "/vdp.pipeline.v1beta.PipelinePublicService/ListUserPipelineReleases"
	PipelinePublicService_GetUserPipelineRelease_FullMethodName                  = "/vdp.pipeline.v1beta.PipelinePublicService/GetUserPipelineRelease"
	PipelinePublicService_UpdateUserPipelineRelease_FullMethodName               = "/vdp.pipeline.v1beta.PipelinePublicService/UpdateUserPipelineRelease"
	PipelinePublicService_DeleteUserPipelineRelease_FullMethodName               = "/vdp.pipeline.v1beta.PipelinePublicService/DeleteUserPipelineRelease"
	PipelinePublicService_RestoreUserPipelineRelease_FullMethodName              = "/vdp.pipeline.v1beta.PipelinePublicService/RestoreUserPipelineRelease"
	PipelinePublicService_RenameUserPipelineRelease_FullMethodName               = "/vdp.pipeline.v1beta.PipelinePublicService/RenameUserPipelineRelease"
	PipelinePublicService_TriggerUserPipelineRelease_FullMethodName              = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerUserPipelineRelease"
	PipelinePublicService_TriggerAsyncUserPipelineRelease_FullMethodName         = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerAsyncUserPipelineRelease"
	PipelinePublicService_CreateOrganizationPipeline_FullMethodName              = "/vdp.pipeline.v1beta.PipelinePublicService/CreateOrganizationPipeline"
	PipelinePublicService_ListOrganizationPipelines_FullMethodName               = "/vdp.pipeline.v1beta.PipelinePublicService/ListOrganizationPipelines"
	PipelinePublicService_GetOrganizationPipeline_FullMethodName                 = "/vdp.pipeline.v1beta.PipelinePublicService/GetOrganizationPipeline"
	PipelinePublicService_UpdateOrganizationPipeline_FullMethodName              = "/vdp.pipeline.v1beta.PipelinePublicService/UpdateOrganizationPipeline"
	PipelinePublicService_DeleteOrganizationPipeline_FullMethodName              = "/vdp.pipeline.v1beta.PipelinePublicService/DeleteOrganizationPipeline"
	PipelinePublicService_ValidateOrganizationPipeline_FullMethodName            = "/vdp.pipeline.v1beta.PipelinePublicService/ValidateOrganizationPipeline"
	PipelinePublicService_RenameOrganizationPipeline_FullMethodName              = "/vdp.pipeline.v1beta.PipelinePublicService/RenameOrganizationPipeline"
	PipelinePublicService_TriggerOrganizationPipelineStream_FullMethodName       = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerOrganizationPipelineStream"
	PipelinePublicService_TriggerOrganizationPipeline_FullMethodName             = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerOrganizationPipeline"
	PipelinePublicService_TriggerAsyncOrganizationPipeline_FullMethodName        = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerAsyncOrganizationPipeline"
	PipelinePublicService_CreateOrganizationPipelineRelease_FullMethodName       = "/vdp.pipeline.v1beta.PipelinePublicService/CreateOrganizationPipelineRelease"
	PipelinePublicService_ListOrganizationPipelineReleases_FullMethodName        = "/vdp.pipeline.v1beta.PipelinePublicService/ListOrganizationPipelineReleases"
	PipelinePublicService_GetOrganizationPipelineRelease_FullMethodName          = "/vdp.pipeline.v1beta.PipelinePublicService/GetOrganizationPipelineRelease"
	PipelinePublicService_UpdateOrganizationPipelineRelease_FullMethodName       = "/vdp.pipeline.v1beta.PipelinePublicService/UpdateOrganizationPipelineRelease"
	PipelinePublicService_DeleteOrganizationPipelineRelease_FullMethodName       = "/vdp.pipeline.v1beta.PipelinePublicService/DeleteOrganizationPipelineRelease"
	PipelinePublicService_RestoreOrganizationPipelineRelease_FullMethodName      = "/vdp.pipeline.v1beta.PipelinePublicService/RestoreOrganizationPipelineRelease"
	PipelinePublicService_RenameOrganizationPipelineRelease_FullMethodName       = "/vdp.pipeline.v1beta.PipelinePublicService/RenameOrganizationPipelineRelease"
	PipelinePublicService_TriggerOrganizationPipelineRelease_FullMethodName      = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerOrganizationPipelineRelease"
	PipelinePublicService_TriggerAsyncOrganizationPipelineRelease_FullMethodName = "/vdp.pipeline.v1beta.PipelinePublicService/TriggerAsyncOrganizationPipelineRelease"
	PipelinePublicService_CheckName_FullMethodName                               = "/vdp.pipeline.v1beta.PipelinePublicService/CheckName"
	PipelinePublicService_CreateUserSecret_FullMethodName                        = "/vdp.pipeline.v1beta.PipelinePublicService/CreateUserSecret"
	PipelinePublicService_ListUserSecrets_FullMethodName                         = "/vdp.pipeline.v1beta.PipelinePublicService/ListUserSecrets"
	PipelinePublicService_GetUserSecret_FullMethodName                           = "/vdp.pipeline.v1beta.PipelinePublicService/GetUserSecret"
	PipelinePublicService_UpdateUserSecret_FullMethodName                        = "/vdp.pipeline.v1beta.PipelinePublicService/UpdateUserSecret"
	PipelinePublicService_DeleteUserSecret_FullMethodName                        = "/vdp.pipeline.v1beta.PipelinePublicService/DeleteUserSecret"
	PipelinePublicService_CreateOrganizationSecret_FullMethodName                = "/vdp.pipeline.v1beta.PipelinePublicService/CreateOrganizationSecret"
	PipelinePublicService_ListOrganizationSecrets_FullMethodName                 = "/vdp.pipeline.v1beta.PipelinePublicService/ListOrganizationSecrets"
	PipelinePublicService_GetOrganizationSecret_FullMethodName                   = "/vdp.pipeline.v1beta.PipelinePublicService/GetOrganizationSecret"
	PipelinePublicService_UpdateOrganizationSecret_FullMethodName                = "/vdp.pipeline.v1beta.PipelinePublicService/UpdateOrganizationSecret"
	PipelinePublicService_DeleteOrganizationSecret_FullMethodName                = "/vdp.pipeline.v1beta.PipelinePublicService/DeleteOrganizationSecret"
	PipelinePublicService_ListPipelineRuns_FullMethodName                        = "/vdp.pipeline.v1beta.PipelinePublicService/ListPipelineRuns"
	PipelinePublicService_ListComponentRuns_FullMethodName                       = "/vdp.pipeline.v1beta.PipelinePublicService/ListComponentRuns"
	PipelinePublicService_ListPipelineRunsByRequester_FullMethodName             = "/vdp.pipeline.v1beta.PipelinePublicService/ListPipelineRunsByRequester"
	PipelinePublicService_ListNamespaceConnections_FullMethodName                = "/vdp.pipeline.v1beta.PipelinePublicService/ListNamespaceConnections"
	PipelinePublicService_GetNamespaceConnection_FullMethodName                  = "/vdp.pipeline.v1beta.PipelinePublicService/GetNamespaceConnection"
	PipelinePublicService_CreateNamespaceConnection_FullMethodName               = "/vdp.pipeline.v1beta.PipelinePublicService/CreateNamespaceConnection"
	PipelinePublicService_UpdateNamespaceConnection_FullMethodName               = "/vdp.pipeline.v1beta.PipelinePublicService/UpdateNamespaceConnection"
	PipelinePublicService_DeleteNamespaceConnection_FullMethodName               = "/vdp.pipeline.v1beta.PipelinePublicService/DeleteNamespaceConnection"
	PipelinePublicService_TestNamespaceConnection_FullMethodName                 = "/vdp.pipeline.v1beta.PipelinePublicService/TestNamespaceConnection"
	PipelinePublicService_ListPipelineIDsByConnectionID_FullMethodName           = "/vdp.pipeline.v1beta.PipelinePublicService/ListPipelineIDsByConnectionID"
	PipelinePublicService_ListIntegrations_FullMethodName                        = "/vdp.pipeline.v1beta.PipelinePublicService/ListIntegrations"
	PipelinePublicService_GetIntegration_FullMethodName                          = "/vdp.pipeline.v1beta.PipelinePublicService/GetIntegration"
)

// PipelinePublicServiceClient is the client API for PipelinePublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipelinePublicServiceClient interface {
	// Check if the pipeline server is alive
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Check if the pipeline server is ready
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// Get hub status
	//
	// Return the stats of the hub
	GetHubStats(ctx context.Context, in *GetHubStatsRequest, opts ...grpc.CallOption) (*GetHubStatsResponse, error)
	// List accessible pipelines
	//
	// Returns a paginated list of pipelines that are visible to the requester.
	ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error)
	// Get a pipeline by UID
	//
	// Returns the details of a pipeline by a permalink defined by the resource
	// UID.
	LookUpPipeline(ctx context.Context, in *LookUpPipelineRequest, opts ...grpc.CallOption) (*LookUpPipelineResponse, error)
	// List namespace pipelines
	//
	// Returns a paginated list of pipelines of a namespace
	ListNamespacePipelines(ctx context.Context, in *ListNamespacePipelinesRequest, opts ...grpc.CallOption) (*ListNamespacePipelinesResponse, error)
	// Create a new pipeline
	//
	// Creates a new pipeline under a namespace.
	CreateNamespacePipeline(ctx context.Context, in *CreateNamespacePipelineRequest, opts ...grpc.CallOption) (*CreateNamespacePipelineResponse, error)
	// Get a pipeline
	//
	// Returns the details of a pipeline.
	GetNamespacePipeline(ctx context.Context, in *GetNamespacePipelineRequest, opts ...grpc.CallOption) (*GetNamespacePipelineResponse, error)
	// Update a pipeline
	//
	// Udpates a pipeline, accessing it by its resource name, which is defined by
	// the parent namespace and the ID of the pipeline. The authenticated namespace must be
	// the parent of the pipeline in order to modify it.
	//
	// In REST requests, only the supplied pipeline fields will be taken into
	// account when updating the resource.
	UpdateNamespacePipeline(ctx context.Context, in *UpdateNamespacePipelineRequest, opts ...grpc.CallOption) (*UpdateNamespacePipelineResponse, error)
	// Delete a pipeline
	//
	// Deletes a pipeline, accesing it by its resource name, which is defined by
	// the parent namespace and the ID of the pipeline. The authenticated namespace must be
	// the parent of the pipeline in order to delete it.
	DeleteNamespacePipeline(ctx context.Context, in *DeleteNamespacePipelineRequest, opts ...grpc.CallOption) (*DeleteNamespacePipelineResponse, error)
	// Validate a pipeline
	//
	// Validates a pipeline by its resource name, which is defined by the parent
	// namespace and the ID of the pipeline.
	//
	// Validation checks the recipe of the pipeline and the status of its components.
	ValidateNamespacePipeline(ctx context.Context, in *ValidateNamespacePipelineRequest, opts ...grpc.CallOption) (*ValidateNamespacePipelineResponse, error)
	// Rename a pipeline
	//
	// Updates the ID of a pipeline. Since this is an output-only field, a custom
	// method is required to modify it.
	//
	// The pipeline name will be updated accordingly, as it is  composed by the
	// parent namespace and ID of the pipeline (e.g.
	// `namespaces/luigi/pipelines/pizza-recipe-generator`).
	//
	// The authenticated namespace must be the parent of the pipeline in order to
	// perform this action.
	RenameNamespacePipeline(ctx context.Context, in *RenameNamespacePipelineRequest, opts ...grpc.CallOption) (*RenameNamespacePipelineResponse, error)
	// Clone a pipeline
	//
	// Clones a pipeline owned by a namespace. The new pipeline may have a different
	// parent, and this can be either a namespace or an organization.
	CloneNamespacePipeline(ctx context.Context, in *CloneNamespacePipelineRequest, opts ...grpc.CallOption) (*CloneNamespacePipelineResponse, error)
	// Dispatch Pipeline Webhook Event
	//
	// Handles webhook events by routing them to the appropriate pipeline based on the webhook type and message.
	// The webhook type determines which component processes the event, while the message payload contains data
	// that triggers pipeline execution. The pipeline processes the event using configured handlers and returns
	// a response to the webhook sender.
	DispatchPipelineWebhookEvent(ctx context.Context, in *DispatchPipelineWebhookEventRequest, opts ...grpc.CallOption) (*DispatchPipelineWebhookEventResponse, error)
	// Trigger a pipeline
	//
	// Triggers the execution of a pipeline synchronously, i.e., the result is
	// sent back to the namespace right after the data is processed. This method is
	// intended for real-time inference when low latency is of concern.
	//
	// The pipeline is identified by its resource name, formed by the parent namespace
	// and ID of the pipeline.
	//
	// For more information, see [Run NamespacePipeline](https://www.instill.tech/docs/vdp/run).
	TriggerNamespacePipeline(ctx context.Context, in *TriggerNamespacePipelineRequest, opts ...grpc.CallOption) (*TriggerNamespacePipelineResponse, error)
	// Trigger a pipeline via streaming
	//
	// Triggers the execution of a pipeline asynchronously and streams back the response.
	// This method is intended for real-time inference when low latency is of concern
	// and the response needs to be processed incrementally.
	//
	// The pipeline is identified by its resource name, formed by the parent namespace
	// and ID of the pipeline.
	TriggerNamespacePipelineWithStream(ctx context.Context, in *TriggerNamespacePipelineWithStreamRequest, opts ...grpc.CallOption) (PipelinePublicService_TriggerNamespacePipelineWithStreamClient, error)
	// Trigger a pipeline asynchronously
	//
	// Triggers the execution of a pipeline asynchronously, i.e., the result
	// contains the necessary information to access the result and status of the
	// operation. This method is intended for cases that require long-running
	// workloads.
	//
	// The pipeline is identified by its resource name, formed by the parent namespace
	// and ID of the pipeline.
	//
	// For more information, see [Run NamespacePipeline](https://www.instill.tech/docs/vdp/run).
	TriggerAsyncNamespacePipeline(ctx context.Context, in *TriggerAsyncNamespacePipelineRequest, opts ...grpc.CallOption) (*TriggerAsyncNamespacePipelineResponse, error)
	// Create a pipeline release
	//
	// Commits the version of a pipeline, identified by its resource name, which
	// is formed by the parent namespace and ID of the pipeline.
	//
	// The authenticated namespace must be the parent of the pipeline in order to
	// perform this action.
	CreateNamespacePipelineRelease(ctx context.Context, in *CreateNamespacePipelineReleaseRequest, opts ...grpc.CallOption) (*CreateNamespacePipelineReleaseResponse, error)
	// List the releases in a pipeline
	//
	// Lists the commited versions of a pipeline, identified by its resource
	// name, which is formed by the parent namespace and ID of the pipeline.
	ListNamespacePipelineReleases(ctx context.Context, in *ListNamespacePipelineReleasesRequest, opts ...grpc.CallOption) (*ListNamespacePipelineReleasesResponse, error)
	// Get a pipeline release
	//
	// Gets the details of a pipeline release, where the pipeline is identified
	// by its resource name, formed by its parent namespace and ID.
	GetNamespacePipelineRelease(ctx context.Context, in *GetNamespacePipelineReleaseRequest, opts ...grpc.CallOption) (*GetNamespacePipelineReleaseResponse, error)
	// Update a pipeline release
	//
	// Updates the details of a pipeline release, where the pipeline is
	// identified by its resource name, formed by its parent namespace and ID.
	//
	// The authenticated namespace must be the parent of the pipeline in order to
	// perform this action.
	UpdateNamespacePipelineRelease(ctx context.Context, in *UpdateNamespacePipelineReleaseRequest, opts ...grpc.CallOption) (*UpdateNamespacePipelineReleaseResponse, error)
	// Delete a pipeline release
	//
	// Deletes a pipeline release, where the pipeline is identified by its
	// resource name, formed by its parent namespace and ID.
	//
	// The authenticated namespace must be the parent of the pipeline in order to
	// perform this action.
	DeleteNamespacePipelineRelease(ctx context.Context, in *DeleteNamespacePipelineReleaseRequest, opts ...grpc.CallOption) (*DeleteNamespacePipelineReleaseResponse, error)
	// Clone a pipeline release
	//
	// Clones a pipeline release owned by a namespace. The new pipeline may have a different
	// parent, and this can be either a namespace or an organization.
	CloneNamespacePipelineRelease(ctx context.Context, in *CloneNamespacePipelineReleaseRequest, opts ...grpc.CallOption) (*CloneNamespacePipelineReleaseResponse, error)
	// Trigger a pipeline release
	//
	// Triggers the synchronous execution of of a pipeline. While the trigger
	// endpoint (where the release version isn't specified) triggers the pipeline
	// at its latest release, this method allows the client to specified any
	// committed release.
	//
	// The pipeline is identified by its resource name, formed by its parent namespace
	// and ID.
	TriggerNamespacePipelineRelease(ctx context.Context, in *TriggerNamespacePipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerNamespacePipelineReleaseResponse, error)
	// Trigger a pipeline release asynchronously
	//
	// Triggers the asynchronous execution of of a pipeline. While the trigger
	// endpoint (where the release version isn't specified) triggers the pipeline
	// at its latest release, this method allows the client to specified any
	// committed release.
	//
	// The pipeline is identified by its resource name, formed by its parent namespace
	// and ID.
	TriggerAsyncNamespacePipelineRelease(ctx context.Context, in *TriggerAsyncNamespacePipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerAsyncNamespacePipelineReleaseResponse, error)
	// Create a secret
	//
	// Creates a new secret under the parenthood of an namespace.
	CreateNamespaceSecret(ctx context.Context, in *CreateNamespaceSecretRequest, opts ...grpc.CallOption) (*CreateNamespaceSecretResponse, error)
	// List secrets
	//
	// Returns a paginated list of secrets that belong to the specified
	// namespace.
	ListNamespaceSecrets(ctx context.Context, in *ListNamespaceSecretsRequest, opts ...grpc.CallOption) (*ListNamespaceSecretsResponse, error)
	// Get a secret
	//
	// Returns the details of an namespace-owned secret by its resource name,
	// which is defined by the parent namespace and the ID of the secret.
	GetNamespaceSecret(ctx context.Context, in *GetNamespaceSecretRequest, opts ...grpc.CallOption) (*GetNamespaceSecretResponse, error)
	// Update a secret
	//
	// # Udpates a secret, accessing it by its resource name, which is defined by
	//
	// In REST requests, only the supplied secret fields will be taken into
	// account when updating the resource.
	UpdateNamespaceSecret(ctx context.Context, in *UpdateNamespaceSecretRequest, opts ...grpc.CallOption) (*UpdateNamespaceSecretResponse, error)
	// Delete a secret
	//
	// Deletes a secret, accesing it by its resource name, which is defined by
	// the parent namespace and the ID of the secret.
	DeleteNamespaceSecret(ctx context.Context, in *DeleteNamespaceSecretRequest, opts ...grpc.CallOption) (*DeleteNamespaceSecretResponse, error)
	// List component definitions
	//
	// Returns a paginated list of component definitions, regardless their type.
	// This offers a single source of truth, with pagination and filter
	// capabilities, for the components that might be used in a VDP pipeline.
	ListComponentDefinitions(ctx context.Context, in *ListComponentDefinitionsRequest, opts ...grpc.CallOption) (*ListComponentDefinitionsResponse, error)
	// Get the details of a long-running operation
	//
	// This method allows requesters to request the status and outcome of
	// long-running operations such as asynchronous pipeline triggers.
	GetOperation(ctx context.Context, in *GetOperationRequest, opts ...grpc.CallOption) (*GetOperationResponse, error)
	// Deprecated: Do not use.
	// Create a new user pipeline
	//
	// Creates a new pipeline under the parenthood of a user. Users can only
	// create a pipeline as the parent of that resource (i.e. the authenticated
	// user must match the `parent` path parameter).
	CreateUserPipeline(ctx context.Context, in *CreateUserPipelineRequest, opts ...grpc.CallOption) (*CreateUserPipelineResponse, error)
	// Deprecated: Do not use.
	// List user pipelines
	//
	// Returns a paginated list of pipelines that belong to the specified user.
	// The parent user may be different from the authenticated user, in which
	// case the results will contain the pipelines that are visible to the
	// latter.
	ListUserPipelines(ctx context.Context, in *ListUserPipelinesRequest, opts ...grpc.CallOption) (*ListUserPipelinesResponse, error)
	// Deprecated: Do not use.
	// Get a pipeline owned by a user
	//
	// Returns the details of a user-owned pipeline by its resource name, which is defined
	// by the parent user and the ID of the pipeline.
	GetUserPipeline(ctx context.Context, in *GetUserPipelineRequest, opts ...grpc.CallOption) (*GetUserPipelineResponse, error)
	// Deprecated: Do not use.
	// Update a pipeline owned by a user
	//
	// Udpates a pipeline, accessing it by its resource name, which is defined by
	// the parent user and the ID of the pipeline. The authenticated user must be
	// the parent of the pipeline in order to modify it.
	//
	// In REST requests, only the supplied pipeline fields will be taken into
	// account when updating the resource.
	UpdateUserPipeline(ctx context.Context, in *UpdateUserPipelineRequest, opts ...grpc.CallOption) (*UpdateUserPipelineResponse, error)
	// Deprecated: Do not use.
	// Delete a pipeline owned by a user
	//
	// Deletes a pipeline, accesing it by its resource name, which is defined by
	// the parent user and the ID of the pipeline. The authenticated user must be
	// the parent of the pipeline in order to delete it.
	DeleteUserPipeline(ctx context.Context, in *DeleteUserPipelineRequest, opts ...grpc.CallOption) (*DeleteUserPipelineResponse, error)
	// Deprecated: Do not use.
	// Validate a pipeline a pipeline owned by a user
	//
	// Validates a pipeline by its resource name, which is defined by the parent
	// user and the ID of the pipeline.
	//
	// Validation checks the recipe of the pipeline and the status of its components.
	ValidateUserPipeline(ctx context.Context, in *ValidateUserPipelineRequest, opts ...grpc.CallOption) (*ValidateUserPipelineResponse, error)
	// Deprecated: Do not use.
	// Rename a pipeline owned by a user
	//
	// Updates the ID of a pipeline. Since this is an output-only field, a custom
	// method is required to modify it.
	//
	// The pipeline name will be updated accordingly, as it is  composed by the
	// parent user and ID of the pipeline (e.g.
	// `users/luigi/pipelines/pizza-recipe-generator`).
	//
	// The authenticated user must be the parent of the pipeline in order to
	// perform this action.
	RenameUserPipeline(ctx context.Context, in *RenameUserPipelineRequest, opts ...grpc.CallOption) (*RenameUserPipelineResponse, error)
	// Deprecated: Do not use.
	// Trigger a pipeline owned by a user
	//
	// Triggers the execution of a pipeline synchronously, i.e., the result is
	// sent back to the user right after the data is processed. This method is
	// intended for real-time inference when low latency is of concern.
	//
	// The pipeline is identified by its resource name, formed by the parent user
	// and ID of the pipeline.
	//
	// For more information, see [Run Pipeline](https://www.instill.tech/docs/vdp/run).
	TriggerUserPipeline(ctx context.Context, in *TriggerUserPipelineRequest, opts ...grpc.CallOption) (*TriggerUserPipelineResponse, error)
	// Deprecated: Do not use.
	// Trigger a pipeline owned by a user and stream back the response
	//
	// Triggers the execution of a pipeline asynchronously and streams back the response.
	// This method is intended for real-time inference when low latency is of concern
	// and the response needs to be processed incrementally.
	//
	// The pipeline is identified by its resource name, formed by the parent user
	// and ID of the pipeline.
	TriggerUserPipelineWithStream(ctx context.Context, in *TriggerUserPipelineWithStreamRequest, opts ...grpc.CallOption) (PipelinePublicService_TriggerUserPipelineWithStreamClient, error)
	// Deprecated: Do not use.
	// Trigger a pipeline owned by a user asynchronously
	//
	// Triggers the execution of a pipeline asynchronously, i.e., the result
	// contains the necessary information to access the result and status of the
	// operation. This method is intended for cases that require long-running
	// workloads.
	//
	// The pipeline is identified by its resource name, formed by the parent user
	// and ID of the pipeline.
	//
	// For more information, see [Run Pipeline](https://www.instill.tech/docs/vdp/run).
	TriggerAsyncUserPipeline(ctx context.Context, in *TriggerAsyncUserPipelineRequest, opts ...grpc.CallOption) (*TriggerAsyncUserPipelineResponse, error)
	// Deprecated: Do not use.
	// Release a version of a pipeline owned by a user
	//
	// Commits the version of a pipeline, identified by its resource name, which
	// is formed by the parent user and ID of the pipeline.
	//
	// The authenticated user must be the parent of the pipeline in order to
	// perform this action.
	CreateUserPipelineRelease(ctx context.Context, in *CreateUserPipelineReleaseRequest, opts ...grpc.CallOption) (*CreateUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// List the releases in a pipeline owned by a user
	//
	// Lists the commited versions of a pipeline, identified by its resource
	// name, which is formed by the parent user and ID of the pipeline.
	ListUserPipelineReleases(ctx context.Context, in *ListUserPipelineReleasesRequest, opts ...grpc.CallOption) (*ListUserPipelineReleasesResponse, error)
	// Deprecated: Do not use.
	// Get a release in a pipeline owned by a user
	//
	// Gets the details of a pipeline release, where the pipeline is identified
	// by its resource name, formed by its parent user and ID.
	GetUserPipelineRelease(ctx context.Context, in *GetUserPipelineReleaseRequest, opts ...grpc.CallOption) (*GetUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Update a release in a pipeline owned by a user
	//
	// Updates the details of a pipeline release, where the pipeline is
	// identified by its resource name, formed by its parent user and ID.
	//
	// The authenticated user must be the parent of the pipeline in order to
	// perform this action.
	UpdateUserPipelineRelease(ctx context.Context, in *UpdateUserPipelineReleaseRequest, opts ...grpc.CallOption) (*UpdateUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Delete a release in a pipeline owned by a user
	//
	// Deletes a pipeline release, where the pipeline is identified by its
	// resource name, formed by its parent user and ID.
	//
	// The authenticated user must be the parent of the pipeline in order to
	// perform this action.
	DeleteUserPipelineRelease(ctx context.Context, in *DeleteUserPipelineReleaseRequest, opts ...grpc.CallOption) (*DeleteUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Set the version of a pipeline owned by a user to a pinned release
	//
	// Sets the pipeline configuration to a pinned version defined by a release.
	//
	// The pipeline is identified by its resource name, formed by its parent user
	// and ID.
	//
	// The authenticated user must be the parent of the pipeline in order to
	// perform this action.
	RestoreUserPipelineRelease(ctx context.Context, in *RestoreUserPipelineReleaseRequest, opts ...grpc.CallOption) (*RestoreUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Rename a release in a pipeline owned by a user
	//
	// Updates the ID of a pipeline release, where the pipeline is identified by
	// its resource name, formed by the parent user and ID. Since this is an
	// output-only field, a custom method is required to modify it.
	//
	// The pipeline release name will be updated accordingly, as it is  composed
	// by the pipeline name and the ID of the release (e.g.
	// `users/luigi/pipelines/pizza-recipe-generator/releases/v0.2.1`).
	//
	// The authenticated user must be the parent of the pipeline in order to
	// perform this action.
	RenameUserPipelineRelease(ctx context.Context, in *RenameUserPipelineReleaseRequest, opts ...grpc.CallOption) (*RenameUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Trigger a version of a pipeline owned by a user
	//
	// Triggers the synchronous execution of of a pipeline. While the trigger
	// endpoint (where the release version isn't specified) triggers the pipeline
	// at its latest release, this method allows the client to specified any
	// committed release.
	//
	// The pipeline is identified by its resource name, formed by its parent user
	// and ID.
	TriggerUserPipelineRelease(ctx context.Context, in *TriggerUserPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Trigger a version of a pipeline owned by a user asynchronously
	//
	// Triggers the asynchronous execution of of a pipeline. While the trigger
	// endpoint (where the release version isn't specified) triggers the pipeline
	// at its latest release, this method allows the client to specified any
	// committed release.
	//
	// The pipeline is identified by its resource name, formed by its parent user
	// and ID.
	TriggerAsyncUserPipelineRelease(ctx context.Context, in *TriggerAsyncUserPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerAsyncUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Create a new organization pipeline
	//
	// Creates a new pipeline under the parenthood of an organization.
	CreateOrganizationPipeline(ctx context.Context, in *CreateOrganizationPipelineRequest, opts ...grpc.CallOption) (*CreateOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// List organization pipelines
	//
	// Returns a paginated list of pipelines that belong to the specified
	// organization.
	ListOrganizationPipelines(ctx context.Context, in *ListOrganizationPipelinesRequest, opts ...grpc.CallOption) (*ListOrganizationPipelinesResponse, error)
	// Deprecated: Do not use.
	// Get a pipeline owned by an organization
	//
	// Returns the details of an organization-owned pipeline by its resource name,
	// which is defined by the parent organization and the ID of the pipeline.
	GetOrganizationPipeline(ctx context.Context, in *GetOrganizationPipelineRequest, opts ...grpc.CallOption) (*GetOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// Update a pipeline owned by an organization
	//
	// # Udpates a pipeline, accessing it by its resource name, which is defined by
	//
	// In REST requests, only the supplied pipeline fields will be taken into
	// account when updating the resource.
	UpdateOrganizationPipeline(ctx context.Context, in *UpdateOrganizationPipelineRequest, opts ...grpc.CallOption) (*UpdateOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// Delete a pipeline owned by an organization
	//
	// Deletes a pipeline, accesing it by its resource name, which is defined by
	// the parent organization and the ID of the pipeline.
	DeleteOrganizationPipeline(ctx context.Context, in *DeleteOrganizationPipelineRequest, opts ...grpc.CallOption) (*DeleteOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// Validate a pipeline a pipeline owned by an organization
	//
	// Validates a pipeline by its resource name, which is defined by the parent
	// organization and the ID of the pipeline.
	//
	// Validation checks the recipe of the pipeline and the status of its
	// components.
	ValidateOrganizationPipeline(ctx context.Context, in *ValidateOrganizationPipelineRequest, opts ...grpc.CallOption) (*ValidateOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// Rename a pipeline owned by an organization
	//
	// Updates the ID of a pipeline. Since this is an output-only field, a custom
	// method is required to modify it.
	//
	// The pipeline name will be updated accordingly, as it is  composed by the
	// parent organization and ID of the pipeline (e.g.
	// `organizations/luigi/pipelines/pizza-recipe-generator`).
	RenameOrganizationPipeline(ctx context.Context, in *RenameOrganizationPipelineRequest, opts ...grpc.CallOption) (*RenameOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// Trigger a pipeline owned by an organization
	//
	// Triggers the execution of a pipeline synchronously, i.e., the result is sent
	// back to the organization right after the data is processed. This method is
	// intended for real-time inference when low latency is of concern.
	//
	// The pipeline is identified by its resource name, formed by the parent
	// organization and ID of the pipeline.
	//
	// For more information, see [Run Pipeline](https://www.instill.tech/docs/vdp/run).
	TriggerOrganizationPipelineStream(ctx context.Context, in *TriggerOrganizationPipelineStreamRequest, opts ...grpc.CallOption) (PipelinePublicService_TriggerOrganizationPipelineStreamClient, error)
	// Deprecated: Do not use.
	// Trigger a pipeline owned by an organization
	//
	// Triggers the execution of a pipeline synchronously, i.e., the result is sent
	// back to the organization right after the data is processed. This method is
	// intended for real-time inference when low latency is of concern.
	//
	// The pipeline is identified by its resource name, formed by the parent
	// organization and ID of the pipeline.
	//
	// For more information, see [Run Pipeline](https://www.instill.tech/docs/vdp/run).
	TriggerOrganizationPipeline(ctx context.Context, in *TriggerOrganizationPipelineRequest, opts ...grpc.CallOption) (*TriggerOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// Trigger a pipeline owned by an organization asynchronously
	//
	// Triggers the execution of a pipeline asynchronously, i.e., the result
	// contains the necessary information to access the result and status of the
	// operation. This method is intended for cases that require long-running
	// workloads.
	//
	// The pipeline is identified by its resource name, formed by the parent
	// organization and ID of the pipeline.
	//
	// For more information, see [Run Pipeline](https://www.instill.tech/docs/vdp/run).
	TriggerAsyncOrganizationPipeline(ctx context.Context, in *TriggerAsyncOrganizationPipelineRequest, opts ...grpc.CallOption) (*TriggerAsyncOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// Release a version of a pipeline owned by an organization
	//
	// Commits the version of a pipeline, identified by its resource name, which is
	// formed by the parent organization and ID of the pipeline.
	CreateOrganizationPipelineRelease(ctx context.Context, in *CreateOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*CreateOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// List the releases in a pipeline owned by an organization
	//
	// Lists the commited versions of a pipeline, identified by its resource name,
	// which is formed by the parent organization and ID of the pipeline.
	ListOrganizationPipelineReleases(ctx context.Context, in *ListOrganizationPipelineReleasesRequest, opts ...grpc.CallOption) (*ListOrganizationPipelineReleasesResponse, error)
	// Deprecated: Do not use.
	// Get a release in a pipeline owned by an organization
	//
	// Gets the details of a pipeline release, where the pipeline is identified by
	// its resource name, formed by its parent organization and ID.
	GetOrganizationPipelineRelease(ctx context.Context, in *GetOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*GetOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Update a release in a pipeline owned by an organization
	//
	// Updates the details of a pipeline release, where the pipeline is identified
	// by its resource name, formed by its parent organization and ID.
	UpdateOrganizationPipelineRelease(ctx context.Context, in *UpdateOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*UpdateOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Delete a release in a pipeline owned by an organization
	//
	// Deletes a pipeline release, where the pipeline is identified by its resource
	// name, formed by its parent organization and ID.
	DeleteOrganizationPipelineRelease(ctx context.Context, in *DeleteOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*DeleteOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Set the version of a pipeline owned by an organization to a pinned release
	//
	// Sets the pipeline configuration to a pinned version defined by a release.
	//
	// The pipeline is identified by its resource name, formed by its parent
	// organization and ID.
	RestoreOrganizationPipelineRelease(ctx context.Context, in *RestoreOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*RestoreOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Rename a release in a pipeline owned by an organization
	//
	// Updates the ID of a pipeline release, where the pipeline is identified by
	// its resource name, formed by the parent organization and ID. Since this is
	// an output-only field, a custom method is required to modify it.
	//
	// The pipeline release name will be updated accordingly, as it is  composed by
	// the pipeline name and the ID of the release (e.g.
	// `organizations/luigi/pipelines/pizza-recipe-generator/releases/v0.2.1`).
	RenameOrganizationPipelineRelease(ctx context.Context, in *RenameOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*RenameOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Trigger a version of a pipeline owned by an organization
	//
	// Triggers the synchronous execution of of a pipeline. While the trigger
	// endpoint (where the release version isn't specified) triggers the pipeline
	// at its latest release, this method allows the client to specified any
	// committed release.
	//
	// The pipeline is identified by its resource name, formed by its parent
	// organization and ID.
	TriggerOrganizationPipelineRelease(ctx context.Context, in *TriggerOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Trigger a version of a pipeline owned by an organization asynchronously
	//
	// Triggers the asynchronous execution of of a pipeline. While the trigger
	// endpoint (where the release version isn't specified) triggers the pipeline
	// at its latest release, this method allows the client to specified any
	// committed release.
	//
	// The pipeline is identified by its resource name, formed by its parent
	// organization and ID.
	TriggerAsyncOrganizationPipelineRelease(ctx context.Context, in *TriggerAsyncOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerAsyncOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Check the availibity of a resource name
	//
	// Check whether a resource name is already in use. Currently this endpoint
	// only supports pipeline and connector resource names.
	CheckName(ctx context.Context, in *CheckNameRequest, opts ...grpc.CallOption) (*CheckNameResponse, error)
	// Deprecated: Do not use.
	// Create a new user secret
	//
	// Creates a new secret under the parenthood of an user.
	CreateUserSecret(ctx context.Context, in *CreateUserSecretRequest, opts ...grpc.CallOption) (*CreateUserSecretResponse, error)
	// Deprecated: Do not use.
	// List user secrets
	//
	// Returns a paginated list of secrets that belong to the specified
	// user.
	ListUserSecrets(ctx context.Context, in *ListUserSecretsRequest, opts ...grpc.CallOption) (*ListUserSecretsResponse, error)
	// Deprecated: Do not use.
	// Get a secret owned by an user
	//
	// Returns the details of an user-owned secret by its resource name,
	// which is defined by the parent user and the ID of the secret.
	GetUserSecret(ctx context.Context, in *GetUserSecretRequest, opts ...grpc.CallOption) (*GetUserSecretResponse, error)
	// Deprecated: Do not use.
	// Update a secret owned by an user
	//
	// # Udpates a secret, accessing it by its resource name, which is defined by
	//
	// In REST requests, only the supplied secret fields will be taken into
	// account when updating the resource.
	UpdateUserSecret(ctx context.Context, in *UpdateUserSecretRequest, opts ...grpc.CallOption) (*UpdateUserSecretResponse, error)
	// Deprecated: Do not use.
	// Delete a secret owned by an user
	//
	// Deletes a secret, accesing it by its resource name, which is defined by
	// the parent user and the ID of the secret.
	DeleteUserSecret(ctx context.Context, in *DeleteUserSecretRequest, opts ...grpc.CallOption) (*DeleteUserSecretResponse, error)
	// Deprecated: Do not use.
	// Create a new organization secret
	//
	// Creates a new secret under the parenthood of an organization.
	CreateOrganizationSecret(ctx context.Context, in *CreateOrganizationSecretRequest, opts ...grpc.CallOption) (*CreateOrganizationSecretResponse, error)
	// Deprecated: Do not use.
	// List organization secrets
	//
	// Returns a paginated list of secrets that belong to the specified
	// organization.
	ListOrganizationSecrets(ctx context.Context, in *ListOrganizationSecretsRequest, opts ...grpc.CallOption) (*ListOrganizationSecretsResponse, error)
	// Deprecated: Do not use.
	// Get a secret owned by an organization
	//
	// Returns the details of an organization-owned secret by its resource name,
	// which is defined by the parent organization and the ID of the secret.
	GetOrganizationSecret(ctx context.Context, in *GetOrganizationSecretRequest, opts ...grpc.CallOption) (*GetOrganizationSecretResponse, error)
	// Deprecated: Do not use.
	// Update a secret owned by an organization
	//
	// # Udpates a secret, accessing it by its resource name, which is defined by
	//
	// In REST requests, only the supplied secret fields will be taken into
	// account when updating the resource.
	UpdateOrganizationSecret(ctx context.Context, in *UpdateOrganizationSecretRequest, opts ...grpc.CallOption) (*UpdateOrganizationSecretResponse, error)
	// Deprecated: Do not use.
	// Delete a secret owned by an organization
	//
	// Deletes a secret, accesing it by its resource name, which is defined by
	// the parent organization and the ID of the secret.
	DeleteOrganizationSecret(ctx context.Context, in *DeleteOrganizationSecretRequest, opts ...grpc.CallOption) (*DeleteOrganizationSecretResponse, error)
	// List Pipeline Runs
	//
	// Returns a paginated list of runs for a given pipeline. When the requester
	// is the owner of the pipeline, they will be able to all the pipeline runs,
	// regardless who requested the trigger (the view will be partial to hide
	// sensitive data like e.g. the trigger input and output). Other requesters
	// will only be able to see the runs requested by themselves.
	ListPipelineRuns(ctx context.Context, in *ListPipelineRunsRequest, opts ...grpc.CallOption) (*ListPipelineRunsResponse, error)
	// List Component Runs
	//
	// Returns the information of each component execution within a pipeline run.
	ListComponentRuns(ctx context.Context, in *ListComponentRunsRequest, opts ...grpc.CallOption) (*ListComponentRunsResponse, error)
	// List Pipeline Runs By Requester
	//
	// Returns a paginated list of runs for requested by a namespace. The
	// response may contain runs from several pipelines.
	ListPipelineRunsByRequester(ctx context.Context, in *ListPipelineRunsByRequesterRequest, opts ...grpc.CallOption) (*ListPipelineRunsByRequesterResponse, error)
	// List namespace connections
	//
	// Returns a paginated list of connections created by a namespace.
	ListNamespaceConnections(ctx context.Context, in *ListNamespaceConnectionsRequest, opts ...grpc.CallOption) (*ListNamespaceConnectionsResponse, error)
	// Get a namespace connection
	//
	// Returns the details of a connection.
	GetNamespaceConnection(ctx context.Context, in *GetNamespaceConnectionRequest, opts ...grpc.CallOption) (*GetNamespaceConnectionResponse, error)
	// Create a connection
	//
	// Creates a connection under the ownership of a namespace.
	CreateNamespaceConnection(ctx context.Context, in *CreateNamespaceConnectionRequest, opts ...grpc.CallOption) (*CreateNamespaceConnectionResponse, error)
	// Update a connection
	//
	// Updates a connection with the supplied connection fields.
	UpdateNamespaceConnection(ctx context.Context, in *UpdateNamespaceConnectionRequest, opts ...grpc.CallOption) (*UpdateNamespaceConnectionResponse, error)
	// Delete a connection
	//
	// Deletes a connection.
	DeleteNamespaceConnection(ctx context.Context, in *DeleteNamespaceConnectionRequest, opts ...grpc.CallOption) (*DeleteNamespaceConnectionResponse, error)
	// Test a connection
	//
	// Makes a request to the 3rd party app that the connection is configured to
	// communicate with, and checks the result of the call. If the test fails,
	// the response status and error message will provide more information about
	// the failure.
	//
	// Note that this action might affect the quota or billing of the integrated
	// account in the 3rd party app.
	TestNamespaceConnection(ctx context.Context, in *TestNamespaceConnectionRequest, opts ...grpc.CallOption) (*TestNamespaceConnectionResponse, error)
	// List pipelines that reference a connection
	//
	// Returns a paginated list with the IDs of the pipelines that reference a
	// given connection. All the pipelines will belong to the same namespace as
	// the connection.
	ListPipelineIDsByConnectionID(ctx context.Context, in *ListPipelineIDsByConnectionIDRequest, opts ...grpc.CallOption) (*ListPipelineIDsByConnectionIDResponse, error)
	// List integrations
	//
	// Returns a paginated list of available integrations.
	ListIntegrations(ctx context.Context, in *ListIntegrationsRequest, opts ...grpc.CallOption) (*ListIntegrationsResponse, error)
	// Get an integration
	//
	// Returns the details of an integration.
	GetIntegration(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*GetIntegrationResponse, error)
}

type pipelinePublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelinePublicServiceClient(cc grpc.ClientConnInterface) PipelinePublicServiceClient {
	return &pipelinePublicServiceClient{cc}
}

func (c *pipelinePublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_Liveness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_Readiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetHubStats(ctx context.Context, in *GetHubStatsRequest, opts ...grpc.CallOption) (*GetHubStatsResponse, error) {
	out := new(GetHubStatsResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetHubStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error) {
	out := new(ListPipelinesResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListPipelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) LookUpPipeline(ctx context.Context, in *LookUpPipelineRequest, opts ...grpc.CallOption) (*LookUpPipelineResponse, error) {
	out := new(LookUpPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_LookUpPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListNamespacePipelines(ctx context.Context, in *ListNamespacePipelinesRequest, opts ...grpc.CallOption) (*ListNamespacePipelinesResponse, error) {
	out := new(ListNamespacePipelinesResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListNamespacePipelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) CreateNamespacePipeline(ctx context.Context, in *CreateNamespacePipelineRequest, opts ...grpc.CallOption) (*CreateNamespacePipelineResponse, error) {
	out := new(CreateNamespacePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreateNamespacePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetNamespacePipeline(ctx context.Context, in *GetNamespacePipelineRequest, opts ...grpc.CallOption) (*GetNamespacePipelineResponse, error) {
	out := new(GetNamespacePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetNamespacePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) UpdateNamespacePipeline(ctx context.Context, in *UpdateNamespacePipelineRequest, opts ...grpc.CallOption) (*UpdateNamespacePipelineResponse, error) {
	out := new(UpdateNamespacePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdateNamespacePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) DeleteNamespacePipeline(ctx context.Context, in *DeleteNamespacePipelineRequest, opts ...grpc.CallOption) (*DeleteNamespacePipelineResponse, error) {
	out := new(DeleteNamespacePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeleteNamespacePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ValidateNamespacePipeline(ctx context.Context, in *ValidateNamespacePipelineRequest, opts ...grpc.CallOption) (*ValidateNamespacePipelineResponse, error) {
	out := new(ValidateNamespacePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ValidateNamespacePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) RenameNamespacePipeline(ctx context.Context, in *RenameNamespacePipelineRequest, opts ...grpc.CallOption) (*RenameNamespacePipelineResponse, error) {
	out := new(RenameNamespacePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RenameNamespacePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) CloneNamespacePipeline(ctx context.Context, in *CloneNamespacePipelineRequest, opts ...grpc.CallOption) (*CloneNamespacePipelineResponse, error) {
	out := new(CloneNamespacePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CloneNamespacePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) DispatchPipelineWebhookEvent(ctx context.Context, in *DispatchPipelineWebhookEventRequest, opts ...grpc.CallOption) (*DispatchPipelineWebhookEventResponse, error) {
	out := new(DispatchPipelineWebhookEventResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DispatchPipelineWebhookEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerNamespacePipeline(ctx context.Context, in *TriggerNamespacePipelineRequest, opts ...grpc.CallOption) (*TriggerNamespacePipelineResponse, error) {
	out := new(TriggerNamespacePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerNamespacePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerNamespacePipelineWithStream(ctx context.Context, in *TriggerNamespacePipelineWithStreamRequest, opts ...grpc.CallOption) (PipelinePublicService_TriggerNamespacePipelineWithStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PipelinePublicService_ServiceDesc.Streams[0], PipelinePublicService_TriggerNamespacePipelineWithStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pipelinePublicServiceTriggerNamespacePipelineWithStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PipelinePublicService_TriggerNamespacePipelineWithStreamClient interface {
	Recv() (*TriggerNamespacePipelineWithStreamResponse, error)
	grpc.ClientStream
}

type pipelinePublicServiceTriggerNamespacePipelineWithStreamClient struct {
	grpc.ClientStream
}

func (x *pipelinePublicServiceTriggerNamespacePipelineWithStreamClient) Recv() (*TriggerNamespacePipelineWithStreamResponse, error) {
	m := new(TriggerNamespacePipelineWithStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pipelinePublicServiceClient) TriggerAsyncNamespacePipeline(ctx context.Context, in *TriggerAsyncNamespacePipelineRequest, opts ...grpc.CallOption) (*TriggerAsyncNamespacePipelineResponse, error) {
	out := new(TriggerAsyncNamespacePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerAsyncNamespacePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) CreateNamespacePipelineRelease(ctx context.Context, in *CreateNamespacePipelineReleaseRequest, opts ...grpc.CallOption) (*CreateNamespacePipelineReleaseResponse, error) {
	out := new(CreateNamespacePipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreateNamespacePipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListNamespacePipelineReleases(ctx context.Context, in *ListNamespacePipelineReleasesRequest, opts ...grpc.CallOption) (*ListNamespacePipelineReleasesResponse, error) {
	out := new(ListNamespacePipelineReleasesResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListNamespacePipelineReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetNamespacePipelineRelease(ctx context.Context, in *GetNamespacePipelineReleaseRequest, opts ...grpc.CallOption) (*GetNamespacePipelineReleaseResponse, error) {
	out := new(GetNamespacePipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetNamespacePipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) UpdateNamespacePipelineRelease(ctx context.Context, in *UpdateNamespacePipelineReleaseRequest, opts ...grpc.CallOption) (*UpdateNamespacePipelineReleaseResponse, error) {
	out := new(UpdateNamespacePipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdateNamespacePipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) DeleteNamespacePipelineRelease(ctx context.Context, in *DeleteNamespacePipelineReleaseRequest, opts ...grpc.CallOption) (*DeleteNamespacePipelineReleaseResponse, error) {
	out := new(DeleteNamespacePipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeleteNamespacePipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) CloneNamespacePipelineRelease(ctx context.Context, in *CloneNamespacePipelineReleaseRequest, opts ...grpc.CallOption) (*CloneNamespacePipelineReleaseResponse, error) {
	out := new(CloneNamespacePipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CloneNamespacePipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerNamespacePipelineRelease(ctx context.Context, in *TriggerNamespacePipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerNamespacePipelineReleaseResponse, error) {
	out := new(TriggerNamespacePipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerNamespacePipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerAsyncNamespacePipelineRelease(ctx context.Context, in *TriggerAsyncNamespacePipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerAsyncNamespacePipelineReleaseResponse, error) {
	out := new(TriggerAsyncNamespacePipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerAsyncNamespacePipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) CreateNamespaceSecret(ctx context.Context, in *CreateNamespaceSecretRequest, opts ...grpc.CallOption) (*CreateNamespaceSecretResponse, error) {
	out := new(CreateNamespaceSecretResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreateNamespaceSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListNamespaceSecrets(ctx context.Context, in *ListNamespaceSecretsRequest, opts ...grpc.CallOption) (*ListNamespaceSecretsResponse, error) {
	out := new(ListNamespaceSecretsResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListNamespaceSecrets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetNamespaceSecret(ctx context.Context, in *GetNamespaceSecretRequest, opts ...grpc.CallOption) (*GetNamespaceSecretResponse, error) {
	out := new(GetNamespaceSecretResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetNamespaceSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) UpdateNamespaceSecret(ctx context.Context, in *UpdateNamespaceSecretRequest, opts ...grpc.CallOption) (*UpdateNamespaceSecretResponse, error) {
	out := new(UpdateNamespaceSecretResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdateNamespaceSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) DeleteNamespaceSecret(ctx context.Context, in *DeleteNamespaceSecretRequest, opts ...grpc.CallOption) (*DeleteNamespaceSecretResponse, error) {
	out := new(DeleteNamespaceSecretResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeleteNamespaceSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListComponentDefinitions(ctx context.Context, in *ListComponentDefinitionsRequest, opts ...grpc.CallOption) (*ListComponentDefinitionsResponse, error) {
	out := new(ListComponentDefinitionsResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListComponentDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetOperation(ctx context.Context, in *GetOperationRequest, opts ...grpc.CallOption) (*GetOperationResponse, error) {
	out := new(GetOperationResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) CreateUserPipeline(ctx context.Context, in *CreateUserPipelineRequest, opts ...grpc.CallOption) (*CreateUserPipelineResponse, error) {
	out := new(CreateUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreateUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) ListUserPipelines(ctx context.Context, in *ListUserPipelinesRequest, opts ...grpc.CallOption) (*ListUserPipelinesResponse, error) {
	out := new(ListUserPipelinesResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListUserPipelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) GetUserPipeline(ctx context.Context, in *GetUserPipelineRequest, opts ...grpc.CallOption) (*GetUserPipelineResponse, error) {
	out := new(GetUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) UpdateUserPipeline(ctx context.Context, in *UpdateUserPipelineRequest, opts ...grpc.CallOption) (*UpdateUserPipelineResponse, error) {
	out := new(UpdateUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdateUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) DeleteUserPipeline(ctx context.Context, in *DeleteUserPipelineRequest, opts ...grpc.CallOption) (*DeleteUserPipelineResponse, error) {
	out := new(DeleteUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeleteUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) ValidateUserPipeline(ctx context.Context, in *ValidateUserPipelineRequest, opts ...grpc.CallOption) (*ValidateUserPipelineResponse, error) {
	out := new(ValidateUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ValidateUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) RenameUserPipeline(ctx context.Context, in *RenameUserPipelineRequest, opts ...grpc.CallOption) (*RenameUserPipelineResponse, error) {
	out := new(RenameUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RenameUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) TriggerUserPipeline(ctx context.Context, in *TriggerUserPipelineRequest, opts ...grpc.CallOption) (*TriggerUserPipelineResponse, error) {
	out := new(TriggerUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) TriggerUserPipelineWithStream(ctx context.Context, in *TriggerUserPipelineWithStreamRequest, opts ...grpc.CallOption) (PipelinePublicService_TriggerUserPipelineWithStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PipelinePublicService_ServiceDesc.Streams[1], PipelinePublicService_TriggerUserPipelineWithStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pipelinePublicServiceTriggerUserPipelineWithStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PipelinePublicService_TriggerUserPipelineWithStreamClient interface {
	Recv() (*TriggerUserPipelineWithStreamResponse, error)
	grpc.ClientStream
}

type pipelinePublicServiceTriggerUserPipelineWithStreamClient struct {
	grpc.ClientStream
}

func (x *pipelinePublicServiceTriggerUserPipelineWithStreamClient) Recv() (*TriggerUserPipelineWithStreamResponse, error) {
	m := new(TriggerUserPipelineWithStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) TriggerAsyncUserPipeline(ctx context.Context, in *TriggerAsyncUserPipelineRequest, opts ...grpc.CallOption) (*TriggerAsyncUserPipelineResponse, error) {
	out := new(TriggerAsyncUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerAsyncUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) CreateUserPipelineRelease(ctx context.Context, in *CreateUserPipelineReleaseRequest, opts ...grpc.CallOption) (*CreateUserPipelineReleaseResponse, error) {
	out := new(CreateUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreateUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) ListUserPipelineReleases(ctx context.Context, in *ListUserPipelineReleasesRequest, opts ...grpc.CallOption) (*ListUserPipelineReleasesResponse, error) {
	out := new(ListUserPipelineReleasesResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListUserPipelineReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) GetUserPipelineRelease(ctx context.Context, in *GetUserPipelineReleaseRequest, opts ...grpc.CallOption) (*GetUserPipelineReleaseResponse, error) {
	out := new(GetUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) UpdateUserPipelineRelease(ctx context.Context, in *UpdateUserPipelineReleaseRequest, opts ...grpc.CallOption) (*UpdateUserPipelineReleaseResponse, error) {
	out := new(UpdateUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdateUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) DeleteUserPipelineRelease(ctx context.Context, in *DeleteUserPipelineReleaseRequest, opts ...grpc.CallOption) (*DeleteUserPipelineReleaseResponse, error) {
	out := new(DeleteUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeleteUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) RestoreUserPipelineRelease(ctx context.Context, in *RestoreUserPipelineReleaseRequest, opts ...grpc.CallOption) (*RestoreUserPipelineReleaseResponse, error) {
	out := new(RestoreUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RestoreUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) RenameUserPipelineRelease(ctx context.Context, in *RenameUserPipelineReleaseRequest, opts ...grpc.CallOption) (*RenameUserPipelineReleaseResponse, error) {
	out := new(RenameUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RenameUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) TriggerUserPipelineRelease(ctx context.Context, in *TriggerUserPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerUserPipelineReleaseResponse, error) {
	out := new(TriggerUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) TriggerAsyncUserPipelineRelease(ctx context.Context, in *TriggerAsyncUserPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerAsyncUserPipelineReleaseResponse, error) {
	out := new(TriggerAsyncUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerAsyncUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) CreateOrganizationPipeline(ctx context.Context, in *CreateOrganizationPipelineRequest, opts ...grpc.CallOption) (*CreateOrganizationPipelineResponse, error) {
	out := new(CreateOrganizationPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreateOrganizationPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) ListOrganizationPipelines(ctx context.Context, in *ListOrganizationPipelinesRequest, opts ...grpc.CallOption) (*ListOrganizationPipelinesResponse, error) {
	out := new(ListOrganizationPipelinesResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListOrganizationPipelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) GetOrganizationPipeline(ctx context.Context, in *GetOrganizationPipelineRequest, opts ...grpc.CallOption) (*GetOrganizationPipelineResponse, error) {
	out := new(GetOrganizationPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetOrganizationPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) UpdateOrganizationPipeline(ctx context.Context, in *UpdateOrganizationPipelineRequest, opts ...grpc.CallOption) (*UpdateOrganizationPipelineResponse, error) {
	out := new(UpdateOrganizationPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdateOrganizationPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) DeleteOrganizationPipeline(ctx context.Context, in *DeleteOrganizationPipelineRequest, opts ...grpc.CallOption) (*DeleteOrganizationPipelineResponse, error) {
	out := new(DeleteOrganizationPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeleteOrganizationPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) ValidateOrganizationPipeline(ctx context.Context, in *ValidateOrganizationPipelineRequest, opts ...grpc.CallOption) (*ValidateOrganizationPipelineResponse, error) {
	out := new(ValidateOrganizationPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ValidateOrganizationPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) RenameOrganizationPipeline(ctx context.Context, in *RenameOrganizationPipelineRequest, opts ...grpc.CallOption) (*RenameOrganizationPipelineResponse, error) {
	out := new(RenameOrganizationPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RenameOrganizationPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) TriggerOrganizationPipelineStream(ctx context.Context, in *TriggerOrganizationPipelineStreamRequest, opts ...grpc.CallOption) (PipelinePublicService_TriggerOrganizationPipelineStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PipelinePublicService_ServiceDesc.Streams[2], PipelinePublicService_TriggerOrganizationPipelineStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pipelinePublicServiceTriggerOrganizationPipelineStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PipelinePublicService_TriggerOrganizationPipelineStreamClient interface {
	Recv() (*TriggerOrganizationPipelineStreamResponse, error)
	grpc.ClientStream
}

type pipelinePublicServiceTriggerOrganizationPipelineStreamClient struct {
	grpc.ClientStream
}

func (x *pipelinePublicServiceTriggerOrganizationPipelineStreamClient) Recv() (*TriggerOrganizationPipelineStreamResponse, error) {
	m := new(TriggerOrganizationPipelineStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) TriggerOrganizationPipeline(ctx context.Context, in *TriggerOrganizationPipelineRequest, opts ...grpc.CallOption) (*TriggerOrganizationPipelineResponse, error) {
	out := new(TriggerOrganizationPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerOrganizationPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) TriggerAsyncOrganizationPipeline(ctx context.Context, in *TriggerAsyncOrganizationPipelineRequest, opts ...grpc.CallOption) (*TriggerAsyncOrganizationPipelineResponse, error) {
	out := new(TriggerAsyncOrganizationPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerAsyncOrganizationPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) CreateOrganizationPipelineRelease(ctx context.Context, in *CreateOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*CreateOrganizationPipelineReleaseResponse, error) {
	out := new(CreateOrganizationPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreateOrganizationPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) ListOrganizationPipelineReleases(ctx context.Context, in *ListOrganizationPipelineReleasesRequest, opts ...grpc.CallOption) (*ListOrganizationPipelineReleasesResponse, error) {
	out := new(ListOrganizationPipelineReleasesResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListOrganizationPipelineReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) GetOrganizationPipelineRelease(ctx context.Context, in *GetOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*GetOrganizationPipelineReleaseResponse, error) {
	out := new(GetOrganizationPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetOrganizationPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) UpdateOrganizationPipelineRelease(ctx context.Context, in *UpdateOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*UpdateOrganizationPipelineReleaseResponse, error) {
	out := new(UpdateOrganizationPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdateOrganizationPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) DeleteOrganizationPipelineRelease(ctx context.Context, in *DeleteOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*DeleteOrganizationPipelineReleaseResponse, error) {
	out := new(DeleteOrganizationPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeleteOrganizationPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) RestoreOrganizationPipelineRelease(ctx context.Context, in *RestoreOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*RestoreOrganizationPipelineReleaseResponse, error) {
	out := new(RestoreOrganizationPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RestoreOrganizationPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) RenameOrganizationPipelineRelease(ctx context.Context, in *RenameOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*RenameOrganizationPipelineReleaseResponse, error) {
	out := new(RenameOrganizationPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RenameOrganizationPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) TriggerOrganizationPipelineRelease(ctx context.Context, in *TriggerOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerOrganizationPipelineReleaseResponse, error) {
	out := new(TriggerOrganizationPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerOrganizationPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) TriggerAsyncOrganizationPipelineRelease(ctx context.Context, in *TriggerAsyncOrganizationPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerAsyncOrganizationPipelineReleaseResponse, error) {
	out := new(TriggerAsyncOrganizationPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerAsyncOrganizationPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) CheckName(ctx context.Context, in *CheckNameRequest, opts ...grpc.CallOption) (*CheckNameResponse, error) {
	out := new(CheckNameResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CheckName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) CreateUserSecret(ctx context.Context, in *CreateUserSecretRequest, opts ...grpc.CallOption) (*CreateUserSecretResponse, error) {
	out := new(CreateUserSecretResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreateUserSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) ListUserSecrets(ctx context.Context, in *ListUserSecretsRequest, opts ...grpc.CallOption) (*ListUserSecretsResponse, error) {
	out := new(ListUserSecretsResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListUserSecrets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) GetUserSecret(ctx context.Context, in *GetUserSecretRequest, opts ...grpc.CallOption) (*GetUserSecretResponse, error) {
	out := new(GetUserSecretResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetUserSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) UpdateUserSecret(ctx context.Context, in *UpdateUserSecretRequest, opts ...grpc.CallOption) (*UpdateUserSecretResponse, error) {
	out := new(UpdateUserSecretResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdateUserSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) DeleteUserSecret(ctx context.Context, in *DeleteUserSecretRequest, opts ...grpc.CallOption) (*DeleteUserSecretResponse, error) {
	out := new(DeleteUserSecretResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeleteUserSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) CreateOrganizationSecret(ctx context.Context, in *CreateOrganizationSecretRequest, opts ...grpc.CallOption) (*CreateOrganizationSecretResponse, error) {
	out := new(CreateOrganizationSecretResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreateOrganizationSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) ListOrganizationSecrets(ctx context.Context, in *ListOrganizationSecretsRequest, opts ...grpc.CallOption) (*ListOrganizationSecretsResponse, error) {
	out := new(ListOrganizationSecretsResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListOrganizationSecrets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) GetOrganizationSecret(ctx context.Context, in *GetOrganizationSecretRequest, opts ...grpc.CallOption) (*GetOrganizationSecretResponse, error) {
	out := new(GetOrganizationSecretResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetOrganizationSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) UpdateOrganizationSecret(ctx context.Context, in *UpdateOrganizationSecretRequest, opts ...grpc.CallOption) (*UpdateOrganizationSecretResponse, error) {
	out := new(UpdateOrganizationSecretResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdateOrganizationSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *pipelinePublicServiceClient) DeleteOrganizationSecret(ctx context.Context, in *DeleteOrganizationSecretRequest, opts ...grpc.CallOption) (*DeleteOrganizationSecretResponse, error) {
	out := new(DeleteOrganizationSecretResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeleteOrganizationSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListPipelineRuns(ctx context.Context, in *ListPipelineRunsRequest, opts ...grpc.CallOption) (*ListPipelineRunsResponse, error) {
	out := new(ListPipelineRunsResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListPipelineRuns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListComponentRuns(ctx context.Context, in *ListComponentRunsRequest, opts ...grpc.CallOption) (*ListComponentRunsResponse, error) {
	out := new(ListComponentRunsResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListComponentRuns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListPipelineRunsByRequester(ctx context.Context, in *ListPipelineRunsByRequesterRequest, opts ...grpc.CallOption) (*ListPipelineRunsByRequesterResponse, error) {
	out := new(ListPipelineRunsByRequesterResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListPipelineRunsByRequester_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListNamespaceConnections(ctx context.Context, in *ListNamespaceConnectionsRequest, opts ...grpc.CallOption) (*ListNamespaceConnectionsResponse, error) {
	out := new(ListNamespaceConnectionsResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListNamespaceConnections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetNamespaceConnection(ctx context.Context, in *GetNamespaceConnectionRequest, opts ...grpc.CallOption) (*GetNamespaceConnectionResponse, error) {
	out := new(GetNamespaceConnectionResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetNamespaceConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) CreateNamespaceConnection(ctx context.Context, in *CreateNamespaceConnectionRequest, opts ...grpc.CallOption) (*CreateNamespaceConnectionResponse, error) {
	out := new(CreateNamespaceConnectionResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreateNamespaceConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) UpdateNamespaceConnection(ctx context.Context, in *UpdateNamespaceConnectionRequest, opts ...grpc.CallOption) (*UpdateNamespaceConnectionResponse, error) {
	out := new(UpdateNamespaceConnectionResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdateNamespaceConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) DeleteNamespaceConnection(ctx context.Context, in *DeleteNamespaceConnectionRequest, opts ...grpc.CallOption) (*DeleteNamespaceConnectionResponse, error) {
	out := new(DeleteNamespaceConnectionResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeleteNamespaceConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TestNamespaceConnection(ctx context.Context, in *TestNamespaceConnectionRequest, opts ...grpc.CallOption) (*TestNamespaceConnectionResponse, error) {
	out := new(TestNamespaceConnectionResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TestNamespaceConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListPipelineIDsByConnectionID(ctx context.Context, in *ListPipelineIDsByConnectionIDRequest, opts ...grpc.CallOption) (*ListPipelineIDsByConnectionIDResponse, error) {
	out := new(ListPipelineIDsByConnectionIDResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListPipelineIDsByConnectionID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListIntegrations(ctx context.Context, in *ListIntegrationsRequest, opts ...grpc.CallOption) (*ListIntegrationsResponse, error) {
	out := new(ListIntegrationsResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListIntegrations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetIntegration(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*GetIntegrationResponse, error) {
	out := new(GetIntegrationResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelinePublicServiceServer is the server API for PipelinePublicService service.
// All implementations should embed UnimplementedPipelinePublicServiceServer
// for forward compatibility
type PipelinePublicServiceServer interface {
	// Check if the pipeline server is alive
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Check if the pipeline server is ready
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// Get hub status
	//
	// Return the stats of the hub
	GetHubStats(context.Context, *GetHubStatsRequest) (*GetHubStatsResponse, error)
	// List accessible pipelines
	//
	// Returns a paginated list of pipelines that are visible to the requester.
	ListPipelines(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error)
	// Get a pipeline by UID
	//
	// Returns the details of a pipeline by a permalink defined by the resource
	// UID.
	LookUpPipeline(context.Context, *LookUpPipelineRequest) (*LookUpPipelineResponse, error)
	// List namespace pipelines
	//
	// Returns a paginated list of pipelines of a namespace
	ListNamespacePipelines(context.Context, *ListNamespacePipelinesRequest) (*ListNamespacePipelinesResponse, error)
	// Create a new pipeline
	//
	// Creates a new pipeline under a namespace.
	CreateNamespacePipeline(context.Context, *CreateNamespacePipelineRequest) (*CreateNamespacePipelineResponse, error)
	// Get a pipeline
	//
	// Returns the details of a pipeline.
	GetNamespacePipeline(context.Context, *GetNamespacePipelineRequest) (*GetNamespacePipelineResponse, error)
	// Update a pipeline
	//
	// Udpates a pipeline, accessing it by its resource name, which is defined by
	// the parent namespace and the ID of the pipeline. The authenticated namespace must be
	// the parent of the pipeline in order to modify it.
	//
	// In REST requests, only the supplied pipeline fields will be taken into
	// account when updating the resource.
	UpdateNamespacePipeline(context.Context, *UpdateNamespacePipelineRequest) (*UpdateNamespacePipelineResponse, error)
	// Delete a pipeline
	//
	// Deletes a pipeline, accesing it by its resource name, which is defined by
	// the parent namespace and the ID of the pipeline. The authenticated namespace must be
	// the parent of the pipeline in order to delete it.
	DeleteNamespacePipeline(context.Context, *DeleteNamespacePipelineRequest) (*DeleteNamespacePipelineResponse, error)
	// Validate a pipeline
	//
	// Validates a pipeline by its resource name, which is defined by the parent
	// namespace and the ID of the pipeline.
	//
	// Validation checks the recipe of the pipeline and the status of its components.
	ValidateNamespacePipeline(context.Context, *ValidateNamespacePipelineRequest) (*ValidateNamespacePipelineResponse, error)
	// Rename a pipeline
	//
	// Updates the ID of a pipeline. Since this is an output-only field, a custom
	// method is required to modify it.
	//
	// The pipeline name will be updated accordingly, as it is  composed by the
	// parent namespace and ID of the pipeline (e.g.
	// `namespaces/luigi/pipelines/pizza-recipe-generator`).
	//
	// The authenticated namespace must be the parent of the pipeline in order to
	// perform this action.
	RenameNamespacePipeline(context.Context, *RenameNamespacePipelineRequest) (*RenameNamespacePipelineResponse, error)
	// Clone a pipeline
	//
	// Clones a pipeline owned by a namespace. The new pipeline may have a different
	// parent, and this can be either a namespace or an organization.
	CloneNamespacePipeline(context.Context, *CloneNamespacePipelineRequest) (*CloneNamespacePipelineResponse, error)
	// Dispatch Pipeline Webhook Event
	//
	// Handles webhook events by routing them to the appropriate pipeline based on the webhook type and message.
	// The webhook type determines which component processes the event, while the message payload contains data
	// that triggers pipeline execution. The pipeline processes the event using configured handlers and returns
	// a response to the webhook sender.
	DispatchPipelineWebhookEvent(context.Context, *DispatchPipelineWebhookEventRequest) (*DispatchPipelineWebhookEventResponse, error)
	// Trigger a pipeline
	//
	// Triggers the execution of a pipeline synchronously, i.e., the result is
	// sent back to the namespace right after the data is processed. This method is
	// intended for real-time inference when low latency is of concern.
	//
	// The pipeline is identified by its resource name, formed by the parent namespace
	// and ID of the pipeline.
	//
	// For more information, see [Run NamespacePipeline](https://www.instill.tech/docs/vdp/run).
	TriggerNamespacePipeline(context.Context, *TriggerNamespacePipelineRequest) (*TriggerNamespacePipelineResponse, error)
	// Trigger a pipeline via streaming
	//
	// Triggers the execution of a pipeline asynchronously and streams back the response.
	// This method is intended for real-time inference when low latency is of concern
	// and the response needs to be processed incrementally.
	//
	// The pipeline is identified by its resource name, formed by the parent namespace
	// and ID of the pipeline.
	TriggerNamespacePipelineWithStream(*TriggerNamespacePipelineWithStreamRequest, PipelinePublicService_TriggerNamespacePipelineWithStreamServer) error
	// Trigger a pipeline asynchronously
	//
	// Triggers the execution of a pipeline asynchronously, i.e., the result
	// contains the necessary information to access the result and status of the
	// operation. This method is intended for cases that require long-running
	// workloads.
	//
	// The pipeline is identified by its resource name, formed by the parent namespace
	// and ID of the pipeline.
	//
	// For more information, see [Run NamespacePipeline](https://www.instill.tech/docs/vdp/run).
	TriggerAsyncNamespacePipeline(context.Context, *TriggerAsyncNamespacePipelineRequest) (*TriggerAsyncNamespacePipelineResponse, error)
	// Create a pipeline release
	//
	// Commits the version of a pipeline, identified by its resource name, which
	// is formed by the parent namespace and ID of the pipeline.
	//
	// The authenticated namespace must be the parent of the pipeline in order to
	// perform this action.
	CreateNamespacePipelineRelease(context.Context, *CreateNamespacePipelineReleaseRequest) (*CreateNamespacePipelineReleaseResponse, error)
	// List the releases in a pipeline
	//
	// Lists the commited versions of a pipeline, identified by its resource
	// name, which is formed by the parent namespace and ID of the pipeline.
	ListNamespacePipelineReleases(context.Context, *ListNamespacePipelineReleasesRequest) (*ListNamespacePipelineReleasesResponse, error)
	// Get a pipeline release
	//
	// Gets the details of a pipeline release, where the pipeline is identified
	// by its resource name, formed by its parent namespace and ID.
	GetNamespacePipelineRelease(context.Context, *GetNamespacePipelineReleaseRequest) (*GetNamespacePipelineReleaseResponse, error)
	// Update a pipeline release
	//
	// Updates the details of a pipeline release, where the pipeline is
	// identified by its resource name, formed by its parent namespace and ID.
	//
	// The authenticated namespace must be the parent of the pipeline in order to
	// perform this action.
	UpdateNamespacePipelineRelease(context.Context, *UpdateNamespacePipelineReleaseRequest) (*UpdateNamespacePipelineReleaseResponse, error)
	// Delete a pipeline release
	//
	// Deletes a pipeline release, where the pipeline is identified by its
	// resource name, formed by its parent namespace and ID.
	//
	// The authenticated namespace must be the parent of the pipeline in order to
	// perform this action.
	DeleteNamespacePipelineRelease(context.Context, *DeleteNamespacePipelineReleaseRequest) (*DeleteNamespacePipelineReleaseResponse, error)
	// Clone a pipeline release
	//
	// Clones a pipeline release owned by a namespace. The new pipeline may have a different
	// parent, and this can be either a namespace or an organization.
	CloneNamespacePipelineRelease(context.Context, *CloneNamespacePipelineReleaseRequest) (*CloneNamespacePipelineReleaseResponse, error)
	// Trigger a pipeline release
	//
	// Triggers the synchronous execution of of a pipeline. While the trigger
	// endpoint (where the release version isn't specified) triggers the pipeline
	// at its latest release, this method allows the client to specified any
	// committed release.
	//
	// The pipeline is identified by its resource name, formed by its parent namespace
	// and ID.
	TriggerNamespacePipelineRelease(context.Context, *TriggerNamespacePipelineReleaseRequest) (*TriggerNamespacePipelineReleaseResponse, error)
	// Trigger a pipeline release asynchronously
	//
	// Triggers the asynchronous execution of of a pipeline. While the trigger
	// endpoint (where the release version isn't specified) triggers the pipeline
	// at its latest release, this method allows the client to specified any
	// committed release.
	//
	// The pipeline is identified by its resource name, formed by its parent namespace
	// and ID.
	TriggerAsyncNamespacePipelineRelease(context.Context, *TriggerAsyncNamespacePipelineReleaseRequest) (*TriggerAsyncNamespacePipelineReleaseResponse, error)
	// Create a secret
	//
	// Creates a new secret under the parenthood of an namespace.
	CreateNamespaceSecret(context.Context, *CreateNamespaceSecretRequest) (*CreateNamespaceSecretResponse, error)
	// List secrets
	//
	// Returns a paginated list of secrets that belong to the specified
	// namespace.
	ListNamespaceSecrets(context.Context, *ListNamespaceSecretsRequest) (*ListNamespaceSecretsResponse, error)
	// Get a secret
	//
	// Returns the details of an namespace-owned secret by its resource name,
	// which is defined by the parent namespace and the ID of the secret.
	GetNamespaceSecret(context.Context, *GetNamespaceSecretRequest) (*GetNamespaceSecretResponse, error)
	// Update a secret
	//
	// # Udpates a secret, accessing it by its resource name, which is defined by
	//
	// In REST requests, only the supplied secret fields will be taken into
	// account when updating the resource.
	UpdateNamespaceSecret(context.Context, *UpdateNamespaceSecretRequest) (*UpdateNamespaceSecretResponse, error)
	// Delete a secret
	//
	// Deletes a secret, accesing it by its resource name, which is defined by
	// the parent namespace and the ID of the secret.
	DeleteNamespaceSecret(context.Context, *DeleteNamespaceSecretRequest) (*DeleteNamespaceSecretResponse, error)
	// List component definitions
	//
	// Returns a paginated list of component definitions, regardless their type.
	// This offers a single source of truth, with pagination and filter
	// capabilities, for the components that might be used in a VDP pipeline.
	ListComponentDefinitions(context.Context, *ListComponentDefinitionsRequest) (*ListComponentDefinitionsResponse, error)
	// Get the details of a long-running operation
	//
	// This method allows requesters to request the status and outcome of
	// long-running operations such as asynchronous pipeline triggers.
	GetOperation(context.Context, *GetOperationRequest) (*GetOperationResponse, error)
	// Deprecated: Do not use.
	// Create a new user pipeline
	//
	// Creates a new pipeline under the parenthood of a user. Users can only
	// create a pipeline as the parent of that resource (i.e. the authenticated
	// user must match the `parent` path parameter).
	CreateUserPipeline(context.Context, *CreateUserPipelineRequest) (*CreateUserPipelineResponse, error)
	// Deprecated: Do not use.
	// List user pipelines
	//
	// Returns a paginated list of pipelines that belong to the specified user.
	// The parent user may be different from the authenticated user, in which
	// case the results will contain the pipelines that are visible to the
	// latter.
	ListUserPipelines(context.Context, *ListUserPipelinesRequest) (*ListUserPipelinesResponse, error)
	// Deprecated: Do not use.
	// Get a pipeline owned by a user
	//
	// Returns the details of a user-owned pipeline by its resource name, which is defined
	// by the parent user and the ID of the pipeline.
	GetUserPipeline(context.Context, *GetUserPipelineRequest) (*GetUserPipelineResponse, error)
	// Deprecated: Do not use.
	// Update a pipeline owned by a user
	//
	// Udpates a pipeline, accessing it by its resource name, which is defined by
	// the parent user and the ID of the pipeline. The authenticated user must be
	// the parent of the pipeline in order to modify it.
	//
	// In REST requests, only the supplied pipeline fields will be taken into
	// account when updating the resource.
	UpdateUserPipeline(context.Context, *UpdateUserPipelineRequest) (*UpdateUserPipelineResponse, error)
	// Deprecated: Do not use.
	// Delete a pipeline owned by a user
	//
	// Deletes a pipeline, accesing it by its resource name, which is defined by
	// the parent user and the ID of the pipeline. The authenticated user must be
	// the parent of the pipeline in order to delete it.
	DeleteUserPipeline(context.Context, *DeleteUserPipelineRequest) (*DeleteUserPipelineResponse, error)
	// Deprecated: Do not use.
	// Validate a pipeline a pipeline owned by a user
	//
	// Validates a pipeline by its resource name, which is defined by the parent
	// user and the ID of the pipeline.
	//
	// Validation checks the recipe of the pipeline and the status of its components.
	ValidateUserPipeline(context.Context, *ValidateUserPipelineRequest) (*ValidateUserPipelineResponse, error)
	// Deprecated: Do not use.
	// Rename a pipeline owned by a user
	//
	// Updates the ID of a pipeline. Since this is an output-only field, a custom
	// method is required to modify it.
	//
	// The pipeline name will be updated accordingly, as it is  composed by the
	// parent user and ID of the pipeline (e.g.
	// `users/luigi/pipelines/pizza-recipe-generator`).
	//
	// The authenticated user must be the parent of the pipeline in order to
	// perform this action.
	RenameUserPipeline(context.Context, *RenameUserPipelineRequest) (*RenameUserPipelineResponse, error)
	// Deprecated: Do not use.
	// Trigger a pipeline owned by a user
	//
	// Triggers the execution of a pipeline synchronously, i.e., the result is
	// sent back to the user right after the data is processed. This method is
	// intended for real-time inference when low latency is of concern.
	//
	// The pipeline is identified by its resource name, formed by the parent user
	// and ID of the pipeline.
	//
	// For more information, see [Run Pipeline](https://www.instill.tech/docs/vdp/run).
	TriggerUserPipeline(context.Context, *TriggerUserPipelineRequest) (*TriggerUserPipelineResponse, error)
	// Deprecated: Do not use.
	// Trigger a pipeline owned by a user and stream back the response
	//
	// Triggers the execution of a pipeline asynchronously and streams back the response.
	// This method is intended for real-time inference when low latency is of concern
	// and the response needs to be processed incrementally.
	//
	// The pipeline is identified by its resource name, formed by the parent user
	// and ID of the pipeline.
	TriggerUserPipelineWithStream(*TriggerUserPipelineWithStreamRequest, PipelinePublicService_TriggerUserPipelineWithStreamServer) error
	// Deprecated: Do not use.
	// Trigger a pipeline owned by a user asynchronously
	//
	// Triggers the execution of a pipeline asynchronously, i.e., the result
	// contains the necessary information to access the result and status of the
	// operation. This method is intended for cases that require long-running
	// workloads.
	//
	// The pipeline is identified by its resource name, formed by the parent user
	// and ID of the pipeline.
	//
	// For more information, see [Run Pipeline](https://www.instill.tech/docs/vdp/run).
	TriggerAsyncUserPipeline(context.Context, *TriggerAsyncUserPipelineRequest) (*TriggerAsyncUserPipelineResponse, error)
	// Deprecated: Do not use.
	// Release a version of a pipeline owned by a user
	//
	// Commits the version of a pipeline, identified by its resource name, which
	// is formed by the parent user and ID of the pipeline.
	//
	// The authenticated user must be the parent of the pipeline in order to
	// perform this action.
	CreateUserPipelineRelease(context.Context, *CreateUserPipelineReleaseRequest) (*CreateUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// List the releases in a pipeline owned by a user
	//
	// Lists the commited versions of a pipeline, identified by its resource
	// name, which is formed by the parent user and ID of the pipeline.
	ListUserPipelineReleases(context.Context, *ListUserPipelineReleasesRequest) (*ListUserPipelineReleasesResponse, error)
	// Deprecated: Do not use.
	// Get a release in a pipeline owned by a user
	//
	// Gets the details of a pipeline release, where the pipeline is identified
	// by its resource name, formed by its parent user and ID.
	GetUserPipelineRelease(context.Context, *GetUserPipelineReleaseRequest) (*GetUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Update a release in a pipeline owned by a user
	//
	// Updates the details of a pipeline release, where the pipeline is
	// identified by its resource name, formed by its parent user and ID.
	//
	// The authenticated user must be the parent of the pipeline in order to
	// perform this action.
	UpdateUserPipelineRelease(context.Context, *UpdateUserPipelineReleaseRequest) (*UpdateUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Delete a release in a pipeline owned by a user
	//
	// Deletes a pipeline release, where the pipeline is identified by its
	// resource name, formed by its parent user and ID.
	//
	// The authenticated user must be the parent of the pipeline in order to
	// perform this action.
	DeleteUserPipelineRelease(context.Context, *DeleteUserPipelineReleaseRequest) (*DeleteUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Set the version of a pipeline owned by a user to a pinned release
	//
	// Sets the pipeline configuration to a pinned version defined by a release.
	//
	// The pipeline is identified by its resource name, formed by its parent user
	// and ID.
	//
	// The authenticated user must be the parent of the pipeline in order to
	// perform this action.
	RestoreUserPipelineRelease(context.Context, *RestoreUserPipelineReleaseRequest) (*RestoreUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Rename a release in a pipeline owned by a user
	//
	// Updates the ID of a pipeline release, where the pipeline is identified by
	// its resource name, formed by the parent user and ID. Since this is an
	// output-only field, a custom method is required to modify it.
	//
	// The pipeline release name will be updated accordingly, as it is  composed
	// by the pipeline name and the ID of the release (e.g.
	// `users/luigi/pipelines/pizza-recipe-generator/releases/v0.2.1`).
	//
	// The authenticated user must be the parent of the pipeline in order to
	// perform this action.
	RenameUserPipelineRelease(context.Context, *RenameUserPipelineReleaseRequest) (*RenameUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Trigger a version of a pipeline owned by a user
	//
	// Triggers the synchronous execution of of a pipeline. While the trigger
	// endpoint (where the release version isn't specified) triggers the pipeline
	// at its latest release, this method allows the client to specified any
	// committed release.
	//
	// The pipeline is identified by its resource name, formed by its parent user
	// and ID.
	TriggerUserPipelineRelease(context.Context, *TriggerUserPipelineReleaseRequest) (*TriggerUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Trigger a version of a pipeline owned by a user asynchronously
	//
	// Triggers the asynchronous execution of of a pipeline. While the trigger
	// endpoint (where the release version isn't specified) triggers the pipeline
	// at its latest release, this method allows the client to specified any
	// committed release.
	//
	// The pipeline is identified by its resource name, formed by its parent user
	// and ID.
	TriggerAsyncUserPipelineRelease(context.Context, *TriggerAsyncUserPipelineReleaseRequest) (*TriggerAsyncUserPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Create a new organization pipeline
	//
	// Creates a new pipeline under the parenthood of an organization.
	CreateOrganizationPipeline(context.Context, *CreateOrganizationPipelineRequest) (*CreateOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// List organization pipelines
	//
	// Returns a paginated list of pipelines that belong to the specified
	// organization.
	ListOrganizationPipelines(context.Context, *ListOrganizationPipelinesRequest) (*ListOrganizationPipelinesResponse, error)
	// Deprecated: Do not use.
	// Get a pipeline owned by an organization
	//
	// Returns the details of an organization-owned pipeline by its resource name,
	// which is defined by the parent organization and the ID of the pipeline.
	GetOrganizationPipeline(context.Context, *GetOrganizationPipelineRequest) (*GetOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// Update a pipeline owned by an organization
	//
	// # Udpates a pipeline, accessing it by its resource name, which is defined by
	//
	// In REST requests, only the supplied pipeline fields will be taken into
	// account when updating the resource.
	UpdateOrganizationPipeline(context.Context, *UpdateOrganizationPipelineRequest) (*UpdateOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// Delete a pipeline owned by an organization
	//
	// Deletes a pipeline, accesing it by its resource name, which is defined by
	// the parent organization and the ID of the pipeline.
	DeleteOrganizationPipeline(context.Context, *DeleteOrganizationPipelineRequest) (*DeleteOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// Validate a pipeline a pipeline owned by an organization
	//
	// Validates a pipeline by its resource name, which is defined by the parent
	// organization and the ID of the pipeline.
	//
	// Validation checks the recipe of the pipeline and the status of its
	// components.
	ValidateOrganizationPipeline(context.Context, *ValidateOrganizationPipelineRequest) (*ValidateOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// Rename a pipeline owned by an organization
	//
	// Updates the ID of a pipeline. Since this is an output-only field, a custom
	// method is required to modify it.
	//
	// The pipeline name will be updated accordingly, as it is  composed by the
	// parent organization and ID of the pipeline (e.g.
	// `organizations/luigi/pipelines/pizza-recipe-generator`).
	RenameOrganizationPipeline(context.Context, *RenameOrganizationPipelineRequest) (*RenameOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// Trigger a pipeline owned by an organization
	//
	// Triggers the execution of a pipeline synchronously, i.e., the result is sent
	// back to the organization right after the data is processed. This method is
	// intended for real-time inference when low latency is of concern.
	//
	// The pipeline is identified by its resource name, formed by the parent
	// organization and ID of the pipeline.
	//
	// For more information, see [Run Pipeline](https://www.instill.tech/docs/vdp/run).
	TriggerOrganizationPipelineStream(*TriggerOrganizationPipelineStreamRequest, PipelinePublicService_TriggerOrganizationPipelineStreamServer) error
	// Deprecated: Do not use.
	// Trigger a pipeline owned by an organization
	//
	// Triggers the execution of a pipeline synchronously, i.e., the result is sent
	// back to the organization right after the data is processed. This method is
	// intended for real-time inference when low latency is of concern.
	//
	// The pipeline is identified by its resource name, formed by the parent
	// organization and ID of the pipeline.
	//
	// For more information, see [Run Pipeline](https://www.instill.tech/docs/vdp/run).
	TriggerOrganizationPipeline(context.Context, *TriggerOrganizationPipelineRequest) (*TriggerOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// Trigger a pipeline owned by an organization asynchronously
	//
	// Triggers the execution of a pipeline asynchronously, i.e., the result
	// contains the necessary information to access the result and status of the
	// operation. This method is intended for cases that require long-running
	// workloads.
	//
	// The pipeline is identified by its resource name, formed by the parent
	// organization and ID of the pipeline.
	//
	// For more information, see [Run Pipeline](https://www.instill.tech/docs/vdp/run).
	TriggerAsyncOrganizationPipeline(context.Context, *TriggerAsyncOrganizationPipelineRequest) (*TriggerAsyncOrganizationPipelineResponse, error)
	// Deprecated: Do not use.
	// Release a version of a pipeline owned by an organization
	//
	// Commits the version of a pipeline, identified by its resource name, which is
	// formed by the parent organization and ID of the pipeline.
	CreateOrganizationPipelineRelease(context.Context, *CreateOrganizationPipelineReleaseRequest) (*CreateOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// List the releases in a pipeline owned by an organization
	//
	// Lists the commited versions of a pipeline, identified by its resource name,
	// which is formed by the parent organization and ID of the pipeline.
	ListOrganizationPipelineReleases(context.Context, *ListOrganizationPipelineReleasesRequest) (*ListOrganizationPipelineReleasesResponse, error)
	// Deprecated: Do not use.
	// Get a release in a pipeline owned by an organization
	//
	// Gets the details of a pipeline release, where the pipeline is identified by
	// its resource name, formed by its parent organization and ID.
	GetOrganizationPipelineRelease(context.Context, *GetOrganizationPipelineReleaseRequest) (*GetOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Update a release in a pipeline owned by an organization
	//
	// Updates the details of a pipeline release, where the pipeline is identified
	// by its resource name, formed by its parent organization and ID.
	UpdateOrganizationPipelineRelease(context.Context, *UpdateOrganizationPipelineReleaseRequest) (*UpdateOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Delete a release in a pipeline owned by an organization
	//
	// Deletes a pipeline release, where the pipeline is identified by its resource
	// name, formed by its parent organization and ID.
	DeleteOrganizationPipelineRelease(context.Context, *DeleteOrganizationPipelineReleaseRequest) (*DeleteOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Set the version of a pipeline owned by an organization to a pinned release
	//
	// Sets the pipeline configuration to a pinned version defined by a release.
	//
	// The pipeline is identified by its resource name, formed by its parent
	// organization and ID.
	RestoreOrganizationPipelineRelease(context.Context, *RestoreOrganizationPipelineReleaseRequest) (*RestoreOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Rename a release in a pipeline owned by an organization
	//
	// Updates the ID of a pipeline release, where the pipeline is identified by
	// its resource name, formed by the parent organization and ID. Since this is
	// an output-only field, a custom method is required to modify it.
	//
	// The pipeline release name will be updated accordingly, as it is  composed by
	// the pipeline name and the ID of the release (e.g.
	// `organizations/luigi/pipelines/pizza-recipe-generator/releases/v0.2.1`).
	RenameOrganizationPipelineRelease(context.Context, *RenameOrganizationPipelineReleaseRequest) (*RenameOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Trigger a version of a pipeline owned by an organization
	//
	// Triggers the synchronous execution of of a pipeline. While the trigger
	// endpoint (where the release version isn't specified) triggers the pipeline
	// at its latest release, this method allows the client to specified any
	// committed release.
	//
	// The pipeline is identified by its resource name, formed by its parent
	// organization and ID.
	TriggerOrganizationPipelineRelease(context.Context, *TriggerOrganizationPipelineReleaseRequest) (*TriggerOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Trigger a version of a pipeline owned by an organization asynchronously
	//
	// Triggers the asynchronous execution of of a pipeline. While the trigger
	// endpoint (where the release version isn't specified) triggers the pipeline
	// at its latest release, this method allows the client to specified any
	// committed release.
	//
	// The pipeline is identified by its resource name, formed by its parent
	// organization and ID.
	TriggerAsyncOrganizationPipelineRelease(context.Context, *TriggerAsyncOrganizationPipelineReleaseRequest) (*TriggerAsyncOrganizationPipelineReleaseResponse, error)
	// Deprecated: Do not use.
	// Check the availibity of a resource name
	//
	// Check whether a resource name is already in use. Currently this endpoint
	// only supports pipeline and connector resource names.
	CheckName(context.Context, *CheckNameRequest) (*CheckNameResponse, error)
	// Deprecated: Do not use.
	// Create a new user secret
	//
	// Creates a new secret under the parenthood of an user.
	CreateUserSecret(context.Context, *CreateUserSecretRequest) (*CreateUserSecretResponse, error)
	// Deprecated: Do not use.
	// List user secrets
	//
	// Returns a paginated list of secrets that belong to the specified
	// user.
	ListUserSecrets(context.Context, *ListUserSecretsRequest) (*ListUserSecretsResponse, error)
	// Deprecated: Do not use.
	// Get a secret owned by an user
	//
	// Returns the details of an user-owned secret by its resource name,
	// which is defined by the parent user and the ID of the secret.
	GetUserSecret(context.Context, *GetUserSecretRequest) (*GetUserSecretResponse, error)
	// Deprecated: Do not use.
	// Update a secret owned by an user
	//
	// # Udpates a secret, accessing it by its resource name, which is defined by
	//
	// In REST requests, only the supplied secret fields will be taken into
	// account when updating the resource.
	UpdateUserSecret(context.Context, *UpdateUserSecretRequest) (*UpdateUserSecretResponse, error)
	// Deprecated: Do not use.
	// Delete a secret owned by an user
	//
	// Deletes a secret, accesing it by its resource name, which is defined by
	// the parent user and the ID of the secret.
	DeleteUserSecret(context.Context, *DeleteUserSecretRequest) (*DeleteUserSecretResponse, error)
	// Deprecated: Do not use.
	// Create a new organization secret
	//
	// Creates a new secret under the parenthood of an organization.
	CreateOrganizationSecret(context.Context, *CreateOrganizationSecretRequest) (*CreateOrganizationSecretResponse, error)
	// Deprecated: Do not use.
	// List organization secrets
	//
	// Returns a paginated list of secrets that belong to the specified
	// organization.
	ListOrganizationSecrets(context.Context, *ListOrganizationSecretsRequest) (*ListOrganizationSecretsResponse, error)
	// Deprecated: Do not use.
	// Get a secret owned by an organization
	//
	// Returns the details of an organization-owned secret by its resource name,
	// which is defined by the parent organization and the ID of the secret.
	GetOrganizationSecret(context.Context, *GetOrganizationSecretRequest) (*GetOrganizationSecretResponse, error)
	// Deprecated: Do not use.
	// Update a secret owned by an organization
	//
	// # Udpates a secret, accessing it by its resource name, which is defined by
	//
	// In REST requests, only the supplied secret fields will be taken into
	// account when updating the resource.
	UpdateOrganizationSecret(context.Context, *UpdateOrganizationSecretRequest) (*UpdateOrganizationSecretResponse, error)
	// Deprecated: Do not use.
	// Delete a secret owned by an organization
	//
	// Deletes a secret, accesing it by its resource name, which is defined by
	// the parent organization and the ID of the secret.
	DeleteOrganizationSecret(context.Context, *DeleteOrganizationSecretRequest) (*DeleteOrganizationSecretResponse, error)
	// List Pipeline Runs
	//
	// Returns a paginated list of runs for a given pipeline. When the requester
	// is the owner of the pipeline, they will be able to all the pipeline runs,
	// regardless who requested the trigger (the view will be partial to hide
	// sensitive data like e.g. the trigger input and output). Other requesters
	// will only be able to see the runs requested by themselves.
	ListPipelineRuns(context.Context, *ListPipelineRunsRequest) (*ListPipelineRunsResponse, error)
	// List Component Runs
	//
	// Returns the information of each component execution within a pipeline run.
	ListComponentRuns(context.Context, *ListComponentRunsRequest) (*ListComponentRunsResponse, error)
	// List Pipeline Runs By Requester
	//
	// Returns a paginated list of runs for requested by a namespace. The
	// response may contain runs from several pipelines.
	ListPipelineRunsByRequester(context.Context, *ListPipelineRunsByRequesterRequest) (*ListPipelineRunsByRequesterResponse, error)
	// List namespace connections
	//
	// Returns a paginated list of connections created by a namespace.
	ListNamespaceConnections(context.Context, *ListNamespaceConnectionsRequest) (*ListNamespaceConnectionsResponse, error)
	// Get a namespace connection
	//
	// Returns the details of a connection.
	GetNamespaceConnection(context.Context, *GetNamespaceConnectionRequest) (*GetNamespaceConnectionResponse, error)
	// Create a connection
	//
	// Creates a connection under the ownership of a namespace.
	CreateNamespaceConnection(context.Context, *CreateNamespaceConnectionRequest) (*CreateNamespaceConnectionResponse, error)
	// Update a connection
	//
	// Updates a connection with the supplied connection fields.
	UpdateNamespaceConnection(context.Context, *UpdateNamespaceConnectionRequest) (*UpdateNamespaceConnectionResponse, error)
	// Delete a connection
	//
	// Deletes a connection.
	DeleteNamespaceConnection(context.Context, *DeleteNamespaceConnectionRequest) (*DeleteNamespaceConnectionResponse, error)
	// Test a connection
	//
	// Makes a request to the 3rd party app that the connection is configured to
	// communicate with, and checks the result of the call. If the test fails,
	// the response status and error message will provide more information about
	// the failure.
	//
	// Note that this action might affect the quota or billing of the integrated
	// account in the 3rd party app.
	TestNamespaceConnection(context.Context, *TestNamespaceConnectionRequest) (*TestNamespaceConnectionResponse, error)
	// List pipelines that reference a connection
	//
	// Returns a paginated list with the IDs of the pipelines that reference a
	// given connection. All the pipelines will belong to the same namespace as
	// the connection.
	ListPipelineIDsByConnectionID(context.Context, *ListPipelineIDsByConnectionIDRequest) (*ListPipelineIDsByConnectionIDResponse, error)
	// List integrations
	//
	// Returns a paginated list of available integrations.
	ListIntegrations(context.Context, *ListIntegrationsRequest) (*ListIntegrationsResponse, error)
	// Get an integration
	//
	// Returns the details of an integration.
	GetIntegration(context.Context, *GetIntegrationRequest) (*GetIntegrationResponse, error)
}

// UnimplementedPipelinePublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPipelinePublicServiceServer struct {
}

func (UnimplementedPipelinePublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedPipelinePublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetHubStats(context.Context, *GetHubStatsRequest) (*GetHubStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHubStats not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListPipelines(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelines not implemented")
}
func (UnimplementedPipelinePublicServiceServer) LookUpPipeline(context.Context, *LookUpPipelineRequest) (*LookUpPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListNamespacePipelines(context.Context, *ListNamespacePipelinesRequest) (*ListNamespacePipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespacePipelines not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreateNamespacePipeline(context.Context, *CreateNamespacePipelineRequest) (*CreateNamespacePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespacePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetNamespacePipeline(context.Context, *GetNamespacePipelineRequest) (*GetNamespacePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespacePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdateNamespacePipeline(context.Context, *UpdateNamespacePipelineRequest) (*UpdateNamespacePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespacePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeleteNamespacePipeline(context.Context, *DeleteNamespacePipelineRequest) (*DeleteNamespacePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespacePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ValidateNamespacePipeline(context.Context, *ValidateNamespacePipelineRequest) (*ValidateNamespacePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateNamespacePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RenameNamespacePipeline(context.Context, *RenameNamespacePipelineRequest) (*RenameNamespacePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameNamespacePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CloneNamespacePipeline(context.Context, *CloneNamespacePipelineRequest) (*CloneNamespacePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneNamespacePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DispatchPipelineWebhookEvent(context.Context, *DispatchPipelineWebhookEventRequest) (*DispatchPipelineWebhookEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DispatchPipelineWebhookEvent not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerNamespacePipeline(context.Context, *TriggerNamespacePipelineRequest) (*TriggerNamespacePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerNamespacePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerNamespacePipelineWithStream(*TriggerNamespacePipelineWithStreamRequest, PipelinePublicService_TriggerNamespacePipelineWithStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TriggerNamespacePipelineWithStream not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerAsyncNamespacePipeline(context.Context, *TriggerAsyncNamespacePipelineRequest) (*TriggerAsyncNamespacePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncNamespacePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreateNamespacePipelineRelease(context.Context, *CreateNamespacePipelineReleaseRequest) (*CreateNamespacePipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespacePipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListNamespacePipelineReleases(context.Context, *ListNamespacePipelineReleasesRequest) (*ListNamespacePipelineReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespacePipelineReleases not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetNamespacePipelineRelease(context.Context, *GetNamespacePipelineReleaseRequest) (*GetNamespacePipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespacePipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdateNamespacePipelineRelease(context.Context, *UpdateNamespacePipelineReleaseRequest) (*UpdateNamespacePipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespacePipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeleteNamespacePipelineRelease(context.Context, *DeleteNamespacePipelineReleaseRequest) (*DeleteNamespacePipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespacePipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CloneNamespacePipelineRelease(context.Context, *CloneNamespacePipelineReleaseRequest) (*CloneNamespacePipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneNamespacePipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerNamespacePipelineRelease(context.Context, *TriggerNamespacePipelineReleaseRequest) (*TriggerNamespacePipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerNamespacePipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerAsyncNamespacePipelineRelease(context.Context, *TriggerAsyncNamespacePipelineReleaseRequest) (*TriggerAsyncNamespacePipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncNamespacePipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreateNamespaceSecret(context.Context, *CreateNamespaceSecretRequest) (*CreateNamespaceSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespaceSecret not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListNamespaceSecrets(context.Context, *ListNamespaceSecretsRequest) (*ListNamespaceSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaceSecrets not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetNamespaceSecret(context.Context, *GetNamespaceSecretRequest) (*GetNamespaceSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceSecret not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdateNamespaceSecret(context.Context, *UpdateNamespaceSecretRequest) (*UpdateNamespaceSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespaceSecret not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeleteNamespaceSecret(context.Context, *DeleteNamespaceSecretRequest) (*DeleteNamespaceSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespaceSecret not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListComponentDefinitions(context.Context, *ListComponentDefinitionsRequest) (*ListComponentDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComponentDefinitions not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetOperation(context.Context, *GetOperationRequest) (*GetOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperation not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreateUserPipeline(context.Context, *CreateUserPipelineRequest) (*CreateUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListUserPipelines(context.Context, *ListUserPipelinesRequest) (*ListUserPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPipelines not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetUserPipeline(context.Context, *GetUserPipelineRequest) (*GetUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdateUserPipeline(context.Context, *UpdateUserPipelineRequest) (*UpdateUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeleteUserPipeline(context.Context, *DeleteUserPipelineRequest) (*DeleteUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ValidateUserPipeline(context.Context, *ValidateUserPipelineRequest) (*ValidateUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RenameUserPipeline(context.Context, *RenameUserPipelineRequest) (*RenameUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerUserPipeline(context.Context, *TriggerUserPipelineRequest) (*TriggerUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerUserPipelineWithStream(*TriggerUserPipelineWithStreamRequest, PipelinePublicService_TriggerUserPipelineWithStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TriggerUserPipelineWithStream not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerAsyncUserPipeline(context.Context, *TriggerAsyncUserPipelineRequest) (*TriggerAsyncUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreateUserPipelineRelease(context.Context, *CreateUserPipelineReleaseRequest) (*CreateUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListUserPipelineReleases(context.Context, *ListUserPipelineReleasesRequest) (*ListUserPipelineReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPipelineReleases not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetUserPipelineRelease(context.Context, *GetUserPipelineReleaseRequest) (*GetUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdateUserPipelineRelease(context.Context, *UpdateUserPipelineReleaseRequest) (*UpdateUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeleteUserPipelineRelease(context.Context, *DeleteUserPipelineReleaseRequest) (*DeleteUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RestoreUserPipelineRelease(context.Context, *RestoreUserPipelineReleaseRequest) (*RestoreUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RenameUserPipelineRelease(context.Context, *RenameUserPipelineReleaseRequest) (*RenameUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerUserPipelineRelease(context.Context, *TriggerUserPipelineReleaseRequest) (*TriggerUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerAsyncUserPipelineRelease(context.Context, *TriggerAsyncUserPipelineReleaseRequest) (*TriggerAsyncUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreateOrganizationPipeline(context.Context, *CreateOrganizationPipelineRequest) (*CreateOrganizationPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListOrganizationPipelines(context.Context, *ListOrganizationPipelinesRequest) (*ListOrganizationPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationPipelines not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetOrganizationPipeline(context.Context, *GetOrganizationPipelineRequest) (*GetOrganizationPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdateOrganizationPipeline(context.Context, *UpdateOrganizationPipelineRequest) (*UpdateOrganizationPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeleteOrganizationPipeline(context.Context, *DeleteOrganizationPipelineRequest) (*DeleteOrganizationPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ValidateOrganizationPipeline(context.Context, *ValidateOrganizationPipelineRequest) (*ValidateOrganizationPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateOrganizationPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RenameOrganizationPipeline(context.Context, *RenameOrganizationPipelineRequest) (*RenameOrganizationPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameOrganizationPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerOrganizationPipelineStream(*TriggerOrganizationPipelineStreamRequest, PipelinePublicService_TriggerOrganizationPipelineStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TriggerOrganizationPipelineStream not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerOrganizationPipeline(context.Context, *TriggerOrganizationPipelineRequest) (*TriggerOrganizationPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerOrganizationPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerAsyncOrganizationPipeline(context.Context, *TriggerAsyncOrganizationPipelineRequest) (*TriggerAsyncOrganizationPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncOrganizationPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreateOrganizationPipelineRelease(context.Context, *CreateOrganizationPipelineReleaseRequest) (*CreateOrganizationPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListOrganizationPipelineReleases(context.Context, *ListOrganizationPipelineReleasesRequest) (*ListOrganizationPipelineReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationPipelineReleases not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetOrganizationPipelineRelease(context.Context, *GetOrganizationPipelineReleaseRequest) (*GetOrganizationPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdateOrganizationPipelineRelease(context.Context, *UpdateOrganizationPipelineReleaseRequest) (*UpdateOrganizationPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeleteOrganizationPipelineRelease(context.Context, *DeleteOrganizationPipelineReleaseRequest) (*DeleteOrganizationPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RestoreOrganizationPipelineRelease(context.Context, *RestoreOrganizationPipelineReleaseRequest) (*RestoreOrganizationPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreOrganizationPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RenameOrganizationPipelineRelease(context.Context, *RenameOrganizationPipelineReleaseRequest) (*RenameOrganizationPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameOrganizationPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerOrganizationPipelineRelease(context.Context, *TriggerOrganizationPipelineReleaseRequest) (*TriggerOrganizationPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerOrganizationPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerAsyncOrganizationPipelineRelease(context.Context, *TriggerAsyncOrganizationPipelineReleaseRequest) (*TriggerAsyncOrganizationPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncOrganizationPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CheckName(context.Context, *CheckNameRequest) (*CheckNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckName not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreateUserSecret(context.Context, *CreateUserSecretRequest) (*CreateUserSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserSecret not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListUserSecrets(context.Context, *ListUserSecretsRequest) (*ListUserSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserSecrets not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetUserSecret(context.Context, *GetUserSecretRequest) (*GetUserSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSecret not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdateUserSecret(context.Context, *UpdateUserSecretRequest) (*UpdateUserSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSecret not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeleteUserSecret(context.Context, *DeleteUserSecretRequest) (*DeleteUserSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSecret not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreateOrganizationSecret(context.Context, *CreateOrganizationSecretRequest) (*CreateOrganizationSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationSecret not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListOrganizationSecrets(context.Context, *ListOrganizationSecretsRequest) (*ListOrganizationSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationSecrets not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetOrganizationSecret(context.Context, *GetOrganizationSecretRequest) (*GetOrganizationSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationSecret not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdateOrganizationSecret(context.Context, *UpdateOrganizationSecretRequest) (*UpdateOrganizationSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationSecret not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeleteOrganizationSecret(context.Context, *DeleteOrganizationSecretRequest) (*DeleteOrganizationSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationSecret not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListPipelineRuns(context.Context, *ListPipelineRunsRequest) (*ListPipelineRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineRuns not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListComponentRuns(context.Context, *ListComponentRunsRequest) (*ListComponentRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListComponentRuns not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListPipelineRunsByRequester(context.Context, *ListPipelineRunsByRequesterRequest) (*ListPipelineRunsByRequesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineRunsByRequester not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListNamespaceConnections(context.Context, *ListNamespaceConnectionsRequest) (*ListNamespaceConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaceConnections not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetNamespaceConnection(context.Context, *GetNamespaceConnectionRequest) (*GetNamespaceConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceConnection not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreateNamespaceConnection(context.Context, *CreateNamespaceConnectionRequest) (*CreateNamespaceConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespaceConnection not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdateNamespaceConnection(context.Context, *UpdateNamespaceConnectionRequest) (*UpdateNamespaceConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNamespaceConnection not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeleteNamespaceConnection(context.Context, *DeleteNamespaceConnectionRequest) (*DeleteNamespaceConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespaceConnection not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TestNamespaceConnection(context.Context, *TestNamespaceConnectionRequest) (*TestNamespaceConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestNamespaceConnection not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListPipelineIDsByConnectionID(context.Context, *ListPipelineIDsByConnectionIDRequest) (*ListPipelineIDsByConnectionIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineIDsByConnectionID not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListIntegrations(context.Context, *ListIntegrationsRequest) (*ListIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegrations not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetIntegration(context.Context, *GetIntegrationRequest) (*GetIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegration not implemented")
}

// UnsafePipelinePublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipelinePublicServiceServer will
// result in compilation errors.
type UnsafePipelinePublicServiceServer interface {
	mustEmbedUnimplementedPipelinePublicServiceServer()
}

func RegisterPipelinePublicServiceServer(s grpc.ServiceRegistrar, srv PipelinePublicServiceServer) {
	s.RegisterService(&PipelinePublicService_ServiceDesc, srv)
}

func _PipelinePublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetHubStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHubStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetHubStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetHubStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetHubStats(ctx, req.(*GetHubStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListPipelines(ctx, req.(*ListPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_LookUpPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).LookUpPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_LookUpPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).LookUpPipeline(ctx, req.(*LookUpPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListNamespacePipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacePipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListNamespacePipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListNamespacePipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListNamespacePipelines(ctx, req.(*ListNamespacePipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreateNamespacePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespacePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreateNamespacePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreateNamespacePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreateNamespacePipeline(ctx, req.(*CreateNamespacePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetNamespacePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespacePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetNamespacePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetNamespacePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetNamespacePipeline(ctx, req.(*GetNamespacePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdateNamespacePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespacePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdateNamespacePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdateNamespacePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdateNamespacePipeline(ctx, req.(*UpdateNamespacePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeleteNamespacePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespacePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeleteNamespacePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeleteNamespacePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeleteNamespacePipeline(ctx, req.(*DeleteNamespacePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ValidateNamespacePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateNamespacePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ValidateNamespacePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ValidateNamespacePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ValidateNamespacePipeline(ctx, req.(*ValidateNamespacePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RenameNamespacePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameNamespacePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RenameNamespacePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RenameNamespacePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RenameNamespacePipeline(ctx, req.(*RenameNamespacePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CloneNamespacePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneNamespacePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CloneNamespacePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CloneNamespacePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CloneNamespacePipeline(ctx, req.(*CloneNamespacePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DispatchPipelineWebhookEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchPipelineWebhookEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DispatchPipelineWebhookEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DispatchPipelineWebhookEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DispatchPipelineWebhookEvent(ctx, req.(*DispatchPipelineWebhookEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerNamespacePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerNamespacePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerNamespacePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerNamespacePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerNamespacePipeline(ctx, req.(*TriggerNamespacePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerNamespacePipelineWithStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TriggerNamespacePipelineWithStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PipelinePublicServiceServer).TriggerNamespacePipelineWithStream(m, &pipelinePublicServiceTriggerNamespacePipelineWithStreamServer{stream})
}

type PipelinePublicService_TriggerNamespacePipelineWithStreamServer interface {
	Send(*TriggerNamespacePipelineWithStreamResponse) error
	grpc.ServerStream
}

type pipelinePublicServiceTriggerNamespacePipelineWithStreamServer struct {
	grpc.ServerStream
}

func (x *pipelinePublicServiceTriggerNamespacePipelineWithStreamServer) Send(m *TriggerNamespacePipelineWithStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PipelinePublicService_TriggerAsyncNamespacePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncNamespacePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerAsyncNamespacePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerAsyncNamespacePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerAsyncNamespacePipeline(ctx, req.(*TriggerAsyncNamespacePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreateNamespacePipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespacePipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreateNamespacePipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreateNamespacePipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreateNamespacePipelineRelease(ctx, req.(*CreateNamespacePipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListNamespacePipelineReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacePipelineReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListNamespacePipelineReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListNamespacePipelineReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListNamespacePipelineReleases(ctx, req.(*ListNamespacePipelineReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetNamespacePipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespacePipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetNamespacePipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetNamespacePipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetNamespacePipelineRelease(ctx, req.(*GetNamespacePipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdateNamespacePipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespacePipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdateNamespacePipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdateNamespacePipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdateNamespacePipelineRelease(ctx, req.(*UpdateNamespacePipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeleteNamespacePipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespacePipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeleteNamespacePipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeleteNamespacePipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeleteNamespacePipelineRelease(ctx, req.(*DeleteNamespacePipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CloneNamespacePipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneNamespacePipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CloneNamespacePipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CloneNamespacePipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CloneNamespacePipelineRelease(ctx, req.(*CloneNamespacePipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerNamespacePipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerNamespacePipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerNamespacePipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerNamespacePipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerNamespacePipelineRelease(ctx, req.(*TriggerNamespacePipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerAsyncNamespacePipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncNamespacePipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerAsyncNamespacePipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerAsyncNamespacePipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerAsyncNamespacePipelineRelease(ctx, req.(*TriggerAsyncNamespacePipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreateNamespaceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreateNamespaceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreateNamespaceSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreateNamespaceSecret(ctx, req.(*CreateNamespaceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListNamespaceSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespaceSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListNamespaceSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListNamespaceSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListNamespaceSecrets(ctx, req.(*ListNamespaceSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetNamespaceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetNamespaceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetNamespaceSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetNamespaceSecret(ctx, req.(*GetNamespaceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdateNamespaceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdateNamespaceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdateNamespaceSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdateNamespaceSecret(ctx, req.(*UpdateNamespaceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeleteNamespaceSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeleteNamespaceSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeleteNamespaceSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeleteNamespaceSecret(ctx, req.(*DeleteNamespaceSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListComponentDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComponentDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListComponentDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListComponentDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListComponentDefinitions(ctx, req.(*ListComponentDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetOperation(ctx, req.(*GetOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreateUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreateUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreateUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreateUserPipeline(ctx, req.(*CreateUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListUserPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListUserPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListUserPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListUserPipelines(ctx, req.(*ListUserPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetUserPipeline(ctx, req.(*GetUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdateUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdateUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdateUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdateUserPipeline(ctx, req.(*UpdateUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeleteUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeleteUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeleteUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeleteUserPipeline(ctx, req.(*DeleteUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ValidateUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ValidateUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ValidateUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ValidateUserPipeline(ctx, req.(*ValidateUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RenameUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RenameUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RenameUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RenameUserPipeline(ctx, req.(*RenameUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerUserPipeline(ctx, req.(*TriggerUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerUserPipelineWithStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TriggerUserPipelineWithStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PipelinePublicServiceServer).TriggerUserPipelineWithStream(m, &pipelinePublicServiceTriggerUserPipelineWithStreamServer{stream})
}

type PipelinePublicService_TriggerUserPipelineWithStreamServer interface {
	Send(*TriggerUserPipelineWithStreamResponse) error
	grpc.ServerStream
}

type pipelinePublicServiceTriggerUserPipelineWithStreamServer struct {
	grpc.ServerStream
}

func (x *pipelinePublicServiceTriggerUserPipelineWithStreamServer) Send(m *TriggerUserPipelineWithStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PipelinePublicService_TriggerAsyncUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerAsyncUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerAsyncUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerAsyncUserPipeline(ctx, req.(*TriggerAsyncUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreateUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreateUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreateUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreateUserPipelineRelease(ctx, req.(*CreateUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListUserPipelineReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPipelineReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListUserPipelineReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListUserPipelineReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListUserPipelineReleases(ctx, req.(*ListUserPipelineReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetUserPipelineRelease(ctx, req.(*GetUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdateUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdateUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdateUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdateUserPipelineRelease(ctx, req.(*UpdateUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeleteUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeleteUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeleteUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeleteUserPipelineRelease(ctx, req.(*DeleteUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RestoreUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RestoreUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RestoreUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RestoreUserPipelineRelease(ctx, req.(*RestoreUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RenameUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RenameUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RenameUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RenameUserPipelineRelease(ctx, req.(*RenameUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerUserPipelineRelease(ctx, req.(*TriggerUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerAsyncUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerAsyncUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerAsyncUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerAsyncUserPipelineRelease(ctx, req.(*TriggerAsyncUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreateOrganizationPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreateOrganizationPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreateOrganizationPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreateOrganizationPipeline(ctx, req.(*CreateOrganizationPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListOrganizationPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListOrganizationPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListOrganizationPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListOrganizationPipelines(ctx, req.(*ListOrganizationPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetOrganizationPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetOrganizationPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetOrganizationPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetOrganizationPipeline(ctx, req.(*GetOrganizationPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdateOrganizationPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdateOrganizationPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdateOrganizationPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdateOrganizationPipeline(ctx, req.(*UpdateOrganizationPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeleteOrganizationPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeleteOrganizationPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeleteOrganizationPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeleteOrganizationPipeline(ctx, req.(*DeleteOrganizationPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ValidateOrganizationPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateOrganizationPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ValidateOrganizationPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ValidateOrganizationPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ValidateOrganizationPipeline(ctx, req.(*ValidateOrganizationPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RenameOrganizationPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameOrganizationPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RenameOrganizationPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RenameOrganizationPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RenameOrganizationPipeline(ctx, req.(*RenameOrganizationPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerOrganizationPipelineStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TriggerOrganizationPipelineStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PipelinePublicServiceServer).TriggerOrganizationPipelineStream(m, &pipelinePublicServiceTriggerOrganizationPipelineStreamServer{stream})
}

type PipelinePublicService_TriggerOrganizationPipelineStreamServer interface {
	Send(*TriggerOrganizationPipelineStreamResponse) error
	grpc.ServerStream
}

type pipelinePublicServiceTriggerOrganizationPipelineStreamServer struct {
	grpc.ServerStream
}

func (x *pipelinePublicServiceTriggerOrganizationPipelineStreamServer) Send(m *TriggerOrganizationPipelineStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PipelinePublicService_TriggerOrganizationPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerOrganizationPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerOrganizationPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerOrganizationPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerOrganizationPipeline(ctx, req.(*TriggerOrganizationPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerAsyncOrganizationPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncOrganizationPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerAsyncOrganizationPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerAsyncOrganizationPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerAsyncOrganizationPipeline(ctx, req.(*TriggerAsyncOrganizationPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreateOrganizationPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreateOrganizationPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreateOrganizationPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreateOrganizationPipelineRelease(ctx, req.(*CreateOrganizationPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListOrganizationPipelineReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationPipelineReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListOrganizationPipelineReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListOrganizationPipelineReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListOrganizationPipelineReleases(ctx, req.(*ListOrganizationPipelineReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetOrganizationPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetOrganizationPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetOrganizationPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetOrganizationPipelineRelease(ctx, req.(*GetOrganizationPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdateOrganizationPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdateOrganizationPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdateOrganizationPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdateOrganizationPipelineRelease(ctx, req.(*UpdateOrganizationPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeleteOrganizationPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeleteOrganizationPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeleteOrganizationPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeleteOrganizationPipelineRelease(ctx, req.(*DeleteOrganizationPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RestoreOrganizationPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreOrganizationPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RestoreOrganizationPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RestoreOrganizationPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RestoreOrganizationPipelineRelease(ctx, req.(*RestoreOrganizationPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RenameOrganizationPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameOrganizationPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RenameOrganizationPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RenameOrganizationPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RenameOrganizationPipelineRelease(ctx, req.(*RenameOrganizationPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerOrganizationPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerOrganizationPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerOrganizationPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerOrganizationPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerOrganizationPipelineRelease(ctx, req.(*TriggerOrganizationPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerAsyncOrganizationPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncOrganizationPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerAsyncOrganizationPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerAsyncOrganizationPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerAsyncOrganizationPipelineRelease(ctx, req.(*TriggerAsyncOrganizationPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CheckName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CheckName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CheckName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CheckName(ctx, req.(*CheckNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreateUserSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreateUserSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreateUserSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreateUserSecret(ctx, req.(*CreateUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListUserSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListUserSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListUserSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListUserSecrets(ctx, req.(*ListUserSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetUserSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetUserSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetUserSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetUserSecret(ctx, req.(*GetUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdateUserSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdateUserSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdateUserSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdateUserSecret(ctx, req.(*UpdateUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeleteUserSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeleteUserSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeleteUserSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeleteUserSecret(ctx, req.(*DeleteUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreateOrganizationSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreateOrganizationSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreateOrganizationSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreateOrganizationSecret(ctx, req.(*CreateOrganizationSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListOrganizationSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListOrganizationSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListOrganizationSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListOrganizationSecrets(ctx, req.(*ListOrganizationSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetOrganizationSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetOrganizationSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetOrganizationSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetOrganizationSecret(ctx, req.(*GetOrganizationSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdateOrganizationSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdateOrganizationSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdateOrganizationSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdateOrganizationSecret(ctx, req.(*UpdateOrganizationSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeleteOrganizationSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeleteOrganizationSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeleteOrganizationSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeleteOrganizationSecret(ctx, req.(*DeleteOrganizationSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListPipelineRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListPipelineRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListPipelineRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListPipelineRuns(ctx, req.(*ListPipelineRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListComponentRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListComponentRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListComponentRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListComponentRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListComponentRuns(ctx, req.(*ListComponentRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListPipelineRunsByRequester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineRunsByRequesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListPipelineRunsByRequester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListPipelineRunsByRequester_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListPipelineRunsByRequester(ctx, req.(*ListPipelineRunsByRequesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListNamespaceConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespaceConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListNamespaceConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListNamespaceConnections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListNamespaceConnections(ctx, req.(*ListNamespaceConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetNamespaceConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetNamespaceConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetNamespaceConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetNamespaceConnection(ctx, req.(*GetNamespaceConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreateNamespaceConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreateNamespaceConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreateNamespaceConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreateNamespaceConnection(ctx, req.(*CreateNamespaceConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdateNamespaceConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdateNamespaceConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdateNamespaceConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdateNamespaceConnection(ctx, req.(*UpdateNamespaceConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeleteNamespaceConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeleteNamespaceConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeleteNamespaceConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeleteNamespaceConnection(ctx, req.(*DeleteNamespaceConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TestNamespaceConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestNamespaceConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TestNamespaceConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TestNamespaceConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TestNamespaceConnection(ctx, req.(*TestNamespaceConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListPipelineIDsByConnectionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineIDsByConnectionIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListPipelineIDsByConnectionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListPipelineIDsByConnectionID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListPipelineIDsByConnectionID(ctx, req.(*ListPipelineIDsByConnectionIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntegrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListIntegrations(ctx, req.(*ListIntegrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetIntegration(ctx, req.(*GetIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PipelinePublicService_ServiceDesc is the grpc.ServiceDesc for PipelinePublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PipelinePublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.pipeline.v1beta.PipelinePublicService",
	HandlerType: (*PipelinePublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _PipelinePublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _PipelinePublicService_Readiness_Handler,
		},
		{
			MethodName: "GetHubStats",
			Handler:    _PipelinePublicService_GetHubStats_Handler,
		},
		{
			MethodName: "ListPipelines",
			Handler:    _PipelinePublicService_ListPipelines_Handler,
		},
		{
			MethodName: "LookUpPipeline",
			Handler:    _PipelinePublicService_LookUpPipeline_Handler,
		},
		{
			MethodName: "ListNamespacePipelines",
			Handler:    _PipelinePublicService_ListNamespacePipelines_Handler,
		},
		{
			MethodName: "CreateNamespacePipeline",
			Handler:    _PipelinePublicService_CreateNamespacePipeline_Handler,
		},
		{
			MethodName: "GetNamespacePipeline",
			Handler:    _PipelinePublicService_GetNamespacePipeline_Handler,
		},
		{
			MethodName: "UpdateNamespacePipeline",
			Handler:    _PipelinePublicService_UpdateNamespacePipeline_Handler,
		},
		{
			MethodName: "DeleteNamespacePipeline",
			Handler:    _PipelinePublicService_DeleteNamespacePipeline_Handler,
		},
		{
			MethodName: "ValidateNamespacePipeline",
			Handler:    _PipelinePublicService_ValidateNamespacePipeline_Handler,
		},
		{
			MethodName: "RenameNamespacePipeline",
			Handler:    _PipelinePublicService_RenameNamespacePipeline_Handler,
		},
		{
			MethodName: "CloneNamespacePipeline",
			Handler:    _PipelinePublicService_CloneNamespacePipeline_Handler,
		},
		{
			MethodName: "DispatchPipelineWebhookEvent",
			Handler:    _PipelinePublicService_DispatchPipelineWebhookEvent_Handler,
		},
		{
			MethodName: "TriggerNamespacePipeline",
			Handler:    _PipelinePublicService_TriggerNamespacePipeline_Handler,
		},
		{
			MethodName: "TriggerAsyncNamespacePipeline",
			Handler:    _PipelinePublicService_TriggerAsyncNamespacePipeline_Handler,
		},
		{
			MethodName: "CreateNamespacePipelineRelease",
			Handler:    _PipelinePublicService_CreateNamespacePipelineRelease_Handler,
		},
		{
			MethodName: "ListNamespacePipelineReleases",
			Handler:    _PipelinePublicService_ListNamespacePipelineReleases_Handler,
		},
		{
			MethodName: "GetNamespacePipelineRelease",
			Handler:    _PipelinePublicService_GetNamespacePipelineRelease_Handler,
		},
		{
			MethodName: "UpdateNamespacePipelineRelease",
			Handler:    _PipelinePublicService_UpdateNamespacePipelineRelease_Handler,
		},
		{
			MethodName: "DeleteNamespacePipelineRelease",
			Handler:    _PipelinePublicService_DeleteNamespacePipelineRelease_Handler,
		},
		{
			MethodName: "CloneNamespacePipelineRelease",
			Handler:    _PipelinePublicService_CloneNamespacePipelineRelease_Handler,
		},
		{
			MethodName: "TriggerNamespacePipelineRelease",
			Handler:    _PipelinePublicService_TriggerNamespacePipelineRelease_Handler,
		},
		{
			MethodName: "TriggerAsyncNamespacePipelineRelease",
			Handler:    _PipelinePublicService_TriggerAsyncNamespacePipelineRelease_Handler,
		},
		{
			MethodName: "CreateNamespaceSecret",
			Handler:    _PipelinePublicService_CreateNamespaceSecret_Handler,
		},
		{
			MethodName: "ListNamespaceSecrets",
			Handler:    _PipelinePublicService_ListNamespaceSecrets_Handler,
		},
		{
			MethodName: "GetNamespaceSecret",
			Handler:    _PipelinePublicService_GetNamespaceSecret_Handler,
		},
		{
			MethodName: "UpdateNamespaceSecret",
			Handler:    _PipelinePublicService_UpdateNamespaceSecret_Handler,
		},
		{
			MethodName: "DeleteNamespaceSecret",
			Handler:    _PipelinePublicService_DeleteNamespaceSecret_Handler,
		},
		{
			MethodName: "ListComponentDefinitions",
			Handler:    _PipelinePublicService_ListComponentDefinitions_Handler,
		},
		{
			MethodName: "GetOperation",
			Handler:    _PipelinePublicService_GetOperation_Handler,
		},
		{
			MethodName: "CreateUserPipeline",
			Handler:    _PipelinePublicService_CreateUserPipeline_Handler,
		},
		{
			MethodName: "ListUserPipelines",
			Handler:    _PipelinePublicService_ListUserPipelines_Handler,
		},
		{
			MethodName: "GetUserPipeline",
			Handler:    _PipelinePublicService_GetUserPipeline_Handler,
		},
		{
			MethodName: "UpdateUserPipeline",
			Handler:    _PipelinePublicService_UpdateUserPipeline_Handler,
		},
		{
			MethodName: "DeleteUserPipeline",
			Handler:    _PipelinePublicService_DeleteUserPipeline_Handler,
		},
		{
			MethodName: "ValidateUserPipeline",
			Handler:    _PipelinePublicService_ValidateUserPipeline_Handler,
		},
		{
			MethodName: "RenameUserPipeline",
			Handler:    _PipelinePublicService_RenameUserPipeline_Handler,
		},
		{
			MethodName: "TriggerUserPipeline",
			Handler:    _PipelinePublicService_TriggerUserPipeline_Handler,
		},
		{
			MethodName: "TriggerAsyncUserPipeline",
			Handler:    _PipelinePublicService_TriggerAsyncUserPipeline_Handler,
		},
		{
			MethodName: "CreateUserPipelineRelease",
			Handler:    _PipelinePublicService_CreateUserPipelineRelease_Handler,
		},
		{
			MethodName: "ListUserPipelineReleases",
			Handler:    _PipelinePublicService_ListUserPipelineReleases_Handler,
		},
		{
			MethodName: "GetUserPipelineRelease",
			Handler:    _PipelinePublicService_GetUserPipelineRelease_Handler,
		},
		{
			MethodName: "UpdateUserPipelineRelease",
			Handler:    _PipelinePublicService_UpdateUserPipelineRelease_Handler,
		},
		{
			MethodName: "DeleteUserPipelineRelease",
			Handler:    _PipelinePublicService_DeleteUserPipelineRelease_Handler,
		},
		{
			MethodName: "RestoreUserPipelineRelease",
			Handler:    _PipelinePublicService_RestoreUserPipelineRelease_Handler,
		},
		{
			MethodName: "RenameUserPipelineRelease",
			Handler:    _PipelinePublicService_RenameUserPipelineRelease_Handler,
		},
		{
			MethodName: "TriggerUserPipelineRelease",
			Handler:    _PipelinePublicService_TriggerUserPipelineRelease_Handler,
		},
		{
			MethodName: "TriggerAsyncUserPipelineRelease",
			Handler:    _PipelinePublicService_TriggerAsyncUserPipelineRelease_Handler,
		},
		{
			MethodName: "CreateOrganizationPipeline",
			Handler:    _PipelinePublicService_CreateOrganizationPipeline_Handler,
		},
		{
			MethodName: "ListOrganizationPipelines",
			Handler:    _PipelinePublicService_ListOrganizationPipelines_Handler,
		},
		{
			MethodName: "GetOrganizationPipeline",
			Handler:    _PipelinePublicService_GetOrganizationPipeline_Handler,
		},
		{
			MethodName: "UpdateOrganizationPipeline",
			Handler:    _PipelinePublicService_UpdateOrganizationPipeline_Handler,
		},
		{
			MethodName: "DeleteOrganizationPipeline",
			Handler:    _PipelinePublicService_DeleteOrganizationPipeline_Handler,
		},
		{
			MethodName: "ValidateOrganizationPipeline",
			Handler:    _PipelinePublicService_ValidateOrganizationPipeline_Handler,
		},
		{
			MethodName: "RenameOrganizationPipeline",
			Handler:    _PipelinePublicService_RenameOrganizationPipeline_Handler,
		},
		{
			MethodName: "TriggerOrganizationPipeline",
			Handler:    _PipelinePublicService_TriggerOrganizationPipeline_Handler,
		},
		{
			MethodName: "TriggerAsyncOrganizationPipeline",
			Handler:    _PipelinePublicService_TriggerAsyncOrganizationPipeline_Handler,
		},
		{
			MethodName: "CreateOrganizationPipelineRelease",
			Handler:    _PipelinePublicService_CreateOrganizationPipelineRelease_Handler,
		},
		{
			MethodName: "ListOrganizationPipelineReleases",
			Handler:    _PipelinePublicService_ListOrganizationPipelineReleases_Handler,
		},
		{
			MethodName: "GetOrganizationPipelineRelease",
			Handler:    _PipelinePublicService_GetOrganizationPipelineRelease_Handler,
		},
		{
			MethodName: "UpdateOrganizationPipelineRelease",
			Handler:    _PipelinePublicService_UpdateOrganizationPipelineRelease_Handler,
		},
		{
			MethodName: "DeleteOrganizationPipelineRelease",
			Handler:    _PipelinePublicService_DeleteOrganizationPipelineRelease_Handler,
		},
		{
			MethodName: "RestoreOrganizationPipelineRelease",
			Handler:    _PipelinePublicService_RestoreOrganizationPipelineRelease_Handler,
		},
		{
			MethodName: "RenameOrganizationPipelineRelease",
			Handler:    _PipelinePublicService_RenameOrganizationPipelineRelease_Handler,
		},
		{
			MethodName: "TriggerOrganizationPipelineRelease",
			Handler:    _PipelinePublicService_TriggerOrganizationPipelineRelease_Handler,
		},
		{
			MethodName: "TriggerAsyncOrganizationPipelineRelease",
			Handler:    _PipelinePublicService_TriggerAsyncOrganizationPipelineRelease_Handler,
		},
		{
			MethodName: "CheckName",
			Handler:    _PipelinePublicService_CheckName_Handler,
		},
		{
			MethodName: "CreateUserSecret",
			Handler:    _PipelinePublicService_CreateUserSecret_Handler,
		},
		{
			MethodName: "ListUserSecrets",
			Handler:    _PipelinePublicService_ListUserSecrets_Handler,
		},
		{
			MethodName: "GetUserSecret",
			Handler:    _PipelinePublicService_GetUserSecret_Handler,
		},
		{
			MethodName: "UpdateUserSecret",
			Handler:    _PipelinePublicService_UpdateUserSecret_Handler,
		},
		{
			MethodName: "DeleteUserSecret",
			Handler:    _PipelinePublicService_DeleteUserSecret_Handler,
		},
		{
			MethodName: "CreateOrganizationSecret",
			Handler:    _PipelinePublicService_CreateOrganizationSecret_Handler,
		},
		{
			MethodName: "ListOrganizationSecrets",
			Handler:    _PipelinePublicService_ListOrganizationSecrets_Handler,
		},
		{
			MethodName: "GetOrganizationSecret",
			Handler:    _PipelinePublicService_GetOrganizationSecret_Handler,
		},
		{
			MethodName: "UpdateOrganizationSecret",
			Handler:    _PipelinePublicService_UpdateOrganizationSecret_Handler,
		},
		{
			MethodName: "DeleteOrganizationSecret",
			Handler:    _PipelinePublicService_DeleteOrganizationSecret_Handler,
		},
		{
			MethodName: "ListPipelineRuns",
			Handler:    _PipelinePublicService_ListPipelineRuns_Handler,
		},
		{
			MethodName: "ListComponentRuns",
			Handler:    _PipelinePublicService_ListComponentRuns_Handler,
		},
		{
			MethodName: "ListPipelineRunsByRequester",
			Handler:    _PipelinePublicService_ListPipelineRunsByRequester_Handler,
		},
		{
			MethodName: "ListNamespaceConnections",
			Handler:    _PipelinePublicService_ListNamespaceConnections_Handler,
		},
		{
			MethodName: "GetNamespaceConnection",
			Handler:    _PipelinePublicService_GetNamespaceConnection_Handler,
		},
		{
			MethodName: "CreateNamespaceConnection",
			Handler:    _PipelinePublicService_CreateNamespaceConnection_Handler,
		},
		{
			MethodName: "UpdateNamespaceConnection",
			Handler:    _PipelinePublicService_UpdateNamespaceConnection_Handler,
		},
		{
			MethodName: "DeleteNamespaceConnection",
			Handler:    _PipelinePublicService_DeleteNamespaceConnection_Handler,
		},
		{
			MethodName: "TestNamespaceConnection",
			Handler:    _PipelinePublicService_TestNamespaceConnection_Handler,
		},
		{
			MethodName: "ListPipelineIDsByConnectionID",
			Handler:    _PipelinePublicService_ListPipelineIDsByConnectionID_Handler,
		},
		{
			MethodName: "ListIntegrations",
			Handler:    _PipelinePublicService_ListIntegrations_Handler,
		},
		{
			MethodName: "GetIntegration",
			Handler:    _PipelinePublicService_GetIntegration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TriggerNamespacePipelineWithStream",
			Handler:       _PipelinePublicService_TriggerNamespacePipelineWithStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TriggerUserPipelineWithStream",
			Handler:       _PipelinePublicService_TriggerUserPipelineWithStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TriggerOrganizationPipelineStream",
			Handler:       _PipelinePublicService_TriggerOrganizationPipelineStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vdp/pipeline/v1beta/pipeline_public_service.proto",
}
