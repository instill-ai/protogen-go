// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: vdp/pipeline/v1beta/pipeline.proto

package pipelinev1beta

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v1beta "github.com/instill-ai/protogen-go/common/healthcheck/v1beta"
	v1beta1 "github.com/instill-ai/protogen-go/core/mgmt/v1beta"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State describes the state of a pipeline.
type State int32

const (
	// Unspecified.
	State_STATE_UNSPECIFIED State = 0
	// Inactive.
	State_STATE_INACTIVE State = 1
	// Active.
	State_STATE_ACTIVE State = 2
	// The pipeline has an error.
	State_STATE_ERROR State = 3
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_INACTIVE",
		2: "STATE_ACTIVE",
		3: "STATE_ERROR",
	}
	State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_INACTIVE":    1,
		"STATE_ACTIVE":      2,
		"STATE_ERROR":       3,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1beta_pipeline_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1beta_pipeline_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{0}
}

// View defines how a Pipeline is presented.
type Pipeline_View int32

const (
	// Unspecified, equivalent to BASIC.
	Pipeline_VIEW_UNSPECIFIED Pipeline_View = 0
	// Default view, only includes basic information.
	Pipeline_VIEW_BASIC Pipeline_View = 1
	// Full representation.
	Pipeline_VIEW_FULL Pipeline_View = 2
	// Contains the recipe of the resource.
	Pipeline_VIEW_RECIPE Pipeline_View = 3
)

// Enum value maps for Pipeline_View.
var (
	Pipeline_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_RECIPE",
	}
	Pipeline_View_value = map[string]int32{
		"VIEW_UNSPECIFIED": 0,
		"VIEW_BASIC":       1,
		"VIEW_FULL":        2,
		"VIEW_RECIPE":      3,
	}
)

func (x Pipeline_View) Enum() *Pipeline_View {
	p := new(Pipeline_View)
	*p = x
	return p
}

func (x Pipeline_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pipeline_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1beta_pipeline_proto_enumTypes[1].Descriptor()
}

func (Pipeline_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1beta_pipeline_proto_enumTypes[1]
}

func (x Pipeline_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pipeline_View.Descriptor instead.
func (Pipeline_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{12, 0}
}

// Visibility defines who can access the pipeline.
type Pipeline_Visibility int32

const (
	// Unspecified, equivalent to PRIVATE.
	Pipeline_VISIBILITY_UNSPECIFIED Pipeline_Visibility = 0
	// Only the user can see the pipeline.
	Pipeline_VISIBILITY_PRIVATE Pipeline_Visibility = 1
	// Other users can see the pipeline.
	Pipeline_VISIBILITY_PUBLIC Pipeline_Visibility = 2
)

// Enum value maps for Pipeline_Visibility.
var (
	Pipeline_Visibility_name = map[int32]string{
		0: "VISIBILITY_UNSPECIFIED",
		1: "VISIBILITY_PRIVATE",
		2: "VISIBILITY_PUBLIC",
	}
	Pipeline_Visibility_value = map[string]int32{
		"VISIBILITY_UNSPECIFIED": 0,
		"VISIBILITY_PRIVATE":     1,
		"VISIBILITY_PUBLIC":      2,
	}
)

func (x Pipeline_Visibility) Enum() *Pipeline_Visibility {
	p := new(Pipeline_Visibility)
	*p = x
	return p
}

func (x Pipeline_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pipeline_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1beta_pipeline_proto_enumTypes[2].Descriptor()
}

func (Pipeline_Visibility) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1beta_pipeline_proto_enumTypes[2]
}

func (x Pipeline_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pipeline_Visibility.Descriptor instead.
func (Pipeline_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{12, 1}
}

// Status holds the the component execution outcome.
type Trace_Status int32

const (
	// Unspecified.
	Trace_STATUS_UNSPECIFIED Trace_Status = 0
	// Successfully completed.
	Trace_STATUS_COMPLETED Trace_Status = 1
	// Skipped.
	Trace_STATUS_SKIPPED Trace_Status = 2
	// Aborted with error.
	Trace_STATUS_ERROR Trace_Status = 3
)

// Enum value maps for Trace_Status.
var (
	Trace_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_COMPLETED",
		2: "STATUS_SKIPPED",
		3: "STATUS_ERROR",
	}
	Trace_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_COMPLETED":   1,
		"STATUS_SKIPPED":     2,
		"STATUS_ERROR":       3,
	}
)

func (x Trace_Status) Enum() *Trace_Status {
	p := new(Trace_Status)
	*p = x
	return p
}

func (x Trace_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Trace_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1beta_pipeline_proto_enumTypes[3].Descriptor()
}

func (Trace_Status) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1beta_pipeline_proto_enumTypes[3]
}

func (x Trace_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Trace_Status.Descriptor instead.
func (Trace_Status) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{14, 0}
}

// LivenessRequest represents a request to check a service liveness status
type LivenessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckRequest message
	HealthCheckRequest *v1beta.HealthCheckRequest `protobuf:"bytes,1,opt,name=health_check_request,json=healthCheckRequest,proto3,oneof" json:"health_check_request,omitempty"`
}

func (x *LivenessRequest) Reset() {
	*x = LivenessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessRequest) ProtoMessage() {}

func (x *LivenessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessRequest.ProtoReflect.Descriptor instead.
func (*LivenessRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *LivenessRequest) GetHealthCheckRequest() *v1beta.HealthCheckRequest {
	if x != nil {
		return x.HealthCheckRequest
	}
	return nil
}

// LivenessResponse represents a response for a service liveness status
type LivenessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckResponse message
	HealthCheckResponse *v1beta.HealthCheckResponse `protobuf:"bytes,1,opt,name=health_check_response,json=healthCheckResponse,proto3" json:"health_check_response,omitempty"`
}

func (x *LivenessResponse) Reset() {
	*x = LivenessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessResponse) ProtoMessage() {}

func (x *LivenessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessResponse.ProtoReflect.Descriptor instead.
func (*LivenessResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{1}
}

func (x *LivenessResponse) GetHealthCheckResponse() *v1beta.HealthCheckResponse {
	if x != nil {
		return x.HealthCheckResponse
	}
	return nil
}

// ReadinessRequest represents a request to check a service readiness status
type ReadinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckRequest message
	HealthCheckRequest *v1beta.HealthCheckRequest `protobuf:"bytes,1,opt,name=health_check_request,json=healthCheckRequest,proto3,oneof" json:"health_check_request,omitempty"`
}

func (x *ReadinessRequest) Reset() {
	*x = ReadinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadinessRequest) ProtoMessage() {}

func (x *ReadinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadinessRequest.ProtoReflect.Descriptor instead.
func (*ReadinessRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{2}
}

func (x *ReadinessRequest) GetHealthCheckRequest() *v1beta.HealthCheckRequest {
	if x != nil {
		return x.HealthCheckRequest
	}
	return nil
}

// ReadinessResponse represents a response for a service readiness status
type ReadinessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckResponse message
	HealthCheckResponse *v1beta.HealthCheckResponse `protobuf:"bytes,1,opt,name=health_check_response,json=healthCheckResponse,proto3" json:"health_check_response,omitempty"`
}

func (x *ReadinessResponse) Reset() {
	*x = ReadinessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadinessResponse) ProtoMessage() {}

func (x *ReadinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadinessResponse.ProtoReflect.Descriptor instead.
func (*ReadinessResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{3}
}

func (x *ReadinessResponse) GetHealthCheckResponse() *v1beta.HealthCheckResponse {
	if x != nil {
		return x.HealthCheckResponse
	}
	return nil
}

// TriggerByRequest
// Configures the payload format of request when triggered by a request.
type TriggerByRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fields configuration of request.
	// Key: Key of the input data.
	// Field: Field settings of the value.
	RequestFields map[string]*TriggerByRequest_RequestField `protobuf:"bytes,1,rep,name=request_fields,json=requestFields,proto3" json:"request_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Fields configuration of response.
	// Key: Key of the input data.
	// Field: Field settings of the value.
	ResponseFields map[string]*TriggerByRequest_ResponseField `protobuf:"bytes,2,rep,name=response_fields,json=responseFields,proto3" json:"response_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TriggerByRequest) Reset() {
	*x = TriggerByRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerByRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerByRequest) ProtoMessage() {}

func (x *TriggerByRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerByRequest.ProtoReflect.Descriptor instead.
func (*TriggerByRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{4}
}

func (x *TriggerByRequest) GetRequestFields() map[string]*TriggerByRequest_RequestField {
	if x != nil {
		return x.RequestFields
	}
	return nil
}

func (x *TriggerByRequest) GetResponseFields() map[string]*TriggerByRequest_ResponseField {
	if x != nil {
		return x.ResponseFields
	}
	return nil
}

// ConnectorComponent
// Configures a connector component. Requires the creation of a connector resource first.
type ConnectorComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition name.
	DefinitionName string `protobuf:"bytes,1,opt,name=definition_name,json=definitionName,proto3" json:"definition_name,omitempty"`
	// Connector definition.
	Definition *ConnectorDefinition `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	// Task.
	Task string `protobuf:"bytes,5,opt,name=task,proto3" json:"task,omitempty"`
	// Input configuration of the component. JSON schema described in the connector definition.
	Input *structpb.Struct `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	// Condition statement determining whether the component is executed or not.
	Condition string `protobuf:"bytes,7,opt,name=condition,proto3" json:"condition,omitempty"`
	// Connection configuration of the component. JSON schema described in the connector definition.
	Connection *structpb.Struct `protobuf:"bytes,8,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *ConnectorComponent) Reset() {
	*x = ConnectorComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorComponent) ProtoMessage() {}

func (x *ConnectorComponent) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorComponent.ProtoReflect.Descriptor instead.
func (*ConnectorComponent) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{5}
}

func (x *ConnectorComponent) GetDefinitionName() string {
	if x != nil {
		return x.DefinitionName
	}
	return ""
}

func (x *ConnectorComponent) GetDefinition() *ConnectorDefinition {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *ConnectorComponent) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *ConnectorComponent) GetInput() *structpb.Struct {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ConnectorComponent) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *ConnectorComponent) GetConnection() *structpb.Struct {
	if x != nil {
		return x.Connection
	}
	return nil
}

// OperatorComponent
// Configures an operator component.
type OperatorComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Definition name.
	DefinitionName string `protobuf:"bytes,1,opt,name=definition_name,json=definitionName,proto3" json:"definition_name,omitempty"`
	// Operator definition.
	Definition *OperatorDefinition `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	// Task.
	Task string `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty"`
	// Input configuration of the component. JSON schema described in the operator definition.
	Input *structpb.Struct `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	// Condition statement determining whether the component is executed or not.
	Condition string `protobuf:"bytes,5,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *OperatorComponent) Reset() {
	*x = OperatorComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorComponent) ProtoMessage() {}

func (x *OperatorComponent) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorComponent.ProtoReflect.Descriptor instead.
func (*OperatorComponent) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{6}
}

func (x *OperatorComponent) GetDefinitionName() string {
	if x != nil {
		return x.DefinitionName
	}
	return ""
}

func (x *OperatorComponent) GetDefinition() *OperatorDefinition {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *OperatorComponent) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *OperatorComponent) GetInput() *structpb.Struct {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *OperatorComponent) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

// IteratorComponent
// Configures an iterator component. An iterator takes an array and executes an
// operation (defined by a set of nested components) on each of its elements.
// It can be regarded as triggering a sub-pipeline using the elements of an
// array as input.
type IteratorComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input: The iterator will iterate over the elements of the input (must be an array).
	Input string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// Output elements: Configure the output arrays of the iterator.
	// The key is the output element variable name, and the value is the data reference of the template.
	// Example:
	//
	//	output_elements: {
	//	  "key1": "${element.output.a}",
	//	  "key2": "${element.output.b}",
	//	}
	//
	// This will create the results:
	//
	//	output: {
	//	  "key1": [ ${element1.output.a},  ${element2.output.a} ... ],
	//	  "key2": [ ${element1.output.b},  ${element2.output.b} ... ],
	//	}
	OutputElements map[string]string `protobuf:"bytes,2,rep,name=output_elements,json=outputElements,proto3" json:"output_elements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Components: These components will be executed for each input element.
	Components []*NestedComponent `protobuf:"bytes,3,rep,name=components,proto3" json:"components,omitempty"`
	// Condition statement determining whether the component is executed or not.
	Condition string `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	// DataSpecification returns the JSON schema for the iterator input and output.
	DataSpecification *DataSpecification `protobuf:"bytes,5,opt,name=data_specification,json=dataSpecification,proto3" json:"data_specification,omitempty"`
}

func (x *IteratorComponent) Reset() {
	*x = IteratorComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IteratorComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IteratorComponent) ProtoMessage() {}

func (x *IteratorComponent) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IteratorComponent.ProtoReflect.Descriptor instead.
func (*IteratorComponent) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{7}
}

func (x *IteratorComponent) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *IteratorComponent) GetOutputElements() map[string]string {
	if x != nil {
		return x.OutputElements
	}
	return nil
}

func (x *IteratorComponent) GetComponents() []*NestedComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *IteratorComponent) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *IteratorComponent) GetDataSpecification() *DataSpecification {
	if x != nil {
		return x.DataSpecification
	}
	return nil
}

// Component
// Fundamental building block in pipelines.
//
// For more information, see [Pipeline
// Component](https://www.instill.tech/docs/latest/core/concepts/pipeline#pipeline-component)
type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Component ID, provided by the user on creation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata of the component.
	Metadata *structpb.Struct `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The component configuration.
	//
	// Types that are assignable to Component:
	//
	//	*Component_ConnectorComponent
	//	*Component_OperatorComponent
	//	*Component_IteratorComponent
	Component isComponent_Component `protobuf_oneof:"component"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{8}
}

func (x *Component) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Component) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *Component) GetComponent() isComponent_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (x *Component) GetConnectorComponent() *ConnectorComponent {
	if x, ok := x.GetComponent().(*Component_ConnectorComponent); ok {
		return x.ConnectorComponent
	}
	return nil
}

func (x *Component) GetOperatorComponent() *OperatorComponent {
	if x, ok := x.GetComponent().(*Component_OperatorComponent); ok {
		return x.OperatorComponent
	}
	return nil
}

func (x *Component) GetIteratorComponent() *IteratorComponent {
	if x, ok := x.GetComponent().(*Component_IteratorComponent); ok {
		return x.IteratorComponent
	}
	return nil
}

type isComponent_Component interface {
	isComponent_Component()
}

type Component_ConnectorComponent struct {
	// ConnectorComponent
	ConnectorComponent *ConnectorComponent `protobuf:"bytes,13,opt,name=connector_component,json=connectorComponent,proto3,oneof"`
}

type Component_OperatorComponent struct {
	// OperatorComponent
	OperatorComponent *OperatorComponent `protobuf:"bytes,14,opt,name=operator_component,json=operatorComponent,proto3,oneof"`
}

type Component_IteratorComponent struct {
	// IteratorComponent
	IteratorComponent *IteratorComponent `protobuf:"bytes,15,opt,name=iterator_component,json=iteratorComponent,proto3,oneof"`
}

func (*Component_ConnectorComponent) isComponent_Component() {}

func (*Component_OperatorComponent) isComponent_Component() {}

func (*Component_IteratorComponent) isComponent_Component() {}

// NestedComponent
// Fundamental building block in iterator component.
type NestedComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Component ID, provided by the user on creation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Metadata of the component.
	Metadata *structpb.Struct `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The component configuration.
	//
	// Types that are assignable to Component:
	//
	//	*NestedComponent_ConnectorComponent
	//	*NestedComponent_OperatorComponent
	Component isNestedComponent_Component `protobuf_oneof:"component"`
}

func (x *NestedComponent) Reset() {
	*x = NestedComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedComponent) ProtoMessage() {}

func (x *NestedComponent) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedComponent.ProtoReflect.Descriptor instead.
func (*NestedComponent) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{9}
}

func (x *NestedComponent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NestedComponent) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *NestedComponent) GetComponent() isNestedComponent_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (x *NestedComponent) GetConnectorComponent() *ConnectorComponent {
	if x, ok := x.GetComponent().(*NestedComponent_ConnectorComponent); ok {
		return x.ConnectorComponent
	}
	return nil
}

func (x *NestedComponent) GetOperatorComponent() *OperatorComponent {
	if x, ok := x.GetComponent().(*NestedComponent_OperatorComponent); ok {
		return x.OperatorComponent
	}
	return nil
}

type isNestedComponent_Component interface {
	isNestedComponent_Component()
}

type NestedComponent_ConnectorComponent struct {
	// ConnectorConfiguration
	ConnectorComponent *ConnectorComponent `protobuf:"bytes,3,opt,name=connector_component,json=connectorComponent,proto3,oneof"`
}

type NestedComponent_OperatorComponent struct {
	// OperatorConfiguration
	OperatorComponent *OperatorComponent `protobuf:"bytes,4,opt,name=operator_component,json=operatorComponent,proto3,oneof"`
}

func (*NestedComponent_ConnectorComponent) isNestedComponent_Component() {}

func (*NestedComponent_OperatorComponent) isNestedComponent_Component() {}

// Trigger
type Trigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trigger Method
	//
	// Types that are assignable to Trigger:
	//
	//	*Trigger_TriggerByRequest
	Trigger isTrigger_Trigger `protobuf_oneof:"trigger"`
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{10}
}

func (m *Trigger) GetTrigger() isTrigger_Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (x *Trigger) GetTriggerByRequest() *TriggerByRequest {
	if x, ok := x.GetTrigger().(*Trigger_TriggerByRequest); ok {
		return x.TriggerByRequest
	}
	return nil
}

type isTrigger_Trigger interface {
	isTrigger_Trigger()
}

type Trigger_TriggerByRequest struct {
	// Triggered by reqeust.
	TriggerByRequest *TriggerByRequest `protobuf:"bytes,1,opt,name=trigger_by_request,json=triggerByRequest,proto3,oneof"`
}

func (*Trigger_TriggerByRequest) isTrigger_Trigger() {}

// Recipe describes the components of a Pipeline and how they are connected.
type Recipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Recipe schema version.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// List of pipeline components.
	Components []*Component `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"`
	// The component trigger method.
	Trigger *Trigger `protobuf:"bytes,3,opt,name=trigger,proto3" json:"trigger,omitempty"`
	// Local secrets
	Secrets map[string]string `protobuf:"bytes,4,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{11}
}

func (x *Recipe) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Recipe) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Recipe) GetTrigger() *Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *Recipe) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// A Pipeline is an end-to-end workflow that automates a sequence of components
// to process data.
//
// For more information, see
// [Pipeline](https://www.instill.tech/docs/latest/core/concepts/pipeline) in
// the official documentation.
type Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the pipeline, defined by its parent and ID.
	// - Format: `{parent_type}/{parent.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline UUID.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Pipeline resource ID (used in `name` as the last segment). This conforms
	// to RFC-1034, which restricts to letters, numbers, and hyphen, with the
	// first character a letter, the last a letter or a number, and a 63
	// character maximum.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Pipeline description.
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Recipe describes the components of a Pipeline and how they are connected.
	Recipe *Recipe `protobuf:"bytes,5,opt,name=recipe,proto3" json:"recipe,omitempty"`
	// Pipeline creation time.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Pipeline update time.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Pipeline delete time.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Pipeline sharing information.
	Sharing *Sharing `protobuf:"bytes,15,opt,name=sharing,proto3" json:"sharing,omitempty"`
	// Metadata holds console-related data such as the pipeline builder layout.
	Metadata *structpb.Struct `protobuf:"bytes,16,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Owner Name.
	OwnerName string `protobuf:"bytes,17,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	// Releases holds the history of pipeline versions.
	Releases []*PipelineRelease `protobuf:"bytes,19,rep,name=releases,proto3" json:"releases,omitempty"`
	// README holds the pipeline documentation.
	Readme string `protobuf:"bytes,20,opt,name=readme,proto3" json:"readme,omitempty"`
	// Permission defines how a pipeline can be used.
	Permission *Permission `protobuf:"bytes,21,opt,name=permission,proto3" json:"permission,omitempty"`
	// Pipeline visibility.
	Visibility Pipeline_Visibility `protobuf:"varint,22,opt,name=visibility,proto3,enum=vdp.pipeline.v1beta.Pipeline_Visibility" json:"visibility,omitempty"`
	// Pipeline owner.
	Owner *v1beta1.Owner `protobuf:"bytes,23,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	// Data specifications.
	DataSpecification *DataSpecification `protobuf:"bytes,24,opt,name=data_specification,json=dataSpecification,proto3" json:"data_specification,omitempty"`
	// Tags.
	Tags []string `protobuf:"bytes,25,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{12}
}

func (x *Pipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pipeline) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Pipeline) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pipeline) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Pipeline) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

func (x *Pipeline) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Pipeline) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Pipeline) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Pipeline) GetSharing() *Sharing {
	if x != nil {
		return x.Sharing
	}
	return nil
}

func (x *Pipeline) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Pipeline) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *Pipeline) GetReleases() []*PipelineRelease {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *Pipeline) GetReadme() string {
	if x != nil {
		return x.Readme
	}
	return ""
}

func (x *Pipeline) GetPermission() *Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *Pipeline) GetVisibility() Pipeline_Visibility {
	if x != nil {
		return x.Visibility
	}
	return Pipeline_VISIBILITY_UNSPECIFIED
}

func (x *Pipeline) GetOwner() *v1beta1.Owner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Pipeline) GetDataSpecification() *DataSpecification {
	if x != nil {
		return x.DataSpecification
	}
	return nil
}

func (x *Pipeline) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// TriggerMetadata contains the traces of the pipeline inference.
type TriggerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each key in the `traces` object is a component ID. The value is a Trace
	// object containing the execution details.
	Traces map[string]*Trace `protobuf:"bytes,1,rep,name=traces,proto3" json:"traces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TriggerMetadata) Reset() {
	*x = TriggerMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerMetadata) ProtoMessage() {}

func (x *TriggerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerMetadata.ProtoReflect.Descriptor instead.
func (*TriggerMetadata) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{13}
}

func (x *TriggerMetadata) GetTraces() map[string]*Trace {
	if x != nil {
		return x.Traces
	}
	return nil
}

// Trace contains the execution details of a component.
type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Statuses contains an execution status per input.
	Statuses []Trace_Status `protobuf:"varint,1,rep,packed,name=statuses,proto3,enum=vdp.pipeline.v1beta.Trace_Status" json:"statuses,omitempty"`
	// Component inputs.
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Component outputs.
	Outputs []*structpb.Struct `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Error details.
	Error *structpb.Struct `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// Computation time in seconds.
	ComputeTimeInSeconds float32 `protobuf:"fixed32,5,opt,name=compute_time_in_seconds,json=computeTimeInSeconds,proto3" json:"compute_time_in_seconds,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{14}
}

func (x *Trace) GetStatuses() []Trace_Status {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *Trace) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Trace) GetOutputs() []*structpb.Struct {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Trace) GetError() *structpb.Struct {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Trace) GetComputeTimeInSeconds() float32 {
	if x != nil {
		return x.ComputeTimeInSeconds
	}
	return 0
}

// GetHubStatsRequest represents a request to get hub stats.
type GetHubStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetHubStatsRequest) Reset() {
	*x = GetHubStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHubStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHubStatsRequest) ProtoMessage() {}

func (x *GetHubStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHubStatsRequest.ProtoReflect.Descriptor instead.
func (*GetHubStatsRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{15}
}

// GetHubStatsResponse represents a response to get hub stats.
type GetHubStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of public pipelines.
	NumberOfPublicPipelines int32 `protobuf:"varint,1,opt,name=number_of_public_pipelines,json=numberOfPublicPipelines,proto3" json:"number_of_public_pipelines,omitempty"`
	// Total number of featured pipelines.
	NumberOfFeaturedPipelines int32 `protobuf:"varint,2,opt,name=number_of_featured_pipelines,json=numberOfFeaturedPipelines,proto3" json:"number_of_featured_pipelines,omitempty"`
}

func (x *GetHubStatsResponse) Reset() {
	*x = GetHubStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHubStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHubStatsResponse) ProtoMessage() {}

func (x *GetHubStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHubStatsResponse.ProtoReflect.Descriptor instead.
func (*GetHubStatsResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{16}
}

func (x *GetHubStatsResponse) GetNumberOfPublicPipelines() int32 {
	if x != nil {
		return x.NumberOfPublicPipelines
	}
	return 0
}

func (x *GetHubStatsResponse) GetNumberOfFeaturedPipelines() int32 {
	if x != nil {
		return x.NumberOfFeaturedPipelines
	}
	return 0
}

// Pipeline releases contain the version control information of a pipeline.
// This allows users to track changes in the pipeline over time.
type PipelineRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the release, defined by its parent and ID.
	// - Format: `{parent_type}/{parent.id}/pipelines/{pipeline.id}/releases/{release.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Release UUID.
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Release resource ID (used in `name` as the last segment). It must be a
	// sematic version vX.Y.Z.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Release description.
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Recipe of the versioned pipeline.
	Recipe *Recipe `protobuf:"bytes,5,opt,name=recipe,proto3" json:"recipe,omitempty"`
	// Pipeline creation time.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Pipeline update time.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Pipeline deletion time.
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Alias.
	Alias string `protobuf:"bytes,11,opt,name=alias,proto3" json:"alias,omitempty"`
	// Key-value object with console-related data such as the pipeline builder
	// layout.
	Metadata *structpb.Struct `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// README.
	Readme string `protobuf:"bytes,13,opt,name=readme,proto3" json:"readme,omitempty"`
	// Data specifications.
	DataSpecification *DataSpecification `protobuf:"bytes,14,opt,name=data_specification,json=dataSpecification,proto3" json:"data_specification,omitempty"`
}

func (x *PipelineRelease) Reset() {
	*x = PipelineRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRelease) ProtoMessage() {}

func (x *PipelineRelease) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRelease.ProtoReflect.Descriptor instead.
func (*PipelineRelease) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{17}
}

func (x *PipelineRelease) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineRelease) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PipelineRelease) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PipelineRelease) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PipelineRelease) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

func (x *PipelineRelease) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *PipelineRelease) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *PipelineRelease) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *PipelineRelease) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *PipelineRelease) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PipelineRelease) GetReadme() string {
	if x != nil {
		return x.Readme
	}
	return ""
}

func (x *PipelineRelease) GetDataSpecification() *DataSpecification {
	if x != nil {
		return x.DataSpecification
	}
	return nil
}

// ListPipelinesRequest represents a request to list pipelines.
type ListPipelinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of pipelines to return. If this parameter is
	// unspecified, at most 10 pipelines will be returned. The cap value for this
	// parameter is 100 (i.e. any value above that will be coerced to 100).
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token.
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// View allows clients to specify the desired pipeline view in the response.
	View *Pipeline_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1beta.Pipeline_View,oneof" json:"view,omitempty"`
	// Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
	// expression.
	// - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
	// - Example:
	// `recipe.components.definition_name:"operator-definitions/2ac8be70-0f7a-4b61-a33d-098b8acfa6f3"`.
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// Include soft-deleted pipelines in the result.
	ShowDeleted *bool `protobuf:"varint,5,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
	// Limit results to pipelines with the specified visibility.
	Visibility *Pipeline_Visibility `protobuf:"varint,6,opt,name=visibility,proto3,enum=vdp.pipeline.v1beta.Pipeline_Visibility,oneof" json:"visibility,omitempty"`
	// Order by field, with options for ordering by `id`, `create_time` or `update_time`.
	// Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
	OrderBy *string `protobuf:"bytes,7,opt,name=order_by,json=orderBy,proto3,oneof" json:"order_by,omitempty"`
}

func (x *ListPipelinesRequest) Reset() {
	*x = ListPipelinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesRequest) ProtoMessage() {}

func (x *ListPipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesRequest.ProtoReflect.Descriptor instead.
func (*ListPipelinesRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{18}
}

func (x *ListPipelinesRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListPipelinesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListPipelinesRequest) GetView() Pipeline_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return Pipeline_VIEW_UNSPECIFIED
}

func (x *ListPipelinesRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListPipelinesRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

func (x *ListPipelinesRequest) GetVisibility() Pipeline_Visibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return Pipeline_VISIBILITY_UNSPECIFIED
}

func (x *ListPipelinesRequest) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

// ListPipelinesResponse contains a list of pipelines.
type ListPipelinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline resources.
	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	// Next page token.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of pipelines.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListPipelinesResponse) Reset() {
	*x = ListPipelinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesResponse) ProtoMessage() {}

func (x *ListPipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesResponse.ProtoReflect.Descriptor instead.
func (*ListPipelinesResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{19}
}

func (x *ListPipelinesResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *ListPipelinesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListPipelinesResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// LookUpPipelineRequest represents a request to query a pipeline by its UID.
type LookUpPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The permalink of the pipeline, which allows its access by UID.
	// - Format: `pipelines/{pipeline.uid}`.
	Permalink string `protobuf:"bytes,1,opt,name=permalink,proto3" json:"permalink,omitempty"`
	// View allows clients to specify the desired pipeline view in the response.
	View *Pipeline_View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1beta.Pipeline_View,oneof" json:"view,omitempty"`
}

func (x *LookUpPipelineRequest) Reset() {
	*x = LookUpPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpPipelineRequest) ProtoMessage() {}

func (x *LookUpPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpPipelineRequest.ProtoReflect.Descriptor instead.
func (*LookUpPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{20}
}

func (x *LookUpPipelineRequest) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

func (x *LookUpPipelineRequest) GetView() Pipeline_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return Pipeline_VIEW_UNSPECIFIED
}

// LookUpPipelineResponse contains the requested pipeline.
type LookUpPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested pipeline.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *LookUpPipelineResponse) Reset() {
	*x = LookUpPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpPipelineResponse) ProtoMessage() {}

func (x *LookUpPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpPipelineResponse.ProtoReflect.Descriptor instead.
func (*LookUpPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{21}
}

func (x *LookUpPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// CreateUserPipelineRequest represents a request from a user to create a
// pipeline.
type CreateUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The properties of the pipeline to be created.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// The parent resource, i.e., the user that creates the pipeline.
	// - Format: `users/{user.id}`.
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *CreateUserPipelineRequest) Reset() {
	*x = CreateUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserPipelineRequest) ProtoMessage() {}

func (x *CreateUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*CreateUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{22}
}

func (x *CreateUserPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *CreateUserPipelineRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

// CreateUserPipelineResponse contains the created pipeline.
type CreateUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created pipeline resource.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *CreateUserPipelineResponse) Reset() {
	*x = CreateUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserPipelineResponse) ProtoMessage() {}

func (x *CreateUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*CreateUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{23}
}

func (x *CreateUserPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// ListUserPipelinesRequest represents a request to list the pipelines of a
// user.
type ListUserPipelinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of pipelines to return. If this parameter is
	// unspecified, at most 10 pipelines will be returned. The cap value for this
	// parameter is 100 (i.e. any value above that will be coerced to 100).
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token.
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// View allows clients to specify the desired pipeline view in the response.
	View *Pipeline_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1beta.Pipeline_View,oneof" json:"view,omitempty"`
	// Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
	// expression.
	// - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
	// - Example:
	// `recipe.components.definition_name:"operator-definitions/2ac8be70-0f7a-4b61-a33d-098b8acfa6f3"`.
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// The parent resource, i.e., the user that created the pipelines.
	// - Format: `users/{user.id}`.
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// Include soft-deleted pipelines in the result.
	ShowDeleted *bool `protobuf:"varint,6,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
	// Limit results to pipelines with the specified visibility.
	Visibility *Pipeline_Visibility `protobuf:"varint,7,opt,name=visibility,proto3,enum=vdp.pipeline.v1beta.Pipeline_Visibility,oneof" json:"visibility,omitempty"`
	// Order by field, with options for ordering by `id`, `create_time` or `update_time`.
	// Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
	OrderBy *string `protobuf:"bytes,8,opt,name=order_by,json=orderBy,proto3,oneof" json:"order_by,omitempty"`
}

func (x *ListUserPipelinesRequest) Reset() {
	*x = ListUserPipelinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserPipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserPipelinesRequest) ProtoMessage() {}

func (x *ListUserPipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserPipelinesRequest.ProtoReflect.Descriptor instead.
func (*ListUserPipelinesRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{24}
}

func (x *ListUserPipelinesRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListUserPipelinesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListUserPipelinesRequest) GetView() Pipeline_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return Pipeline_VIEW_UNSPECIFIED
}

func (x *ListUserPipelinesRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListUserPipelinesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListUserPipelinesRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

func (x *ListUserPipelinesRequest) GetVisibility() Pipeline_Visibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return Pipeline_VISIBILITY_UNSPECIFIED
}

func (x *ListUserPipelinesRequest) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

// ListUserPipelinesResponse contains a list of pipelines.
type ListUserPipelinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline resources.
	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	// Next page token.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of pipelines.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListUserPipelinesResponse) Reset() {
	*x = ListUserPipelinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserPipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserPipelinesResponse) ProtoMessage() {}

func (x *ListUserPipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserPipelinesResponse.ProtoReflect.Descriptor instead.
func (*ListUserPipelinesResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{25}
}

func (x *ListUserPipelinesResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *ListUserPipelinesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListUserPipelinesResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// GetUserPipelineRequest represents a request to fetch the details of a
// pipeline owned by a user.
type GetUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent user
	// and ID.
	// - Format: `users/{user.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// View allows clients to specify the desired pipeline view in the response.
	View *Pipeline_View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1beta.Pipeline_View,oneof" json:"view,omitempty"`
}

func (x *GetUserPipelineRequest) Reset() {
	*x = GetUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPipelineRequest) ProtoMessage() {}

func (x *GetUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*GetUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{26}
}

func (x *GetUserPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetUserPipelineRequest) GetView() Pipeline_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return Pipeline_VIEW_UNSPECIFIED
}

// GetUserPipelineResponse contains the requested pipeline.
type GetUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pipeline resource.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *GetUserPipelineResponse) Reset() {
	*x = GetUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPipelineResponse) ProtoMessage() {}

func (x *GetUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*GetUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{27}
}

func (x *GetUserPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// UpdateUserPipelineRequest represents a request to update a pipeline owned by
// a user.
type UpdateUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pipeline fields that will replace the existing ones.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// The update mask specifies the subset of fields that should be modified.
	//
	// For more information about this field, see
	// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#field-mask.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateUserPipelineRequest) Reset() {
	*x = UpdateUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPipelineRequest) ProtoMessage() {}

func (x *UpdateUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateUserPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *UpdateUserPipelineRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdateUserPipelineResponse contains the updated pipeline.
type UpdateUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated pipeline resource.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *UpdateUserPipelineResponse) Reset() {
	*x = UpdateUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPipelineResponse) ProtoMessage() {}

func (x *UpdateUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateUserPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// DeleteUserPipelineRequest represents a request to delete a pipeline owned by
// a user.
type DeleteUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent user
	// and ID.
	// - Format: `users/{user.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteUserPipelineRequest) Reset() {
	*x = DeleteUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserPipelineRequest) ProtoMessage() {}

func (x *DeleteUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteUserPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteUserPipelineResponse is an empty response.
type DeleteUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteUserPipelineResponse) Reset() {
	*x = DeleteUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserPipelineResponse) ProtoMessage() {}

func (x *DeleteUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{31}
}

// ValidateUserPipelineRequest represents a request to validate a pipeline
// owned by a user.
type ValidateUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent user
	// and ID.
	// - Format: `users/{user.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ValidateUserPipelineRequest) Reset() {
	*x = ValidateUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateUserPipelineRequest) ProtoMessage() {}

func (x *ValidateUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*ValidateUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{32}
}

func (x *ValidateUserPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ValidateUserPipelineResponse contains a validated pipeline.
type ValidateUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The validated pipeline resource.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *ValidateUserPipelineResponse) Reset() {
	*x = ValidateUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateUserPipelineResponse) ProtoMessage() {}

func (x *ValidateUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*ValidateUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{33}
}

func (x *ValidateUserPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// RenameUserPipelineRequest represents a request to rename the name of a
// pipeline owned by a user.
type RenameUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent user
	// and ID.
	// - Format: `users/{user.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new resource ID. This will transform the resource name into
	// `users/{user.id}/pipelines/{new_pipeline_id}`.
	NewPipelineId string `protobuf:"bytes,2,opt,name=new_pipeline_id,json=newPipelineId,proto3" json:"new_pipeline_id,omitempty"`
}

func (x *RenameUserPipelineRequest) Reset() {
	*x = RenameUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameUserPipelineRequest) ProtoMessage() {}

func (x *RenameUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*RenameUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{34}
}

func (x *RenameUserPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenameUserPipelineRequest) GetNewPipelineId() string {
	if x != nil {
		return x.NewPipelineId
	}
	return ""
}

// RenameUserPipelineResponse contains a renamed pipeline.
type RenameUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The renamed pipeline resource.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *RenameUserPipelineResponse) Reset() {
	*x = RenameUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameUserPipelineResponse) ProtoMessage() {}

func (x *RenameUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*RenameUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{35}
}

func (x *RenameUserPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// CloneUserPipelineRequest represents a request to clone a pipeline owned by a
// user.
type CloneUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent user
	// and ID.
	// - Format: `users/{user.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The target pipeline name. It can be under a user or an organization
	// namespace, so the following formats are accepted:
	// - `users/{user.id}/pipelines/{pipeline.id}`
	// - `organizations/{organization.id}/pipelines/{pipeline.id}`
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *CloneUserPipelineRequest) Reset() {
	*x = CloneUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneUserPipelineRequest) ProtoMessage() {}

func (x *CloneUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*CloneUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{36}
}

func (x *CloneUserPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloneUserPipelineRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// CloneUserPipelineResponse contains a cloned pipeline.
type CloneUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cloned pipeline resource.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *CloneUserPipelineResponse) Reset() {
	*x = CloneUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneUserPipelineResponse) ProtoMessage() {}

func (x *CloneUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*CloneUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{37}
}

func (x *CloneUserPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// TriggerUserPipelineRequest represents a request to trigger a user-owned
// pipeline synchronously.
type TriggerUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent user
	// and ID.
	// - Format: `users/{user.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline input parameters.
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Pipeline secrets parameters that will override the pipeline's or owner's secrets.
	Secrets map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TriggerUserPipelineRequest) Reset() {
	*x = TriggerUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerUserPipelineRequest) ProtoMessage() {}

func (x *TriggerUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*TriggerUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{38}
}

func (x *TriggerUserPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerUserPipelineRequest) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TriggerUserPipelineRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// TriggerUserPipelineResponse contains the pipeline execution results, i.e.,
// the multiple model inference outputs.
type TriggerUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Model inference outputs.
	Outputs []*structpb.Struct `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Traces of the pipeline inference.
	Metadata *TriggerMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *TriggerUserPipelineResponse) Reset() {
	*x = TriggerUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerUserPipelineResponse) ProtoMessage() {}

func (x *TriggerUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*TriggerUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{39}
}

func (x *TriggerUserPipelineResponse) GetOutputs() []*structpb.Struct {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TriggerUserPipelineResponse) GetMetadata() *TriggerMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// TriggerUserPipelineWithStreamRequest represents a request to trigger a user-owned
// pipeline synchronously and streams back the results.
type TriggerUserPipelineWithStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent user
	// and ID.
	// - Format: `users/{user.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline input parameters.
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Pipeline secrets parameters that will override the pipeline's or owner's secrets.
	Secrets map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TriggerUserPipelineWithStreamRequest) Reset() {
	*x = TriggerUserPipelineWithStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerUserPipelineWithStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerUserPipelineWithStreamRequest) ProtoMessage() {}

func (x *TriggerUserPipelineWithStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerUserPipelineWithStreamRequest.ProtoReflect.Descriptor instead.
func (*TriggerUserPipelineWithStreamRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{40}
}

func (x *TriggerUserPipelineWithStreamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerUserPipelineWithStreamRequest) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TriggerUserPipelineWithStreamRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// TriggerUserPipelineWithStreamResponse contains the pipeline execution results, i.e.,
// the multiple model inference outputs.
type TriggerUserPipelineWithStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Model inference outputs.
	Outputs []*structpb.Struct `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Traces of the pipeline inference.
	Metadata *TriggerMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *TriggerUserPipelineWithStreamResponse) Reset() {
	*x = TriggerUserPipelineWithStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerUserPipelineWithStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerUserPipelineWithStreamResponse) ProtoMessage() {}

func (x *TriggerUserPipelineWithStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerUserPipelineWithStreamResponse.ProtoReflect.Descriptor instead.
func (*TriggerUserPipelineWithStreamResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{41}
}

func (x *TriggerUserPipelineWithStreamResponse) GetOutputs() []*structpb.Struct {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TriggerUserPipelineWithStreamResponse) GetMetadata() *TriggerMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// TriggerUserPipelineRequest represents a request to trigger a user-owned
// pipeline synchronously.
type TriggerAsyncUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent user
	// and ID.
	// - Format: `users/{user.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline input parameters.
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Pipeline secrets parameters that will override the pipeline's or owner's secrets.
	Secrets map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TriggerAsyncUserPipelineRequest) Reset() {
	*x = TriggerAsyncUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncUserPipelineRequest) ProtoMessage() {}

func (x *TriggerAsyncUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*TriggerAsyncUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{42}
}

func (x *TriggerAsyncUserPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerAsyncUserPipelineRequest) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TriggerAsyncUserPipelineRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// TriggerAsyncUserPipelineResponse contains the information to access the
// status of an asynchronous pipeline execution.
type TriggerAsyncUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Long-running operation information.
	Operation *longrunningpb.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *TriggerAsyncUserPipelineResponse) Reset() {
	*x = TriggerAsyncUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncUserPipelineResponse) ProtoMessage() {}

func (x *TriggerAsyncUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*TriggerAsyncUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{43}
}

func (x *TriggerAsyncUserPipelineResponse) GetOperation() *longrunningpb.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// CreateUserPipelineReleaseRequest represents a request to release a version
// in a user-owned pipeline.
type CreateUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The release information.
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	// Name of the pipeline for which the release will be created.
	// Format: `users/{user.id}/pipelines/{pipeline.id}`
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *CreateUserPipelineReleaseRequest) Reset() {
	*x = CreateUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserPipelineReleaseRequest) ProtoMessage() {}

func (x *CreateUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*CreateUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{44}
}

func (x *CreateUserPipelineReleaseRequest) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *CreateUserPipelineReleaseRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

// CreateUserPipelineReleaseResponse contains the created release.
type CreateUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created pipeline release object.
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *CreateUserPipelineReleaseResponse) Reset() {
	*x = CreateUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserPipelineReleaseResponse) ProtoMessage() {}

func (x *CreateUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*CreateUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{45}
}

func (x *CreateUserPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// ListUserPipelineReleasesRequest represents a request to list the releases in
// a user-owned pipeline.
type ListUserPipelineReleasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of releases to return. If this parameter is
	// unspecified, at most 10 pipelines will be returned. The cap value for this
	// parameter is 100 (i.e. any value above that will be coerced to 100).
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token.
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// View allows clients to specify the desired pipeline view in the response.
	View *Pipeline_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1beta.Pipeline_View,oneof" json:"view,omitempty"`
	// Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
	// expression.
	// - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// The parent resource where this pipeline release will be created.
	// Format: `users/{user.id}/pipelines/{pipeline.id}`.
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// Include soft-deleted pipelines in the result.
	ShowDeleted *bool `protobuf:"varint,6,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
}

func (x *ListUserPipelineReleasesRequest) Reset() {
	*x = ListUserPipelineReleasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserPipelineReleasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserPipelineReleasesRequest) ProtoMessage() {}

func (x *ListUserPipelineReleasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserPipelineReleasesRequest.ProtoReflect.Descriptor instead.
func (*ListUserPipelineReleasesRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{46}
}

func (x *ListUserPipelineReleasesRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListUserPipelineReleasesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListUserPipelineReleasesRequest) GetView() Pipeline_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return Pipeline_VIEW_UNSPECIFIED
}

func (x *ListUserPipelineReleasesRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListUserPipelineReleasesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListUserPipelineReleasesRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

// ListUserPipelineReleasesResponse contains a list of pipeline releases.
type ListUserPipelineReleasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline release resources.
	Releases []*PipelineRelease `protobuf:"bytes,1,rep,name=releases,proto3" json:"releases,omitempty"`
	// Next page token.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of pipeline releases.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListUserPipelineReleasesResponse) Reset() {
	*x = ListUserPipelineReleasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserPipelineReleasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserPipelineReleasesResponse) ProtoMessage() {}

func (x *ListUserPipelineReleasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserPipelineReleasesResponse.ProtoReflect.Descriptor instead.
func (*ListUserPipelineReleasesResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{47}
}

func (x *ListUserPipelineReleasesResponse) GetReleases() []*PipelineRelease {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *ListUserPipelineReleasesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListUserPipelineReleasesResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// GetUserPipelineReleaseRequest represents a request to fetchthe details of a
// release in a user-owned pipeline.
type GetUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline release, which allows its access by
	// parent pipeline and ID.
	// - Format: `users/{user.id}/pipelines/{pipeline.id}/releases/{release.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// View allows clients to specify the desired pipeline view in the response.
	View *Pipeline_View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1beta.Pipeline_View,oneof" json:"view,omitempty"`
}

func (x *GetUserPipelineReleaseRequest) Reset() {
	*x = GetUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPipelineReleaseRequest) ProtoMessage() {}

func (x *GetUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*GetUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{48}
}

func (x *GetUserPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetUserPipelineReleaseRequest) GetView() Pipeline_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return Pipeline_VIEW_UNSPECIFIED
}

// GetUserPipelineReleaseResponse contains the requested pipeline release.
type GetUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pipeline release resource.
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *GetUserPipelineReleaseResponse) Reset() {
	*x = GetUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPipelineReleaseResponse) ProtoMessage() {}

func (x *GetUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*GetUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{49}
}

func (x *GetUserPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// UpdateUserPipelineReleaseRequest represents a request to update a user-owned
// pipeline release.
type UpdateUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pipeline release fields that will replace the existing ones.
	// A pipeline release resource to update
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	// The update mask specifies the subset of fields that should be modified.
	//
	// For more information about this field, see
	// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#field-mask.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateUserPipelineReleaseRequest) Reset() {
	*x = UpdateUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPipelineReleaseRequest) ProtoMessage() {}

func (x *UpdateUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateUserPipelineReleaseRequest) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *UpdateUserPipelineReleaseRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdateUserPipelineReleaseResponse contains the updated pipeline release.
type UpdateUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated pipeline release resource.
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *UpdateUserPipelineReleaseResponse) Reset() {
	*x = UpdateUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPipelineReleaseResponse) ProtoMessage() {}

func (x *UpdateUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{51}
}

func (x *UpdateUserPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// DeleteUserPipelineReleaseRequest represents a request to delete a release in
// a user-owned pipeline.
type DeleteUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline release, which allows its access by
	// parent pipeline and ID.
	// - Format: `users/{user.id}/pipelines/{pipeline.id}/releases/{release.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteUserPipelineReleaseRequest) Reset() {
	*x = DeleteUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserPipelineReleaseRequest) ProtoMessage() {}

func (x *DeleteUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{52}
}

func (x *DeleteUserPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteUserPipelineReleaseResponse is an empty response.
type DeleteUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteUserPipelineReleaseResponse) Reset() {
	*x = DeleteUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserPipelineReleaseResponse) ProtoMessage() {}

func (x *DeleteUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{53}
}

// RestoreUserPipelineReleaseRequest represents a request to set the version of
// a user-owned pipeline to a pinned release.
type RestoreUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline release, which allows its access by
	// parent pipeline and ID.
	// - Format: `users/{user.id}/pipelines/{pipeline.id}/releases/{release.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RestoreUserPipelineReleaseRequest) Reset() {
	*x = RestoreUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreUserPipelineReleaseRequest) ProtoMessage() {}

func (x *RestoreUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*RestoreUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{54}
}

func (x *RestoreUserPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// RestoreUserPipelineReleaseResponse contains the requested pipeline release.
type RestoreUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pipeline release resource.
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *RestoreUserPipelineReleaseResponse) Reset() {
	*x = RestoreUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreUserPipelineReleaseResponse) ProtoMessage() {}

func (x *RestoreUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*RestoreUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{55}
}

func (x *RestoreUserPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// RenameUserPipelineReleaseRequest represents a request to rename a release in
// a user-owned pipeline.
type RenameUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline release, which allows its access by
	// parent pipeline and ID.
	// - Format: `users/{user.id}/pipelines/{pipeline.id}/releases/{release.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new resource ID. This will transform the resource name into
	// `users/{user.id}/pipelines/{pipeline.id}/releases{new_release_id}`.
	NewPipelineReleaseId string `protobuf:"bytes,2,opt,name=new_pipeline_release_id,json=newPipelineReleaseId,proto3" json:"new_pipeline_release_id,omitempty"`
}

func (x *RenameUserPipelineReleaseRequest) Reset() {
	*x = RenameUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameUserPipelineReleaseRequest) ProtoMessage() {}

func (x *RenameUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*RenameUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{56}
}

func (x *RenameUserPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenameUserPipelineReleaseRequest) GetNewPipelineReleaseId() string {
	if x != nil {
		return x.NewPipelineReleaseId
	}
	return ""
}

// RenameUserPipelineReleaseResponse contains a renamed pipeline release.
type RenameUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The renamed pipeline release.
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *RenameUserPipelineReleaseResponse) Reset() {
	*x = RenameUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameUserPipelineReleaseResponse) ProtoMessage() {}

func (x *RenameUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*RenameUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{57}
}

func (x *RenameUserPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// TriggerUserPipelineReleaseRequest represents a request to trigger a pinned
// release of a user-owned pipeline.
type TriggerUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline release, which allows its access by
	// parent pipeline and ID.
	// - Format: `users/{user.id}/pipelines/{pipeline.id}/releases/{release.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline input parameters.
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Pipeline secrets parameters that will override the pipeline's or owner's secrets.
	Secrets map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TriggerUserPipelineReleaseRequest) Reset() {
	*x = TriggerUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerUserPipelineReleaseRequest) ProtoMessage() {}

func (x *TriggerUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*TriggerUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{58}
}

func (x *TriggerUserPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerUserPipelineReleaseRequest) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TriggerUserPipelineReleaseRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// TriggerUserPipelineReleaseResponse contains the pipeline execution results,
// i.e., the multiple model inference outputs.
type TriggerUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Model inference outputs.
	Outputs []*structpb.Struct `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Traces of the pipeline inference.
	Metadata *TriggerMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *TriggerUserPipelineReleaseResponse) Reset() {
	*x = TriggerUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerUserPipelineReleaseResponse) ProtoMessage() {}

func (x *TriggerUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*TriggerUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{59}
}

func (x *TriggerUserPipelineReleaseResponse) GetOutputs() []*structpb.Struct {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TriggerUserPipelineReleaseResponse) GetMetadata() *TriggerMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// TriggerUserPipelineReleaseRequest represents a request to trigger a pinned
// release of a user-owned pipeline asynchronously.
type TriggerAsyncUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline release, which allows its access by
	// parent pipeline and ID.
	// - Format: `users/{user.id}/pipelines/{pipeline.id}/releases/{release.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline input parameters.
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Pipeline secrets parameters that will override the pipeline's or owner's secrets.
	Secrets map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TriggerAsyncUserPipelineReleaseRequest) Reset() {
	*x = TriggerAsyncUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncUserPipelineReleaseRequest) ProtoMessage() {}

func (x *TriggerAsyncUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*TriggerAsyncUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{60}
}

func (x *TriggerAsyncUserPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerAsyncUserPipelineReleaseRequest) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TriggerAsyncUserPipelineReleaseRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// TriggerAsyncUserPipelineReleaseResponse contains the information to access
// the status of an asynchronous pipeline execution.
type TriggerAsyncUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Long-running operation information.
	Operation *longrunningpb.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *TriggerAsyncUserPipelineReleaseResponse) Reset() {
	*x = TriggerAsyncUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncUserPipelineReleaseResponse) ProtoMessage() {}

func (x *TriggerAsyncUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*TriggerAsyncUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{61}
}

func (x *TriggerAsyncUserPipelineReleaseResponse) GetOperation() *longrunningpb.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// CreateOrganizationPipelineRequest represents a request from an organization
// to create a pipeline.
type CreateOrganizationPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The properties of the pipeline to be created.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// The parent resource, i.e., the organization that creates the pipeline.
	// - Format: `organizations/{organization.id}`.
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *CreateOrganizationPipelineRequest) Reset() {
	*x = CreateOrganizationPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationPipelineRequest) ProtoMessage() {}

func (x *CreateOrganizationPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationPipelineRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{62}
}

func (x *CreateOrganizationPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *CreateOrganizationPipelineRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

// CreateOrganizationPipelineResponse contains the created pipeline.
type CreateOrganizationPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created pipeline resource.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *CreateOrganizationPipelineResponse) Reset() {
	*x = CreateOrganizationPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationPipelineResponse) ProtoMessage() {}

func (x *CreateOrganizationPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationPipelineResponse.ProtoReflect.Descriptor instead.
func (*CreateOrganizationPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{63}
}

func (x *CreateOrganizationPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// ListOrganizationPipelinesRequest represents a request to list the pipelines
// of an organization.
type ListOrganizationPipelinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of pipelines to return. If this parameter is
	// unspecified, at most 10 pipelines will be returned. The cap value for this
	// parameter is 100 (i.e. any value above that will be coerced to 100).
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token.
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// View allows clients to specify the desired pipeline view in the response.
	View *Pipeline_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1beta.Pipeline_View,oneof" json:"view,omitempty"`
	// Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
	// expression.
	// - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
	// - Example:
	// `recipe.components.definition_name:"operator-definitions/2ac8be70-0f7a-4b61-a33d-098b8acfa6f3"`.
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// The parent resource, i.e., the organization that created the pipelines.
	// - Format: `organizations/{organization.id}`.
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// Include soft-deleted pipelines in the result.
	ShowDeleted *bool `protobuf:"varint,6,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
	// Limit results to pipelines with the specified visibility.
	Visibility *Pipeline_Visibility `protobuf:"varint,7,opt,name=visibility,proto3,enum=vdp.pipeline.v1beta.Pipeline_Visibility,oneof" json:"visibility,omitempty"`
	// Order by field, with options for ordering by `id`, `create_time` or `update_time`.
	// Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
	OrderBy *string `protobuf:"bytes,8,opt,name=order_by,json=orderBy,proto3,oneof" json:"order_by,omitempty"`
}

func (x *ListOrganizationPipelinesRequest) Reset() {
	*x = ListOrganizationPipelinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationPipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationPipelinesRequest) ProtoMessage() {}

func (x *ListOrganizationPipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationPipelinesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationPipelinesRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{64}
}

func (x *ListOrganizationPipelinesRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListOrganizationPipelinesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListOrganizationPipelinesRequest) GetView() Pipeline_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return Pipeline_VIEW_UNSPECIFIED
}

func (x *ListOrganizationPipelinesRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListOrganizationPipelinesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationPipelinesRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

func (x *ListOrganizationPipelinesRequest) GetVisibility() Pipeline_Visibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return Pipeline_VISIBILITY_UNSPECIFIED
}

func (x *ListOrganizationPipelinesRequest) GetOrderBy() string {
	if x != nil && x.OrderBy != nil {
		return *x.OrderBy
	}
	return ""
}

// ListOrganizationPipelinesResponse contains a list of pipelines.
type ListOrganizationPipelinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline resources.
	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	// Next page token.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of pipelines.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListOrganizationPipelinesResponse) Reset() {
	*x = ListOrganizationPipelinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationPipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationPipelinesResponse) ProtoMessage() {}

func (x *ListOrganizationPipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationPipelinesResponse.ProtoReflect.Descriptor instead.
func (*ListOrganizationPipelinesResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{65}
}

func (x *ListOrganizationPipelinesResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *ListOrganizationPipelinesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListOrganizationPipelinesResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// GetOrganizationPipelineRequest represents a request to fetch the details of
// a pipeline owned by an organization.
type GetOrganizationPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent
	// organization and ID.
	// - Format: `organizations/{organization.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// View allows clients to specify the desired pipeline view in the response.
	View *Pipeline_View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1beta.Pipeline_View,oneof" json:"view,omitempty"`
}

func (x *GetOrganizationPipelineRequest) Reset() {
	*x = GetOrganizationPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationPipelineRequest) ProtoMessage() {}

func (x *GetOrganizationPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationPipelineRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{66}
}

func (x *GetOrganizationPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetOrganizationPipelineRequest) GetView() Pipeline_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return Pipeline_VIEW_UNSPECIFIED
}

// GetOrganizationPipelineResponse contains the requested pipeline.
type GetOrganizationPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pipeline resource.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *GetOrganizationPipelineResponse) Reset() {
	*x = GetOrganizationPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationPipelineResponse) ProtoMessage() {}

func (x *GetOrganizationPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationPipelineResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{67}
}

func (x *GetOrganizationPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// UpdateOrganizationPipelineRequest represents a request to update a pipeline
// owned by an organization.
type UpdateOrganizationPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pipeline fields that will replace the existing ones.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// The update mask specifies the subset of fields that should be modified.
	//
	// For more information about this field, see
	// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#field-mask.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateOrganizationPipelineRequest) Reset() {
	*x = UpdateOrganizationPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationPipelineRequest) ProtoMessage() {}

func (x *UpdateOrganizationPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationPipelineRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{68}
}

func (x *UpdateOrganizationPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *UpdateOrganizationPipelineRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdateOrganizationPipelineResponse contains the updated pipeline.
type UpdateOrganizationPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated pipeline resource.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *UpdateOrganizationPipelineResponse) Reset() {
	*x = UpdateOrganizationPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationPipelineResponse) ProtoMessage() {}

func (x *UpdateOrganizationPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationPipelineResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{69}
}

func (x *UpdateOrganizationPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// DeleteOrganizationPipelineRequest represents a request to delete a pipeline
// owned by an organization.
type DeleteOrganizationPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent
	// organization and ID.
	// - Format: `organizations/{organization.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationPipelineRequest) Reset() {
	*x = DeleteOrganizationPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationPipelineRequest) ProtoMessage() {}

func (x *DeleteOrganizationPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationPipelineRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{70}
}

func (x *DeleteOrganizationPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteOrganizationPipelineResponse is an empty response.
type DeleteOrganizationPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteOrganizationPipelineResponse) Reset() {
	*x = DeleteOrganizationPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationPipelineResponse) ProtoMessage() {}

func (x *DeleteOrganizationPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationPipelineResponse.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{71}
}

// ValidateOrganizationPipelineRequest represents a request to validate a
// pipeline owned by an organization.
type ValidateOrganizationPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent
	// organization and ID.
	// - Format: `organizations/{organization.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ValidateOrganizationPipelineRequest) Reset() {
	*x = ValidateOrganizationPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateOrganizationPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateOrganizationPipelineRequest) ProtoMessage() {}

func (x *ValidateOrganizationPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateOrganizationPipelineRequest.ProtoReflect.Descriptor instead.
func (*ValidateOrganizationPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{72}
}

func (x *ValidateOrganizationPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ValidateOrganizationPipelineResponse contains a validated pipeline.
type ValidateOrganizationPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The validated pipeline resource.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *ValidateOrganizationPipelineResponse) Reset() {
	*x = ValidateOrganizationPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateOrganizationPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateOrganizationPipelineResponse) ProtoMessage() {}

func (x *ValidateOrganizationPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateOrganizationPipelineResponse.ProtoReflect.Descriptor instead.
func (*ValidateOrganizationPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{73}
}

func (x *ValidateOrganizationPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// RenameOrganizationPipelineRequest represents a request to rename the name of
// a pipeline owned by an organization.
type RenameOrganizationPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent
	// organization and ID.
	// - Format: `organizations/{organization.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new resource ID. This will transform the resource name into
	// `organizations/{organization.id}/pipelines/{new_pipeline_id}`.
	NewPipelineId string `protobuf:"bytes,2,opt,name=new_pipeline_id,json=newPipelineId,proto3" json:"new_pipeline_id,omitempty"`
}

func (x *RenameOrganizationPipelineRequest) Reset() {
	*x = RenameOrganizationPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameOrganizationPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameOrganizationPipelineRequest) ProtoMessage() {}

func (x *RenameOrganizationPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameOrganizationPipelineRequest.ProtoReflect.Descriptor instead.
func (*RenameOrganizationPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{74}
}

func (x *RenameOrganizationPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenameOrganizationPipelineRequest) GetNewPipelineId() string {
	if x != nil {
		return x.NewPipelineId
	}
	return ""
}

// RenameOrganizationPipelineResponse contains a renamed pipeline.
type RenameOrganizationPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The renamed pipeline resource.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *RenameOrganizationPipelineResponse) Reset() {
	*x = RenameOrganizationPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameOrganizationPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameOrganizationPipelineResponse) ProtoMessage() {}

func (x *RenameOrganizationPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameOrganizationPipelineResponse.ProtoReflect.Descriptor instead.
func (*RenameOrganizationPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{75}
}

func (x *RenameOrganizationPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// CloneOrganizationPipelineRequest represents a request to clone a pipeline
// owned by an organization.
type CloneOrganizationPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent
	// organization and ID.
	// - Format: `organizations/{organization.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The target pipeline name. It can be under a user or an organization
	// namespace, so the following formats are accepted:
	// - `users/{user.id}/pipelines/{pipeline.id}`
	// - `organizations/{organization.id}/pipelines/{pipeline.id}`
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *CloneOrganizationPipelineRequest) Reset() {
	*x = CloneOrganizationPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneOrganizationPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneOrganizationPipelineRequest) ProtoMessage() {}

func (x *CloneOrganizationPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneOrganizationPipelineRequest.ProtoReflect.Descriptor instead.
func (*CloneOrganizationPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{76}
}

func (x *CloneOrganizationPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CloneOrganizationPipelineRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// CloneOrganizationPipelineResponse contains a cloned pipeline.
type CloneOrganizationPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cloned pipeline resource.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *CloneOrganizationPipelineResponse) Reset() {
	*x = CloneOrganizationPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneOrganizationPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneOrganizationPipelineResponse) ProtoMessage() {}

func (x *CloneOrganizationPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneOrganizationPipelineResponse.ProtoReflect.Descriptor instead.
func (*CloneOrganizationPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{77}
}

func (x *CloneOrganizationPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// TriggerOrganizationPipelineRequest represents a request to trigger an
// organization-owned pipeline synchronously.
type TriggerOrganizationPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent
	// organization and ID.
	// - Format: `organizations/{organization.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline input parameters.
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Pipeline secrets parameters that will override the pipeline's or owner's secrets.
	Secrets map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TriggerOrganizationPipelineRequest) Reset() {
	*x = TriggerOrganizationPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerOrganizationPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerOrganizationPipelineRequest) ProtoMessage() {}

func (x *TriggerOrganizationPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerOrganizationPipelineRequest.ProtoReflect.Descriptor instead.
func (*TriggerOrganizationPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{78}
}

func (x *TriggerOrganizationPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerOrganizationPipelineRequest) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TriggerOrganizationPipelineRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// TriggerOrganizationPipelineResponse contains the pipeline execution results,
// i.e., the multiple model inference outputs.
type TriggerOrganizationPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Model inference outputs.
	Outputs []*structpb.Struct `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Traces of the pipeline inference.
	Metadata *TriggerMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *TriggerOrganizationPipelineResponse) Reset() {
	*x = TriggerOrganizationPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerOrganizationPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerOrganizationPipelineResponse) ProtoMessage() {}

func (x *TriggerOrganizationPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerOrganizationPipelineResponse.ProtoReflect.Descriptor instead.
func (*TriggerOrganizationPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{79}
}

func (x *TriggerOrganizationPipelineResponse) GetOutputs() []*structpb.Struct {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TriggerOrganizationPipelineResponse) GetMetadata() *TriggerMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// TriggerOrganizationPipelineRequest represents a request to trigger an
// organization-owned pipeline synchronously.
type TriggerAsyncOrganizationPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline, which allows its access by parent
	// organization and ID.
	// - Format: `organizations/{organization.id}/pipelines/{pipeline.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline input parameters.
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Pipeline secrets parameters that will override the pipeline's or owner's secrets.
	Secrets map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TriggerAsyncOrganizationPipelineRequest) Reset() {
	*x = TriggerAsyncOrganizationPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncOrganizationPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncOrganizationPipelineRequest) ProtoMessage() {}

func (x *TriggerAsyncOrganizationPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncOrganizationPipelineRequest.ProtoReflect.Descriptor instead.
func (*TriggerAsyncOrganizationPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{80}
}

func (x *TriggerAsyncOrganizationPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerAsyncOrganizationPipelineRequest) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TriggerAsyncOrganizationPipelineRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// TriggerAsyncOrganizationPipelineResponse contains the information to access
// the status of an asynchronous pipeline execution.
type TriggerAsyncOrganizationPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Long-running operation information.
	Operation *longrunningpb.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *TriggerAsyncOrganizationPipelineResponse) Reset() {
	*x = TriggerAsyncOrganizationPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncOrganizationPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncOrganizationPipelineResponse) ProtoMessage() {}

func (x *TriggerAsyncOrganizationPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncOrganizationPipelineResponse.ProtoReflect.Descriptor instead.
func (*TriggerAsyncOrganizationPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{81}
}

func (x *TriggerAsyncOrganizationPipelineResponse) GetOperation() *longrunningpb.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// CreateOrganizationPipelineReleaseRequest represents a request to release a
// version in an organization-owned pipeline.
type CreateOrganizationPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The release information.
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	// Name of the pipeline for which the release will be created.
	// Format: `organizations/{organization.id}/pipelines/{pipeline.id}`
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *CreateOrganizationPipelineReleaseRequest) Reset() {
	*x = CreateOrganizationPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationPipelineReleaseRequest) ProtoMessage() {}

func (x *CreateOrganizationPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*CreateOrganizationPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{82}
}

func (x *CreateOrganizationPipelineReleaseRequest) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *CreateOrganizationPipelineReleaseRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

// CreateOrganizationPipelineReleaseResponse contains the created release.
type CreateOrganizationPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created pipeline release object.
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *CreateOrganizationPipelineReleaseResponse) Reset() {
	*x = CreateOrganizationPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrganizationPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrganizationPipelineReleaseResponse) ProtoMessage() {}

func (x *CreateOrganizationPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrganizationPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*CreateOrganizationPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{83}
}

func (x *CreateOrganizationPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// ListOrganizationPipelineReleasesRequest represents a request to list the
// releases in an organization-owned pipeline.
type ListOrganizationPipelineReleasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of releases to return. If this parameter is
	// unspecified, at most 10 pipelines will be returned. The cap value for this
	// parameter is 100 (i.e. any value above that will be coerced to 100).
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token.
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// View allows clients to specify the desired pipeline view in the response.
	View *Pipeline_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1beta.Pipeline_View,oneof" json:"view,omitempty"`
	// Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
	// expression.
	// - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// The parent resource where this pipeline release will be created.
	// Format: `organizations/{organization.id}/pipelines/{pipeline.id}`
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// Include soft-deleted pipelines in the result.
	ShowDeleted *bool `protobuf:"varint,6,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
}

func (x *ListOrganizationPipelineReleasesRequest) Reset() {
	*x = ListOrganizationPipelineReleasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationPipelineReleasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationPipelineReleasesRequest) ProtoMessage() {}

func (x *ListOrganizationPipelineReleasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationPipelineReleasesRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationPipelineReleasesRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{84}
}

func (x *ListOrganizationPipelineReleasesRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListOrganizationPipelineReleasesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListOrganizationPipelineReleasesRequest) GetView() Pipeline_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return Pipeline_VIEW_UNSPECIFIED
}

func (x *ListOrganizationPipelineReleasesRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListOrganizationPipelineReleasesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListOrganizationPipelineReleasesRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

// ListOrganizationPipelineReleasesResponse contains a list of pipeline releases.
type ListOrganizationPipelineReleasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline release resources.
	Releases []*PipelineRelease `protobuf:"bytes,1,rep,name=releases,proto3" json:"releases,omitempty"`
	// Next page token.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of pipeline releases.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListOrganizationPipelineReleasesResponse) Reset() {
	*x = ListOrganizationPipelineReleasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationPipelineReleasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationPipelineReleasesResponse) ProtoMessage() {}

func (x *ListOrganizationPipelineReleasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationPipelineReleasesResponse.ProtoReflect.Descriptor instead.
func (*ListOrganizationPipelineReleasesResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{85}
}

func (x *ListOrganizationPipelineReleasesResponse) GetReleases() []*PipelineRelease {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *ListOrganizationPipelineReleasesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListOrganizationPipelineReleasesResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// GetOrganizationPipelineReleaseRequest represents a request to fetchthe
// details of a release in an organization-owned pipeline.
type GetOrganizationPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline release, which allows its access by
	// parent pipeline and ID.
	// - Format:
	// `organizations/{organization.id}/pipelines/{pipeline.id}/releases/{release.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// View allows clients to specify the desired pipeline view in the response.
	View *Pipeline_View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1beta.Pipeline_View,oneof" json:"view,omitempty"`
}

func (x *GetOrganizationPipelineReleaseRequest) Reset() {
	*x = GetOrganizationPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationPipelineReleaseRequest) ProtoMessage() {}

func (x *GetOrganizationPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{86}
}

func (x *GetOrganizationPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetOrganizationPipelineReleaseRequest) GetView() Pipeline_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return Pipeline_VIEW_UNSPECIFIED
}

// GetOrganizationPipelineReleaseResponse contains the requested pipeline release.
type GetOrganizationPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pipeline release resource.
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *GetOrganizationPipelineReleaseResponse) Reset() {
	*x = GetOrganizationPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationPipelineReleaseResponse) ProtoMessage() {}

func (x *GetOrganizationPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*GetOrganizationPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{87}
}

func (x *GetOrganizationPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// UpdateOrganizationPipelineReleaseRequest represents a request to update an
// organization-owned pipeline release.
type UpdateOrganizationPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pipeline release fields that will replace the existing ones.
	// A pipeline release resource to update
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	// The update mask specifies the subset of fields that should be modified.
	//
	// For more information about this field, see
	// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#field-mask.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateOrganizationPipelineReleaseRequest) Reset() {
	*x = UpdateOrganizationPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationPipelineReleaseRequest) ProtoMessage() {}

func (x *UpdateOrganizationPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{88}
}

func (x *UpdateOrganizationPipelineReleaseRequest) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *UpdateOrganizationPipelineReleaseRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdateOrganizationPipelineReleaseResponse contains the updated pipeline
// release.
type UpdateOrganizationPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The updated pipeline release resource.
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *UpdateOrganizationPipelineReleaseResponse) Reset() {
	*x = UpdateOrganizationPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrganizationPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrganizationPipelineReleaseResponse) ProtoMessage() {}

func (x *UpdateOrganizationPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrganizationPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrganizationPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{89}
}

func (x *UpdateOrganizationPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// DeleteOrganizationPipelineReleaseRequest represents a request to delete a
// release in an organization-owned pipeline.
type DeleteOrganizationPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline release, which allows its access by
	// parent pipeline and ID.
	// - Format:
	// `organizations/{organization.id}/pipelines/{pipeline.id}/releases/{release.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteOrganizationPipelineReleaseRequest) Reset() {
	*x = DeleteOrganizationPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationPipelineReleaseRequest) ProtoMessage() {}

func (x *DeleteOrganizationPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{90}
}

func (x *DeleteOrganizationPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteOrganizationPipelineReleaseResponse is an empty response.
type DeleteOrganizationPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteOrganizationPipelineReleaseResponse) Reset() {
	*x = DeleteOrganizationPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrganizationPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrganizationPipelineReleaseResponse) ProtoMessage() {}

func (x *DeleteOrganizationPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrganizationPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteOrganizationPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{91}
}

// RestoreOrganizationPipelineReleaseRequest represents a request to set the
// version of an organization-owned pipeline to a pinned release.
type RestoreOrganizationPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline release, which allows its access by
	// parent pipeline and ID.
	// - Format:
	// `organizations/{organization.id}/pipelines/{pipeline.id}/releases/{release.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RestoreOrganizationPipelineReleaseRequest) Reset() {
	*x = RestoreOrganizationPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreOrganizationPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreOrganizationPipelineReleaseRequest) ProtoMessage() {}

func (x *RestoreOrganizationPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreOrganizationPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*RestoreOrganizationPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{92}
}

func (x *RestoreOrganizationPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// RestoreOrganizationPipelineReleaseResponse contains the requested pipeline
// release.
type RestoreOrganizationPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The pipeline release resource.
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *RestoreOrganizationPipelineReleaseResponse) Reset() {
	*x = RestoreOrganizationPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreOrganizationPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreOrganizationPipelineReleaseResponse) ProtoMessage() {}

func (x *RestoreOrganizationPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreOrganizationPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*RestoreOrganizationPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{93}
}

func (x *RestoreOrganizationPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// RenameOrganizationPipelineReleaseRequest represents a request to rename a
// release in an organization-owned pipeline.
type RenameOrganizationPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline release, which allows its access by
	// parent pipeline and ID.
	// - Format:
	// `organizations/{organization.id}/pipelines/{pipeline.id}/releases/{release.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The new resource ID. This will transform the resource name into
	// `organizations/{organization.id}/pipelines/{pipeline.id}/releases{new_release_id}`.
	NewPipelineReleaseId string `protobuf:"bytes,2,opt,name=new_pipeline_release_id,json=newPipelineReleaseId,proto3" json:"new_pipeline_release_id,omitempty"`
}

func (x *RenameOrganizationPipelineReleaseRequest) Reset() {
	*x = RenameOrganizationPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameOrganizationPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameOrganizationPipelineReleaseRequest) ProtoMessage() {}

func (x *RenameOrganizationPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameOrganizationPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*RenameOrganizationPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{94}
}

func (x *RenameOrganizationPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenameOrganizationPipelineReleaseRequest) GetNewPipelineReleaseId() string {
	if x != nil {
		return x.NewPipelineReleaseId
	}
	return ""
}

// RenameOrganizationPipelineReleaseResponse contains a renamed pipeline release.
type RenameOrganizationPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The renamed pipeline release.
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *RenameOrganizationPipelineReleaseResponse) Reset() {
	*x = RenameOrganizationPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameOrganizationPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameOrganizationPipelineReleaseResponse) ProtoMessage() {}

func (x *RenameOrganizationPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameOrganizationPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*RenameOrganizationPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{95}
}

func (x *RenameOrganizationPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// TriggerOrganizationPipelineReleaseRequest represents a request to trigger a
// pinned release of an organization-owned pipeline.
type TriggerOrganizationPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline release, which allows its access by
	// parent pipeline and ID.
	// - Format:
	// `organizations/{organization.id}/pipelines/{pipeline.id}/releases/{release.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline input parameters.
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Pipeline secrets parameters that will override the pipeline's or owner's secrets.
	Secrets map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TriggerOrganizationPipelineReleaseRequest) Reset() {
	*x = TriggerOrganizationPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerOrganizationPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerOrganizationPipelineReleaseRequest) ProtoMessage() {}

func (x *TriggerOrganizationPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerOrganizationPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*TriggerOrganizationPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{96}
}

func (x *TriggerOrganizationPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerOrganizationPipelineReleaseRequest) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TriggerOrganizationPipelineReleaseRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// TriggerOrganizationPipelineReleaseResponse contains the pipeline execution
// results, i.e., the multiple model inference outputs.
type TriggerOrganizationPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Model inference outputs.
	Outputs []*structpb.Struct `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Traces of the pipeline inference.
	Metadata *TriggerMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *TriggerOrganizationPipelineReleaseResponse) Reset() {
	*x = TriggerOrganizationPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerOrganizationPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerOrganizationPipelineReleaseResponse) ProtoMessage() {}

func (x *TriggerOrganizationPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerOrganizationPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*TriggerOrganizationPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{97}
}

func (x *TriggerOrganizationPipelineReleaseResponse) GetOutputs() []*structpb.Struct {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TriggerOrganizationPipelineReleaseResponse) GetMetadata() *TriggerMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// TriggerOrganizationPipelineReleaseRequest represents a request to trigger a
// pinned release of an organization-owned pipeline asynchronously.
type TriggerAsyncOrganizationPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the pipeline release, which allows its access by
	// parent pipeline and ID.
	// - Format:
	// `organizations/{organization.id}/pipelines/{pipeline.id}/releases/{release.id}`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline input parameters.
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Pipeline secrets parameters that will override the pipeline's or owner's secrets.
	Secrets map[string]string `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TriggerAsyncOrganizationPipelineReleaseRequest) Reset() {
	*x = TriggerAsyncOrganizationPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncOrganizationPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncOrganizationPipelineReleaseRequest) ProtoMessage() {}

func (x *TriggerAsyncOrganizationPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncOrganizationPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*TriggerAsyncOrganizationPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{98}
}

func (x *TriggerAsyncOrganizationPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerAsyncOrganizationPipelineReleaseRequest) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TriggerAsyncOrganizationPipelineReleaseRequest) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// TriggerAsyncOrganizationPipelineReleaseResponse contains the information to
// access the status of an asynchronous pipeline execution.
type TriggerAsyncOrganizationPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Long-running operation information.
	Operation *longrunningpb.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *TriggerAsyncOrganizationPipelineReleaseResponse) Reset() {
	*x = TriggerAsyncOrganizationPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncOrganizationPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncOrganizationPipelineReleaseResponse) ProtoMessage() {}

func (x *TriggerAsyncOrganizationPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncOrganizationPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*TriggerAsyncOrganizationPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{99}
}

func (x *TriggerAsyncOrganizationPipelineReleaseResponse) GetOperation() *longrunningpb.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// GetOperationRequest represents a request to query a long-running operation.
type GetOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the operation resource. Asynchronous methods will contain this
	// information in their response.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOperationRequest) Reset() {
	*x = GetOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationRequest) ProtoMessage() {}

func (x *GetOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationRequest.ProtoReflect.Descriptor instead.
func (*GetOperationRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{100}
}

func (x *GetOperationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetOperationResponse contains the long-running operation details.
type GetOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The long-running operation.
	Operation *longrunningpb.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *GetOperationResponse) Reset() {
	*x = GetOperationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationResponse) ProtoMessage() {}

func (x *GetOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationResponse.ProtoReflect.Descriptor instead.
func (*GetOperationResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{101}
}

func (x *GetOperationResponse) GetOperation() *longrunningpb.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// ListPipelinesAdminRequest represents a request by an admin to list all the
// pipelines. Admin users have access to pipelines from any user.
type ListPipelinesAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of pipelines to return. If this parameter is
	// unspecified, at most 10 pipelines will be returned. The cap value for this
	// parameter is 100 (i.e. any value above that will be coerced to 100).
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token.
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// View allows clients to specify the desired pipeline view in the response.
	View *Pipeline_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1beta.Pipeline_View,oneof" json:"view,omitempty"`
	// Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
	// expression.
	// - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
	// - Example:
	// `recipe.components.definition_name:"operator-definitions/2ac8be70-0f7a-4b61-a33d-098b8acfa6f3"`.
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// Include soft-deleted pipelines in the result.
	ShowDeleted *bool `protobuf:"varint,5,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
}

func (x *ListPipelinesAdminRequest) Reset() {
	*x = ListPipelinesAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinesAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesAdminRequest) ProtoMessage() {}

func (x *ListPipelinesAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesAdminRequest.ProtoReflect.Descriptor instead.
func (*ListPipelinesAdminRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{102}
}

func (x *ListPipelinesAdminRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListPipelinesAdminRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListPipelinesAdminRequest) GetView() Pipeline_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return Pipeline_VIEW_UNSPECIFIED
}

func (x *ListPipelinesAdminRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListPipelinesAdminRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

// ListPipelinesAdminResponse contains a list of pipelines requested by an
// admin user.
// For the moment, the pipeline recipes will be UID-based (permalink) instead
// of name-based. This is a temporary solution.
type ListPipelinesAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline resources.
	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	// Next page token.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of pipelines.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListPipelinesAdminResponse) Reset() {
	*x = ListPipelinesAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinesAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesAdminResponse) ProtoMessage() {}

func (x *ListPipelinesAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesAdminResponse.ProtoReflect.Descriptor instead.
func (*ListPipelinesAdminResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{103}
}

func (x *ListPipelinesAdminResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *ListPipelinesAdminResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListPipelinesAdminResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// ListPipelinesReleaseAdminRequest represents a request by an admin to list
// all pipeline releases. Admin users have access to pipelines from any user.
type ListPipelineReleasesAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of releases to return. If this parameter is
	// unspecified, at most 10 releases will be returned. The cap value for this
	// parameter is 100 (i.e. any value above that will be coerced to 100).
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token.
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// View allows clients to specify the desired pipeline view in the response.
	View *Pipeline_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1beta.Pipeline_View,oneof" json:"view,omitempty"`
	// Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
	// expression.
	// - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// Include soft-deleted pipelines in the result.
	ShowDeleted *bool `protobuf:"varint,5,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
}

func (x *ListPipelineReleasesAdminRequest) Reset() {
	*x = ListPipelineReleasesAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineReleasesAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineReleasesAdminRequest) ProtoMessage() {}

func (x *ListPipelineReleasesAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineReleasesAdminRequest.ProtoReflect.Descriptor instead.
func (*ListPipelineReleasesAdminRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{104}
}

func (x *ListPipelineReleasesAdminRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListPipelineReleasesAdminRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListPipelineReleasesAdminRequest) GetView() Pipeline_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return Pipeline_VIEW_UNSPECIFIED
}

func (x *ListPipelineReleasesAdminRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListPipelineReleasesAdminRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

// ListPipelineReleasesAdminResponse contains a list of pipeline releases
// requested by an admin user.
// For the moment, the pipeline recipes will be UID-based (permalink) instead
// of name-based. This is a temporary solution.
type ListPipelineReleasesAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline releases.
	Releases []*PipelineRelease `protobuf:"bytes,1,rep,name=releases,proto3" json:"releases,omitempty"`
	// Next page token.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of pipeline releases.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListPipelineReleasesAdminResponse) Reset() {
	*x = ListPipelineReleasesAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineReleasesAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineReleasesAdminResponse) ProtoMessage() {}

func (x *ListPipelineReleasesAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineReleasesAdminResponse.ProtoReflect.Descriptor instead.
func (*ListPipelineReleasesAdminResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{105}
}

func (x *ListPipelineReleasesAdminResponse) GetReleases() []*PipelineRelease {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *ListPipelineReleasesAdminResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListPipelineReleasesAdminResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// LookUpPipelineAdminRequest represents a request by an admin to query a
// pipeline by its UID.
type LookUpPipelineAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The permalink of the pipeline, which allows its access by UID.
	// - Format: `pipelines/{pipeline.uid}`.
	Permalink string `protobuf:"bytes,1,opt,name=permalink,proto3" json:"permalink,omitempty"`
	// View allows clients to specify the desired pipeline view in the response.
	View *Pipeline_View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1beta.Pipeline_View,oneof" json:"view,omitempty"`
}

func (x *LookUpPipelineAdminRequest) Reset() {
	*x = LookUpPipelineAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpPipelineAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpPipelineAdminRequest) ProtoMessage() {}

func (x *LookUpPipelineAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpPipelineAdminRequest.ProtoReflect.Descriptor instead.
func (*LookUpPipelineAdminRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{106}
}

func (x *LookUpPipelineAdminRequest) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

func (x *LookUpPipelineAdminRequest) GetView() Pipeline_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return Pipeline_VIEW_UNSPECIFIED
}

// LookUpPipelineAdminResponse contains the requested pipeline.
type LookUpPipelineAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested pipeline.
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *LookUpPipelineAdminResponse) Reset() {
	*x = LookUpPipelineAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpPipelineAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpPipelineAdminResponse) ProtoMessage() {}

func (x *LookUpPipelineAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpPipelineAdminResponse.ProtoReflect.Descriptor instead.
func (*LookUpPipelineAdminResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{107}
}

func (x *LookUpPipelineAdminResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// Represents a field within the reqeuest.
type TriggerByRequest_RequestField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Title of the field.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Description of the field.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Instill format.
	InstillFormat string `protobuf:"bytes,3,opt,name=instill_format,json=instillFormat,proto3" json:"instill_format,omitempty"`
	// Instill UI order.
	InstillUiOrder int32 `protobuf:"varint,4,opt,name=instill_ui_order,json=instillUiOrder,proto3" json:"instill_ui_order,omitempty"`
	// Instill UI Multiline.
	InstillUiMultiline bool `protobuf:"varint,5,opt,name=instill_ui_multiline,json=instillUiMultiline,proto3" json:"instill_ui_multiline,omitempty"`
}

func (x *TriggerByRequest_RequestField) Reset() {
	*x = TriggerByRequest_RequestField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerByRequest_RequestField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerByRequest_RequestField) ProtoMessage() {}

func (x *TriggerByRequest_RequestField) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerByRequest_RequestField.ProtoReflect.Descriptor instead.
func (*TriggerByRequest_RequestField) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TriggerByRequest_RequestField) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TriggerByRequest_RequestField) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TriggerByRequest_RequestField) GetInstillFormat() string {
	if x != nil {
		return x.InstillFormat
	}
	return ""
}

func (x *TriggerByRequest_RequestField) GetInstillUiOrder() int32 {
	if x != nil {
		return x.InstillUiOrder
	}
	return 0
}

func (x *TriggerByRequest_RequestField) GetInstillUiMultiline() bool {
	if x != nil {
		return x.InstillUiMultiline
	}
	return false
}

// Represents a field within the response.
type TriggerByRequest_ResponseField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Title of the field.
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// Description of the field.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Value of the field.
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Instill UI order.
	InstillUiOrder int32 `protobuf:"varint,4,opt,name=instill_ui_order,json=instillUiOrder,proto3" json:"instill_ui_order,omitempty"`
}

func (x *TriggerByRequest_ResponseField) Reset() {
	*x = TriggerByRequest_ResponseField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerByRequest_ResponseField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerByRequest_ResponseField) ProtoMessage() {}

func (x *TriggerByRequest_ResponseField) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerByRequest_ResponseField.ProtoReflect.Descriptor instead.
func (*TriggerByRequest_ResponseField) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP(), []int{4, 1}
}

func (x *TriggerByRequest_ResponseField) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TriggerByRequest_ResponseField) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TriggerByRequest_ResponseField) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TriggerByRequest_ResponseField) GetInstillUiOrder() int32 {
	if x != nil {
		return x.InstillUiOrder
	}
	return 0
}

var File_vdp_pipeline_v1beta_pipeline_proto protoreflect.FileDescriptor

var file_vdp_pipeline_v1beta_pipeline_proto_rawDesc = []byte{
	0x0a, 0x22, 0x76, 0x64, 0x70, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x67, 0x6d,
	0x74, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x76, 0x64, 0x70, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x76, 0x64, 0x70, 0x2f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x14, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52,
	0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x76, 0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x14,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00,
	0x52, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x77, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd2, 0x06, 0x0a, 0x10, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x64,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x67, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0xe2, 0x01,
	0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2d, 0x0a, 0x10,
	0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x6c, 0x6c, 0x55, 0x69, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x14, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x12,
	0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x55, 0x69, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69,
	0x6e, 0x65, 0x1a, 0x9b, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2d, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x5f, 0x75, 0x69, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x55, 0x69, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x1a, 0x74, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x76, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb,
	0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xff, 0x01, 0x0a,
	0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x0e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4c, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5,
	0x03, 0x0a, 0x11, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x68, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x41, 0x0a, 0x13, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x03, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x64,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d,
	0x22, 0xa2, 0x02, 0x0a, 0x0f, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x64,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x55, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76,
	0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x22, 0x9a, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x42, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xfc, 0x09, 0x0a, 0x08, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x13, 0xca,
	0x3e, 0x10, 0xfa, 0x02, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x07, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x64, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76,
	0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d,
	0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x06, 0xe0, 0x41, 0x01, 0xe0, 0x41, 0x03, 0x48, 0x01, 0x52,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a, 0x12, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x19, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x4c,
	0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x45, 0x10, 0x03, 0x22, 0x57, 0x0a, 0x0a,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x49,
	0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x43, 0x10, 0x02, 0x3a, 0x61, 0xea, 0x41, 0x5e, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x18,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x75, 0x69, 0x64, 0x7d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x22, 0xb2,
	0x01, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x48, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x55, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76,
	0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xee, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x31, 0x0a,
	0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x2d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x35, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x75, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x48, 0x75, 0x62, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x3f, 0x0a, 0x1c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x22, 0xdd, 0x05, 0x0a, 0x0f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1b, 0xca, 0x3e, 0x18, 0xfa, 0x02, 0x15, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x33,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x6d, 0x65,
	0x12, 0x5a, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76,
	0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x5c, 0xea, 0x41,
	0x59, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74,
	0x65, 0x63, 0x68, 0x2f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x3d, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x69, 0x64, 0x7d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a,
	0x22, 0xce, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x02, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x05, 0x52,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x06, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x15, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x40, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x64, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x53, 0x0a, 0x16, 0x4c, 0x6f, 0x6f, 0x6b, 0x55,
	0x70, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xa3, 0x01, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76,
	0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x0f, 0xca, 0x3e, 0x0c, 0xfa, 0x02, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x12,
	0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63,
	0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x22, 0x57, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x9f, 0x04, 0x0a, 0x18,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x02, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41,
	0x0f, 0xca, 0x3e, 0x0c, 0xfa, 0x02, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x12, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x76, 0x64, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x06, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x22, 0x9f, 0x01,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xb5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x18, 0xca, 0x3e, 0x15,
	0xfa, 0x02, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x64, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x54, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x9d, 0x01,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x57, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x6d, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3c, 0x92, 0x41, 0x18, 0xca, 0x3e, 0x15, 0xfa, 0x02, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c,
	0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6f, 0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3c, 0x92, 0x41, 0x18, 0xca, 0x3e, 0x15, 0xfa, 0x02, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x1c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0x9a, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x18,
	0xca, 0x3e, 0x15, 0xfa, 0x02, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68,
	0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x6e,
	0x65, 0x77, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1a,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76,
	0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x3c, 0x92, 0x41, 0x18, 0xca, 0x3e, 0x15, 0xfa, 0x02, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x22, 0x56, 0x0a, 0x19, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xbd, 0x02, 0x0a, 0x1a, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x18, 0xca, 0x3e, 0x15, 0xfa, 0x02,
	0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x12, 0x5b, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x1a, 0x3a, 0x0a,
	0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x01, 0x0a, 0x1b, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd1,
	0x02, 0x0a, 0x24, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x18, 0xca, 0x3e, 0x15, 0xfa, 0x02, 0x12,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x65, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x9c, 0x01, 0x0a, 0x25, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xc7, 0x02, 0x0a, 0x1f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x18, 0xca, 0x3e, 0x15, 0xfa, 0x02, 0x12, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x60, 0x0a,
	0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x1a,
	0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x20, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x0f, 0xca, 0x3e, 0x0c, 0xfa, 0x02,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22,
	0x12, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65,
	0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x63, 0x0a, 0x21, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22,
	0x98, 0x03, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0x92, 0x41, 0x0f, 0xca, 0x3e, 0x0c, 0xfa,
	0x02, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x22, 0x12, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74,
	0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0c, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x20, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x20, 0xca, 0x3e, 0x1d,
	0xfa, 0x02, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x64, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x60, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0x63, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x20, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41,
	0x20, 0xca, 0x3e, 0x1d, 0xfa, 0x02, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x23, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x20, 0xca, 0x3e, 0x1d,
	0xfa, 0x02, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x22, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x22, 0xbf, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x20, 0xca, 0x3e, 0x1d, 0xfa, 0x02, 0x1a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a,
	0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63,
	0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x6e,
	0x65, 0x77, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x21, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xda, 0x02, 0x0a, 0x21, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41,
	0x20, 0xca, 0x3e, 0x1d, 0xfa, 0x02, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x22, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xe4, 0x02, 0x0a, 0x26, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x73, 0x79,
	0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0x92, 0x41, 0x20, 0xca,
	0x3e, 0x1d, 0xfa, 0x02, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x27, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x17, 0xca, 0x3e, 0x14, 0xfa, 0x02,
	0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x12, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x5f, 0x0a, 0x22, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xaf, 0x04, 0x0a,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0x92, 0x41, 0x17, 0xca, 0x3e, 0x14, 0xfa, 0x02, 0x11,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x12, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x76, 0x64,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x05, 0x52, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x06, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x22, 0xa7,
	0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc5, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x20, 0xca, 0x3e,
	0x1d, 0xfa, 0x02, 0x1a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c,
	0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x22, 0x5c, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xa5,
	0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x5f, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x7d, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x20, 0xca,
	0x3e, 0x1d, 0xfa, 0x02, 0x1a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x0a, 0x23,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x44, 0x92, 0x41, 0x20, 0xca, 0x3e, 0x1d, 0xfa, 0x02, 0x1a, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x61, 0x0a,
	0x24, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0xaa, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x20, 0xca, 0x3e, 0x1d, 0xfa, 0x02, 0x1a, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a,
	0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63,
	0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d,
	0x6e, 0x65, 0x77, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x5f, 0x0a,
	0x22, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x91,
	0x01, 0x0a, 0x20, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x3c, 0x92, 0x41, 0x18, 0xca, 0x3e, 0x15, 0xfa, 0x02, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c,
	0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0x5e, 0x0a, 0x21, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x64, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x22, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x20, 0xca, 0x3e, 0x1d, 0xfa,
	0x02, 0x1a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e,
	0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x76, 0x64, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x1a, 0x3a,
	0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x01, 0x0a, 0x23, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdf, 0x02, 0x0a, 0x27, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x44, 0x92, 0x41, 0x20, 0xca, 0x3e, 0x1d, 0xfa, 0x02, 0x1a, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x68, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x1a, 0x3a, 0x0a,
	0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6c, 0x0a, 0x28, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92, 0x41, 0x17, 0xca, 0x3e, 0x14, 0xfa, 0x02, 0x11, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x12, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x22, 0x6b, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xa8, 0x03,
	0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x02, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x5a, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0x92,
	0x41, 0x17, 0xca, 0x3e, 0x14, 0xfa, 0x02, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x12,
	0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63,
	0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x28, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xdb,
	0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x28, 0xca, 0x3e, 0x25, 0xfa, 0x02,
	0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x68, 0x0a, 0x26,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x6b, 0x0a, 0x29, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x28, 0xca, 0x3e, 0x25, 0xfa, 0x02, 0x22, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a,
	0x29, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x29, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x28, 0xca, 0x3e, 0x25, 0xfa, 0x02,
	0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x6c, 0x0a, 0x2a, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22,
	0xcf, 0x01, 0x0a, 0x28, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x28, 0xca,
	0x3e, 0x25, 0xfa, 0x02, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x6e, 0x65, 0x77,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x22, 0x6b, 0x0a, 0x29, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xf2,
	0x02, 0x0a, 0x29, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x28, 0xca,
	0x3e, 0x25, 0xfa, 0x02, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x6a, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x76,
	0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x07,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x2a, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfc, 0x02, 0x0a, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x53, 0x92, 0x41, 0x28, 0xca, 0x3e, 0x25,
	0xfa, 0x02, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x07, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x76, 0x64, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x73, 0x0a, 0x2f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x20, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x40,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76,
	0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52,
	0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x22, 0xac, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xc3, 0x01, 0x0a, 0x1a, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5a, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3c, 0x92, 0x41, 0x18, 0xca, 0x3e, 0x15, 0xfa, 0x02, 0x12, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x40, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x64, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x58, 0x0a, 0x1b, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2a, 0x55, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x42, 0xdc, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e,
	0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x42, 0x0d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2d, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x64, 0x70, 0x2f, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x3b, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0xa2, 0x02, 0x03, 0x56, 0x50, 0x58,
	0xaa, 0x02, 0x13, 0x56, 0x64, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0xca, 0x02, 0x13, 0x56, 0x64, 0x70, 0x5c, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0xe2, 0x02, 0x1f, 0x56,
	0x64, 0x70, 0x5c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x15, 0x56, 0x64, 0x70, 0x3a, 0x3a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vdp_pipeline_v1beta_pipeline_proto_rawDescOnce sync.Once
	file_vdp_pipeline_v1beta_pipeline_proto_rawDescData = file_vdp_pipeline_v1beta_pipeline_proto_rawDesc
)

func file_vdp_pipeline_v1beta_pipeline_proto_rawDescGZIP() []byte {
	file_vdp_pipeline_v1beta_pipeline_proto_rawDescOnce.Do(func() {
		file_vdp_pipeline_v1beta_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(file_vdp_pipeline_v1beta_pipeline_proto_rawDescData)
	})
	return file_vdp_pipeline_v1beta_pipeline_proto_rawDescData
}

var file_vdp_pipeline_v1beta_pipeline_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_vdp_pipeline_v1beta_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 124)
var file_vdp_pipeline_v1beta_pipeline_proto_goTypes = []interface{}{
	(State)(0),                                              // 0: vdp.pipeline.v1beta.State
	(Pipeline_View)(0),                                      // 1: vdp.pipeline.v1beta.Pipeline.View
	(Pipeline_Visibility)(0),                                // 2: vdp.pipeline.v1beta.Pipeline.Visibility
	(Trace_Status)(0),                                       // 3: vdp.pipeline.v1beta.Trace.Status
	(*LivenessRequest)(nil),                                 // 4: vdp.pipeline.v1beta.LivenessRequest
	(*LivenessResponse)(nil),                                // 5: vdp.pipeline.v1beta.LivenessResponse
	(*ReadinessRequest)(nil),                                // 6: vdp.pipeline.v1beta.ReadinessRequest
	(*ReadinessResponse)(nil),                               // 7: vdp.pipeline.v1beta.ReadinessResponse
	(*TriggerByRequest)(nil),                                // 8: vdp.pipeline.v1beta.TriggerByRequest
	(*ConnectorComponent)(nil),                              // 9: vdp.pipeline.v1beta.ConnectorComponent
	(*OperatorComponent)(nil),                               // 10: vdp.pipeline.v1beta.OperatorComponent
	(*IteratorComponent)(nil),                               // 11: vdp.pipeline.v1beta.IteratorComponent
	(*Component)(nil),                                       // 12: vdp.pipeline.v1beta.Component
	(*NestedComponent)(nil),                                 // 13: vdp.pipeline.v1beta.NestedComponent
	(*Trigger)(nil),                                         // 14: vdp.pipeline.v1beta.Trigger
	(*Recipe)(nil),                                          // 15: vdp.pipeline.v1beta.Recipe
	(*Pipeline)(nil),                                        // 16: vdp.pipeline.v1beta.Pipeline
	(*TriggerMetadata)(nil),                                 // 17: vdp.pipeline.v1beta.TriggerMetadata
	(*Trace)(nil),                                           // 18: vdp.pipeline.v1beta.Trace
	(*GetHubStatsRequest)(nil),                              // 19: vdp.pipeline.v1beta.GetHubStatsRequest
	(*GetHubStatsResponse)(nil),                             // 20: vdp.pipeline.v1beta.GetHubStatsResponse
	(*PipelineRelease)(nil),                                 // 21: vdp.pipeline.v1beta.PipelineRelease
	(*ListPipelinesRequest)(nil),                            // 22: vdp.pipeline.v1beta.ListPipelinesRequest
	(*ListPipelinesResponse)(nil),                           // 23: vdp.pipeline.v1beta.ListPipelinesResponse
	(*LookUpPipelineRequest)(nil),                           // 24: vdp.pipeline.v1beta.LookUpPipelineRequest
	(*LookUpPipelineResponse)(nil),                          // 25: vdp.pipeline.v1beta.LookUpPipelineResponse
	(*CreateUserPipelineRequest)(nil),                       // 26: vdp.pipeline.v1beta.CreateUserPipelineRequest
	(*CreateUserPipelineResponse)(nil),                      // 27: vdp.pipeline.v1beta.CreateUserPipelineResponse
	(*ListUserPipelinesRequest)(nil),                        // 28: vdp.pipeline.v1beta.ListUserPipelinesRequest
	(*ListUserPipelinesResponse)(nil),                       // 29: vdp.pipeline.v1beta.ListUserPipelinesResponse
	(*GetUserPipelineRequest)(nil),                          // 30: vdp.pipeline.v1beta.GetUserPipelineRequest
	(*GetUserPipelineResponse)(nil),                         // 31: vdp.pipeline.v1beta.GetUserPipelineResponse
	(*UpdateUserPipelineRequest)(nil),                       // 32: vdp.pipeline.v1beta.UpdateUserPipelineRequest
	(*UpdateUserPipelineResponse)(nil),                      // 33: vdp.pipeline.v1beta.UpdateUserPipelineResponse
	(*DeleteUserPipelineRequest)(nil),                       // 34: vdp.pipeline.v1beta.DeleteUserPipelineRequest
	(*DeleteUserPipelineResponse)(nil),                      // 35: vdp.pipeline.v1beta.DeleteUserPipelineResponse
	(*ValidateUserPipelineRequest)(nil),                     // 36: vdp.pipeline.v1beta.ValidateUserPipelineRequest
	(*ValidateUserPipelineResponse)(nil),                    // 37: vdp.pipeline.v1beta.ValidateUserPipelineResponse
	(*RenameUserPipelineRequest)(nil),                       // 38: vdp.pipeline.v1beta.RenameUserPipelineRequest
	(*RenameUserPipelineResponse)(nil),                      // 39: vdp.pipeline.v1beta.RenameUserPipelineResponse
	(*CloneUserPipelineRequest)(nil),                        // 40: vdp.pipeline.v1beta.CloneUserPipelineRequest
	(*CloneUserPipelineResponse)(nil),                       // 41: vdp.pipeline.v1beta.CloneUserPipelineResponse
	(*TriggerUserPipelineRequest)(nil),                      // 42: vdp.pipeline.v1beta.TriggerUserPipelineRequest
	(*TriggerUserPipelineResponse)(nil),                     // 43: vdp.pipeline.v1beta.TriggerUserPipelineResponse
	(*TriggerUserPipelineWithStreamRequest)(nil),            // 44: vdp.pipeline.v1beta.TriggerUserPipelineWithStreamRequest
	(*TriggerUserPipelineWithStreamResponse)(nil),           // 45: vdp.pipeline.v1beta.TriggerUserPipelineWithStreamResponse
	(*TriggerAsyncUserPipelineRequest)(nil),                 // 46: vdp.pipeline.v1beta.TriggerAsyncUserPipelineRequest
	(*TriggerAsyncUserPipelineResponse)(nil),                // 47: vdp.pipeline.v1beta.TriggerAsyncUserPipelineResponse
	(*CreateUserPipelineReleaseRequest)(nil),                // 48: vdp.pipeline.v1beta.CreateUserPipelineReleaseRequest
	(*CreateUserPipelineReleaseResponse)(nil),               // 49: vdp.pipeline.v1beta.CreateUserPipelineReleaseResponse
	(*ListUserPipelineReleasesRequest)(nil),                 // 50: vdp.pipeline.v1beta.ListUserPipelineReleasesRequest
	(*ListUserPipelineReleasesResponse)(nil),                // 51: vdp.pipeline.v1beta.ListUserPipelineReleasesResponse
	(*GetUserPipelineReleaseRequest)(nil),                   // 52: vdp.pipeline.v1beta.GetUserPipelineReleaseRequest
	(*GetUserPipelineReleaseResponse)(nil),                  // 53: vdp.pipeline.v1beta.GetUserPipelineReleaseResponse
	(*UpdateUserPipelineReleaseRequest)(nil),                // 54: vdp.pipeline.v1beta.UpdateUserPipelineReleaseRequest
	(*UpdateUserPipelineReleaseResponse)(nil),               // 55: vdp.pipeline.v1beta.UpdateUserPipelineReleaseResponse
	(*DeleteUserPipelineReleaseRequest)(nil),                // 56: vdp.pipeline.v1beta.DeleteUserPipelineReleaseRequest
	(*DeleteUserPipelineReleaseResponse)(nil),               // 57: vdp.pipeline.v1beta.DeleteUserPipelineReleaseResponse
	(*RestoreUserPipelineReleaseRequest)(nil),               // 58: vdp.pipeline.v1beta.RestoreUserPipelineReleaseRequest
	(*RestoreUserPipelineReleaseResponse)(nil),              // 59: vdp.pipeline.v1beta.RestoreUserPipelineReleaseResponse
	(*RenameUserPipelineReleaseRequest)(nil),                // 60: vdp.pipeline.v1beta.RenameUserPipelineReleaseRequest
	(*RenameUserPipelineReleaseResponse)(nil),               // 61: vdp.pipeline.v1beta.RenameUserPipelineReleaseResponse
	(*TriggerUserPipelineReleaseRequest)(nil),               // 62: vdp.pipeline.v1beta.TriggerUserPipelineReleaseRequest
	(*TriggerUserPipelineReleaseResponse)(nil),              // 63: vdp.pipeline.v1beta.TriggerUserPipelineReleaseResponse
	(*TriggerAsyncUserPipelineReleaseRequest)(nil),          // 64: vdp.pipeline.v1beta.TriggerAsyncUserPipelineReleaseRequest
	(*TriggerAsyncUserPipelineReleaseResponse)(nil),         // 65: vdp.pipeline.v1beta.TriggerAsyncUserPipelineReleaseResponse
	(*CreateOrganizationPipelineRequest)(nil),               // 66: vdp.pipeline.v1beta.CreateOrganizationPipelineRequest
	(*CreateOrganizationPipelineResponse)(nil),              // 67: vdp.pipeline.v1beta.CreateOrganizationPipelineResponse
	(*ListOrganizationPipelinesRequest)(nil),                // 68: vdp.pipeline.v1beta.ListOrganizationPipelinesRequest
	(*ListOrganizationPipelinesResponse)(nil),               // 69: vdp.pipeline.v1beta.ListOrganizationPipelinesResponse
	(*GetOrganizationPipelineRequest)(nil),                  // 70: vdp.pipeline.v1beta.GetOrganizationPipelineRequest
	(*GetOrganizationPipelineResponse)(nil),                 // 71: vdp.pipeline.v1beta.GetOrganizationPipelineResponse
	(*UpdateOrganizationPipelineRequest)(nil),               // 72: vdp.pipeline.v1beta.UpdateOrganizationPipelineRequest
	(*UpdateOrganizationPipelineResponse)(nil),              // 73: vdp.pipeline.v1beta.UpdateOrganizationPipelineResponse
	(*DeleteOrganizationPipelineRequest)(nil),               // 74: vdp.pipeline.v1beta.DeleteOrganizationPipelineRequest
	(*DeleteOrganizationPipelineResponse)(nil),              // 75: vdp.pipeline.v1beta.DeleteOrganizationPipelineResponse
	(*ValidateOrganizationPipelineRequest)(nil),             // 76: vdp.pipeline.v1beta.ValidateOrganizationPipelineRequest
	(*ValidateOrganizationPipelineResponse)(nil),            // 77: vdp.pipeline.v1beta.ValidateOrganizationPipelineResponse
	(*RenameOrganizationPipelineRequest)(nil),               // 78: vdp.pipeline.v1beta.RenameOrganizationPipelineRequest
	(*RenameOrganizationPipelineResponse)(nil),              // 79: vdp.pipeline.v1beta.RenameOrganizationPipelineResponse
	(*CloneOrganizationPipelineRequest)(nil),                // 80: vdp.pipeline.v1beta.CloneOrganizationPipelineRequest
	(*CloneOrganizationPipelineResponse)(nil),               // 81: vdp.pipeline.v1beta.CloneOrganizationPipelineResponse
	(*TriggerOrganizationPipelineRequest)(nil),              // 82: vdp.pipeline.v1beta.TriggerOrganizationPipelineRequest
	(*TriggerOrganizationPipelineResponse)(nil),             // 83: vdp.pipeline.v1beta.TriggerOrganizationPipelineResponse
	(*TriggerAsyncOrganizationPipelineRequest)(nil),         // 84: vdp.pipeline.v1beta.TriggerAsyncOrganizationPipelineRequest
	(*TriggerAsyncOrganizationPipelineResponse)(nil),        // 85: vdp.pipeline.v1beta.TriggerAsyncOrganizationPipelineResponse
	(*CreateOrganizationPipelineReleaseRequest)(nil),        // 86: vdp.pipeline.v1beta.CreateOrganizationPipelineReleaseRequest
	(*CreateOrganizationPipelineReleaseResponse)(nil),       // 87: vdp.pipeline.v1beta.CreateOrganizationPipelineReleaseResponse
	(*ListOrganizationPipelineReleasesRequest)(nil),         // 88: vdp.pipeline.v1beta.ListOrganizationPipelineReleasesRequest
	(*ListOrganizationPipelineReleasesResponse)(nil),        // 89: vdp.pipeline.v1beta.ListOrganizationPipelineReleasesResponse
	(*GetOrganizationPipelineReleaseRequest)(nil),           // 90: vdp.pipeline.v1beta.GetOrganizationPipelineReleaseRequest
	(*GetOrganizationPipelineReleaseResponse)(nil),          // 91: vdp.pipeline.v1beta.GetOrganizationPipelineReleaseResponse
	(*UpdateOrganizationPipelineReleaseRequest)(nil),        // 92: vdp.pipeline.v1beta.UpdateOrganizationPipelineReleaseRequest
	(*UpdateOrganizationPipelineReleaseResponse)(nil),       // 93: vdp.pipeline.v1beta.UpdateOrganizationPipelineReleaseResponse
	(*DeleteOrganizationPipelineReleaseRequest)(nil),        // 94: vdp.pipeline.v1beta.DeleteOrganizationPipelineReleaseRequest
	(*DeleteOrganizationPipelineReleaseResponse)(nil),       // 95: vdp.pipeline.v1beta.DeleteOrganizationPipelineReleaseResponse
	(*RestoreOrganizationPipelineReleaseRequest)(nil),       // 96: vdp.pipeline.v1beta.RestoreOrganizationPipelineReleaseRequest
	(*RestoreOrganizationPipelineReleaseResponse)(nil),      // 97: vdp.pipeline.v1beta.RestoreOrganizationPipelineReleaseResponse
	(*RenameOrganizationPipelineReleaseRequest)(nil),        // 98: vdp.pipeline.v1beta.RenameOrganizationPipelineReleaseRequest
	(*RenameOrganizationPipelineReleaseResponse)(nil),       // 99: vdp.pipeline.v1beta.RenameOrganizationPipelineReleaseResponse
	(*TriggerOrganizationPipelineReleaseRequest)(nil),       // 100: vdp.pipeline.v1beta.TriggerOrganizationPipelineReleaseRequest
	(*TriggerOrganizationPipelineReleaseResponse)(nil),      // 101: vdp.pipeline.v1beta.TriggerOrganizationPipelineReleaseResponse
	(*TriggerAsyncOrganizationPipelineReleaseRequest)(nil),  // 102: vdp.pipeline.v1beta.TriggerAsyncOrganizationPipelineReleaseRequest
	(*TriggerAsyncOrganizationPipelineReleaseResponse)(nil), // 103: vdp.pipeline.v1beta.TriggerAsyncOrganizationPipelineReleaseResponse
	(*GetOperationRequest)(nil),                             // 104: vdp.pipeline.v1beta.GetOperationRequest
	(*GetOperationResponse)(nil),                            // 105: vdp.pipeline.v1beta.GetOperationResponse
	(*ListPipelinesAdminRequest)(nil),                       // 106: vdp.pipeline.v1beta.ListPipelinesAdminRequest
	(*ListPipelinesAdminResponse)(nil),                      // 107: vdp.pipeline.v1beta.ListPipelinesAdminResponse
	(*ListPipelineReleasesAdminRequest)(nil),                // 108: vdp.pipeline.v1beta.ListPipelineReleasesAdminRequest
	(*ListPipelineReleasesAdminResponse)(nil),               // 109: vdp.pipeline.v1beta.ListPipelineReleasesAdminResponse
	(*LookUpPipelineAdminRequest)(nil),                      // 110: vdp.pipeline.v1beta.LookUpPipelineAdminRequest
	(*LookUpPipelineAdminResponse)(nil),                     // 111: vdp.pipeline.v1beta.LookUpPipelineAdminResponse
	(*TriggerByRequest_RequestField)(nil),                   // 112: vdp.pipeline.v1beta.TriggerByRequest.RequestField
	(*TriggerByRequest_ResponseField)(nil),                  // 113: vdp.pipeline.v1beta.TriggerByRequest.ResponseField
	nil,                                                     // 114: vdp.pipeline.v1beta.TriggerByRequest.RequestFieldsEntry
	nil,                                                     // 115: vdp.pipeline.v1beta.TriggerByRequest.ResponseFieldsEntry
	nil,                                                     // 116: vdp.pipeline.v1beta.IteratorComponent.OutputElementsEntry
	nil,                                                     // 117: vdp.pipeline.v1beta.Recipe.SecretsEntry
	nil,                                                     // 118: vdp.pipeline.v1beta.TriggerMetadata.TracesEntry
	nil,                                                     // 119: vdp.pipeline.v1beta.TriggerUserPipelineRequest.SecretsEntry
	nil,                                                     // 120: vdp.pipeline.v1beta.TriggerUserPipelineWithStreamRequest.SecretsEntry
	nil,                                                     // 121: vdp.pipeline.v1beta.TriggerAsyncUserPipelineRequest.SecretsEntry
	nil,                                                     // 122: vdp.pipeline.v1beta.TriggerUserPipelineReleaseRequest.SecretsEntry
	nil,                                                     // 123: vdp.pipeline.v1beta.TriggerAsyncUserPipelineReleaseRequest.SecretsEntry
	nil,                                                     // 124: vdp.pipeline.v1beta.TriggerOrganizationPipelineRequest.SecretsEntry
	nil,                                                     // 125: vdp.pipeline.v1beta.TriggerAsyncOrganizationPipelineRequest.SecretsEntry
	nil,                                                     // 126: vdp.pipeline.v1beta.TriggerOrganizationPipelineReleaseRequest.SecretsEntry
	nil,                                                     // 127: vdp.pipeline.v1beta.TriggerAsyncOrganizationPipelineReleaseRequest.SecretsEntry
	(*v1beta.HealthCheckRequest)(nil),                       // 128: common.healthcheck.v1beta.HealthCheckRequest
	(*v1beta.HealthCheckResponse)(nil),                      // 129: common.healthcheck.v1beta.HealthCheckResponse
	(*ConnectorDefinition)(nil),                             // 130: vdp.pipeline.v1beta.ConnectorDefinition
	(*structpb.Struct)(nil),                                 // 131: google.protobuf.Struct
	(*OperatorDefinition)(nil),                              // 132: vdp.pipeline.v1beta.OperatorDefinition
	(*DataSpecification)(nil),                               // 133: vdp.pipeline.v1beta.DataSpecification
	(*timestamppb.Timestamp)(nil),                           // 134: google.protobuf.Timestamp
	(*Sharing)(nil),                                         // 135: vdp.pipeline.v1beta.Sharing
	(*Permission)(nil),                                      // 136: vdp.pipeline.v1beta.Permission
	(*v1beta1.Owner)(nil),                                   // 137: core.mgmt.v1beta.Owner
	(*fieldmaskpb.FieldMask)(nil),                           // 138: google.protobuf.FieldMask
	(*longrunningpb.Operation)(nil),                         // 139: google.longrunning.Operation
}
var file_vdp_pipeline_v1beta_pipeline_proto_depIdxs = []int32{
	128, // 0: vdp.pipeline.v1beta.LivenessRequest.health_check_request:type_name -> common.healthcheck.v1beta.HealthCheckRequest
	129, // 1: vdp.pipeline.v1beta.LivenessResponse.health_check_response:type_name -> common.healthcheck.v1beta.HealthCheckResponse
	128, // 2: vdp.pipeline.v1beta.ReadinessRequest.health_check_request:type_name -> common.healthcheck.v1beta.HealthCheckRequest
	129, // 3: vdp.pipeline.v1beta.ReadinessResponse.health_check_response:type_name -> common.healthcheck.v1beta.HealthCheckResponse
	114, // 4: vdp.pipeline.v1beta.TriggerByRequest.request_fields:type_name -> vdp.pipeline.v1beta.TriggerByRequest.RequestFieldsEntry
	115, // 5: vdp.pipeline.v1beta.TriggerByRequest.response_fields:type_name -> vdp.pipeline.v1beta.TriggerByRequest.ResponseFieldsEntry
	130, // 6: vdp.pipeline.v1beta.ConnectorComponent.definition:type_name -> vdp.pipeline.v1beta.ConnectorDefinition
	131, // 7: vdp.pipeline.v1beta.ConnectorComponent.input:type_name -> google.protobuf.Struct
	131, // 8: vdp.pipeline.v1beta.ConnectorComponent.connection:type_name -> google.protobuf.Struct
	132, // 9: vdp.pipeline.v1beta.OperatorComponent.definition:type_name -> vdp.pipeline.v1beta.OperatorDefinition
	131, // 10: vdp.pipeline.v1beta.OperatorComponent.input:type_name -> google.protobuf.Struct
	116, // 11: vdp.pipeline.v1beta.IteratorComponent.output_elements:type_name -> vdp.pipeline.v1beta.IteratorComponent.OutputElementsEntry
	13,  // 12: vdp.pipeline.v1beta.IteratorComponent.components:type_name -> vdp.pipeline.v1beta.NestedComponent
	133, // 13: vdp.pipeline.v1beta.IteratorComponent.data_specification:type_name -> vdp.pipeline.v1beta.DataSpecification
	131, // 14: vdp.pipeline.v1beta.Component.metadata:type_name -> google.protobuf.Struct
	9,   // 15: vdp.pipeline.v1beta.Component.connector_component:type_name -> vdp.pipeline.v1beta.ConnectorComponent
	10,  // 16: vdp.pipeline.v1beta.Component.operator_component:type_name -> vdp.pipeline.v1beta.OperatorComponent
	11,  // 17: vdp.pipeline.v1beta.Component.iterator_component:type_name -> vdp.pipeline.v1beta.IteratorComponent
	131, // 18: vdp.pipeline.v1beta.NestedComponent.metadata:type_name -> google.protobuf.Struct
	9,   // 19: vdp.pipeline.v1beta.NestedComponent.connector_component:type_name -> vdp.pipeline.v1beta.ConnectorComponent
	10,  // 20: vdp.pipeline.v1beta.NestedComponent.operator_component:type_name -> vdp.pipeline.v1beta.OperatorComponent
	8,   // 21: vdp.pipeline.v1beta.Trigger.trigger_by_request:type_name -> vdp.pipeline.v1beta.TriggerByRequest
	12,  // 22: vdp.pipeline.v1beta.Recipe.components:type_name -> vdp.pipeline.v1beta.Component
	14,  // 23: vdp.pipeline.v1beta.Recipe.trigger:type_name -> vdp.pipeline.v1beta.Trigger
	117, // 24: vdp.pipeline.v1beta.Recipe.secrets:type_name -> vdp.pipeline.v1beta.Recipe.SecretsEntry
	15,  // 25: vdp.pipeline.v1beta.Pipeline.recipe:type_name -> vdp.pipeline.v1beta.Recipe
	134, // 26: vdp.pipeline.v1beta.Pipeline.create_time:type_name -> google.protobuf.Timestamp
	134, // 27: vdp.pipeline.v1beta.Pipeline.update_time:type_name -> google.protobuf.Timestamp
	134, // 28: vdp.pipeline.v1beta.Pipeline.delete_time:type_name -> google.protobuf.Timestamp
	135, // 29: vdp.pipeline.v1beta.Pipeline.sharing:type_name -> vdp.pipeline.v1beta.Sharing
	131, // 30: vdp.pipeline.v1beta.Pipeline.metadata:type_name -> google.protobuf.Struct
	21,  // 31: vdp.pipeline.v1beta.Pipeline.releases:type_name -> vdp.pipeline.v1beta.PipelineRelease
	136, // 32: vdp.pipeline.v1beta.Pipeline.permission:type_name -> vdp.pipeline.v1beta.Permission
	2,   // 33: vdp.pipeline.v1beta.Pipeline.visibility:type_name -> vdp.pipeline.v1beta.Pipeline.Visibility
	137, // 34: vdp.pipeline.v1beta.Pipeline.owner:type_name -> core.mgmt.v1beta.Owner
	133, // 35: vdp.pipeline.v1beta.Pipeline.data_specification:type_name -> vdp.pipeline.v1beta.DataSpecification
	118, // 36: vdp.pipeline.v1beta.TriggerMetadata.traces:type_name -> vdp.pipeline.v1beta.TriggerMetadata.TracesEntry
	3,   // 37: vdp.pipeline.v1beta.Trace.statuses:type_name -> vdp.pipeline.v1beta.Trace.Status
	131, // 38: vdp.pipeline.v1beta.Trace.inputs:type_name -> google.protobuf.Struct
	131, // 39: vdp.pipeline.v1beta.Trace.outputs:type_name -> google.protobuf.Struct
	131, // 40: vdp.pipeline.v1beta.Trace.error:type_name -> google.protobuf.Struct
	15,  // 41: vdp.pipeline.v1beta.PipelineRelease.recipe:type_name -> vdp.pipeline.v1beta.Recipe
	134, // 42: vdp.pipeline.v1beta.PipelineRelease.create_time:type_name -> google.protobuf.Timestamp
	134, // 43: vdp.pipeline.v1beta.PipelineRelease.update_time:type_name -> google.protobuf.Timestamp
	134, // 44: vdp.pipeline.v1beta.PipelineRelease.delete_time:type_name -> google.protobuf.Timestamp
	131, // 45: vdp.pipeline.v1beta.PipelineRelease.metadata:type_name -> google.protobuf.Struct
	133, // 46: vdp.pipeline.v1beta.PipelineRelease.data_specification:type_name -> vdp.pipeline.v1beta.DataSpecification
	1,   // 47: vdp.pipeline.v1beta.ListPipelinesRequest.view:type_name -> vdp.pipeline.v1beta.Pipeline.View
	2,   // 48: vdp.pipeline.v1beta.ListPipelinesRequest.visibility:type_name -> vdp.pipeline.v1beta.Pipeline.Visibility
	16,  // 49: vdp.pipeline.v1beta.ListPipelinesResponse.pipelines:type_name -> vdp.pipeline.v1beta.Pipeline
	1,   // 50: vdp.pipeline.v1beta.LookUpPipelineRequest.view:type_name -> vdp.pipeline.v1beta.Pipeline.View
	16,  // 51: vdp.pipeline.v1beta.LookUpPipelineResponse.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	16,  // 52: vdp.pipeline.v1beta.CreateUserPipelineRequest.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	16,  // 53: vdp.pipeline.v1beta.CreateUserPipelineResponse.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	1,   // 54: vdp.pipeline.v1beta.ListUserPipelinesRequest.view:type_name -> vdp.pipeline.v1beta.Pipeline.View
	2,   // 55: vdp.pipeline.v1beta.ListUserPipelinesRequest.visibility:type_name -> vdp.pipeline.v1beta.Pipeline.Visibility
	16,  // 56: vdp.pipeline.v1beta.ListUserPipelinesResponse.pipelines:type_name -> vdp.pipeline.v1beta.Pipeline
	1,   // 57: vdp.pipeline.v1beta.GetUserPipelineRequest.view:type_name -> vdp.pipeline.v1beta.Pipeline.View
	16,  // 58: vdp.pipeline.v1beta.GetUserPipelineResponse.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	16,  // 59: vdp.pipeline.v1beta.UpdateUserPipelineRequest.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	138, // 60: vdp.pipeline.v1beta.UpdateUserPipelineRequest.update_mask:type_name -> google.protobuf.FieldMask
	16,  // 61: vdp.pipeline.v1beta.UpdateUserPipelineResponse.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	16,  // 62: vdp.pipeline.v1beta.ValidateUserPipelineResponse.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	16,  // 63: vdp.pipeline.v1beta.RenameUserPipelineResponse.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	16,  // 64: vdp.pipeline.v1beta.CloneUserPipelineResponse.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	131, // 65: vdp.pipeline.v1beta.TriggerUserPipelineRequest.inputs:type_name -> google.protobuf.Struct
	119, // 66: vdp.pipeline.v1beta.TriggerUserPipelineRequest.secrets:type_name -> vdp.pipeline.v1beta.TriggerUserPipelineRequest.SecretsEntry
	131, // 67: vdp.pipeline.v1beta.TriggerUserPipelineResponse.outputs:type_name -> google.protobuf.Struct
	17,  // 68: vdp.pipeline.v1beta.TriggerUserPipelineResponse.metadata:type_name -> vdp.pipeline.v1beta.TriggerMetadata
	131, // 69: vdp.pipeline.v1beta.TriggerUserPipelineWithStreamRequest.inputs:type_name -> google.protobuf.Struct
	120, // 70: vdp.pipeline.v1beta.TriggerUserPipelineWithStreamRequest.secrets:type_name -> vdp.pipeline.v1beta.TriggerUserPipelineWithStreamRequest.SecretsEntry
	131, // 71: vdp.pipeline.v1beta.TriggerUserPipelineWithStreamResponse.outputs:type_name -> google.protobuf.Struct
	17,  // 72: vdp.pipeline.v1beta.TriggerUserPipelineWithStreamResponse.metadata:type_name -> vdp.pipeline.v1beta.TriggerMetadata
	131, // 73: vdp.pipeline.v1beta.TriggerAsyncUserPipelineRequest.inputs:type_name -> google.protobuf.Struct
	121, // 74: vdp.pipeline.v1beta.TriggerAsyncUserPipelineRequest.secrets:type_name -> vdp.pipeline.v1beta.TriggerAsyncUserPipelineRequest.SecretsEntry
	139, // 75: vdp.pipeline.v1beta.TriggerAsyncUserPipelineResponse.operation:type_name -> google.longrunning.Operation
	21,  // 76: vdp.pipeline.v1beta.CreateUserPipelineReleaseRequest.release:type_name -> vdp.pipeline.v1beta.PipelineRelease
	21,  // 77: vdp.pipeline.v1beta.CreateUserPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1beta.PipelineRelease
	1,   // 78: vdp.pipeline.v1beta.ListUserPipelineReleasesRequest.view:type_name -> vdp.pipeline.v1beta.Pipeline.View
	21,  // 79: vdp.pipeline.v1beta.ListUserPipelineReleasesResponse.releases:type_name -> vdp.pipeline.v1beta.PipelineRelease
	1,   // 80: vdp.pipeline.v1beta.GetUserPipelineReleaseRequest.view:type_name -> vdp.pipeline.v1beta.Pipeline.View
	21,  // 81: vdp.pipeline.v1beta.GetUserPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1beta.PipelineRelease
	21,  // 82: vdp.pipeline.v1beta.UpdateUserPipelineReleaseRequest.release:type_name -> vdp.pipeline.v1beta.PipelineRelease
	138, // 83: vdp.pipeline.v1beta.UpdateUserPipelineReleaseRequest.update_mask:type_name -> google.protobuf.FieldMask
	21,  // 84: vdp.pipeline.v1beta.UpdateUserPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1beta.PipelineRelease
	21,  // 85: vdp.pipeline.v1beta.RestoreUserPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1beta.PipelineRelease
	21,  // 86: vdp.pipeline.v1beta.RenameUserPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1beta.PipelineRelease
	131, // 87: vdp.pipeline.v1beta.TriggerUserPipelineReleaseRequest.inputs:type_name -> google.protobuf.Struct
	122, // 88: vdp.pipeline.v1beta.TriggerUserPipelineReleaseRequest.secrets:type_name -> vdp.pipeline.v1beta.TriggerUserPipelineReleaseRequest.SecretsEntry
	131, // 89: vdp.pipeline.v1beta.TriggerUserPipelineReleaseResponse.outputs:type_name -> google.protobuf.Struct
	17,  // 90: vdp.pipeline.v1beta.TriggerUserPipelineReleaseResponse.metadata:type_name -> vdp.pipeline.v1beta.TriggerMetadata
	131, // 91: vdp.pipeline.v1beta.TriggerAsyncUserPipelineReleaseRequest.inputs:type_name -> google.protobuf.Struct
	123, // 92: vdp.pipeline.v1beta.TriggerAsyncUserPipelineReleaseRequest.secrets:type_name -> vdp.pipeline.v1beta.TriggerAsyncUserPipelineReleaseRequest.SecretsEntry
	139, // 93: vdp.pipeline.v1beta.TriggerAsyncUserPipelineReleaseResponse.operation:type_name -> google.longrunning.Operation
	16,  // 94: vdp.pipeline.v1beta.CreateOrganizationPipelineRequest.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	16,  // 95: vdp.pipeline.v1beta.CreateOrganizationPipelineResponse.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	1,   // 96: vdp.pipeline.v1beta.ListOrganizationPipelinesRequest.view:type_name -> vdp.pipeline.v1beta.Pipeline.View
	2,   // 97: vdp.pipeline.v1beta.ListOrganizationPipelinesRequest.visibility:type_name -> vdp.pipeline.v1beta.Pipeline.Visibility
	16,  // 98: vdp.pipeline.v1beta.ListOrganizationPipelinesResponse.pipelines:type_name -> vdp.pipeline.v1beta.Pipeline
	1,   // 99: vdp.pipeline.v1beta.GetOrganizationPipelineRequest.view:type_name -> vdp.pipeline.v1beta.Pipeline.View
	16,  // 100: vdp.pipeline.v1beta.GetOrganizationPipelineResponse.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	16,  // 101: vdp.pipeline.v1beta.UpdateOrganizationPipelineRequest.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	138, // 102: vdp.pipeline.v1beta.UpdateOrganizationPipelineRequest.update_mask:type_name -> google.protobuf.FieldMask
	16,  // 103: vdp.pipeline.v1beta.UpdateOrganizationPipelineResponse.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	16,  // 104: vdp.pipeline.v1beta.ValidateOrganizationPipelineResponse.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	16,  // 105: vdp.pipeline.v1beta.RenameOrganizationPipelineResponse.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	16,  // 106: vdp.pipeline.v1beta.CloneOrganizationPipelineResponse.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	131, // 107: vdp.pipeline.v1beta.TriggerOrganizationPipelineRequest.inputs:type_name -> google.protobuf.Struct
	124, // 108: vdp.pipeline.v1beta.TriggerOrganizationPipelineRequest.secrets:type_name -> vdp.pipeline.v1beta.TriggerOrganizationPipelineRequest.SecretsEntry
	131, // 109: vdp.pipeline.v1beta.TriggerOrganizationPipelineResponse.outputs:type_name -> google.protobuf.Struct
	17,  // 110: vdp.pipeline.v1beta.TriggerOrganizationPipelineResponse.metadata:type_name -> vdp.pipeline.v1beta.TriggerMetadata
	131, // 111: vdp.pipeline.v1beta.TriggerAsyncOrganizationPipelineRequest.inputs:type_name -> google.protobuf.Struct
	125, // 112: vdp.pipeline.v1beta.TriggerAsyncOrganizationPipelineRequest.secrets:type_name -> vdp.pipeline.v1beta.TriggerAsyncOrganizationPipelineRequest.SecretsEntry
	139, // 113: vdp.pipeline.v1beta.TriggerAsyncOrganizationPipelineResponse.operation:type_name -> google.longrunning.Operation
	21,  // 114: vdp.pipeline.v1beta.CreateOrganizationPipelineReleaseRequest.release:type_name -> vdp.pipeline.v1beta.PipelineRelease
	21,  // 115: vdp.pipeline.v1beta.CreateOrganizationPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1beta.PipelineRelease
	1,   // 116: vdp.pipeline.v1beta.ListOrganizationPipelineReleasesRequest.view:type_name -> vdp.pipeline.v1beta.Pipeline.View
	21,  // 117: vdp.pipeline.v1beta.ListOrganizationPipelineReleasesResponse.releases:type_name -> vdp.pipeline.v1beta.PipelineRelease
	1,   // 118: vdp.pipeline.v1beta.GetOrganizationPipelineReleaseRequest.view:type_name -> vdp.pipeline.v1beta.Pipeline.View
	21,  // 119: vdp.pipeline.v1beta.GetOrganizationPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1beta.PipelineRelease
	21,  // 120: vdp.pipeline.v1beta.UpdateOrganizationPipelineReleaseRequest.release:type_name -> vdp.pipeline.v1beta.PipelineRelease
	138, // 121: vdp.pipeline.v1beta.UpdateOrganizationPipelineReleaseRequest.update_mask:type_name -> google.protobuf.FieldMask
	21,  // 122: vdp.pipeline.v1beta.UpdateOrganizationPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1beta.PipelineRelease
	21,  // 123: vdp.pipeline.v1beta.RestoreOrganizationPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1beta.PipelineRelease
	21,  // 124: vdp.pipeline.v1beta.RenameOrganizationPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1beta.PipelineRelease
	131, // 125: vdp.pipeline.v1beta.TriggerOrganizationPipelineReleaseRequest.inputs:type_name -> google.protobuf.Struct
	126, // 126: vdp.pipeline.v1beta.TriggerOrganizationPipelineReleaseRequest.secrets:type_name -> vdp.pipeline.v1beta.TriggerOrganizationPipelineReleaseRequest.SecretsEntry
	131, // 127: vdp.pipeline.v1beta.TriggerOrganizationPipelineReleaseResponse.outputs:type_name -> google.protobuf.Struct
	17,  // 128: vdp.pipeline.v1beta.TriggerOrganizationPipelineReleaseResponse.metadata:type_name -> vdp.pipeline.v1beta.TriggerMetadata
	131, // 129: vdp.pipeline.v1beta.TriggerAsyncOrganizationPipelineReleaseRequest.inputs:type_name -> google.protobuf.Struct
	127, // 130: vdp.pipeline.v1beta.TriggerAsyncOrganizationPipelineReleaseRequest.secrets:type_name -> vdp.pipeline.v1beta.TriggerAsyncOrganizationPipelineReleaseRequest.SecretsEntry
	139, // 131: vdp.pipeline.v1beta.TriggerAsyncOrganizationPipelineReleaseResponse.operation:type_name -> google.longrunning.Operation
	139, // 132: vdp.pipeline.v1beta.GetOperationResponse.operation:type_name -> google.longrunning.Operation
	1,   // 133: vdp.pipeline.v1beta.ListPipelinesAdminRequest.view:type_name -> vdp.pipeline.v1beta.Pipeline.View
	16,  // 134: vdp.pipeline.v1beta.ListPipelinesAdminResponse.pipelines:type_name -> vdp.pipeline.v1beta.Pipeline
	1,   // 135: vdp.pipeline.v1beta.ListPipelineReleasesAdminRequest.view:type_name -> vdp.pipeline.v1beta.Pipeline.View
	21,  // 136: vdp.pipeline.v1beta.ListPipelineReleasesAdminResponse.releases:type_name -> vdp.pipeline.v1beta.PipelineRelease
	1,   // 137: vdp.pipeline.v1beta.LookUpPipelineAdminRequest.view:type_name -> vdp.pipeline.v1beta.Pipeline.View
	16,  // 138: vdp.pipeline.v1beta.LookUpPipelineAdminResponse.pipeline:type_name -> vdp.pipeline.v1beta.Pipeline
	112, // 139: vdp.pipeline.v1beta.TriggerByRequest.RequestFieldsEntry.value:type_name -> vdp.pipeline.v1beta.TriggerByRequest.RequestField
	113, // 140: vdp.pipeline.v1beta.TriggerByRequest.ResponseFieldsEntry.value:type_name -> vdp.pipeline.v1beta.TriggerByRequest.ResponseField
	18,  // 141: vdp.pipeline.v1beta.TriggerMetadata.TracesEntry.value:type_name -> vdp.pipeline.v1beta.Trace
	142, // [142:142] is the sub-list for method output_type
	142, // [142:142] is the sub-list for method input_type
	142, // [142:142] is the sub-list for extension type_name
	142, // [142:142] is the sub-list for extension extendee
	0,   // [0:142] is the sub-list for field type_name
}

func init() { file_vdp_pipeline_v1beta_pipeline_proto_init() }
func file_vdp_pipeline_v1beta_pipeline_proto_init() {
	if File_vdp_pipeline_v1beta_pipeline_proto != nil {
		return
	}
	file_vdp_pipeline_v1beta_common_proto_init()
	file_vdp_pipeline_v1beta_component_definition_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadinessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerByRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IteratorComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHubStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHubStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserPipelinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserPipelinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerUserPipelineWithStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerUserPipelineWithStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserPipelineReleasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserPipelineReleasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationPipelinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationPipelinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateOrganizationPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateOrganizationPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameOrganizationPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameOrganizationPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneOrganizationPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneOrganizationPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerOrganizationPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerOrganizationPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncOrganizationPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncOrganizationPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrganizationPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationPipelineReleasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationPipelineReleasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrganizationPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrganizationPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreOrganizationPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreOrganizationPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameOrganizationPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameOrganizationPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerOrganizationPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerOrganizationPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncOrganizationPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncOrganizationPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinesAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinesAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineReleasesAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineReleasesAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpPipelineAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpPipelineAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerByRequest_RequestField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerByRequest_ResponseField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Component_ConnectorComponent)(nil),
		(*Component_OperatorComponent)(nil),
		(*Component_IteratorComponent)(nil),
	}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*NestedComponent_ConnectorComponent)(nil),
		(*NestedComponent_OperatorComponent)(nil),
	}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Trigger_TriggerByRequest)(nil),
	}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[46].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[48].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[64].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[66].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[84].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[86].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[102].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[104].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1beta_pipeline_proto_msgTypes[106].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vdp_pipeline_v1beta_pipeline_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   124,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vdp_pipeline_v1beta_pipeline_proto_goTypes,
		DependencyIndexes: file_vdp_pipeline_v1beta_pipeline_proto_depIdxs,
		EnumInfos:         file_vdp_pipeline_v1beta_pipeline_proto_enumTypes,
		MessageInfos:      file_vdp_pipeline_v1beta_pipeline_proto_msgTypes,
	}.Build()
	File_vdp_pipeline_v1beta_pipeline_proto = out.File
	file_vdp_pipeline_v1beta_pipeline_proto_rawDesc = nil
	file_vdp_pipeline_v1beta_pipeline_proto_goTypes = nil
	file_vdp_pipeline_v1beta_pipeline_proto_depIdxs = nil
}
