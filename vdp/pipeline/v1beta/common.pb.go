// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: vdp/pipeline/v1beta/common.proto

package pipelinev1beta

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Role describes the permissions a user has over a resource.
type Role int32

const (
	// Unspecified, equivalent to VIEWER.
	Role_ROLE_UNSPECIFIED Role = 0
	// Viewers can see the resource properties.
	Role_ROLE_VIEWER Role = 1
	// Executors can execute the resource (e.g. trigger a pipeline).
	Role_ROLE_EXECUTOR Role = 2
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "ROLE_UNSPECIFIED",
		1: "ROLE_VIEWER",
		2: "ROLE_EXECUTOR",
	}
	Role_value = map[string]int32{
		"ROLE_UNSPECIFIED": 0,
		"ROLE_VIEWER":      1,
		"ROLE_EXECUTOR":    2,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1beta_common_proto_enumTypes[0].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1beta_common_proto_enumTypes[0]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_common_proto_rawDescGZIP(), []int{0}
}

// ComponentType defines the component type based on its task features.
type ComponentType int32

const (
	// Unspecified.
	ComponentType_COMPONENT_TYPE_UNSPECIFIED ComponentType = 0
	// Connect with an AI model.
	ComponentType_COMPONENT_TYPE_CONNECTOR_AI ComponentType = 1
	// Connect with a remote data source.
	ComponentType_COMPONENT_TYPE_CONNECTOR_DATA ComponentType = 2
	// Manipulate data.
	ComponentType_COMPONENT_TYPE_OPERATOR ComponentType = 4
	// Connect with an external application.
	ComponentType_COMPONENT_TYPE_CONNECTOR_APPLICATION ComponentType = 5
)

// Enum value maps for ComponentType.
var (
	ComponentType_name = map[int32]string{
		0: "COMPONENT_TYPE_UNSPECIFIED",
		1: "COMPONENT_TYPE_CONNECTOR_AI",
		2: "COMPONENT_TYPE_CONNECTOR_DATA",
		4: "COMPONENT_TYPE_OPERATOR",
		5: "COMPONENT_TYPE_CONNECTOR_APPLICATION",
	}
	ComponentType_value = map[string]int32{
		"COMPONENT_TYPE_UNSPECIFIED":           0,
		"COMPONENT_TYPE_CONNECTOR_AI":          1,
		"COMPONENT_TYPE_CONNECTOR_DATA":        2,
		"COMPONENT_TYPE_OPERATOR":              4,
		"COMPONENT_TYPE_CONNECTOR_APPLICATION": 5,
	}
)

func (x ComponentType) Enum() *ComponentType {
	p := new(ComponentType)
	*p = x
	return p
}

func (x ComponentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComponentType) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1beta_common_proto_enumTypes[1].Descriptor()
}

func (ComponentType) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1beta_common_proto_enumTypes[1]
}

func (x ComponentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComponentType.Descriptor instead.
func (ComponentType) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_common_proto_rawDescGZIP(), []int{1}
}

// Name defines the availability of a resource name.
type CheckNameResponse_Name int32

const (
	// Unspecified.
	CheckNameResponse_NAME_UNSPECIFIED CheckNameResponse_Name = 0
	// Available.
	CheckNameResponse_NAME_AVAILABLE CheckNameResponse_Name = 1
	// Unavailable.
	CheckNameResponse_NAME_UNAVAILABLE CheckNameResponse_Name = 2
)

// Enum value maps for CheckNameResponse_Name.
var (
	CheckNameResponse_Name_name = map[int32]string{
		0: "NAME_UNSPECIFIED",
		1: "NAME_AVAILABLE",
		2: "NAME_UNAVAILABLE",
	}
	CheckNameResponse_Name_value = map[string]int32{
		"NAME_UNSPECIFIED": 0,
		"NAME_AVAILABLE":   1,
		"NAME_UNAVAILABLE": 2,
	}
)

func (x CheckNameResponse_Name) Enum() *CheckNameResponse_Name {
	p := new(CheckNameResponse_Name)
	*p = x
	return p
}

func (x CheckNameResponse_Name) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckNameResponse_Name) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1beta_common_proto_enumTypes[2].Descriptor()
}

func (CheckNameResponse_Name) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1beta_common_proto_enumTypes[2]
}

func (x CheckNameResponse_Name) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckNameResponse_Name.Descriptor instead.
func (CheckNameResponse_Name) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_common_proto_rawDescGZIP(), []int{3, 0}
}

// Sharing contains the information to share a resource with other users.
//
// For more information, see [Share Pipelines](https://www.instill.tech/docs/latest/vdp/share).
type Sharing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines sharing rules for a set of user resource names.
	//
	// Each key in this object should contain a pattern that can be matched
	// against user names.
	//
	// Each value is a user sharing configuration.
	//
	// **NOTE**: For now, the only accepted key is `*/*`.
	Users map[string]*Sharing_User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Defines the configuration to share a resource via link.
	ShareCode *Sharing_ShareCode `protobuf:"bytes,2,opt,name=share_code,json=shareCode,proto3" json:"share_code,omitempty"`
}

func (x *Sharing) Reset() {
	*x = Sharing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sharing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sharing) ProtoMessage() {}

func (x *Sharing) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sharing.ProtoReflect.Descriptor instead.
func (*Sharing) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_common_proto_rawDescGZIP(), []int{0}
}

func (x *Sharing) GetUsers() map[string]*Sharing_User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Sharing) GetShareCode() *Sharing_ShareCode {
	if x != nil {
		return x.ShareCode
	}
	return nil
}

// Permission defines how a pipeline can be used.
type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines whether the pipeline can be modified.
	CanEdit bool `protobuf:"varint,1,opt,name=can_edit,json=canEdit,proto3" json:"can_edit,omitempty"`
	// Defines whether the pipeline can be executed.
	CanTrigger bool `protobuf:"varint,2,opt,name=can_trigger,json=canTrigger,proto3" json:"can_trigger,omitempty"`
	// Defines whether the pipeline can be released.
	CanRelease bool `protobuf:"varint,3,opt,name=can_release,json=canRelease,proto3" json:"can_release,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_common_proto_rawDescGZIP(), []int{1}
}

func (x *Permission) GetCanEdit() bool {
	if x != nil {
		return x.CanEdit
	}
	return false
}

func (x *Permission) GetCanTrigger() bool {
	if x != nil {
		return x.CanTrigger
	}
	return false
}

func (x *Permission) GetCanRelease() bool {
	if x != nil {
		return x.CanRelease
	}
	return false
}

// CheckNameRequest represents a request to verify if a name is
// available.
type CheckNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the resource to be checked. For the moment, only pipeline and
	// connector names can be checked. The following formats are accepted:
	// - `users/{user.id}/pipelines/{pipeline.id}`
	// - `users/{user.id}/connectors/{connector.id}`
	// - `organizations/{organization.id}/pipelines/{pipeline.id}`
	// - `organizations/{organization.id}/connectors/{connector.id}`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CheckNameRequest) Reset() {
	*x = CheckNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNameRequest) ProtoMessage() {}

func (x *CheckNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNameRequest.ProtoReflect.Descriptor instead.
func (*CheckNameRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_common_proto_rawDescGZIP(), []int{2}
}

func (x *CheckNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// CheckNameResponse contains the availability of a resource name.
type CheckNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The availability of the requested name.
	Availability CheckNameResponse_Name `protobuf:"varint,1,opt,name=availability,proto3,enum=vdp.pipeline.v1beta.CheckNameResponse_Name" json:"availability,omitempty"`
}

func (x *CheckNameResponse) Reset() {
	*x = CheckNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckNameResponse) ProtoMessage() {}

func (x *CheckNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckNameResponse.ProtoReflect.Descriptor instead.
func (*CheckNameResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_common_proto_rawDescGZIP(), []int{3}
}

func (x *CheckNameResponse) GetAvailability() CheckNameResponse_Name {
	if x != nil {
		return x.Availability
	}
	return CheckNameResponse_NAME_UNSPECIFIED
}

// ComponentTask contains information about a task that a component can
// perform.
type ComponentTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The task name, e.g. `TASK_TEXT_GENERATION`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Title is the task name in a human-friendly format.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Description contains information about the task.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ComponentTask) Reset() {
	*x = ComponentTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentTask) ProtoMessage() {}

func (x *ComponentTask) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentTask.ProtoReflect.Descriptor instead.
func (*ComponentTask) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_common_proto_rawDescGZIP(), []int{4}
}

func (x *ComponentTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ComponentTask) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ComponentTask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Describes the sharing configuration with a given user.
type Sharing_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines whether the sharing option with this user is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Defines the role the user will have over the resource.
	Role Role `protobuf:"varint,4,opt,name=role,proto3,enum=vdp.pipeline.v1beta.Role" json:"role,omitempty"`
}

func (x *Sharing_User) Reset() {
	*x = Sharing_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sharing_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sharing_User) ProtoMessage() {}

func (x *Sharing_User) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sharing_User.ProtoReflect.Descriptor instead.
func (*Sharing_User) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_common_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Sharing_User) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Sharing_User) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

// ShareCode describes a sharing configuration through a link.
type Sharing_ShareCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines which users will be able to access the resource through the
	// code. This is a pattern that will be checked against user names.
	//
	// For now, the only accepted value is `*/*`.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// The public URL that allows users to access the resource.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Defines whether the sharing option via link is enabled.
	Enabled bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Defines the role users will have over the resource.
	Role Role `protobuf:"varint,4,opt,name=role,proto3,enum=vdp.pipeline.v1beta.Role" json:"role,omitempty"`
}

func (x *Sharing_ShareCode) Reset() {
	*x = Sharing_ShareCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1beta_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sharing_ShareCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sharing_ShareCode) ProtoMessage() {}

func (x *Sharing_ShareCode) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1beta_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sharing_ShareCode.ProtoReflect.Descriptor instead.
func (*Sharing_ShareCode) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1beta_common_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Sharing_ShareCode) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Sharing_ShareCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Sharing_ShareCode) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Sharing_ShareCode) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_UNSPECIFIED
}

var File_vdp_pipeline_v1beta_common_proto protoreflect.FileDescriptor

var file_vdp_pipeline_v1beta_common_proto_rawDesc = []byte{
	0x0a, 0x20, 0x76, 0x64, 0x70, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x03, 0x0a, 0x07, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x4f, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x64, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x7c, 0x0a, 0x09, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a, 0x5b, 0x0a, 0x0a, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x69, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x45, 0x64, 0x69, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x22, 0x2b, 0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xac,
	0x01, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x76, 0x64, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x46, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x22, 0x6a, 0x0a,
	0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x40, 0x0a, 0x04, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x2a, 0xc0, 0x01, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x49, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x28,
	0x0a, 0x24, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x22, 0x04, 0x08, 0x03, 0x10, 0x03, 0x42, 0xda,
	0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2d, 0x61, 0x69,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x64, 0x70,
	0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x3b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0xa2,
	0x02, 0x03, 0x56, 0x50, 0x58, 0xaa, 0x02, 0x13, 0x56, 0x64, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0xca, 0x02, 0x13, 0x56, 0x64,
	0x70, 0x5c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0xe2, 0x02, 0x1f, 0x56, 0x64, 0x70, 0x5c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x56, 0x64, 0x70, 0x3a, 0x3a, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_vdp_pipeline_v1beta_common_proto_rawDescOnce sync.Once
	file_vdp_pipeline_v1beta_common_proto_rawDescData = file_vdp_pipeline_v1beta_common_proto_rawDesc
)

func file_vdp_pipeline_v1beta_common_proto_rawDescGZIP() []byte {
	file_vdp_pipeline_v1beta_common_proto_rawDescOnce.Do(func() {
		file_vdp_pipeline_v1beta_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_vdp_pipeline_v1beta_common_proto_rawDescData)
	})
	return file_vdp_pipeline_v1beta_common_proto_rawDescData
}

var file_vdp_pipeline_v1beta_common_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_vdp_pipeline_v1beta_common_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_vdp_pipeline_v1beta_common_proto_goTypes = []interface{}{
	(Role)(0),                   // 0: vdp.pipeline.v1beta.Role
	(ComponentType)(0),          // 1: vdp.pipeline.v1beta.ComponentType
	(CheckNameResponse_Name)(0), // 2: vdp.pipeline.v1beta.CheckNameResponse.Name
	(*Sharing)(nil),             // 3: vdp.pipeline.v1beta.Sharing
	(*Permission)(nil),          // 4: vdp.pipeline.v1beta.Permission
	(*CheckNameRequest)(nil),    // 5: vdp.pipeline.v1beta.CheckNameRequest
	(*CheckNameResponse)(nil),   // 6: vdp.pipeline.v1beta.CheckNameResponse
	(*ComponentTask)(nil),       // 7: vdp.pipeline.v1beta.ComponentTask
	(*Sharing_User)(nil),        // 8: vdp.pipeline.v1beta.Sharing.User
	(*Sharing_ShareCode)(nil),   // 9: vdp.pipeline.v1beta.Sharing.ShareCode
	nil,                         // 10: vdp.pipeline.v1beta.Sharing.UsersEntry
}
var file_vdp_pipeline_v1beta_common_proto_depIdxs = []int32{
	10, // 0: vdp.pipeline.v1beta.Sharing.users:type_name -> vdp.pipeline.v1beta.Sharing.UsersEntry
	9,  // 1: vdp.pipeline.v1beta.Sharing.share_code:type_name -> vdp.pipeline.v1beta.Sharing.ShareCode
	2,  // 2: vdp.pipeline.v1beta.CheckNameResponse.availability:type_name -> vdp.pipeline.v1beta.CheckNameResponse.Name
	0,  // 3: vdp.pipeline.v1beta.Sharing.User.role:type_name -> vdp.pipeline.v1beta.Role
	0,  // 4: vdp.pipeline.v1beta.Sharing.ShareCode.role:type_name -> vdp.pipeline.v1beta.Role
	8,  // 5: vdp.pipeline.v1beta.Sharing.UsersEntry.value:type_name -> vdp.pipeline.v1beta.Sharing.User
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_vdp_pipeline_v1beta_common_proto_init() }
func file_vdp_pipeline_v1beta_common_proto_init() {
	if File_vdp_pipeline_v1beta_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vdp_pipeline_v1beta_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sharing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sharing_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1beta_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sharing_ShareCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vdp_pipeline_v1beta_common_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vdp_pipeline_v1beta_common_proto_goTypes,
		DependencyIndexes: file_vdp_pipeline_v1beta_common_proto_depIdxs,
		EnumInfos:         file_vdp_pipeline_v1beta_common_proto_enumTypes,
		MessageInfos:      file_vdp_pipeline_v1beta_common_proto_msgTypes,
	}.Build()
	File_vdp_pipeline_v1beta_common_proto = out.File
	file_vdp_pipeline_v1beta_common_proto_rawDesc = nil
	file_vdp_pipeline_v1beta_common_proto_goTypes = nil
	file_vdp_pipeline_v1beta_common_proto_depIdxs = nil
}
