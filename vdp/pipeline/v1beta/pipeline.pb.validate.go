// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: vdp/pipeline/v1beta/pipeline.proto

package pipelinev1beta

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	runv1alpha "github.com/instill-ai/protogen-go/common/run/v1alpha"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = runv1alpha.RunStatus(0)
)

// Validate checks the field values on LivenessRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LivenessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LivenessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LivenessRequestMultiError, or nil if none found.
func (m *LivenessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LivenessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.HealthCheckRequest != nil {

		if all {
			switch v := interface{}(m.GetHealthCheckRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LivenessRequestValidationError{
						field:  "HealthCheckRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LivenessRequestValidationError{
						field:  "HealthCheckRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHealthCheckRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LivenessRequestValidationError{
					field:  "HealthCheckRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LivenessRequestMultiError(errors)
	}

	return nil
}

// LivenessRequestMultiError is an error wrapping multiple validation errors
// returned by LivenessRequest.ValidateAll() if the designated constraints
// aren't met.
type LivenessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LivenessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LivenessRequestMultiError) AllErrors() []error { return m }

// LivenessRequestValidationError is the validation error returned by
// LivenessRequest.Validate if the designated constraints aren't met.
type LivenessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LivenessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LivenessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LivenessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LivenessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LivenessRequestValidationError) ErrorName() string { return "LivenessRequestValidationError" }

// Error satisfies the builtin error interface
func (e LivenessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLivenessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LivenessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LivenessRequestValidationError{}

// Validate checks the field values on LivenessResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LivenessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LivenessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LivenessResponseMultiError, or nil if none found.
func (m *LivenessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LivenessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHealthCheckResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LivenessResponseValidationError{
					field:  "HealthCheckResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LivenessResponseValidationError{
					field:  "HealthCheckResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthCheckResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LivenessResponseValidationError{
				field:  "HealthCheckResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LivenessResponseMultiError(errors)
	}

	return nil
}

// LivenessResponseMultiError is an error wrapping multiple validation errors
// returned by LivenessResponse.ValidateAll() if the designated constraints
// aren't met.
type LivenessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LivenessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LivenessResponseMultiError) AllErrors() []error { return m }

// LivenessResponseValidationError is the validation error returned by
// LivenessResponse.Validate if the designated constraints aren't met.
type LivenessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LivenessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LivenessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LivenessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LivenessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LivenessResponseValidationError) ErrorName() string { return "LivenessResponseValidationError" }

// Error satisfies the builtin error interface
func (e LivenessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLivenessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LivenessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LivenessResponseValidationError{}

// Validate checks the field values on ReadinessRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadinessRequestMultiError, or nil if none found.
func (m *ReadinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.HealthCheckRequest != nil {

		if all {
			switch v := interface{}(m.GetHealthCheckRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadinessRequestValidationError{
						field:  "HealthCheckRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadinessRequestValidationError{
						field:  "HealthCheckRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHealthCheckRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadinessRequestValidationError{
					field:  "HealthCheckRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReadinessRequestMultiError(errors)
	}

	return nil
}

// ReadinessRequestMultiError is an error wrapping multiple validation errors
// returned by ReadinessRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadinessRequestMultiError) AllErrors() []error { return m }

// ReadinessRequestValidationError is the validation error returned by
// ReadinessRequest.Validate if the designated constraints aren't met.
type ReadinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadinessRequestValidationError) ErrorName() string { return "ReadinessRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadinessRequestValidationError{}

// Validate checks the field values on ReadinessResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadinessResponseMultiError, or nil if none found.
func (m *ReadinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHealthCheckResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadinessResponseValidationError{
					field:  "HealthCheckResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadinessResponseValidationError{
					field:  "HealthCheckResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthCheckResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadinessResponseValidationError{
				field:  "HealthCheckResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadinessResponseMultiError(errors)
	}

	return nil
}

// ReadinessResponseMultiError is an error wrapping multiple validation errors
// returned by ReadinessResponse.ValidateAll() if the designated constraints
// aren't met.
type ReadinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadinessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadinessResponseMultiError) AllErrors() []error { return m }

// ReadinessResponseValidationError is the validation error returned by
// ReadinessResponse.Validate if the designated constraints aren't met.
type ReadinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadinessResponseValidationError) ErrorName() string {
	return "ReadinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadinessResponseValidationError{}

// Validate checks the field values on Endpoints with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Endpoints) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Endpoints with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndpointsMultiError, or nil
// if none found.
func (m *Endpoints) ValidateAll() error {
	return m.validate(true)
}

func (m *Endpoints) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetWebhooks()))
		i := 0
		for key := range m.GetWebhooks() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetWebhooks()[key]
			_ = val

			// no validation rules for Webhooks[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, EndpointsValidationError{
							field:  fmt.Sprintf("Webhooks[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, EndpointsValidationError{
							field:  fmt.Sprintf("Webhooks[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return EndpointsValidationError{
						field:  fmt.Sprintf("Webhooks[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return EndpointsMultiError(errors)
	}

	return nil
}

// EndpointsMultiError is an error wrapping multiple validation errors returned
// by Endpoints.ValidateAll() if the designated constraints aren't met.
type EndpointsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndpointsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndpointsMultiError) AllErrors() []error { return m }

// EndpointsValidationError is the validation error returned by
// Endpoints.Validate if the designated constraints aren't met.
type EndpointsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndpointsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndpointsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndpointsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndpointsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndpointsValidationError) ErrorName() string { return "EndpointsValidationError" }

// Error satisfies the builtin error interface
func (e EndpointsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpoints.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndpointsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndpointsValidationError{}

// Validate checks the field values on Pipeline with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pipeline) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pipeline with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineMultiError, or nil
// if none found.
func (m *Pipeline) ValidateAll() error {
	return m.validate(true)
}

func (m *Pipeline) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Uid

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetRecipe()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Recipe",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Recipe",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecipe()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineValidationError{
				field:  "Recipe",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeleteTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "DeleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "DeleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeleteTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineValidationError{
				field:  "DeleteTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSharing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineValidationError{
				field:  "Sharing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OwnerName

	for idx, item := range m.GetReleases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineValidationError{
					field:  fmt.Sprintf("Releases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Readme

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Visibility

	if all {
		switch v := interface{}(m.GetDataSpecification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "DataSpecification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "DataSpecification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataSpecification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineValidationError{
				field:  "DataSpecification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RawRecipe

	if all {
		switch v := interface{}(m.GetEndpoints()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Endpoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineValidationError{
					field:  "Endpoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpoints()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineValidationError{
				field:  "Endpoints",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Owner != nil {

		if all {
			switch v := interface{}(m.GetOwner()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineValidationError{
						field:  "Owner",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineValidationError{
						field:  "Owner",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.SourceUrl != nil {
		// no validation rules for SourceUrl
	}

	if m.DocumentationUrl != nil {
		// no validation rules for DocumentationUrl
	}

	if m.License != nil {
		// no validation rules for License
	}

	if m.ProfileImage != nil {
		// no validation rules for ProfileImage
	}

	if len(errors) > 0 {
		return PipelineMultiError(errors)
	}

	return nil
}

// PipelineMultiError is an error wrapping multiple validation errors returned
// by Pipeline.ValidateAll() if the designated constraints aren't met.
type PipelineMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineMultiError) AllErrors() []error { return m }

// PipelineValidationError is the validation error returned by
// Pipeline.Validate if the designated constraints aren't met.
type PipelineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineValidationError) ErrorName() string { return "PipelineValidationError" }

// Error satisfies the builtin error interface
func (e PipelineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipeline.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineValidationError{}

// Validate checks the field values on TriggerMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TriggerMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerMetadataMultiError, or nil if none found.
func (m *TriggerMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetTraces()))
		i := 0
		for key := range m.GetTraces() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetTraces()[key]
			_ = val

			// no validation rules for Traces[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, TriggerMetadataValidationError{
							field:  fmt.Sprintf("Traces[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, TriggerMetadataValidationError{
							field:  fmt.Sprintf("Traces[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return TriggerMetadataValidationError{
						field:  fmt.Sprintf("Traces[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return TriggerMetadataMultiError(errors)
	}

	return nil
}

// TriggerMetadataMultiError is an error wrapping multiple validation errors
// returned by TriggerMetadata.ValidateAll() if the designated constraints
// aren't met.
type TriggerMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerMetadataMultiError) AllErrors() []error { return m }

// TriggerMetadataValidationError is the validation error returned by
// TriggerMetadata.Validate if the designated constraints aren't met.
type TriggerMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerMetadataValidationError) ErrorName() string { return "TriggerMetadataValidationError" }

// Error satisfies the builtin error interface
func (e TriggerMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerMetadataValidationError{}

// Validate checks the field values on Trace with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Trace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Trace with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TraceMultiError, or nil if none found.
func (m *Trace) ValidateAll() error {
	return m.validate(true)
}

func (m *Trace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TraceValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TraceValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraceValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TraceValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TraceValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TraceValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TraceValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TraceValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TraceValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ComputeTimeInSeconds

	if len(errors) > 0 {
		return TraceMultiError(errors)
	}

	return nil
}

// TraceMultiError is an error wrapping multiple validation errors returned by
// Trace.ValidateAll() if the designated constraints aren't met.
type TraceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TraceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TraceMultiError) AllErrors() []error { return m }

// TraceValidationError is the validation error returned by Trace.Validate if
// the designated constraints aren't met.
type TraceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TraceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TraceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TraceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TraceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TraceValidationError) ErrorName() string { return "TraceValidationError" }

// Error satisfies the builtin error interface
func (e TraceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TraceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TraceValidationError{}

// Validate checks the field values on GetHubStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHubStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHubStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHubStatsRequestMultiError, or nil if none found.
func (m *GetHubStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHubStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetHubStatsRequestMultiError(errors)
	}

	return nil
}

// GetHubStatsRequestMultiError is an error wrapping multiple validation errors
// returned by GetHubStatsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHubStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHubStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHubStatsRequestMultiError) AllErrors() []error { return m }

// GetHubStatsRequestValidationError is the validation error returned by
// GetHubStatsRequest.Validate if the designated constraints aren't met.
type GetHubStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHubStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHubStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHubStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHubStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHubStatsRequestValidationError) ErrorName() string {
	return "GetHubStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHubStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHubStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHubStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHubStatsRequestValidationError{}

// Validate checks the field values on GetHubStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHubStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHubStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHubStatsResponseMultiError, or nil if none found.
func (m *GetHubStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHubStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumberOfPublicPipelines

	// no validation rules for NumberOfFeaturedPipelines

	if len(errors) > 0 {
		return GetHubStatsResponseMultiError(errors)
	}

	return nil
}

// GetHubStatsResponseMultiError is an error wrapping multiple validation
// errors returned by GetHubStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetHubStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHubStatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHubStatsResponseMultiError) AllErrors() []error { return m }

// GetHubStatsResponseValidationError is the validation error returned by
// GetHubStatsResponse.Validate if the designated constraints aren't met.
type GetHubStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHubStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHubStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHubStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHubStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHubStatsResponseValidationError) ErrorName() string {
	return "GetHubStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHubStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHubStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHubStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHubStatsResponseValidationError{}

// Validate checks the field values on PipelineRelease with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PipelineRelease) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRelease with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineReleaseMultiError, or nil if none found.
func (m *PipelineRelease) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRelease) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Uid

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetRecipe()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineReleaseValidationError{
					field:  "Recipe",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineReleaseValidationError{
					field:  "Recipe",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecipe()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineReleaseValidationError{
				field:  "Recipe",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineReleaseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineReleaseValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineReleaseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineReleaseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineReleaseValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineReleaseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeleteTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineReleaseValidationError{
					field:  "DeleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineReleaseValidationError{
					field:  "DeleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeleteTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineReleaseValidationError{
				field:  "DeleteTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Alias

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineReleaseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineReleaseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineReleaseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Readme

	if all {
		switch v := interface{}(m.GetDataSpecification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineReleaseValidationError{
					field:  "DataSpecification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineReleaseValidationError{
					field:  "DataSpecification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataSpecification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineReleaseValidationError{
				field:  "DataSpecification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RawRecipe

	if all {
		switch v := interface{}(m.GetEndpoints()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineReleaseValidationError{
					field:  "Endpoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineReleaseValidationError{
					field:  "Endpoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndpoints()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineReleaseValidationError{
				field:  "Endpoints",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return PipelineReleaseMultiError(errors)
	}

	return nil
}

// PipelineReleaseMultiError is an error wrapping multiple validation errors
// returned by PipelineRelease.ValidateAll() if the designated constraints
// aren't met.
type PipelineReleaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineReleaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineReleaseMultiError) AllErrors() []error { return m }

// PipelineReleaseValidationError is the validation error returned by
// PipelineRelease.Validate if the designated constraints aren't met.
type PipelineReleaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineReleaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineReleaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineReleaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineReleaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineReleaseValidationError) ErrorName() string { return "PipelineReleaseValidationError" }

// Error satisfies the builtin error interface
func (e PipelineReleaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRelease.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineReleaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineReleaseValidationError{}

// Validate checks the field values on ListPipelinesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPipelinesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipelinesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPipelinesRequestMultiError, or nil if none found.
func (m *ListPipelinesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelinesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.ShowDeleted != nil {
		// no validation rules for ShowDeleted
	}

	if m.Visibility != nil {
		// no validation rules for Visibility
	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if len(errors) > 0 {
		return ListPipelinesRequestMultiError(errors)
	}

	return nil
}

// ListPipelinesRequestMultiError is an error wrapping multiple validation
// errors returned by ListPipelinesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPipelinesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelinesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelinesRequestMultiError) AllErrors() []error { return m }

// ListPipelinesRequestValidationError is the validation error returned by
// ListPipelinesRequest.Validate if the designated constraints aren't met.
type ListPipelinesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelinesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelinesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelinesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelinesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelinesRequestValidationError) ErrorName() string {
	return "ListPipelinesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelinesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelinesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelinesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelinesRequestValidationError{}

// Validate checks the field values on ListPipelinesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPipelinesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipelinesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPipelinesResponseMultiError, or nil if none found.
func (m *ListPipelinesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelinesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipelines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPipelinesResponseValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPipelinesResponseValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPipelinesResponseValidationError{
					field:  fmt.Sprintf("Pipelines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListPipelinesResponseMultiError(errors)
	}

	return nil
}

// ListPipelinesResponseMultiError is an error wrapping multiple validation
// errors returned by ListPipelinesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPipelinesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelinesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelinesResponseMultiError) AllErrors() []error { return m }

// ListPipelinesResponseValidationError is the validation error returned by
// ListPipelinesResponse.Validate if the designated constraints aren't met.
type ListPipelinesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelinesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelinesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelinesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelinesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelinesResponseValidationError) ErrorName() string {
	return "ListPipelinesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelinesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelinesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelinesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelinesResponseValidationError{}

// Validate checks the field values on ListNamespacePipelinesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespacePipelinesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespacePipelinesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListNamespacePipelinesRequestMultiError, or nil if none found.
func (m *ListNamespacePipelinesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespacePipelinesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.ShowDeleted != nil {
		// no validation rules for ShowDeleted
	}

	if m.Visibility != nil {
		// no validation rules for Visibility
	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if len(errors) > 0 {
		return ListNamespacePipelinesRequestMultiError(errors)
	}

	return nil
}

// ListNamespacePipelinesRequestMultiError is an error wrapping multiple
// validation errors returned by ListNamespacePipelinesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListNamespacePipelinesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespacePipelinesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespacePipelinesRequestMultiError) AllErrors() []error { return m }

// ListNamespacePipelinesRequestValidationError is the validation error
// returned by ListNamespacePipelinesRequest.Validate if the designated
// constraints aren't met.
type ListNamespacePipelinesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacePipelinesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacePipelinesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacePipelinesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacePipelinesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacePipelinesRequestValidationError) ErrorName() string {
	return "ListNamespacePipelinesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacePipelinesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacePipelinesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacePipelinesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacePipelinesRequestValidationError{}

// Validate checks the field values on ListNamespacePipelinesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespacePipelinesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespacePipelinesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListNamespacePipelinesResponseMultiError, or nil if none found.
func (m *ListNamespacePipelinesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespacePipelinesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipelines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNamespacePipelinesResponseValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNamespacePipelinesResponseValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNamespacePipelinesResponseValidationError{
					field:  fmt.Sprintf("Pipelines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListNamespacePipelinesResponseMultiError(errors)
	}

	return nil
}

// ListNamespacePipelinesResponseMultiError is an error wrapping multiple
// validation errors returned by ListNamespacePipelinesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListNamespacePipelinesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespacePipelinesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespacePipelinesResponseMultiError) AllErrors() []error { return m }

// ListNamespacePipelinesResponseValidationError is the validation error
// returned by ListNamespacePipelinesResponse.Validate if the designated
// constraints aren't met.
type ListNamespacePipelinesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacePipelinesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacePipelinesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacePipelinesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacePipelinesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacePipelinesResponseValidationError) ErrorName() string {
	return "ListNamespacePipelinesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacePipelinesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacePipelinesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacePipelinesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacePipelinesResponseValidationError{}

// Validate checks the field values on LookUpPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookUpPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookUpPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookUpPipelineRequestMultiError, or nil if none found.
func (m *LookUpPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LookUpPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Permalink

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return LookUpPipelineRequestMultiError(errors)
	}

	return nil
}

// LookUpPipelineRequestMultiError is an error wrapping multiple validation
// errors returned by LookUpPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type LookUpPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookUpPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookUpPipelineRequestMultiError) AllErrors() []error { return m }

// LookUpPipelineRequestValidationError is the validation error returned by
// LookUpPipelineRequest.Validate if the designated constraints aren't met.
type LookUpPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookUpPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookUpPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookUpPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookUpPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookUpPipelineRequestValidationError) ErrorName() string {
	return "LookUpPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LookUpPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookUpPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookUpPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookUpPipelineRequestValidationError{}

// Validate checks the field values on LookUpPipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookUpPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookUpPipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookUpPipelineResponseMultiError, or nil if none found.
func (m *LookUpPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LookUpPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LookUpPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LookUpPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LookUpPipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LookUpPipelineResponseMultiError(errors)
	}

	return nil
}

// LookUpPipelineResponseMultiError is an error wrapping multiple validation
// errors returned by LookUpPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type LookUpPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookUpPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookUpPipelineResponseMultiError) AllErrors() []error { return m }

// LookUpPipelineResponseValidationError is the validation error returned by
// LookUpPipelineResponse.Validate if the designated constraints aren't met.
type LookUpPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookUpPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookUpPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookUpPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookUpPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookUpPipelineResponseValidationError) ErrorName() string {
	return "LookUpPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LookUpPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookUpPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookUpPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookUpPipelineResponseValidationError{}

// Validate checks the field values on CreateNamespacePipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNamespacePipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespacePipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateNamespacePipelineRequestMultiError, or nil if none found.
func (m *CreateNamespacePipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespacePipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespacePipelineRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespacePipelineRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespacePipelineRequestValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNamespacePipelineRequestMultiError(errors)
	}

	return nil
}

// CreateNamespacePipelineRequestMultiError is an error wrapping multiple
// validation errors returned by CreateNamespacePipelineRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateNamespacePipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespacePipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespacePipelineRequestMultiError) AllErrors() []error { return m }

// CreateNamespacePipelineRequestValidationError is the validation error
// returned by CreateNamespacePipelineRequest.Validate if the designated
// constraints aren't met.
type CreateNamespacePipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespacePipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespacePipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespacePipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespacePipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespacePipelineRequestValidationError) ErrorName() string {
	return "CreateNamespacePipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespacePipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespacePipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespacePipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespacePipelineRequestValidationError{}

// Validate checks the field values on CreateNamespacePipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNamespacePipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespacePipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateNamespacePipelineResponseMultiError, or nil if none found.
func (m *CreateNamespacePipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespacePipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespacePipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespacePipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespacePipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNamespacePipelineResponseMultiError(errors)
	}

	return nil
}

// CreateNamespacePipelineResponseMultiError is an error wrapping multiple
// validation errors returned by CreateNamespacePipelineResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateNamespacePipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespacePipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespacePipelineResponseMultiError) AllErrors() []error { return m }

// CreateNamespacePipelineResponseValidationError is the validation error
// returned by CreateNamespacePipelineResponse.Validate if the designated
// constraints aren't met.
type CreateNamespacePipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespacePipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespacePipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespacePipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespacePipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespacePipelineResponseValidationError) ErrorName() string {
	return "CreateNamespacePipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespacePipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespacePipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespacePipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespacePipelineResponseValidationError{}

// Validate checks the field values on GetNamespacePipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespacePipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespacePipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespacePipelineRequestMultiError, or nil if none found.
func (m *GetNamespacePipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespacePipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetNamespacePipelineRequestMultiError(errors)
	}

	return nil
}

// GetNamespacePipelineRequestMultiError is an error wrapping multiple
// validation errors returned by GetNamespacePipelineRequest.ValidateAll() if
// the designated constraints aren't met.
type GetNamespacePipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespacePipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespacePipelineRequestMultiError) AllErrors() []error { return m }

// GetNamespacePipelineRequestValidationError is the validation error returned
// by GetNamespacePipelineRequest.Validate if the designated constraints
// aren't met.
type GetNamespacePipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespacePipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespacePipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespacePipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespacePipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespacePipelineRequestValidationError) ErrorName() string {
	return "GetNamespacePipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespacePipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespacePipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespacePipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespacePipelineRequestValidationError{}

// Validate checks the field values on GetNamespacePipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespacePipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespacePipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespacePipelineResponseMultiError, or nil if none found.
func (m *GetNamespacePipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespacePipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNamespacePipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNamespacePipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNamespacePipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNamespacePipelineResponseMultiError(errors)
	}

	return nil
}

// GetNamespacePipelineResponseMultiError is an error wrapping multiple
// validation errors returned by GetNamespacePipelineResponse.ValidateAll() if
// the designated constraints aren't met.
type GetNamespacePipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespacePipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespacePipelineResponseMultiError) AllErrors() []error { return m }

// GetNamespacePipelineResponseValidationError is the validation error returned
// by GetNamespacePipelineResponse.Validate if the designated constraints
// aren't met.
type GetNamespacePipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespacePipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespacePipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespacePipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespacePipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespacePipelineResponseValidationError) ErrorName() string {
	return "GetNamespacePipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespacePipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespacePipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespacePipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespacePipelineResponseValidationError{}

// Validate checks the field values on UpdateNamespacePipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNamespacePipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNamespacePipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateNamespacePipelineRequestMultiError, or nil if none found.
func (m *UpdateNamespacePipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespacePipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespacePipelineRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespacePipelineRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespacePipelineRequestValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespacePipelineRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespacePipelineRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespacePipelineRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateNamespacePipelineRequestMultiError(errors)
	}

	return nil
}

// UpdateNamespacePipelineRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateNamespacePipelineRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateNamespacePipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespacePipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespacePipelineRequestMultiError) AllErrors() []error { return m }

// UpdateNamespacePipelineRequestValidationError is the validation error
// returned by UpdateNamespacePipelineRequest.Validate if the designated
// constraints aren't met.
type UpdateNamespacePipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespacePipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespacePipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespacePipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespacePipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespacePipelineRequestValidationError) ErrorName() string {
	return "UpdateNamespacePipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespacePipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespacePipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespacePipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespacePipelineRequestValidationError{}

// Validate checks the field values on UpdateNamespacePipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNamespacePipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNamespacePipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateNamespacePipelineResponseMultiError, or nil if none found.
func (m *UpdateNamespacePipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespacePipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespacePipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespacePipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespacePipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateNamespacePipelineResponseMultiError(errors)
	}

	return nil
}

// UpdateNamespacePipelineResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateNamespacePipelineResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateNamespacePipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespacePipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespacePipelineResponseMultiError) AllErrors() []error { return m }

// UpdateNamespacePipelineResponseValidationError is the validation error
// returned by UpdateNamespacePipelineResponse.Validate if the designated
// constraints aren't met.
type UpdateNamespacePipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespacePipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespacePipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespacePipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespacePipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespacePipelineResponseValidationError) ErrorName() string {
	return "UpdateNamespacePipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespacePipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespacePipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespacePipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespacePipelineResponseValidationError{}

// Validate checks the field values on DeleteNamespacePipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNamespacePipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNamespacePipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteNamespacePipelineRequestMultiError, or nil if none found.
func (m *DeleteNamespacePipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespacePipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	if len(errors) > 0 {
		return DeleteNamespacePipelineRequestMultiError(errors)
	}

	return nil
}

// DeleteNamespacePipelineRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteNamespacePipelineRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteNamespacePipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespacePipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespacePipelineRequestMultiError) AllErrors() []error { return m }

// DeleteNamespacePipelineRequestValidationError is the validation error
// returned by DeleteNamespacePipelineRequest.Validate if the designated
// constraints aren't met.
type DeleteNamespacePipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespacePipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespacePipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespacePipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespacePipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespacePipelineRequestValidationError) ErrorName() string {
	return "DeleteNamespacePipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespacePipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespacePipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespacePipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespacePipelineRequestValidationError{}

// Validate checks the field values on DeleteNamespacePipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNamespacePipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNamespacePipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteNamespacePipelineResponseMultiError, or nil if none found.
func (m *DeleteNamespacePipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespacePipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteNamespacePipelineResponseMultiError(errors)
	}

	return nil
}

// DeleteNamespacePipelineResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteNamespacePipelineResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteNamespacePipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespacePipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespacePipelineResponseMultiError) AllErrors() []error { return m }

// DeleteNamespacePipelineResponseValidationError is the validation error
// returned by DeleteNamespacePipelineResponse.Validate if the designated
// constraints aren't met.
type DeleteNamespacePipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespacePipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespacePipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespacePipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespacePipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespacePipelineResponseValidationError) ErrorName() string {
	return "DeleteNamespacePipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespacePipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespacePipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespacePipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespacePipelineResponseValidationError{}

// Validate checks the field values on ValidateNamespacePipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ValidateNamespacePipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateNamespacePipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ValidateNamespacePipelineRequestMultiError, or nil if none found.
func (m *ValidateNamespacePipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateNamespacePipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	if len(errors) > 0 {
		return ValidateNamespacePipelineRequestMultiError(errors)
	}

	return nil
}

// ValidateNamespacePipelineRequestMultiError is an error wrapping multiple
// validation errors returned by
// ValidateNamespacePipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type ValidateNamespacePipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateNamespacePipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateNamespacePipelineRequestMultiError) AllErrors() []error { return m }

// ValidateNamespacePipelineRequestValidationError is the validation error
// returned by ValidateNamespacePipelineRequest.Validate if the designated
// constraints aren't met.
type ValidateNamespacePipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateNamespacePipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateNamespacePipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateNamespacePipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateNamespacePipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateNamespacePipelineRequestValidationError) ErrorName() string {
	return "ValidateNamespacePipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateNamespacePipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateNamespacePipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateNamespacePipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateNamespacePipelineRequestValidationError{}

// Validate checks the field values on ValidateNamespacePipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ValidateNamespacePipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateNamespacePipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ValidateNamespacePipelineResponseMultiError, or nil if none found.
func (m *ValidateNamespacePipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateNamespacePipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidateNamespacePipelineResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidateNamespacePipelineResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateNamespacePipelineResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ValidateNamespacePipelineResponseMultiError(errors)
	}

	return nil
}

// ValidateNamespacePipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// ValidateNamespacePipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type ValidateNamespacePipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateNamespacePipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateNamespacePipelineResponseMultiError) AllErrors() []error { return m }

// ValidateNamespacePipelineResponseValidationError is the validation error
// returned by ValidateNamespacePipelineResponse.Validate if the designated
// constraints aren't met.
type ValidateNamespacePipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateNamespacePipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateNamespacePipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateNamespacePipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateNamespacePipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateNamespacePipelineResponseValidationError) ErrorName() string {
	return "ValidateNamespacePipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateNamespacePipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateNamespacePipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateNamespacePipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateNamespacePipelineResponseValidationError{}

// Validate checks the field values on RenameNamespacePipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameNamespacePipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameNamespacePipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenameNamespacePipelineRequestMultiError, or nil if none found.
func (m *RenameNamespacePipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameNamespacePipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	// no validation rules for NewPipelineId

	if len(errors) > 0 {
		return RenameNamespacePipelineRequestMultiError(errors)
	}

	return nil
}

// RenameNamespacePipelineRequestMultiError is an error wrapping multiple
// validation errors returned by RenameNamespacePipelineRequest.ValidateAll()
// if the designated constraints aren't met.
type RenameNamespacePipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameNamespacePipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameNamespacePipelineRequestMultiError) AllErrors() []error { return m }

// RenameNamespacePipelineRequestValidationError is the validation error
// returned by RenameNamespacePipelineRequest.Validate if the designated
// constraints aren't met.
type RenameNamespacePipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameNamespacePipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameNamespacePipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameNamespacePipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameNamespacePipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameNamespacePipelineRequestValidationError) ErrorName() string {
	return "RenameNamespacePipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenameNamespacePipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameNamespacePipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameNamespacePipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameNamespacePipelineRequestValidationError{}

// Validate checks the field values on RenameNamespacePipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameNamespacePipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameNamespacePipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenameNamespacePipelineResponseMultiError, or nil if none found.
func (m *RenameNamespacePipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameNamespacePipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenameNamespacePipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenameNamespacePipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenameNamespacePipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenameNamespacePipelineResponseMultiError(errors)
	}

	return nil
}

// RenameNamespacePipelineResponseMultiError is an error wrapping multiple
// validation errors returned by RenameNamespacePipelineResponse.ValidateAll()
// if the designated constraints aren't met.
type RenameNamespacePipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameNamespacePipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameNamespacePipelineResponseMultiError) AllErrors() []error { return m }

// RenameNamespacePipelineResponseValidationError is the validation error
// returned by RenameNamespacePipelineResponse.Validate if the designated
// constraints aren't met.
type RenameNamespacePipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameNamespacePipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameNamespacePipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameNamespacePipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameNamespacePipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameNamespacePipelineResponseValidationError) ErrorName() string {
	return "RenameNamespacePipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenameNamespacePipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameNamespacePipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameNamespacePipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameNamespacePipelineResponseValidationError{}

// Validate checks the field values on CloneNamespacePipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloneNamespacePipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneNamespacePipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloneNamespacePipelineRequestMultiError, or nil if none found.
func (m *CloneNamespacePipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneNamespacePipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	// no validation rules for Target

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetSharing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloneNamespacePipelineRequestValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloneNamespacePipelineRequestValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloneNamespacePipelineRequestValidationError{
				field:  "Sharing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloneNamespacePipelineRequestMultiError(errors)
	}

	return nil
}

// CloneNamespacePipelineRequestMultiError is an error wrapping multiple
// validation errors returned by CloneNamespacePipelineRequest.ValidateAll()
// if the designated constraints aren't met.
type CloneNamespacePipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneNamespacePipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneNamespacePipelineRequestMultiError) AllErrors() []error { return m }

// CloneNamespacePipelineRequestValidationError is the validation error
// returned by CloneNamespacePipelineRequest.Validate if the designated
// constraints aren't met.
type CloneNamespacePipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneNamespacePipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneNamespacePipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneNamespacePipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneNamespacePipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneNamespacePipelineRequestValidationError) ErrorName() string {
	return "CloneNamespacePipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloneNamespacePipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneNamespacePipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneNamespacePipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneNamespacePipelineRequestValidationError{}

// Validate checks the field values on CloneNamespacePipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloneNamespacePipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneNamespacePipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloneNamespacePipelineResponseMultiError, or nil if none found.
func (m *CloneNamespacePipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneNamespacePipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloneNamespacePipelineResponseMultiError(errors)
	}

	return nil
}

// CloneNamespacePipelineResponseMultiError is an error wrapping multiple
// validation errors returned by CloneNamespacePipelineResponse.ValidateAll()
// if the designated constraints aren't met.
type CloneNamespacePipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneNamespacePipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneNamespacePipelineResponseMultiError) AllErrors() []error { return m }

// CloneNamespacePipelineResponseValidationError is the validation error
// returned by CloneNamespacePipelineResponse.Validate if the designated
// constraints aren't met.
type CloneNamespacePipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneNamespacePipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneNamespacePipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneNamespacePipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneNamespacePipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneNamespacePipelineResponseValidationError) ErrorName() string {
	return "CloneNamespacePipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloneNamespacePipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneNamespacePipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneNamespacePipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneNamespacePipelineResponseValidationError{}

// Validate checks the field values on CloneNamespacePipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CloneNamespacePipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneNamespacePipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloneNamespacePipelineReleaseRequestMultiError, or nil if none found.
func (m *CloneNamespacePipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneNamespacePipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	// no validation rules for ReleaseId

	// no validation rules for Target

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetSharing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloneNamespacePipelineReleaseRequestValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloneNamespacePipelineReleaseRequestValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloneNamespacePipelineReleaseRequestValidationError{
				field:  "Sharing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloneNamespacePipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// CloneNamespacePipelineReleaseRequestMultiError is an error wrapping multiple
// validation errors returned by
// CloneNamespacePipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type CloneNamespacePipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneNamespacePipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneNamespacePipelineReleaseRequestMultiError) AllErrors() []error { return m }

// CloneNamespacePipelineReleaseRequestValidationError is the validation error
// returned by CloneNamespacePipelineReleaseRequest.Validate if the designated
// constraints aren't met.
type CloneNamespacePipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneNamespacePipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneNamespacePipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneNamespacePipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneNamespacePipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneNamespacePipelineReleaseRequestValidationError) ErrorName() string {
	return "CloneNamespacePipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloneNamespacePipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneNamespacePipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneNamespacePipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneNamespacePipelineReleaseRequestValidationError{}

// Validate checks the field values on CloneNamespacePipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CloneNamespacePipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneNamespacePipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloneNamespacePipelineReleaseResponseMultiError, or nil if none found.
func (m *CloneNamespacePipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneNamespacePipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloneNamespacePipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// CloneNamespacePipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// CloneNamespacePipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type CloneNamespacePipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneNamespacePipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneNamespacePipelineReleaseResponseMultiError) AllErrors() []error { return m }

// CloneNamespacePipelineReleaseResponseValidationError is the validation error
// returned by CloneNamespacePipelineReleaseResponse.Validate if the
// designated constraints aren't met.
type CloneNamespacePipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneNamespacePipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneNamespacePipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneNamespacePipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneNamespacePipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneNamespacePipelineReleaseResponseValidationError) ErrorName() string {
	return "CloneNamespacePipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloneNamespacePipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneNamespacePipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneNamespacePipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneNamespacePipelineReleaseResponseValidationError{}

// Validate checks the field values on SendNamespacePipelineEventRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendNamespacePipelineEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNamespacePipelineEventRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendNamespacePipelineEventRequestMultiError, or nil if none found.
func (m *SendNamespacePipelineEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNamespacePipelineEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	// no validation rules for Event

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendNamespacePipelineEventRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendNamespacePipelineEventRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendNamespacePipelineEventRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendNamespacePipelineEventRequestMultiError(errors)
	}

	return nil
}

// SendNamespacePipelineEventRequestMultiError is an error wrapping multiple
// validation errors returned by
// SendNamespacePipelineEventRequest.ValidateAll() if the designated
// constraints aren't met.
type SendNamespacePipelineEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNamespacePipelineEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNamespacePipelineEventRequestMultiError) AllErrors() []error { return m }

// SendNamespacePipelineEventRequestValidationError is the validation error
// returned by SendNamespacePipelineEventRequest.Validate if the designated
// constraints aren't met.
type SendNamespacePipelineEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNamespacePipelineEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNamespacePipelineEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNamespacePipelineEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNamespacePipelineEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNamespacePipelineEventRequestValidationError) ErrorName() string {
	return "SendNamespacePipelineEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendNamespacePipelineEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNamespacePipelineEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNamespacePipelineEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNamespacePipelineEventRequestValidationError{}

// Validate checks the field values on SendNamespacePipelineEventResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendNamespacePipelineEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNamespacePipelineEventResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendNamespacePipelineEventResponseMultiError, or nil if none found.
func (m *SendNamespacePipelineEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNamespacePipelineEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendNamespacePipelineEventResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendNamespacePipelineEventResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendNamespacePipelineEventResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendNamespacePipelineEventResponseMultiError(errors)
	}

	return nil
}

// SendNamespacePipelineEventResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendNamespacePipelineEventResponse.ValidateAll() if the designated
// constraints aren't met.
type SendNamespacePipelineEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNamespacePipelineEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNamespacePipelineEventResponseMultiError) AllErrors() []error { return m }

// SendNamespacePipelineEventResponseValidationError is the validation error
// returned by SendNamespacePipelineEventResponse.Validate if the designated
// constraints aren't met.
type SendNamespacePipelineEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNamespacePipelineEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNamespacePipelineEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNamespacePipelineEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNamespacePipelineEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNamespacePipelineEventResponseValidationError) ErrorName() string {
	return "SendNamespacePipelineEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendNamespacePipelineEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNamespacePipelineEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNamespacePipelineEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNamespacePipelineEventResponseValidationError{}

// Validate checks the field values on SendNamespacePipelineReleaseEventRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SendNamespacePipelineReleaseEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SendNamespacePipelineReleaseEventRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SendNamespacePipelineReleaseEventRequestMultiError, or nil if none found.
func (m *SendNamespacePipelineReleaseEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNamespacePipelineReleaseEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	// no validation rules for ReleaseId

	// no validation rules for Event

	// no validation rules for Code

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendNamespacePipelineReleaseEventRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendNamespacePipelineReleaseEventRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendNamespacePipelineReleaseEventRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendNamespacePipelineReleaseEventRequestMultiError(errors)
	}

	return nil
}

// SendNamespacePipelineReleaseEventRequestMultiError is an error wrapping
// multiple validation errors returned by
// SendNamespacePipelineReleaseEventRequest.ValidateAll() if the designated
// constraints aren't met.
type SendNamespacePipelineReleaseEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNamespacePipelineReleaseEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNamespacePipelineReleaseEventRequestMultiError) AllErrors() []error { return m }

// SendNamespacePipelineReleaseEventRequestValidationError is the validation
// error returned by SendNamespacePipelineReleaseEventRequest.Validate if the
// designated constraints aren't met.
type SendNamespacePipelineReleaseEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNamespacePipelineReleaseEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNamespacePipelineReleaseEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNamespacePipelineReleaseEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNamespacePipelineReleaseEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNamespacePipelineReleaseEventRequestValidationError) ErrorName() string {
	return "SendNamespacePipelineReleaseEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendNamespacePipelineReleaseEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNamespacePipelineReleaseEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNamespacePipelineReleaseEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNamespacePipelineReleaseEventRequestValidationError{}

// Validate checks the field values on
// SendNamespacePipelineReleaseEventResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendNamespacePipelineReleaseEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SendNamespacePipelineReleaseEventResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SendNamespacePipelineReleaseEventResponseMultiError, or nil if none found.
func (m *SendNamespacePipelineReleaseEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNamespacePipelineReleaseEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendNamespacePipelineReleaseEventResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendNamespacePipelineReleaseEventResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendNamespacePipelineReleaseEventResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendNamespacePipelineReleaseEventResponseMultiError(errors)
	}

	return nil
}

// SendNamespacePipelineReleaseEventResponseMultiError is an error wrapping
// multiple validation errors returned by
// SendNamespacePipelineReleaseEventResponse.ValidateAll() if the designated
// constraints aren't met.
type SendNamespacePipelineReleaseEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNamespacePipelineReleaseEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNamespacePipelineReleaseEventResponseMultiError) AllErrors() []error { return m }

// SendNamespacePipelineReleaseEventResponseValidationError is the validation
// error returned by SendNamespacePipelineReleaseEventResponse.Validate if the
// designated constraints aren't met.
type SendNamespacePipelineReleaseEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNamespacePipelineReleaseEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNamespacePipelineReleaseEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNamespacePipelineReleaseEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNamespacePipelineReleaseEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNamespacePipelineReleaseEventResponseValidationError) ErrorName() string {
	return "SendNamespacePipelineReleaseEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendNamespacePipelineReleaseEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNamespacePipelineReleaseEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNamespacePipelineReleaseEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNamespacePipelineReleaseEventResponseValidationError{}

// Validate checks the field values on TriggerNamespacePipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerNamespacePipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerNamespacePipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggerNamespacePipelineRequestMultiError, or nil if none found.
func (m *TriggerNamespacePipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerNamespacePipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespacePipelineRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespacePipelineRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespacePipelineRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespacePipelineRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespacePipelineRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespacePipelineRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerNamespacePipelineRequestMultiError(errors)
	}

	return nil
}

// TriggerNamespacePipelineRequestMultiError is an error wrapping multiple
// validation errors returned by TriggerNamespacePipelineRequest.ValidateAll()
// if the designated constraints aren't met.
type TriggerNamespacePipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNamespacePipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNamespacePipelineRequestMultiError) AllErrors() []error { return m }

// TriggerNamespacePipelineRequestValidationError is the validation error
// returned by TriggerNamespacePipelineRequest.Validate if the designated
// constraints aren't met.
type TriggerNamespacePipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNamespacePipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerNamespacePipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerNamespacePipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerNamespacePipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNamespacePipelineRequestValidationError) ErrorName() string {
	return "TriggerNamespacePipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerNamespacePipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerNamespacePipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNamespacePipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNamespacePipelineRequestValidationError{}

// Validate checks the field values on TriggerNamespacePipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TriggerNamespacePipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerNamespacePipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggerNamespacePipelineResponseMultiError, or nil if none found.
func (m *TriggerNamespacePipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerNamespacePipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespacePipelineResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespacePipelineResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespacePipelineResponseValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerNamespacePipelineResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerNamespacePipelineResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerNamespacePipelineResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerNamespacePipelineResponseMultiError(errors)
	}

	return nil
}

// TriggerNamespacePipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// TriggerNamespacePipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerNamespacePipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNamespacePipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNamespacePipelineResponseMultiError) AllErrors() []error { return m }

// TriggerNamespacePipelineResponseValidationError is the validation error
// returned by TriggerNamespacePipelineResponse.Validate if the designated
// constraints aren't met.
type TriggerNamespacePipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNamespacePipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerNamespacePipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerNamespacePipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerNamespacePipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNamespacePipelineResponseValidationError) ErrorName() string {
	return "TriggerNamespacePipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerNamespacePipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerNamespacePipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNamespacePipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNamespacePipelineResponseValidationError{}

// Validate checks the field values on
// TriggerNamespacePipelineWithStreamRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerNamespacePipelineWithStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerNamespacePipelineWithStreamRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerNamespacePipelineWithStreamRequestMultiError, or nil if none found.
func (m *TriggerNamespacePipelineWithStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerNamespacePipelineWithStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespacePipelineWithStreamRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespacePipelineWithStreamRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespacePipelineWithStreamRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespacePipelineWithStreamRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespacePipelineWithStreamRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespacePipelineWithStreamRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerNamespacePipelineWithStreamRequestMultiError(errors)
	}

	return nil
}

// TriggerNamespacePipelineWithStreamRequestMultiError is an error wrapping
// multiple validation errors returned by
// TriggerNamespacePipelineWithStreamRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerNamespacePipelineWithStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNamespacePipelineWithStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNamespacePipelineWithStreamRequestMultiError) AllErrors() []error { return m }

// TriggerNamespacePipelineWithStreamRequestValidationError is the validation
// error returned by TriggerNamespacePipelineWithStreamRequest.Validate if the
// designated constraints aren't met.
type TriggerNamespacePipelineWithStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNamespacePipelineWithStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerNamespacePipelineWithStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerNamespacePipelineWithStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerNamespacePipelineWithStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNamespacePipelineWithStreamRequestValidationError) ErrorName() string {
	return "TriggerNamespacePipelineWithStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerNamespacePipelineWithStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerNamespacePipelineWithStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNamespacePipelineWithStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNamespacePipelineWithStreamRequestValidationError{}

// Validate checks the field values on
// TriggerNamespacePipelineWithStreamResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerNamespacePipelineWithStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerNamespacePipelineWithStreamResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerNamespacePipelineWithStreamResponseMultiError, or nil if none found.
func (m *TriggerNamespacePipelineWithStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerNamespacePipelineWithStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespacePipelineWithStreamResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespacePipelineWithStreamResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespacePipelineWithStreamResponseValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerNamespacePipelineWithStreamResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerNamespacePipelineWithStreamResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerNamespacePipelineWithStreamResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerNamespacePipelineWithStreamResponseMultiError(errors)
	}

	return nil
}

// TriggerNamespacePipelineWithStreamResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerNamespacePipelineWithStreamResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerNamespacePipelineWithStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNamespacePipelineWithStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNamespacePipelineWithStreamResponseMultiError) AllErrors() []error { return m }

// TriggerNamespacePipelineWithStreamResponseValidationError is the validation
// error returned by TriggerNamespacePipelineWithStreamResponse.Validate if
// the designated constraints aren't met.
type TriggerNamespacePipelineWithStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNamespacePipelineWithStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerNamespacePipelineWithStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerNamespacePipelineWithStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerNamespacePipelineWithStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNamespacePipelineWithStreamResponseValidationError) ErrorName() string {
	return "TriggerNamespacePipelineWithStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerNamespacePipelineWithStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerNamespacePipelineWithStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNamespacePipelineWithStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNamespacePipelineWithStreamResponseValidationError{}

// Validate checks the field values on TriggerAsyncNamespacePipelineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerAsyncNamespacePipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerAsyncNamespacePipelineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerAsyncNamespacePipelineRequestMultiError, or nil if none found.
func (m *TriggerAsyncNamespacePipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncNamespacePipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncNamespacePipelineRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncNamespacePipelineRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncNamespacePipelineRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncNamespacePipelineRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncNamespacePipelineRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncNamespacePipelineRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerAsyncNamespacePipelineRequestMultiError(errors)
	}

	return nil
}

// TriggerAsyncNamespacePipelineRequestMultiError is an error wrapping multiple
// validation errors returned by
// TriggerAsyncNamespacePipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncNamespacePipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncNamespacePipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncNamespacePipelineRequestMultiError) AllErrors() []error { return m }

// TriggerAsyncNamespacePipelineRequestValidationError is the validation error
// returned by TriggerAsyncNamespacePipelineRequest.Validate if the designated
// constraints aren't met.
type TriggerAsyncNamespacePipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncNamespacePipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncNamespacePipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncNamespacePipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncNamespacePipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncNamespacePipelineRequestValidationError) ErrorName() string {
	return "TriggerAsyncNamespacePipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncNamespacePipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncNamespacePipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncNamespacePipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncNamespacePipelineRequestValidationError{}

// Validate checks the field values on TriggerAsyncNamespacePipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerAsyncNamespacePipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerAsyncNamespacePipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerAsyncNamespacePipelineResponseMultiError, or nil if none found.
func (m *TriggerAsyncNamespacePipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncNamespacePipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerAsyncNamespacePipelineResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerAsyncNamespacePipelineResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerAsyncNamespacePipelineResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerAsyncNamespacePipelineResponseMultiError(errors)
	}

	return nil
}

// TriggerAsyncNamespacePipelineResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerAsyncNamespacePipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncNamespacePipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncNamespacePipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncNamespacePipelineResponseMultiError) AllErrors() []error { return m }

// TriggerAsyncNamespacePipelineResponseValidationError is the validation error
// returned by TriggerAsyncNamespacePipelineResponse.Validate if the
// designated constraints aren't met.
type TriggerAsyncNamespacePipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncNamespacePipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncNamespacePipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncNamespacePipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncNamespacePipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncNamespacePipelineResponseValidationError) ErrorName() string {
	return "TriggerAsyncNamespacePipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncNamespacePipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncNamespacePipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncNamespacePipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncNamespacePipelineResponseValidationError{}

// Validate checks the field values on CreateNamespacePipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateNamespacePipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespacePipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateNamespacePipelineReleaseRequestMultiError, or nil if none found.
func (m *CreateNamespacePipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespacePipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespacePipelineReleaseRequestValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespacePipelineReleaseRequestValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespacePipelineReleaseRequestValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNamespacePipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// CreateNamespacePipelineReleaseRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateNamespacePipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateNamespacePipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespacePipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespacePipelineReleaseRequestMultiError) AllErrors() []error { return m }

// CreateNamespacePipelineReleaseRequestValidationError is the validation error
// returned by CreateNamespacePipelineReleaseRequest.Validate if the
// designated constraints aren't met.
type CreateNamespacePipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespacePipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespacePipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespacePipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespacePipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespacePipelineReleaseRequestValidationError) ErrorName() string {
	return "CreateNamespacePipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespacePipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespacePipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespacePipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespacePipelineReleaseRequestValidationError{}

// Validate checks the field values on CreateNamespacePipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateNamespacePipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateNamespacePipelineReleaseResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateNamespacePipelineReleaseResponseMultiError, or nil if none found.
func (m *CreateNamespacePipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespacePipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespacePipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespacePipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespacePipelineReleaseResponseValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNamespacePipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// CreateNamespacePipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateNamespacePipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateNamespacePipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespacePipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespacePipelineReleaseResponseMultiError) AllErrors() []error { return m }

// CreateNamespacePipelineReleaseResponseValidationError is the validation
// error returned by CreateNamespacePipelineReleaseResponse.Validate if the
// designated constraints aren't met.
type CreateNamespacePipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespacePipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespacePipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespacePipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespacePipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespacePipelineReleaseResponseValidationError) ErrorName() string {
	return "CreateNamespacePipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespacePipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespacePipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespacePipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespacePipelineReleaseResponseValidationError{}

// Validate checks the field values on ListNamespacePipelineReleasesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListNamespacePipelineReleasesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespacePipelineReleasesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListNamespacePipelineReleasesRequestMultiError, or nil if none found.
func (m *ListNamespacePipelineReleasesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespacePipelineReleasesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.ShowDeleted != nil {
		// no validation rules for ShowDeleted
	}

	if len(errors) > 0 {
		return ListNamespacePipelineReleasesRequestMultiError(errors)
	}

	return nil
}

// ListNamespacePipelineReleasesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListNamespacePipelineReleasesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListNamespacePipelineReleasesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespacePipelineReleasesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespacePipelineReleasesRequestMultiError) AllErrors() []error { return m }

// ListNamespacePipelineReleasesRequestValidationError is the validation error
// returned by ListNamespacePipelineReleasesRequest.Validate if the designated
// constraints aren't met.
type ListNamespacePipelineReleasesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacePipelineReleasesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacePipelineReleasesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacePipelineReleasesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacePipelineReleasesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacePipelineReleasesRequestValidationError) ErrorName() string {
	return "ListNamespacePipelineReleasesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacePipelineReleasesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacePipelineReleasesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacePipelineReleasesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacePipelineReleasesRequestValidationError{}

// Validate checks the field values on ListNamespacePipelineReleasesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListNamespacePipelineReleasesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespacePipelineReleasesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListNamespacePipelineReleasesResponseMultiError, or nil if none found.
func (m *ListNamespacePipelineReleasesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespacePipelineReleasesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReleases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNamespacePipelineReleasesResponseValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNamespacePipelineReleasesResponseValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNamespacePipelineReleasesResponseValidationError{
					field:  fmt.Sprintf("Releases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListNamespacePipelineReleasesResponseMultiError(errors)
	}

	return nil
}

// ListNamespacePipelineReleasesResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListNamespacePipelineReleasesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListNamespacePipelineReleasesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespacePipelineReleasesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespacePipelineReleasesResponseMultiError) AllErrors() []error { return m }

// ListNamespacePipelineReleasesResponseValidationError is the validation error
// returned by ListNamespacePipelineReleasesResponse.Validate if the
// designated constraints aren't met.
type ListNamespacePipelineReleasesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacePipelineReleasesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacePipelineReleasesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacePipelineReleasesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacePipelineReleasesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacePipelineReleasesResponseValidationError) ErrorName() string {
	return "ListNamespacePipelineReleasesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacePipelineReleasesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacePipelineReleasesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacePipelineReleasesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacePipelineReleasesResponseValidationError{}

// Validate checks the field values on GetNamespacePipelineReleaseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetNamespacePipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespacePipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetNamespacePipelineReleaseRequestMultiError, or nil if none found.
func (m *GetNamespacePipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespacePipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	// no validation rules for ReleaseId

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetNamespacePipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// GetNamespacePipelineReleaseRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetNamespacePipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNamespacePipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespacePipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespacePipelineReleaseRequestMultiError) AllErrors() []error { return m }

// GetNamespacePipelineReleaseRequestValidationError is the validation error
// returned by GetNamespacePipelineReleaseRequest.Validate if the designated
// constraints aren't met.
type GetNamespacePipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespacePipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespacePipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespacePipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespacePipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespacePipelineReleaseRequestValidationError) ErrorName() string {
	return "GetNamespacePipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespacePipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespacePipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespacePipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespacePipelineReleaseRequestValidationError{}

// Validate checks the field values on GetNamespacePipelineReleaseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetNamespacePipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespacePipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetNamespacePipelineReleaseResponseMultiError, or nil if none found.
func (m *GetNamespacePipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespacePipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNamespacePipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNamespacePipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNamespacePipelineReleaseResponseValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNamespacePipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// GetNamespacePipelineReleaseResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetNamespacePipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNamespacePipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespacePipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespacePipelineReleaseResponseMultiError) AllErrors() []error { return m }

// GetNamespacePipelineReleaseResponseValidationError is the validation error
// returned by GetNamespacePipelineReleaseResponse.Validate if the designated
// constraints aren't met.
type GetNamespacePipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespacePipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespacePipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespacePipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespacePipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespacePipelineReleaseResponseValidationError) ErrorName() string {
	return "GetNamespacePipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespacePipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespacePipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespacePipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespacePipelineReleaseResponseValidationError{}

// Validate checks the field values on UpdateNamespacePipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateNamespacePipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNamespacePipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateNamespacePipelineReleaseRequestMultiError, or nil if none found.
func (m *UpdateNamespacePipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespacePipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	// no validation rules for ReleaseId

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespacePipelineReleaseRequestValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespacePipelineReleaseRequestValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespacePipelineReleaseRequestValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespacePipelineReleaseRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespacePipelineReleaseRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespacePipelineReleaseRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateNamespacePipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// UpdateNamespacePipelineReleaseRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateNamespacePipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateNamespacePipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespacePipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespacePipelineReleaseRequestMultiError) AllErrors() []error { return m }

// UpdateNamespacePipelineReleaseRequestValidationError is the validation error
// returned by UpdateNamespacePipelineReleaseRequest.Validate if the
// designated constraints aren't met.
type UpdateNamespacePipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespacePipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespacePipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespacePipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespacePipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespacePipelineReleaseRequestValidationError) ErrorName() string {
	return "UpdateNamespacePipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespacePipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespacePipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespacePipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespacePipelineReleaseRequestValidationError{}

// Validate checks the field values on UpdateNamespacePipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateNamespacePipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateNamespacePipelineReleaseResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateNamespacePipelineReleaseResponseMultiError, or nil if none found.
func (m *UpdateNamespacePipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespacePipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespacePipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespacePipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespacePipelineReleaseResponseValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateNamespacePipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// UpdateNamespacePipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateNamespacePipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateNamespacePipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespacePipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespacePipelineReleaseResponseMultiError) AllErrors() []error { return m }

// UpdateNamespacePipelineReleaseResponseValidationError is the validation
// error returned by UpdateNamespacePipelineReleaseResponse.Validate if the
// designated constraints aren't met.
type UpdateNamespacePipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespacePipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespacePipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespacePipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespacePipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespacePipelineReleaseResponseValidationError) ErrorName() string {
	return "UpdateNamespacePipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespacePipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespacePipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespacePipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespacePipelineReleaseResponseValidationError{}

// Validate checks the field values on DeleteNamespacePipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteNamespacePipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNamespacePipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteNamespacePipelineReleaseRequestMultiError, or nil if none found.
func (m *DeleteNamespacePipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespacePipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	// no validation rules for ReleaseId

	if len(errors) > 0 {
		return DeleteNamespacePipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// DeleteNamespacePipelineReleaseRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteNamespacePipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNamespacePipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespacePipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespacePipelineReleaseRequestMultiError) AllErrors() []error { return m }

// DeleteNamespacePipelineReleaseRequestValidationError is the validation error
// returned by DeleteNamespacePipelineReleaseRequest.Validate if the
// designated constraints aren't met.
type DeleteNamespacePipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespacePipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespacePipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespacePipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespacePipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespacePipelineReleaseRequestValidationError) ErrorName() string {
	return "DeleteNamespacePipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespacePipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespacePipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespacePipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespacePipelineReleaseRequestValidationError{}

// Validate checks the field values on DeleteNamespacePipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteNamespacePipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteNamespacePipelineReleaseResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteNamespacePipelineReleaseResponseMultiError, or nil if none found.
func (m *DeleteNamespacePipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespacePipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteNamespacePipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// DeleteNamespacePipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteNamespacePipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteNamespacePipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespacePipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespacePipelineReleaseResponseMultiError) AllErrors() []error { return m }

// DeleteNamespacePipelineReleaseResponseValidationError is the validation
// error returned by DeleteNamespacePipelineReleaseResponse.Validate if the
// designated constraints aren't met.
type DeleteNamespacePipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespacePipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespacePipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespacePipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespacePipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespacePipelineReleaseResponseValidationError) ErrorName() string {
	return "DeleteNamespacePipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespacePipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespacePipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespacePipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespacePipelineReleaseResponseValidationError{}

// Validate checks the field values on TriggerNamespacePipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerNamespacePipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerNamespacePipelineReleaseRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TriggerNamespacePipelineReleaseRequestMultiError, or nil if none found.
func (m *TriggerNamespacePipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerNamespacePipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	// no validation rules for ReleaseId

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespacePipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespacePipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespacePipelineReleaseRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespacePipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespacePipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespacePipelineReleaseRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerNamespacePipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// TriggerNamespacePipelineReleaseRequestMultiError is an error wrapping
// multiple validation errors returned by
// TriggerNamespacePipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerNamespacePipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNamespacePipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNamespacePipelineReleaseRequestMultiError) AllErrors() []error { return m }

// TriggerNamespacePipelineReleaseRequestValidationError is the validation
// error returned by TriggerNamespacePipelineReleaseRequest.Validate if the
// designated constraints aren't met.
type TriggerNamespacePipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNamespacePipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerNamespacePipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerNamespacePipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerNamespacePipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNamespacePipelineReleaseRequestValidationError) ErrorName() string {
	return "TriggerNamespacePipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerNamespacePipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerNamespacePipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNamespacePipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNamespacePipelineReleaseRequestValidationError{}

// Validate checks the field values on TriggerNamespacePipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerNamespacePipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerNamespacePipelineReleaseResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TriggerNamespacePipelineReleaseResponseMultiError, or nil if none found.
func (m *TriggerNamespacePipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerNamespacePipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespacePipelineReleaseResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespacePipelineReleaseResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespacePipelineReleaseResponseValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerNamespacePipelineReleaseResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerNamespacePipelineReleaseResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerNamespacePipelineReleaseResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerNamespacePipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// TriggerNamespacePipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerNamespacePipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerNamespacePipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNamespacePipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNamespacePipelineReleaseResponseMultiError) AllErrors() []error { return m }

// TriggerNamespacePipelineReleaseResponseValidationError is the validation
// error returned by TriggerNamespacePipelineReleaseResponse.Validate if the
// designated constraints aren't met.
type TriggerNamespacePipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNamespacePipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerNamespacePipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerNamespacePipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerNamespacePipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNamespacePipelineReleaseResponseValidationError) ErrorName() string {
	return "TriggerNamespacePipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerNamespacePipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerNamespacePipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNamespacePipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNamespacePipelineReleaseResponseValidationError{}

// Validate checks the field values on
// TriggerAsyncNamespacePipelineReleaseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerAsyncNamespacePipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerAsyncNamespacePipelineReleaseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerAsyncNamespacePipelineReleaseRequestMultiError, or nil if none found.
func (m *TriggerAsyncNamespacePipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncNamespacePipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	// no validation rules for ReleaseId

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncNamespacePipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncNamespacePipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncNamespacePipelineReleaseRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncNamespacePipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncNamespacePipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncNamespacePipelineReleaseRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerAsyncNamespacePipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// TriggerAsyncNamespacePipelineReleaseRequestMultiError is an error wrapping
// multiple validation errors returned by
// TriggerAsyncNamespacePipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncNamespacePipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncNamespacePipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncNamespacePipelineReleaseRequestMultiError) AllErrors() []error { return m }

// TriggerAsyncNamespacePipelineReleaseRequestValidationError is the validation
// error returned by TriggerAsyncNamespacePipelineReleaseRequest.Validate if
// the designated constraints aren't met.
type TriggerAsyncNamespacePipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncNamespacePipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncNamespacePipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncNamespacePipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncNamespacePipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncNamespacePipelineReleaseRequestValidationError) ErrorName() string {
	return "TriggerAsyncNamespacePipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncNamespacePipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncNamespacePipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncNamespacePipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncNamespacePipelineReleaseRequestValidationError{}

// Validate checks the field values on
// TriggerAsyncNamespacePipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerAsyncNamespacePipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerAsyncNamespacePipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerAsyncNamespacePipelineReleaseResponseMultiError, or nil if none found.
func (m *TriggerAsyncNamespacePipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncNamespacePipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerAsyncNamespacePipelineReleaseResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerAsyncNamespacePipelineReleaseResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerAsyncNamespacePipelineReleaseResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerAsyncNamespacePipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// TriggerAsyncNamespacePipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerAsyncNamespacePipelineReleaseResponse.ValidateAll() if the
// designated constraints aren't met.
type TriggerAsyncNamespacePipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncNamespacePipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncNamespacePipelineReleaseResponseMultiError) AllErrors() []error { return m }

// TriggerAsyncNamespacePipelineReleaseResponseValidationError is the
// validation error returned by
// TriggerAsyncNamespacePipelineReleaseResponse.Validate if the designated
// constraints aren't met.
type TriggerAsyncNamespacePipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncNamespacePipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncNamespacePipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncNamespacePipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncNamespacePipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncNamespacePipelineReleaseResponseValidationError) ErrorName() string {
	return "TriggerAsyncNamespacePipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncNamespacePipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncNamespacePipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncNamespacePipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncNamespacePipelineReleaseResponseValidationError{}

// Validate checks the field values on CreateUserPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserPipelineRequestMultiError, or nil if none found.
func (m *CreateUserPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserPipelineRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserPipelineRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserPipelineRequestValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Parent

	if len(errors) > 0 {
		return CreateUserPipelineRequestMultiError(errors)
	}

	return nil
}

// CreateUserPipelineRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserPipelineRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateUserPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserPipelineRequestMultiError) AllErrors() []error { return m }

// CreateUserPipelineRequestValidationError is the validation error returned by
// CreateUserPipelineRequest.Validate if the designated constraints aren't met.
type CreateUserPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserPipelineRequestValidationError) ErrorName() string {
	return "CreateUserPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserPipelineRequestValidationError{}

// Validate checks the field values on CreateUserPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserPipelineResponseMultiError, or nil if none found.
func (m *CreateUserPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserPipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserPipelineResponseMultiError(errors)
	}

	return nil
}

// CreateUserPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by CreateUserPipelineResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateUserPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserPipelineResponseMultiError) AllErrors() []error { return m }

// CreateUserPipelineResponseValidationError is the validation error returned
// by CreateUserPipelineResponse.Validate if the designated constraints aren't met.
type CreateUserPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserPipelineResponseValidationError) ErrorName() string {
	return "CreateUserPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserPipelineResponseValidationError{}

// Validate checks the field values on ListUserPipelinesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserPipelinesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserPipelinesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserPipelinesRequestMultiError, or nil if none found.
func (m *ListUserPipelinesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserPipelinesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.ShowDeleted != nil {
		// no validation rules for ShowDeleted
	}

	if m.Visibility != nil {
		// no validation rules for Visibility
	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if len(errors) > 0 {
		return ListUserPipelinesRequestMultiError(errors)
	}

	return nil
}

// ListUserPipelinesRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserPipelinesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserPipelinesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserPipelinesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserPipelinesRequestMultiError) AllErrors() []error { return m }

// ListUserPipelinesRequestValidationError is the validation error returned by
// ListUserPipelinesRequest.Validate if the designated constraints aren't met.
type ListUserPipelinesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserPipelinesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserPipelinesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserPipelinesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserPipelinesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserPipelinesRequestValidationError) ErrorName() string {
	return "ListUserPipelinesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserPipelinesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserPipelinesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserPipelinesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserPipelinesRequestValidationError{}

// Validate checks the field values on ListUserPipelinesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserPipelinesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserPipelinesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserPipelinesResponseMultiError, or nil if none found.
func (m *ListUserPipelinesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserPipelinesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipelines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserPipelinesResponseValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserPipelinesResponseValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserPipelinesResponseValidationError{
					field:  fmt.Sprintf("Pipelines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListUserPipelinesResponseMultiError(errors)
	}

	return nil
}

// ListUserPipelinesResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserPipelinesResponse.ValidateAll() if the
// designated constraints aren't met.
type ListUserPipelinesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserPipelinesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserPipelinesResponseMultiError) AllErrors() []error { return m }

// ListUserPipelinesResponseValidationError is the validation error returned by
// ListUserPipelinesResponse.Validate if the designated constraints aren't met.
type ListUserPipelinesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserPipelinesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserPipelinesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserPipelinesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserPipelinesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserPipelinesResponseValidationError) ErrorName() string {
	return "ListUserPipelinesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserPipelinesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserPipelinesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserPipelinesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserPipelinesResponseValidationError{}

// Validate checks the field values on GetUserPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserPipelineRequestMultiError, or nil if none found.
func (m *GetUserPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetUserPipelineRequestMultiError(errors)
	}

	return nil
}

// GetUserPipelineRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPipelineRequestMultiError) AllErrors() []error { return m }

// GetUserPipelineRequestValidationError is the validation error returned by
// GetUserPipelineRequest.Validate if the designated constraints aren't met.
type GetUserPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPipelineRequestValidationError) ErrorName() string {
	return "GetUserPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPipelineRequestValidationError{}

// Validate checks the field values on GetUserPipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserPipelineResponseMultiError, or nil if none found.
func (m *GetUserPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserPipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserPipelineResponseMultiError(errors)
	}

	return nil
}

// GetUserPipelineResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPipelineResponseMultiError) AllErrors() []error { return m }

// GetUserPipelineResponseValidationError is the validation error returned by
// GetUserPipelineResponse.Validate if the designated constraints aren't met.
type GetUserPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPipelineResponseValidationError) ErrorName() string {
	return "GetUserPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPipelineResponseValidationError{}

// Validate checks the field values on UpdateUserPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserPipelineRequestMultiError, or nil if none found.
func (m *UpdateUserPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserPipelineRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserPipelineRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserPipelineRequestValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserPipelineRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserPipelineRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserPipelineRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserPipelineRequestMultiError(errors)
	}

	return nil
}

// UpdateUserPipelineRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserPipelineRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateUserPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPipelineRequestMultiError) AllErrors() []error { return m }

// UpdateUserPipelineRequestValidationError is the validation error returned by
// UpdateUserPipelineRequest.Validate if the designated constraints aren't met.
type UpdateUserPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPipelineRequestValidationError) ErrorName() string {
	return "UpdateUserPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPipelineRequestValidationError{}

// Validate checks the field values on UpdateUserPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserPipelineResponseMultiError, or nil if none found.
func (m *UpdateUserPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserPipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserPipelineResponseMultiError(errors)
	}

	return nil
}

// UpdateUserPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateUserPipelineResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPipelineResponseMultiError) AllErrors() []error { return m }

// UpdateUserPipelineResponseValidationError is the validation error returned
// by UpdateUserPipelineResponse.Validate if the designated constraints aren't met.
type UpdateUserPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPipelineResponseValidationError) ErrorName() string {
	return "UpdateUserPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPipelineResponseValidationError{}

// Validate checks the field values on DeleteUserPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserPipelineRequestMultiError, or nil if none found.
func (m *DeleteUserPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteUserPipelineRequestMultiError(errors)
	}

	return nil
}

// DeleteUserPipelineRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserPipelineRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteUserPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserPipelineRequestMultiError) AllErrors() []error { return m }

// DeleteUserPipelineRequestValidationError is the validation error returned by
// DeleteUserPipelineRequest.Validate if the designated constraints aren't met.
type DeleteUserPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserPipelineRequestValidationError) ErrorName() string {
	return "DeleteUserPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserPipelineRequestValidationError{}

// Validate checks the field values on DeleteUserPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserPipelineResponseMultiError, or nil if none found.
func (m *DeleteUserPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserPipelineResponseMultiError(errors)
	}

	return nil
}

// DeleteUserPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteUserPipelineResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteUserPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserPipelineResponseMultiError) AllErrors() []error { return m }

// DeleteUserPipelineResponseValidationError is the validation error returned
// by DeleteUserPipelineResponse.Validate if the designated constraints aren't met.
type DeleteUserPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserPipelineResponseValidationError) ErrorName() string {
	return "DeleteUserPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserPipelineResponseValidationError{}

// Validate checks the field values on ErrPipelineValidation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ErrPipelineValidation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrPipelineValidation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ErrPipelineValidationMultiError, or nil if none found.
func (m *ErrPipelineValidation) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrPipelineValidation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Location

	// no validation rules for Error

	if len(errors) > 0 {
		return ErrPipelineValidationMultiError(errors)
	}

	return nil
}

// ErrPipelineValidationMultiError is an error wrapping multiple validation
// errors returned by ErrPipelineValidation.ValidateAll() if the designated
// constraints aren't met.
type ErrPipelineValidationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrPipelineValidationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrPipelineValidationMultiError) AllErrors() []error { return m }

// ErrPipelineValidationValidationError is the validation error returned by
// ErrPipelineValidation.Validate if the designated constraints aren't met.
type ErrPipelineValidationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrPipelineValidationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrPipelineValidationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrPipelineValidationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrPipelineValidationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrPipelineValidationValidationError) ErrorName() string {
	return "ErrPipelineValidationValidationError"
}

// Error satisfies the builtin error interface
func (e ErrPipelineValidationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrPipelineValidation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrPipelineValidationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrPipelineValidationValidationError{}

// Validate checks the field values on ValidateUserPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateUserPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateUserPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateUserPipelineRequestMultiError, or nil if none found.
func (m *ValidateUserPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateUserPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ValidateUserPipelineRequestMultiError(errors)
	}

	return nil
}

// ValidateUserPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by ValidateUserPipelineRequest.ValidateAll() if
// the designated constraints aren't met.
type ValidateUserPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateUserPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateUserPipelineRequestMultiError) AllErrors() []error { return m }

// ValidateUserPipelineRequestValidationError is the validation error returned
// by ValidateUserPipelineRequest.Validate if the designated constraints
// aren't met.
type ValidateUserPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateUserPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateUserPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateUserPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateUserPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateUserPipelineRequestValidationError) ErrorName() string {
	return "ValidateUserPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateUserPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateUserPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateUserPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateUserPipelineRequestValidationError{}

// Validate checks the field values on ValidateUserPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateUserPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateUserPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateUserPipelineResponseMultiError, or nil if none found.
func (m *ValidateUserPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateUserPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidateUserPipelineResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidateUserPipelineResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateUserPipelineResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ValidateUserPipelineResponseMultiError(errors)
	}

	return nil
}

// ValidateUserPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by ValidateUserPipelineResponse.ValidateAll() if
// the designated constraints aren't met.
type ValidateUserPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateUserPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateUserPipelineResponseMultiError) AllErrors() []error { return m }

// ValidateUserPipelineResponseValidationError is the validation error returned
// by ValidateUserPipelineResponse.Validate if the designated constraints
// aren't met.
type ValidateUserPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateUserPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateUserPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateUserPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateUserPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateUserPipelineResponseValidationError) ErrorName() string {
	return "ValidateUserPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateUserPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateUserPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateUserPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateUserPipelineResponseValidationError{}

// Validate checks the field values on RenameUserPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameUserPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameUserPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameUserPipelineRequestMultiError, or nil if none found.
func (m *RenameUserPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameUserPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for NewPipelineId

	if len(errors) > 0 {
		return RenameUserPipelineRequestMultiError(errors)
	}

	return nil
}

// RenameUserPipelineRequestMultiError is an error wrapping multiple validation
// errors returned by RenameUserPipelineRequest.ValidateAll() if the
// designated constraints aren't met.
type RenameUserPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameUserPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameUserPipelineRequestMultiError) AllErrors() []error { return m }

// RenameUserPipelineRequestValidationError is the validation error returned by
// RenameUserPipelineRequest.Validate if the designated constraints aren't met.
type RenameUserPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameUserPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameUserPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameUserPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameUserPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameUserPipelineRequestValidationError) ErrorName() string {
	return "RenameUserPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenameUserPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameUserPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameUserPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameUserPipelineRequestValidationError{}

// Validate checks the field values on RenameUserPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameUserPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameUserPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameUserPipelineResponseMultiError, or nil if none found.
func (m *RenameUserPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameUserPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenameUserPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenameUserPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenameUserPipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenameUserPipelineResponseMultiError(errors)
	}

	return nil
}

// RenameUserPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by RenameUserPipelineResponse.ValidateAll() if
// the designated constraints aren't met.
type RenameUserPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameUserPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameUserPipelineResponseMultiError) AllErrors() []error { return m }

// RenameUserPipelineResponseValidationError is the validation error returned
// by RenameUserPipelineResponse.Validate if the designated constraints aren't met.
type RenameUserPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameUserPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameUserPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameUserPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameUserPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameUserPipelineResponseValidationError) ErrorName() string {
	return "RenameUserPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenameUserPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameUserPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameUserPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameUserPipelineResponseValidationError{}

// Validate checks the field values on CloneUserPipelineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloneUserPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneUserPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloneUserPipelineRequestMultiError, or nil if none found.
func (m *CloneUserPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneUserPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Target

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetSharing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloneUserPipelineRequestValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloneUserPipelineRequestValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloneUserPipelineRequestValidationError{
				field:  "Sharing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloneUserPipelineRequestMultiError(errors)
	}

	return nil
}

// CloneUserPipelineRequestMultiError is an error wrapping multiple validation
// errors returned by CloneUserPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type CloneUserPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneUserPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneUserPipelineRequestMultiError) AllErrors() []error { return m }

// CloneUserPipelineRequestValidationError is the validation error returned by
// CloneUserPipelineRequest.Validate if the designated constraints aren't met.
type CloneUserPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneUserPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneUserPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneUserPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneUserPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneUserPipelineRequestValidationError) ErrorName() string {
	return "CloneUserPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloneUserPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneUserPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneUserPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneUserPipelineRequestValidationError{}

// Validate checks the field values on CloneUserPipelineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloneUserPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneUserPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloneUserPipelineResponseMultiError, or nil if none found.
func (m *CloneUserPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneUserPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloneUserPipelineResponseMultiError(errors)
	}

	return nil
}

// CloneUserPipelineResponseMultiError is an error wrapping multiple validation
// errors returned by CloneUserPipelineResponse.ValidateAll() if the
// designated constraints aren't met.
type CloneUserPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneUserPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneUserPipelineResponseMultiError) AllErrors() []error { return m }

// CloneUserPipelineResponseValidationError is the validation error returned by
// CloneUserPipelineResponse.Validate if the designated constraints aren't met.
type CloneUserPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneUserPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneUserPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneUserPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneUserPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneUserPipelineResponseValidationError) ErrorName() string {
	return "CloneUserPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloneUserPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneUserPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneUserPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneUserPipelineResponseValidationError{}

// Validate checks the field values on CloneUserPipelineReleaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloneUserPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneUserPipelineReleaseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloneUserPipelineReleaseRequestMultiError, or nil if none found.
func (m *CloneUserPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneUserPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Target

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetSharing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloneUserPipelineReleaseRequestValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloneUserPipelineReleaseRequestValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloneUserPipelineReleaseRequestValidationError{
				field:  "Sharing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloneUserPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// CloneUserPipelineReleaseRequestMultiError is an error wrapping multiple
// validation errors returned by CloneUserPipelineReleaseRequest.ValidateAll()
// if the designated constraints aren't met.
type CloneUserPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneUserPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneUserPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// CloneUserPipelineReleaseRequestValidationError is the validation error
// returned by CloneUserPipelineReleaseRequest.Validate if the designated
// constraints aren't met.
type CloneUserPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneUserPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneUserPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneUserPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneUserPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneUserPipelineReleaseRequestValidationError) ErrorName() string {
	return "CloneUserPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloneUserPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneUserPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneUserPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneUserPipelineReleaseRequestValidationError{}

// Validate checks the field values on CloneUserPipelineReleaseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloneUserPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneUserPipelineReleaseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloneUserPipelineReleaseResponseMultiError, or nil if none found.
func (m *CloneUserPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneUserPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloneUserPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// CloneUserPipelineReleaseResponseMultiError is an error wrapping multiple
// validation errors returned by
// CloneUserPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type CloneUserPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneUserPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneUserPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// CloneUserPipelineReleaseResponseValidationError is the validation error
// returned by CloneUserPipelineReleaseResponse.Validate if the designated
// constraints aren't met.
type CloneUserPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneUserPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneUserPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneUserPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneUserPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneUserPipelineReleaseResponseValidationError) ErrorName() string {
	return "CloneUserPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloneUserPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneUserPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneUserPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneUserPipelineReleaseResponseValidationError{}

// Validate checks the field values on TriggerUserPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerUserPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerUserPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerUserPipelineRequestMultiError, or nil if none found.
func (m *TriggerUserPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerUserPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserPipelineRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserPipelineRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserPipelineRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserPipelineRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserPipelineRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserPipelineRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerUserPipelineRequestMultiError(errors)
	}

	return nil
}

// TriggerUserPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by TriggerUserPipelineRequest.ValidateAll() if
// the designated constraints aren't met.
type TriggerUserPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerUserPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerUserPipelineRequestMultiError) AllErrors() []error { return m }

// TriggerUserPipelineRequestValidationError is the validation error returned
// by TriggerUserPipelineRequest.Validate if the designated constraints aren't met.
type TriggerUserPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerUserPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerUserPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerUserPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerUserPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerUserPipelineRequestValidationError) ErrorName() string {
	return "TriggerUserPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerUserPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerUserPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerUserPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerUserPipelineRequestValidationError{}

// Validate checks the field values on TriggerUserPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerUserPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerUserPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerUserPipelineResponseMultiError, or nil if none found.
func (m *TriggerUserPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerUserPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserPipelineResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserPipelineResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserPipelineResponseValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerUserPipelineResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerUserPipelineResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerUserPipelineResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerUserPipelineResponseMultiError(errors)
	}

	return nil
}

// TriggerUserPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by TriggerUserPipelineResponse.ValidateAll() if
// the designated constraints aren't met.
type TriggerUserPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerUserPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerUserPipelineResponseMultiError) AllErrors() []error { return m }

// TriggerUserPipelineResponseValidationError is the validation error returned
// by TriggerUserPipelineResponse.Validate if the designated constraints
// aren't met.
type TriggerUserPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerUserPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerUserPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerUserPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerUserPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerUserPipelineResponseValidationError) ErrorName() string {
	return "TriggerUserPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerUserPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerUserPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerUserPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerUserPipelineResponseValidationError{}

// Validate checks the field values on TriggerUserPipelineWithStreamRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerUserPipelineWithStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerUserPipelineWithStreamRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerUserPipelineWithStreamRequestMultiError, or nil if none found.
func (m *TriggerUserPipelineWithStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerUserPipelineWithStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserPipelineWithStreamRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserPipelineWithStreamRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserPipelineWithStreamRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserPipelineWithStreamRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserPipelineWithStreamRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserPipelineWithStreamRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerUserPipelineWithStreamRequestMultiError(errors)
	}

	return nil
}

// TriggerUserPipelineWithStreamRequestMultiError is an error wrapping multiple
// validation errors returned by
// TriggerUserPipelineWithStreamRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerUserPipelineWithStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerUserPipelineWithStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerUserPipelineWithStreamRequestMultiError) AllErrors() []error { return m }

// TriggerUserPipelineWithStreamRequestValidationError is the validation error
// returned by TriggerUserPipelineWithStreamRequest.Validate if the designated
// constraints aren't met.
type TriggerUserPipelineWithStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerUserPipelineWithStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerUserPipelineWithStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerUserPipelineWithStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerUserPipelineWithStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerUserPipelineWithStreamRequestValidationError) ErrorName() string {
	return "TriggerUserPipelineWithStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerUserPipelineWithStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerUserPipelineWithStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerUserPipelineWithStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerUserPipelineWithStreamRequestValidationError{}

// Validate checks the field values on TriggerUserPipelineWithStreamResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerUserPipelineWithStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerUserPipelineWithStreamResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerUserPipelineWithStreamResponseMultiError, or nil if none found.
func (m *TriggerUserPipelineWithStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerUserPipelineWithStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserPipelineWithStreamResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserPipelineWithStreamResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserPipelineWithStreamResponseValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerUserPipelineWithStreamResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerUserPipelineWithStreamResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerUserPipelineWithStreamResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerUserPipelineWithStreamResponseMultiError(errors)
	}

	return nil
}

// TriggerUserPipelineWithStreamResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerUserPipelineWithStreamResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerUserPipelineWithStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerUserPipelineWithStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerUserPipelineWithStreamResponseMultiError) AllErrors() []error { return m }

// TriggerUserPipelineWithStreamResponseValidationError is the validation error
// returned by TriggerUserPipelineWithStreamResponse.Validate if the
// designated constraints aren't met.
type TriggerUserPipelineWithStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerUserPipelineWithStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerUserPipelineWithStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerUserPipelineWithStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerUserPipelineWithStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerUserPipelineWithStreamResponseValidationError) ErrorName() string {
	return "TriggerUserPipelineWithStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerUserPipelineWithStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerUserPipelineWithStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerUserPipelineWithStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerUserPipelineWithStreamResponseValidationError{}

// Validate checks the field values on TriggerData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TriggerDataMultiError, or
// nil if none found.
func (m *TriggerData) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVariable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerDataValidationError{
					field:  "Variable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerDataValidationError{
					field:  "Variable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVariable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerDataValidationError{
				field:  "Variable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Secret

	if len(errors) > 0 {
		return TriggerDataMultiError(errors)
	}

	return nil
}

// TriggerDataMultiError is an error wrapping multiple validation errors
// returned by TriggerData.ValidateAll() if the designated constraints aren't met.
type TriggerDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerDataMultiError) AllErrors() []error { return m }

// TriggerDataValidationError is the validation error returned by
// TriggerData.Validate if the designated constraints aren't met.
type TriggerDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerDataValidationError) ErrorName() string { return "TriggerDataValidationError" }

// Error satisfies the builtin error interface
func (e TriggerDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerDataValidationError{}

// Validate checks the field values on TriggerAsyncUserPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerAsyncUserPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerAsyncUserPipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggerAsyncUserPipelineRequestMultiError, or nil if none found.
func (m *TriggerAsyncUserPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncUserPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncUserPipelineRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncUserPipelineRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncUserPipelineRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncUserPipelineRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncUserPipelineRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncUserPipelineRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerAsyncUserPipelineRequestMultiError(errors)
	}

	return nil
}

// TriggerAsyncUserPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by TriggerAsyncUserPipelineRequest.ValidateAll()
// if the designated constraints aren't met.
type TriggerAsyncUserPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncUserPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncUserPipelineRequestMultiError) AllErrors() []error { return m }

// TriggerAsyncUserPipelineRequestValidationError is the validation error
// returned by TriggerAsyncUserPipelineRequest.Validate if the designated
// constraints aren't met.
type TriggerAsyncUserPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncUserPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncUserPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncUserPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncUserPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncUserPipelineRequestValidationError) ErrorName() string {
	return "TriggerAsyncUserPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncUserPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncUserPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncUserPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncUserPipelineRequestValidationError{}

// Validate checks the field values on TriggerAsyncUserPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TriggerAsyncUserPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerAsyncUserPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggerAsyncUserPipelineResponseMultiError, or nil if none found.
func (m *TriggerAsyncUserPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncUserPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerAsyncUserPipelineResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerAsyncUserPipelineResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerAsyncUserPipelineResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerAsyncUserPipelineResponseMultiError(errors)
	}

	return nil
}

// TriggerAsyncUserPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// TriggerAsyncUserPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncUserPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncUserPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncUserPipelineResponseMultiError) AllErrors() []error { return m }

// TriggerAsyncUserPipelineResponseValidationError is the validation error
// returned by TriggerAsyncUserPipelineResponse.Validate if the designated
// constraints aren't met.
type TriggerAsyncUserPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncUserPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncUserPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncUserPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncUserPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncUserPipelineResponseValidationError) ErrorName() string {
	return "TriggerAsyncUserPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncUserPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncUserPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncUserPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncUserPipelineResponseValidationError{}

// Validate checks the field values on CreateUserPipelineReleaseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateUserPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserPipelineReleaseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateUserPipelineReleaseRequestMultiError, or nil if none found.
func (m *CreateUserPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserPipelineReleaseRequestValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserPipelineReleaseRequestValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserPipelineReleaseRequestValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Parent

	if len(errors) > 0 {
		return CreateUserPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// CreateUserPipelineReleaseRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateUserPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// CreateUserPipelineReleaseRequestValidationError is the validation error
// returned by CreateUserPipelineReleaseRequest.Validate if the designated
// constraints aren't met.
type CreateUserPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserPipelineReleaseRequestValidationError) ErrorName() string {
	return "CreateUserPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserPipelineReleaseRequestValidationError{}

// Validate checks the field values on CreateUserPipelineReleaseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateUserPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserPipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateUserPipelineReleaseResponseMultiError, or nil if none found.
func (m *CreateUserPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserPipelineReleaseResponseValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// CreateUserPipelineReleaseResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateUserPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateUserPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// CreateUserPipelineReleaseResponseValidationError is the validation error
// returned by CreateUserPipelineReleaseResponse.Validate if the designated
// constraints aren't met.
type CreateUserPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserPipelineReleaseResponseValidationError) ErrorName() string {
	return "CreateUserPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserPipelineReleaseResponseValidationError{}

// Validate checks the field values on ListUserPipelineReleasesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserPipelineReleasesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserPipelineReleasesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUserPipelineReleasesRequestMultiError, or nil if none found.
func (m *ListUserPipelineReleasesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserPipelineReleasesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.ShowDeleted != nil {
		// no validation rules for ShowDeleted
	}

	if len(errors) > 0 {
		return ListUserPipelineReleasesRequestMultiError(errors)
	}

	return nil
}

// ListUserPipelineReleasesRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserPipelineReleasesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListUserPipelineReleasesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserPipelineReleasesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserPipelineReleasesRequestMultiError) AllErrors() []error { return m }

// ListUserPipelineReleasesRequestValidationError is the validation error
// returned by ListUserPipelineReleasesRequest.Validate if the designated
// constraints aren't met.
type ListUserPipelineReleasesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserPipelineReleasesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserPipelineReleasesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserPipelineReleasesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserPipelineReleasesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserPipelineReleasesRequestValidationError) ErrorName() string {
	return "ListUserPipelineReleasesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserPipelineReleasesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserPipelineReleasesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserPipelineReleasesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserPipelineReleasesRequestValidationError{}

// Validate checks the field values on ListUserPipelineReleasesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListUserPipelineReleasesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserPipelineReleasesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUserPipelineReleasesResponseMultiError, or nil if none found.
func (m *ListUserPipelineReleasesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserPipelineReleasesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReleases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserPipelineReleasesResponseValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserPipelineReleasesResponseValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserPipelineReleasesResponseValidationError{
					field:  fmt.Sprintf("Releases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListUserPipelineReleasesResponseMultiError(errors)
	}

	return nil
}

// ListUserPipelineReleasesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListUserPipelineReleasesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserPipelineReleasesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserPipelineReleasesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserPipelineReleasesResponseMultiError) AllErrors() []error { return m }

// ListUserPipelineReleasesResponseValidationError is the validation error
// returned by ListUserPipelineReleasesResponse.Validate if the designated
// constraints aren't met.
type ListUserPipelineReleasesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserPipelineReleasesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserPipelineReleasesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserPipelineReleasesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserPipelineReleasesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserPipelineReleasesResponseValidationError) ErrorName() string {
	return "ListUserPipelineReleasesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserPipelineReleasesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserPipelineReleasesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserPipelineReleasesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserPipelineReleasesResponseValidationError{}

// Validate checks the field values on GetUserPipelineReleaseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPipelineReleaseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserPipelineReleaseRequestMultiError, or nil if none found.
func (m *GetUserPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetUserPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// GetUserPipelineReleaseRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserPipelineReleaseRequest.ValidateAll()
// if the designated constraints aren't met.
type GetUserPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// GetUserPipelineReleaseRequestValidationError is the validation error
// returned by GetUserPipelineReleaseRequest.Validate if the designated
// constraints aren't met.
type GetUserPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPipelineReleaseRequestValidationError) ErrorName() string {
	return "GetUserPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPipelineReleaseRequestValidationError{}

// Validate checks the field values on GetUserPipelineReleaseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserPipelineReleaseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserPipelineReleaseResponseMultiError, or nil if none found.
func (m *GetUserPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserPipelineReleaseResponseValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// GetUserPipelineReleaseResponseMultiError is an error wrapping multiple
// validation errors returned by GetUserPipelineReleaseResponse.ValidateAll()
// if the designated constraints aren't met.
type GetUserPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// GetUserPipelineReleaseResponseValidationError is the validation error
// returned by GetUserPipelineReleaseResponse.Validate if the designated
// constraints aren't met.
type GetUserPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserPipelineReleaseResponseValidationError) ErrorName() string {
	return "GetUserPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserPipelineReleaseResponseValidationError{}

// Validate checks the field values on UpdateUserPipelineReleaseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateUserPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPipelineReleaseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateUserPipelineReleaseRequestMultiError, or nil if none found.
func (m *UpdateUserPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserPipelineReleaseRequestValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserPipelineReleaseRequestValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserPipelineReleaseRequestValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserPipelineReleaseRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserPipelineReleaseRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserPipelineReleaseRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// UpdateUserPipelineReleaseRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateUserPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// UpdateUserPipelineReleaseRequestValidationError is the validation error
// returned by UpdateUserPipelineReleaseRequest.Validate if the designated
// constraints aren't met.
type UpdateUserPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPipelineReleaseRequestValidationError) ErrorName() string {
	return "UpdateUserPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPipelineReleaseRequestValidationError{}

// Validate checks the field values on UpdateUserPipelineReleaseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateUserPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserPipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateUserPipelineReleaseResponseMultiError, or nil if none found.
func (m *UpdateUserPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserPipelineReleaseResponseValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// UpdateUserPipelineReleaseResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateUserPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// UpdateUserPipelineReleaseResponseValidationError is the validation error
// returned by UpdateUserPipelineReleaseResponse.Validate if the designated
// constraints aren't met.
type UpdateUserPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserPipelineReleaseResponseValidationError) ErrorName() string {
	return "UpdateUserPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserPipelineReleaseResponseValidationError{}

// Validate checks the field values on DeleteUserPipelineReleaseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteUserPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserPipelineReleaseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteUserPipelineReleaseRequestMultiError, or nil if none found.
func (m *DeleteUserPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteUserPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// DeleteUserPipelineReleaseRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteUserPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// DeleteUserPipelineReleaseRequestValidationError is the validation error
// returned by DeleteUserPipelineReleaseRequest.Validate if the designated
// constraints aren't met.
type DeleteUserPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserPipelineReleaseRequestValidationError) ErrorName() string {
	return "DeleteUserPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserPipelineReleaseRequestValidationError{}

// Validate checks the field values on DeleteUserPipelineReleaseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteUserPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserPipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteUserPipelineReleaseResponseMultiError, or nil if none found.
func (m *DeleteUserPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// DeleteUserPipelineReleaseResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteUserPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// DeleteUserPipelineReleaseResponseValidationError is the validation error
// returned by DeleteUserPipelineReleaseResponse.Validate if the designated
// constraints aren't met.
type DeleteUserPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserPipelineReleaseResponseValidationError) ErrorName() string {
	return "DeleteUserPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserPipelineReleaseResponseValidationError{}

// Validate checks the field values on RestoreUserPipelineReleaseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RestoreUserPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreUserPipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RestoreUserPipelineReleaseRequestMultiError, or nil if none found.
func (m *RestoreUserPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreUserPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return RestoreUserPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// RestoreUserPipelineReleaseRequestMultiError is an error wrapping multiple
// validation errors returned by
// RestoreUserPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type RestoreUserPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreUserPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreUserPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// RestoreUserPipelineReleaseRequestValidationError is the validation error
// returned by RestoreUserPipelineReleaseRequest.Validate if the designated
// constraints aren't met.
type RestoreUserPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreUserPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreUserPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreUserPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreUserPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreUserPipelineReleaseRequestValidationError) ErrorName() string {
	return "RestoreUserPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreUserPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreUserPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreUserPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreUserPipelineReleaseRequestValidationError{}

// Validate checks the field values on RestoreUserPipelineReleaseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RestoreUserPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestoreUserPipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RestoreUserPipelineReleaseResponseMultiError, or nil if none found.
func (m *RestoreUserPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreUserPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreUserPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreUserPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreUserPipelineReleaseResponseValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RestoreUserPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// RestoreUserPipelineReleaseResponseMultiError is an error wrapping multiple
// validation errors returned by
// RestoreUserPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type RestoreUserPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreUserPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreUserPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// RestoreUserPipelineReleaseResponseValidationError is the validation error
// returned by RestoreUserPipelineReleaseResponse.Validate if the designated
// constraints aren't met.
type RestoreUserPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreUserPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreUserPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreUserPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreUserPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreUserPipelineReleaseResponseValidationError) ErrorName() string {
	return "RestoreUserPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreUserPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreUserPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreUserPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreUserPipelineReleaseResponseValidationError{}

// Validate checks the field values on RenameUserPipelineReleaseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RenameUserPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameUserPipelineReleaseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenameUserPipelineReleaseRequestMultiError, or nil if none found.
func (m *RenameUserPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameUserPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for NewPipelineReleaseId

	if len(errors) > 0 {
		return RenameUserPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// RenameUserPipelineReleaseRequestMultiError is an error wrapping multiple
// validation errors returned by
// RenameUserPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type RenameUserPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameUserPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameUserPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// RenameUserPipelineReleaseRequestValidationError is the validation error
// returned by RenameUserPipelineReleaseRequest.Validate if the designated
// constraints aren't met.
type RenameUserPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameUserPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameUserPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameUserPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameUserPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameUserPipelineReleaseRequestValidationError) ErrorName() string {
	return "RenameUserPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenameUserPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameUserPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameUserPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameUserPipelineReleaseRequestValidationError{}

// Validate checks the field values on RenameUserPipelineReleaseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RenameUserPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameUserPipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RenameUserPipelineReleaseResponseMultiError, or nil if none found.
func (m *RenameUserPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameUserPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenameUserPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenameUserPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenameUserPipelineReleaseResponseValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenameUserPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// RenameUserPipelineReleaseResponseMultiError is an error wrapping multiple
// validation errors returned by
// RenameUserPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type RenameUserPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameUserPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameUserPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// RenameUserPipelineReleaseResponseValidationError is the validation error
// returned by RenameUserPipelineReleaseResponse.Validate if the designated
// constraints aren't met.
type RenameUserPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameUserPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameUserPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameUserPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameUserPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameUserPipelineReleaseResponseValidationError) ErrorName() string {
	return "RenameUserPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenameUserPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameUserPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameUserPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameUserPipelineReleaseResponseValidationError{}

// Validate checks the field values on TriggerUserPipelineReleaseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TriggerUserPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerUserPipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerUserPipelineReleaseRequestMultiError, or nil if none found.
func (m *TriggerUserPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerUserPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserPipelineReleaseRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserPipelineReleaseRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerUserPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// TriggerUserPipelineReleaseRequestMultiError is an error wrapping multiple
// validation errors returned by
// TriggerUserPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerUserPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerUserPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerUserPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// TriggerUserPipelineReleaseRequestValidationError is the validation error
// returned by TriggerUserPipelineReleaseRequest.Validate if the designated
// constraints aren't met.
type TriggerUserPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerUserPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerUserPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerUserPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerUserPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerUserPipelineReleaseRequestValidationError) ErrorName() string {
	return "TriggerUserPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerUserPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerUserPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerUserPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerUserPipelineReleaseRequestValidationError{}

// Validate checks the field values on TriggerUserPipelineReleaseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TriggerUserPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerUserPipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerUserPipelineReleaseResponseMultiError, or nil if none found.
func (m *TriggerUserPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerUserPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserPipelineReleaseResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserPipelineReleaseResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserPipelineReleaseResponseValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerUserPipelineReleaseResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerUserPipelineReleaseResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerUserPipelineReleaseResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerUserPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// TriggerUserPipelineReleaseResponseMultiError is an error wrapping multiple
// validation errors returned by
// TriggerUserPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerUserPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerUserPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerUserPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// TriggerUserPipelineReleaseResponseValidationError is the validation error
// returned by TriggerUserPipelineReleaseResponse.Validate if the designated
// constraints aren't met.
type TriggerUserPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerUserPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerUserPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerUserPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerUserPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerUserPipelineReleaseResponseValidationError) ErrorName() string {
	return "TriggerUserPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerUserPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerUserPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerUserPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerUserPipelineReleaseResponseValidationError{}

// Validate checks the field values on TriggerAsyncUserPipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerAsyncUserPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerAsyncUserPipelineReleaseRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TriggerAsyncUserPipelineReleaseRequestMultiError, or nil if none found.
func (m *TriggerAsyncUserPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncUserPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncUserPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncUserPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncUserPipelineReleaseRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncUserPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncUserPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncUserPipelineReleaseRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerAsyncUserPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// TriggerAsyncUserPipelineReleaseRequestMultiError is an error wrapping
// multiple validation errors returned by
// TriggerAsyncUserPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncUserPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncUserPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncUserPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// TriggerAsyncUserPipelineReleaseRequestValidationError is the validation
// error returned by TriggerAsyncUserPipelineReleaseRequest.Validate if the
// designated constraints aren't met.
type TriggerAsyncUserPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncUserPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncUserPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncUserPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncUserPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncUserPipelineReleaseRequestValidationError) ErrorName() string {
	return "TriggerAsyncUserPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncUserPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncUserPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncUserPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncUserPipelineReleaseRequestValidationError{}

// Validate checks the field values on TriggerAsyncUserPipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerAsyncUserPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerAsyncUserPipelineReleaseResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TriggerAsyncUserPipelineReleaseResponseMultiError, or nil if none found.
func (m *TriggerAsyncUserPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncUserPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerAsyncUserPipelineReleaseResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerAsyncUserPipelineReleaseResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerAsyncUserPipelineReleaseResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerAsyncUserPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// TriggerAsyncUserPipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerAsyncUserPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncUserPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncUserPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncUserPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// TriggerAsyncUserPipelineReleaseResponseValidationError is the validation
// error returned by TriggerAsyncUserPipelineReleaseResponse.Validate if the
// designated constraints aren't met.
type TriggerAsyncUserPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncUserPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncUserPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncUserPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncUserPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncUserPipelineReleaseResponseValidationError) ErrorName() string {
	return "TriggerAsyncUserPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncUserPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncUserPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncUserPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncUserPipelineReleaseResponseValidationError{}

// Validate checks the field values on CreateOrganizationPipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrganizationPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationPipelineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrganizationPipelineRequestMultiError, or nil if none found.
func (m *CreateOrganizationPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationPipelineRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationPipelineRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationPipelineRequestValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Parent

	if len(errors) > 0 {
		return CreateOrganizationPipelineRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrganizationPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationPipelineRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationPipelineRequestValidationError is the validation error
// returned by CreateOrganizationPipelineRequest.Validate if the designated
// constraints aren't met.
type CreateOrganizationPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationPipelineRequestValidationError) ErrorName() string {
	return "CreateOrganizationPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationPipelineRequestValidationError{}

// Validate checks the field values on CreateOrganizationPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrganizationPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrganizationPipelineResponseMultiError, or nil if none found.
func (m *CreateOrganizationPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationPipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationPipelineResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrganizationPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationPipelineResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationPipelineResponseValidationError is the validation error
// returned by CreateOrganizationPipelineResponse.Validate if the designated
// constraints aren't met.
type CreateOrganizationPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationPipelineResponseValidationError) ErrorName() string {
	return "CreateOrganizationPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationPipelineResponseValidationError{}

// Validate checks the field values on ListOrganizationPipelinesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationPipelinesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationPipelinesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationPipelinesRequestMultiError, or nil if none found.
func (m *ListOrganizationPipelinesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationPipelinesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.ShowDeleted != nil {
		// no validation rules for ShowDeleted
	}

	if m.Visibility != nil {
		// no validation rules for Visibility
	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if len(errors) > 0 {
		return ListOrganizationPipelinesRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationPipelinesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationPipelinesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationPipelinesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationPipelinesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationPipelinesRequestMultiError) AllErrors() []error { return m }

// ListOrganizationPipelinesRequestValidationError is the validation error
// returned by ListOrganizationPipelinesRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationPipelinesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationPipelinesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationPipelinesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationPipelinesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationPipelinesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationPipelinesRequestValidationError) ErrorName() string {
	return "ListOrganizationPipelinesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationPipelinesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationPipelinesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationPipelinesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationPipelinesRequestValidationError{}

// Validate checks the field values on ListOrganizationPipelinesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationPipelinesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationPipelinesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationPipelinesResponseMultiError, or nil if none found.
func (m *ListOrganizationPipelinesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationPipelinesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipelines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationPipelinesResponseValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationPipelinesResponseValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationPipelinesResponseValidationError{
					field:  fmt.Sprintf("Pipelines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListOrganizationPipelinesResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationPipelinesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationPipelinesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationPipelinesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationPipelinesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationPipelinesResponseMultiError) AllErrors() []error { return m }

// ListOrganizationPipelinesResponseValidationError is the validation error
// returned by ListOrganizationPipelinesResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationPipelinesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationPipelinesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationPipelinesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationPipelinesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationPipelinesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationPipelinesResponseValidationError) ErrorName() string {
	return "ListOrganizationPipelinesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationPipelinesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationPipelinesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationPipelinesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationPipelinesResponseValidationError{}

// Validate checks the field values on GetOrganizationPipelineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationPipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationPipelineRequestMultiError, or nil if none found.
func (m *GetOrganizationPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetOrganizationPipelineRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationPipelineRequest.ValidateAll()
// if the designated constraints aren't met.
type GetOrganizationPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationPipelineRequestMultiError) AllErrors() []error { return m }

// GetOrganizationPipelineRequestValidationError is the validation error
// returned by GetOrganizationPipelineRequest.Validate if the designated
// constraints aren't met.
type GetOrganizationPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationPipelineRequestValidationError) ErrorName() string {
	return "GetOrganizationPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationPipelineRequestValidationError{}

// Validate checks the field values on GetOrganizationPipelineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationPipelineResponseMultiError, or nil if none found.
func (m *GetOrganizationPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationPipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationPipelineResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationPipelineResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOrganizationPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationPipelineResponseMultiError) AllErrors() []error { return m }

// GetOrganizationPipelineResponseValidationError is the validation error
// returned by GetOrganizationPipelineResponse.Validate if the designated
// constraints aren't met.
type GetOrganizationPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationPipelineResponseValidationError) ErrorName() string {
	return "GetOrganizationPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationPipelineResponseValidationError{}

// Validate checks the field values on UpdateOrganizationPipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateOrganizationPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationPipelineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateOrganizationPipelineRequestMultiError, or nil if none found.
func (m *UpdateOrganizationPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationPipelineRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationPipelineRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationPipelineRequestValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationPipelineRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationPipelineRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationPipelineRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationPipelineRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateOrganizationPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrganizationPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationPipelineRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationPipelineRequestValidationError is the validation error
// returned by UpdateOrganizationPipelineRequest.Validate if the designated
// constraints aren't met.
type UpdateOrganizationPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationPipelineRequestValidationError) ErrorName() string {
	return "UpdateOrganizationPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationPipelineRequestValidationError{}

// Validate checks the field values on UpdateOrganizationPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateOrganizationPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateOrganizationPipelineResponseMultiError, or nil if none found.
func (m *UpdateOrganizationPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationPipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationPipelineResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateOrganizationPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrganizationPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationPipelineResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationPipelineResponseValidationError is the validation error
// returned by UpdateOrganizationPipelineResponse.Validate if the designated
// constraints aren't met.
type UpdateOrganizationPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationPipelineResponseValidationError) ErrorName() string {
	return "UpdateOrganizationPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationPipelineResponseValidationError{}

// Validate checks the field values on DeleteOrganizationPipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteOrganizationPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationPipelineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationPipelineRequestMultiError, or nil if none found.
func (m *DeleteOrganizationPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteOrganizationPipelineRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteOrganizationPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganizationPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationPipelineRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationPipelineRequestValidationError is the validation error
// returned by DeleteOrganizationPipelineRequest.Validate if the designated
// constraints aren't met.
type DeleteOrganizationPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationPipelineRequestValidationError) ErrorName() string {
	return "DeleteOrganizationPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationPipelineRequestValidationError{}

// Validate checks the field values on DeleteOrganizationPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteOrganizationPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationPipelineResponseMultiError, or nil if none found.
func (m *DeleteOrganizationPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationPipelineResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteOrganizationPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganizationPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationPipelineResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationPipelineResponseValidationError is the validation error
// returned by DeleteOrganizationPipelineResponse.Validate if the designated
// constraints aren't met.
type DeleteOrganizationPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationPipelineResponseValidationError) ErrorName() string {
	return "DeleteOrganizationPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationPipelineResponseValidationError{}

// Validate checks the field values on ValidateOrganizationPipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ValidateOrganizationPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateOrganizationPipelineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ValidateOrganizationPipelineRequestMultiError, or nil if none found.
func (m *ValidateOrganizationPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateOrganizationPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ValidateOrganizationPipelineRequestMultiError(errors)
	}

	return nil
}

// ValidateOrganizationPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by
// ValidateOrganizationPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type ValidateOrganizationPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateOrganizationPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateOrganizationPipelineRequestMultiError) AllErrors() []error { return m }

// ValidateOrganizationPipelineRequestValidationError is the validation error
// returned by ValidateOrganizationPipelineRequest.Validate if the designated
// constraints aren't met.
type ValidateOrganizationPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateOrganizationPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateOrganizationPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateOrganizationPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateOrganizationPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateOrganizationPipelineRequestValidationError) ErrorName() string {
	return "ValidateOrganizationPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateOrganizationPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateOrganizationPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateOrganizationPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateOrganizationPipelineRequestValidationError{}

// Validate checks the field values on ValidateOrganizationPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ValidateOrganizationPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateOrganizationPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ValidateOrganizationPipelineResponseMultiError, or nil if none found.
func (m *ValidateOrganizationPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateOrganizationPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidateOrganizationPipelineResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidateOrganizationPipelineResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateOrganizationPipelineResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ValidateOrganizationPipelineResponseMultiError(errors)
	}

	return nil
}

// ValidateOrganizationPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// ValidateOrganizationPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type ValidateOrganizationPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateOrganizationPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateOrganizationPipelineResponseMultiError) AllErrors() []error { return m }

// ValidateOrganizationPipelineResponseValidationError is the validation error
// returned by ValidateOrganizationPipelineResponse.Validate if the designated
// constraints aren't met.
type ValidateOrganizationPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateOrganizationPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateOrganizationPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateOrganizationPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateOrganizationPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateOrganizationPipelineResponseValidationError) ErrorName() string {
	return "ValidateOrganizationPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateOrganizationPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateOrganizationPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateOrganizationPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateOrganizationPipelineResponseValidationError{}

// Validate checks the field values on RenameOrganizationPipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RenameOrganizationPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameOrganizationPipelineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RenameOrganizationPipelineRequestMultiError, or nil if none found.
func (m *RenameOrganizationPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameOrganizationPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for NewPipelineId

	if len(errors) > 0 {
		return RenameOrganizationPipelineRequestMultiError(errors)
	}

	return nil
}

// RenameOrganizationPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by
// RenameOrganizationPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type RenameOrganizationPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameOrganizationPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameOrganizationPipelineRequestMultiError) AllErrors() []error { return m }

// RenameOrganizationPipelineRequestValidationError is the validation error
// returned by RenameOrganizationPipelineRequest.Validate if the designated
// constraints aren't met.
type RenameOrganizationPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameOrganizationPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameOrganizationPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameOrganizationPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameOrganizationPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameOrganizationPipelineRequestValidationError) ErrorName() string {
	return "RenameOrganizationPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenameOrganizationPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameOrganizationPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameOrganizationPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameOrganizationPipelineRequestValidationError{}

// Validate checks the field values on RenameOrganizationPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RenameOrganizationPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameOrganizationPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RenameOrganizationPipelineResponseMultiError, or nil if none found.
func (m *RenameOrganizationPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameOrganizationPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenameOrganizationPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenameOrganizationPipelineResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenameOrganizationPipelineResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenameOrganizationPipelineResponseMultiError(errors)
	}

	return nil
}

// RenameOrganizationPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// RenameOrganizationPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type RenameOrganizationPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameOrganizationPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameOrganizationPipelineResponseMultiError) AllErrors() []error { return m }

// RenameOrganizationPipelineResponseValidationError is the validation error
// returned by RenameOrganizationPipelineResponse.Validate if the designated
// constraints aren't met.
type RenameOrganizationPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameOrganizationPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameOrganizationPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameOrganizationPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameOrganizationPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameOrganizationPipelineResponseValidationError) ErrorName() string {
	return "RenameOrganizationPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenameOrganizationPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameOrganizationPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameOrganizationPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameOrganizationPipelineResponseValidationError{}

// Validate checks the field values on CloneOrganizationPipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloneOrganizationPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneOrganizationPipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CloneOrganizationPipelineRequestMultiError, or nil if none found.
func (m *CloneOrganizationPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneOrganizationPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Target

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetSharing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloneOrganizationPipelineRequestValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloneOrganizationPipelineRequestValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloneOrganizationPipelineRequestValidationError{
				field:  "Sharing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloneOrganizationPipelineRequestMultiError(errors)
	}

	return nil
}

// CloneOrganizationPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by
// CloneOrganizationPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type CloneOrganizationPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneOrganizationPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneOrganizationPipelineRequestMultiError) AllErrors() []error { return m }

// CloneOrganizationPipelineRequestValidationError is the validation error
// returned by CloneOrganizationPipelineRequest.Validate if the designated
// constraints aren't met.
type CloneOrganizationPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneOrganizationPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneOrganizationPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneOrganizationPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneOrganizationPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneOrganizationPipelineRequestValidationError) ErrorName() string {
	return "CloneOrganizationPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloneOrganizationPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneOrganizationPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneOrganizationPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneOrganizationPipelineRequestValidationError{}

// Validate checks the field values on CloneOrganizationPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CloneOrganizationPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloneOrganizationPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CloneOrganizationPipelineResponseMultiError, or nil if none found.
func (m *CloneOrganizationPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneOrganizationPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloneOrganizationPipelineResponseMultiError(errors)
	}

	return nil
}

// CloneOrganizationPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// CloneOrganizationPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type CloneOrganizationPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneOrganizationPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneOrganizationPipelineResponseMultiError) AllErrors() []error { return m }

// CloneOrganizationPipelineResponseValidationError is the validation error
// returned by CloneOrganizationPipelineResponse.Validate if the designated
// constraints aren't met.
type CloneOrganizationPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneOrganizationPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneOrganizationPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneOrganizationPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneOrganizationPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneOrganizationPipelineResponseValidationError) ErrorName() string {
	return "CloneOrganizationPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloneOrganizationPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneOrganizationPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneOrganizationPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneOrganizationPipelineResponseValidationError{}

// Validate checks the field values on CloneOrganizationPipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CloneOrganizationPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CloneOrganizationPipelineReleaseRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CloneOrganizationPipelineReleaseRequestMultiError, or nil if none found.
func (m *CloneOrganizationPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneOrganizationPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Target

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetSharing()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CloneOrganizationPipelineReleaseRequestValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CloneOrganizationPipelineReleaseRequestValidationError{
					field:  "Sharing",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSharing()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CloneOrganizationPipelineReleaseRequestValidationError{
				field:  "Sharing",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CloneOrganizationPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// CloneOrganizationPipelineReleaseRequestMultiError is an error wrapping
// multiple validation errors returned by
// CloneOrganizationPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type CloneOrganizationPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneOrganizationPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneOrganizationPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// CloneOrganizationPipelineReleaseRequestValidationError is the validation
// error returned by CloneOrganizationPipelineReleaseRequest.Validate if the
// designated constraints aren't met.
type CloneOrganizationPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneOrganizationPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneOrganizationPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneOrganizationPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneOrganizationPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneOrganizationPipelineReleaseRequestValidationError) ErrorName() string {
	return "CloneOrganizationPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloneOrganizationPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneOrganizationPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneOrganizationPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneOrganizationPipelineReleaseRequestValidationError{}

// Validate checks the field values on CloneOrganizationPipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CloneOrganizationPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CloneOrganizationPipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CloneOrganizationPipelineReleaseResponseMultiError, or nil if none found.
func (m *CloneOrganizationPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloneOrganizationPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloneOrganizationPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// CloneOrganizationPipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// CloneOrganizationPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type CloneOrganizationPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloneOrganizationPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloneOrganizationPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// CloneOrganizationPipelineReleaseResponseValidationError is the validation
// error returned by CloneOrganizationPipelineReleaseResponse.Validate if the
// designated constraints aren't met.
type CloneOrganizationPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloneOrganizationPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloneOrganizationPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloneOrganizationPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloneOrganizationPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloneOrganizationPipelineReleaseResponseValidationError) ErrorName() string {
	return "CloneOrganizationPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloneOrganizationPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloneOrganizationPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloneOrganizationPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloneOrganizationPipelineReleaseResponseValidationError{}

// Validate checks the field values on TriggerOrganizationPipelineRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TriggerOrganizationPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerOrganizationPipelineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerOrganizationPipelineRequestMultiError, or nil if none found.
func (m *TriggerOrganizationPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerOrganizationPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationPipelineRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationPipelineRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerOrganizationPipelineRequestMultiError(errors)
	}

	return nil
}

// TriggerOrganizationPipelineRequestMultiError is an error wrapping multiple
// validation errors returned by
// TriggerOrganizationPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerOrganizationPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerOrganizationPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerOrganizationPipelineRequestMultiError) AllErrors() []error { return m }

// TriggerOrganizationPipelineRequestValidationError is the validation error
// returned by TriggerOrganizationPipelineRequest.Validate if the designated
// constraints aren't met.
type TriggerOrganizationPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerOrganizationPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerOrganizationPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerOrganizationPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerOrganizationPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerOrganizationPipelineRequestValidationError) ErrorName() string {
	return "TriggerOrganizationPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerOrganizationPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerOrganizationPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerOrganizationPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerOrganizationPipelineRequestValidationError{}

// Validate checks the field values on TriggerOrganizationPipelineResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TriggerOrganizationPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerOrganizationPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerOrganizationPipelineResponseMultiError, or nil if none found.
func (m *TriggerOrganizationPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerOrganizationPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationPipelineResponseValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerOrganizationPipelineResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerOrganizationPipelineResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerOrganizationPipelineResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerOrganizationPipelineResponseMultiError(errors)
	}

	return nil
}

// TriggerOrganizationPipelineResponseMultiError is an error wrapping multiple
// validation errors returned by
// TriggerOrganizationPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerOrganizationPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerOrganizationPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerOrganizationPipelineResponseMultiError) AllErrors() []error { return m }

// TriggerOrganizationPipelineResponseValidationError is the validation error
// returned by TriggerOrganizationPipelineResponse.Validate if the designated
// constraints aren't met.
type TriggerOrganizationPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerOrganizationPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerOrganizationPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerOrganizationPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerOrganizationPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerOrganizationPipelineResponseValidationError) ErrorName() string {
	return "TriggerOrganizationPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerOrganizationPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerOrganizationPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerOrganizationPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerOrganizationPipelineResponseValidationError{}

// Validate checks the field values on TriggerOrganizationPipelineStreamRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerOrganizationPipelineStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerOrganizationPipelineStreamRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerOrganizationPipelineStreamRequestMultiError, or nil if none found.
func (m *TriggerOrganizationPipelineStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerOrganizationPipelineStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineStreamRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineStreamRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationPipelineStreamRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineStreamRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineStreamRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationPipelineStreamRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerOrganizationPipelineStreamRequestMultiError(errors)
	}

	return nil
}

// TriggerOrganizationPipelineStreamRequestMultiError is an error wrapping
// multiple validation errors returned by
// TriggerOrganizationPipelineStreamRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerOrganizationPipelineStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerOrganizationPipelineStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerOrganizationPipelineStreamRequestMultiError) AllErrors() []error { return m }

// TriggerOrganizationPipelineStreamRequestValidationError is the validation
// error returned by TriggerOrganizationPipelineStreamRequest.Validate if the
// designated constraints aren't met.
type TriggerOrganizationPipelineStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerOrganizationPipelineStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerOrganizationPipelineStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerOrganizationPipelineStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerOrganizationPipelineStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerOrganizationPipelineStreamRequestValidationError) ErrorName() string {
	return "TriggerOrganizationPipelineStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerOrganizationPipelineStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerOrganizationPipelineStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerOrganizationPipelineStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerOrganizationPipelineStreamRequestValidationError{}

// Validate checks the field values on
// TriggerOrganizationPipelineStreamResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerOrganizationPipelineStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerOrganizationPipelineStreamResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerOrganizationPipelineStreamResponseMultiError, or nil if none found.
func (m *TriggerOrganizationPipelineStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerOrganizationPipelineStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineStreamResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineStreamResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationPipelineStreamResponseValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerOrganizationPipelineStreamResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerOrganizationPipelineStreamResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerOrganizationPipelineStreamResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerOrganizationPipelineStreamResponseMultiError(errors)
	}

	return nil
}

// TriggerOrganizationPipelineStreamResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerOrganizationPipelineStreamResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerOrganizationPipelineStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerOrganizationPipelineStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerOrganizationPipelineStreamResponseMultiError) AllErrors() []error { return m }

// TriggerOrganizationPipelineStreamResponseValidationError is the validation
// error returned by TriggerOrganizationPipelineStreamResponse.Validate if the
// designated constraints aren't met.
type TriggerOrganizationPipelineStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerOrganizationPipelineStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerOrganizationPipelineStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerOrganizationPipelineStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerOrganizationPipelineStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerOrganizationPipelineStreamResponseValidationError) ErrorName() string {
	return "TriggerOrganizationPipelineStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerOrganizationPipelineStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerOrganizationPipelineStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerOrganizationPipelineStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerOrganizationPipelineStreamResponseValidationError{}

// Validate checks the field values on TriggerAsyncOrganizationPipelineRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerAsyncOrganizationPipelineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerAsyncOrganizationPipelineRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TriggerAsyncOrganizationPipelineRequestMultiError, or nil if none found.
func (m *TriggerAsyncOrganizationPipelineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncOrganizationPipelineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncOrganizationPipelineRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncOrganizationPipelineRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncOrganizationPipelineRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncOrganizationPipelineRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncOrganizationPipelineRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncOrganizationPipelineRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerAsyncOrganizationPipelineRequestMultiError(errors)
	}

	return nil
}

// TriggerAsyncOrganizationPipelineRequestMultiError is an error wrapping
// multiple validation errors returned by
// TriggerAsyncOrganizationPipelineRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncOrganizationPipelineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncOrganizationPipelineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncOrganizationPipelineRequestMultiError) AllErrors() []error { return m }

// TriggerAsyncOrganizationPipelineRequestValidationError is the validation
// error returned by TriggerAsyncOrganizationPipelineRequest.Validate if the
// designated constraints aren't met.
type TriggerAsyncOrganizationPipelineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncOrganizationPipelineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncOrganizationPipelineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncOrganizationPipelineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncOrganizationPipelineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncOrganizationPipelineRequestValidationError) ErrorName() string {
	return "TriggerAsyncOrganizationPipelineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncOrganizationPipelineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncOrganizationPipelineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncOrganizationPipelineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncOrganizationPipelineRequestValidationError{}

// Validate checks the field values on TriggerAsyncOrganizationPipelineResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerAsyncOrganizationPipelineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerAsyncOrganizationPipelineResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerAsyncOrganizationPipelineResponseMultiError, or nil if none found.
func (m *TriggerAsyncOrganizationPipelineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncOrganizationPipelineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerAsyncOrganizationPipelineResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerAsyncOrganizationPipelineResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerAsyncOrganizationPipelineResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerAsyncOrganizationPipelineResponseMultiError(errors)
	}

	return nil
}

// TriggerAsyncOrganizationPipelineResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerAsyncOrganizationPipelineResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncOrganizationPipelineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncOrganizationPipelineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncOrganizationPipelineResponseMultiError) AllErrors() []error { return m }

// TriggerAsyncOrganizationPipelineResponseValidationError is the validation
// error returned by TriggerAsyncOrganizationPipelineResponse.Validate if the
// designated constraints aren't met.
type TriggerAsyncOrganizationPipelineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncOrganizationPipelineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncOrganizationPipelineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncOrganizationPipelineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncOrganizationPipelineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncOrganizationPipelineResponseValidationError) ErrorName() string {
	return "TriggerAsyncOrganizationPipelineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncOrganizationPipelineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncOrganizationPipelineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncOrganizationPipelineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncOrganizationPipelineResponseValidationError{}

// Validate checks the field values on CreateOrganizationPipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateOrganizationPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOrganizationPipelineReleaseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateOrganizationPipelineReleaseRequestMultiError, or nil if none found.
func (m *CreateOrganizationPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationPipelineReleaseRequestValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationPipelineReleaseRequestValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationPipelineReleaseRequestValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Parent

	if len(errors) > 0 {
		return CreateOrganizationPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationPipelineReleaseRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrganizationPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationPipelineReleaseRequestValidationError is the validation
// error returned by CreateOrganizationPipelineReleaseRequest.Validate if the
// designated constraints aren't met.
type CreateOrganizationPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationPipelineReleaseRequestValidationError) ErrorName() string {
	return "CreateOrganizationPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationPipelineReleaseRequestValidationError{}

// Validate checks the field values on
// CreateOrganizationPipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateOrganizationPipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// CreateOrganizationPipelineReleaseResponseMultiError, or nil if none found.
func (m *CreateOrganizationPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationPipelineReleaseResponseValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationPipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateOrganizationPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationPipelineReleaseResponseValidationError is the validation
// error returned by CreateOrganizationPipelineReleaseResponse.Validate if the
// designated constraints aren't met.
type CreateOrganizationPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationPipelineReleaseResponseValidationError) ErrorName() string {
	return "CreateOrganizationPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationPipelineReleaseResponseValidationError{}

// Validate checks the field values on ListOrganizationPipelineReleasesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOrganizationPipelineReleasesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOrganizationPipelineReleasesRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListOrganizationPipelineReleasesRequestMultiError, or nil if none found.
func (m *ListOrganizationPipelineReleasesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationPipelineReleasesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.ShowDeleted != nil {
		// no validation rules for ShowDeleted
	}

	if len(errors) > 0 {
		return ListOrganizationPipelineReleasesRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationPipelineReleasesRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListOrganizationPipelineReleasesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationPipelineReleasesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationPipelineReleasesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationPipelineReleasesRequestMultiError) AllErrors() []error { return m }

// ListOrganizationPipelineReleasesRequestValidationError is the validation
// error returned by ListOrganizationPipelineReleasesRequest.Validate if the
// designated constraints aren't met.
type ListOrganizationPipelineReleasesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationPipelineReleasesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationPipelineReleasesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationPipelineReleasesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationPipelineReleasesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationPipelineReleasesRequestValidationError) ErrorName() string {
	return "ListOrganizationPipelineReleasesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationPipelineReleasesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationPipelineReleasesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationPipelineReleasesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationPipelineReleasesRequestValidationError{}

// Validate checks the field values on ListOrganizationPipelineReleasesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOrganizationPipelineReleasesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListOrganizationPipelineReleasesResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListOrganizationPipelineReleasesResponseMultiError, or nil if none found.
func (m *ListOrganizationPipelineReleasesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationPipelineReleasesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReleases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationPipelineReleasesResponseValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationPipelineReleasesResponseValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationPipelineReleasesResponseValidationError{
					field:  fmt.Sprintf("Releases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListOrganizationPipelineReleasesResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationPipelineReleasesResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListOrganizationPipelineReleasesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationPipelineReleasesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationPipelineReleasesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationPipelineReleasesResponseMultiError) AllErrors() []error { return m }

// ListOrganizationPipelineReleasesResponseValidationError is the validation
// error returned by ListOrganizationPipelineReleasesResponse.Validate if the
// designated constraints aren't met.
type ListOrganizationPipelineReleasesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationPipelineReleasesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationPipelineReleasesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationPipelineReleasesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationPipelineReleasesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationPipelineReleasesResponseValidationError) ErrorName() string {
	return "ListOrganizationPipelineReleasesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationPipelineReleasesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationPipelineReleasesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationPipelineReleasesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationPipelineReleasesResponseValidationError{}

// Validate checks the field values on GetOrganizationPipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOrganizationPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationPipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrganizationPipelineReleaseRequestMultiError, or nil if none found.
func (m *GetOrganizationPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetOrganizationPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationPipelineReleaseRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetOrganizationPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// GetOrganizationPipelineReleaseRequestValidationError is the validation error
// returned by GetOrganizationPipelineReleaseRequest.Validate if the
// designated constraints aren't met.
type GetOrganizationPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationPipelineReleaseRequestValidationError) ErrorName() string {
	return "GetOrganizationPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationPipelineReleaseRequestValidationError{}

// Validate checks the field values on GetOrganizationPipelineReleaseResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOrganizationPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOrganizationPipelineReleaseResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetOrganizationPipelineReleaseResponseMultiError, or nil if none found.
func (m *GetOrganizationPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationPipelineReleaseResponseValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationPipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetOrganizationPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// GetOrganizationPipelineReleaseResponseValidationError is the validation
// error returned by GetOrganizationPipelineReleaseResponse.Validate if the
// designated constraints aren't met.
type GetOrganizationPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationPipelineReleaseResponseValidationError) ErrorName() string {
	return "GetOrganizationPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationPipelineReleaseResponseValidationError{}

// Validate checks the field values on UpdateOrganizationPipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateOrganizationPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateOrganizationPipelineReleaseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateOrganizationPipelineReleaseRequestMultiError, or nil if none found.
func (m *UpdateOrganizationPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationPipelineReleaseRequestValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationPipelineReleaseRequestValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationPipelineReleaseRequestValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationPipelineReleaseRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationPipelineReleaseRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationPipelineReleaseRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationPipelineReleaseRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateOrganizationPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrganizationPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationPipelineReleaseRequestValidationError is the validation
// error returned by UpdateOrganizationPipelineReleaseRequest.Validate if the
// designated constraints aren't met.
type UpdateOrganizationPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationPipelineReleaseRequestValidationError) ErrorName() string {
	return "UpdateOrganizationPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationPipelineReleaseRequestValidationError{}

// Validate checks the field values on
// UpdateOrganizationPipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateOrganizationPipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateOrganizationPipelineReleaseResponseMultiError, or nil if none found.
func (m *UpdateOrganizationPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationPipelineReleaseResponseValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationPipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateOrganizationPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrganizationPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationPipelineReleaseResponseValidationError is the validation
// error returned by UpdateOrganizationPipelineReleaseResponse.Validate if the
// designated constraints aren't met.
type UpdateOrganizationPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationPipelineReleaseResponseValidationError) ErrorName() string {
	return "UpdateOrganizationPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationPipelineReleaseResponseValidationError{}

// Validate checks the field values on DeleteOrganizationPipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteOrganizationPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteOrganizationPipelineReleaseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteOrganizationPipelineReleaseRequestMultiError, or nil if none found.
func (m *DeleteOrganizationPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteOrganizationPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationPipelineReleaseRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteOrganizationPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganizationPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationPipelineReleaseRequestValidationError is the validation
// error returned by DeleteOrganizationPipelineReleaseRequest.Validate if the
// designated constraints aren't met.
type DeleteOrganizationPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationPipelineReleaseRequestValidationError) ErrorName() string {
	return "DeleteOrganizationPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationPipelineReleaseRequestValidationError{}

// Validate checks the field values on
// DeleteOrganizationPipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteOrganizationPipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// DeleteOrganizationPipelineReleaseResponseMultiError, or nil if none found.
func (m *DeleteOrganizationPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationPipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteOrganizationPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganizationPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationPipelineReleaseResponseValidationError is the validation
// error returned by DeleteOrganizationPipelineReleaseResponse.Validate if the
// designated constraints aren't met.
type DeleteOrganizationPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationPipelineReleaseResponseValidationError) ErrorName() string {
	return "DeleteOrganizationPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationPipelineReleaseResponseValidationError{}

// Validate checks the field values on
// RestoreOrganizationPipelineReleaseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RestoreOrganizationPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RestoreOrganizationPipelineReleaseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RestoreOrganizationPipelineReleaseRequestMultiError, or nil if none found.
func (m *RestoreOrganizationPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreOrganizationPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return RestoreOrganizationPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// RestoreOrganizationPipelineReleaseRequestMultiError is an error wrapping
// multiple validation errors returned by
// RestoreOrganizationPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type RestoreOrganizationPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreOrganizationPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreOrganizationPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// RestoreOrganizationPipelineReleaseRequestValidationError is the validation
// error returned by RestoreOrganizationPipelineReleaseRequest.Validate if the
// designated constraints aren't met.
type RestoreOrganizationPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreOrganizationPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreOrganizationPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreOrganizationPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreOrganizationPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreOrganizationPipelineReleaseRequestValidationError) ErrorName() string {
	return "RestoreOrganizationPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreOrganizationPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreOrganizationPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreOrganizationPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreOrganizationPipelineReleaseRequestValidationError{}

// Validate checks the field values on
// RestoreOrganizationPipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RestoreOrganizationPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RestoreOrganizationPipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RestoreOrganizationPipelineReleaseResponseMultiError, or nil if none found.
func (m *RestoreOrganizationPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestoreOrganizationPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RestoreOrganizationPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RestoreOrganizationPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RestoreOrganizationPipelineReleaseResponseValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RestoreOrganizationPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// RestoreOrganizationPipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// RestoreOrganizationPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type RestoreOrganizationPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestoreOrganizationPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestoreOrganizationPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// RestoreOrganizationPipelineReleaseResponseValidationError is the validation
// error returned by RestoreOrganizationPipelineReleaseResponse.Validate if
// the designated constraints aren't met.
type RestoreOrganizationPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestoreOrganizationPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestoreOrganizationPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestoreOrganizationPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestoreOrganizationPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestoreOrganizationPipelineReleaseResponseValidationError) ErrorName() string {
	return "RestoreOrganizationPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestoreOrganizationPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestoreOrganizationPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestoreOrganizationPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestoreOrganizationPipelineReleaseResponseValidationError{}

// Validate checks the field values on RenameOrganizationPipelineReleaseRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *RenameOrganizationPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RenameOrganizationPipelineReleaseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RenameOrganizationPipelineReleaseRequestMultiError, or nil if none found.
func (m *RenameOrganizationPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameOrganizationPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for NewPipelineReleaseId

	if len(errors) > 0 {
		return RenameOrganizationPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// RenameOrganizationPipelineReleaseRequestMultiError is an error wrapping
// multiple validation errors returned by
// RenameOrganizationPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type RenameOrganizationPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameOrganizationPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameOrganizationPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// RenameOrganizationPipelineReleaseRequestValidationError is the validation
// error returned by RenameOrganizationPipelineReleaseRequest.Validate if the
// designated constraints aren't met.
type RenameOrganizationPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameOrganizationPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameOrganizationPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameOrganizationPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameOrganizationPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameOrganizationPipelineReleaseRequestValidationError) ErrorName() string {
	return "RenameOrganizationPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenameOrganizationPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameOrganizationPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameOrganizationPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameOrganizationPipelineReleaseRequestValidationError{}

// Validate checks the field values on
// RenameOrganizationPipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RenameOrganizationPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RenameOrganizationPipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RenameOrganizationPipelineReleaseResponseMultiError, or nil if none found.
func (m *RenameOrganizationPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameOrganizationPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRelease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenameOrganizationPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenameOrganizationPipelineReleaseResponseValidationError{
					field:  "Release",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenameOrganizationPipelineReleaseResponseValidationError{
				field:  "Release",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenameOrganizationPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// RenameOrganizationPipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// RenameOrganizationPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type RenameOrganizationPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameOrganizationPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameOrganizationPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// RenameOrganizationPipelineReleaseResponseValidationError is the validation
// error returned by RenameOrganizationPipelineReleaseResponse.Validate if the
// designated constraints aren't met.
type RenameOrganizationPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameOrganizationPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameOrganizationPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameOrganizationPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameOrganizationPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameOrganizationPipelineReleaseResponseValidationError) ErrorName() string {
	return "RenameOrganizationPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenameOrganizationPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameOrganizationPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameOrganizationPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameOrganizationPipelineReleaseResponseValidationError{}

// Validate checks the field values on
// TriggerOrganizationPipelineReleaseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerOrganizationPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerOrganizationPipelineReleaseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerOrganizationPipelineReleaseRequestMultiError, or nil if none found.
func (m *TriggerOrganizationPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerOrganizationPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationPipelineReleaseRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationPipelineReleaseRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerOrganizationPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// TriggerOrganizationPipelineReleaseRequestMultiError is an error wrapping
// multiple validation errors returned by
// TriggerOrganizationPipelineReleaseRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerOrganizationPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerOrganizationPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerOrganizationPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// TriggerOrganizationPipelineReleaseRequestValidationError is the validation
// error returned by TriggerOrganizationPipelineReleaseRequest.Validate if the
// designated constraints aren't met.
type TriggerOrganizationPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerOrganizationPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerOrganizationPipelineReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerOrganizationPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerOrganizationPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerOrganizationPipelineReleaseRequestValidationError) ErrorName() string {
	return "TriggerOrganizationPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerOrganizationPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerOrganizationPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerOrganizationPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerOrganizationPipelineReleaseRequestValidationError{}

// Validate checks the field values on
// TriggerOrganizationPipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerOrganizationPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerOrganizationPipelineReleaseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerOrganizationPipelineReleaseResponseMultiError, or nil if none found.
func (m *TriggerOrganizationPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerOrganizationPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineReleaseResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationPipelineReleaseResponseValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationPipelineReleaseResponseValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerOrganizationPipelineReleaseResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerOrganizationPipelineReleaseResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerOrganizationPipelineReleaseResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerOrganizationPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// TriggerOrganizationPipelineReleaseResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerOrganizationPipelineReleaseResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerOrganizationPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerOrganizationPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerOrganizationPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// TriggerOrganizationPipelineReleaseResponseValidationError is the validation
// error returned by TriggerOrganizationPipelineReleaseResponse.Validate if
// the designated constraints aren't met.
type TriggerOrganizationPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerOrganizationPipelineReleaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerOrganizationPipelineReleaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerOrganizationPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerOrganizationPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerOrganizationPipelineReleaseResponseValidationError) ErrorName() string {
	return "TriggerOrganizationPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerOrganizationPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerOrganizationPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerOrganizationPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerOrganizationPipelineReleaseResponseValidationError{}

// Validate checks the field values on
// TriggerAsyncOrganizationPipelineReleaseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerAsyncOrganizationPipelineReleaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerAsyncOrganizationPipelineReleaseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// TriggerAsyncOrganizationPipelineReleaseRequestMultiError, or nil if none found.
func (m *TriggerAsyncOrganizationPipelineReleaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncOrganizationPipelineReleaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncOrganizationPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncOrganizationPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncOrganizationPipelineReleaseRequestValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncOrganizationPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncOrganizationPipelineReleaseRequestValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncOrganizationPipelineReleaseRequestValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerAsyncOrganizationPipelineReleaseRequestMultiError(errors)
	}

	return nil
}

// TriggerAsyncOrganizationPipelineReleaseRequestMultiError is an error
// wrapping multiple validation errors returned by
// TriggerAsyncOrganizationPipelineReleaseRequest.ValidateAll() if the
// designated constraints aren't met.
type TriggerAsyncOrganizationPipelineReleaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncOrganizationPipelineReleaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncOrganizationPipelineReleaseRequestMultiError) AllErrors() []error { return m }

// TriggerAsyncOrganizationPipelineReleaseRequestValidationError is the
// validation error returned by
// TriggerAsyncOrganizationPipelineReleaseRequest.Validate if the designated
// constraints aren't met.
type TriggerAsyncOrganizationPipelineReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncOrganizationPipelineReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncOrganizationPipelineReleaseRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e TriggerAsyncOrganizationPipelineReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncOrganizationPipelineReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncOrganizationPipelineReleaseRequestValidationError) ErrorName() string {
	return "TriggerAsyncOrganizationPipelineReleaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncOrganizationPipelineReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncOrganizationPipelineReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncOrganizationPipelineReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncOrganizationPipelineReleaseRequestValidationError{}

// Validate checks the field values on
// TriggerAsyncOrganizationPipelineReleaseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerAsyncOrganizationPipelineReleaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerAsyncOrganizationPipelineReleaseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// TriggerAsyncOrganizationPipelineReleaseResponseMultiError, or nil if none found.
func (m *TriggerAsyncOrganizationPipelineReleaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncOrganizationPipelineReleaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerAsyncOrganizationPipelineReleaseResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerAsyncOrganizationPipelineReleaseResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerAsyncOrganizationPipelineReleaseResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerAsyncOrganizationPipelineReleaseResponseMultiError(errors)
	}

	return nil
}

// TriggerAsyncOrganizationPipelineReleaseResponseMultiError is an error
// wrapping multiple validation errors returned by
// TriggerAsyncOrganizationPipelineReleaseResponse.ValidateAll() if the
// designated constraints aren't met.
type TriggerAsyncOrganizationPipelineReleaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncOrganizationPipelineReleaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncOrganizationPipelineReleaseResponseMultiError) AllErrors() []error { return m }

// TriggerAsyncOrganizationPipelineReleaseResponseValidationError is the
// validation error returned by
// TriggerAsyncOrganizationPipelineReleaseResponse.Validate if the designated
// constraints aren't met.
type TriggerAsyncOrganizationPipelineReleaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncOrganizationPipelineReleaseResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e TriggerAsyncOrganizationPipelineReleaseResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e TriggerAsyncOrganizationPipelineReleaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncOrganizationPipelineReleaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncOrganizationPipelineReleaseResponseValidationError) ErrorName() string {
	return "TriggerAsyncOrganizationPipelineReleaseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncOrganizationPipelineReleaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncOrganizationPipelineReleaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncOrganizationPipelineReleaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncOrganizationPipelineReleaseResponseValidationError{}

// Validate checks the field values on GetOperationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperationRequestMultiError, or nil if none found.
func (m *GetOperationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperationId

	if len(errors) > 0 {
		return GetOperationRequestMultiError(errors)
	}

	return nil
}

// GetOperationRequestMultiError is an error wrapping multiple validation
// errors returned by GetOperationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOperationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperationRequestMultiError) AllErrors() []error { return m }

// GetOperationRequestValidationError is the validation error returned by
// GetOperationRequest.Validate if the designated constraints aren't met.
type GetOperationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperationRequestValidationError) ErrorName() string {
	return "GetOperationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperationRequestValidationError{}

// Validate checks the field values on GetOperationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperationResponseMultiError, or nil if none found.
func (m *GetOperationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperationResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperationResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperationResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperationResponseMultiError(errors)
	}

	return nil
}

// GetOperationResponseMultiError is an error wrapping multiple validation
// errors returned by GetOperationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOperationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperationResponseMultiError) AllErrors() []error { return m }

// GetOperationResponseValidationError is the validation error returned by
// GetOperationResponse.Validate if the designated constraints aren't met.
type GetOperationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperationResponseValidationError) ErrorName() string {
	return "GetOperationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperationResponseValidationError{}

// Validate checks the field values on ListPipelinesAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPipelinesAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipelinesAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPipelinesAdminRequestMultiError, or nil if none found.
func (m *ListPipelinesAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelinesAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.ShowDeleted != nil {
		// no validation rules for ShowDeleted
	}

	if len(errors) > 0 {
		return ListPipelinesAdminRequestMultiError(errors)
	}

	return nil
}

// ListPipelinesAdminRequestMultiError is an error wrapping multiple validation
// errors returned by ListPipelinesAdminRequest.ValidateAll() if the
// designated constraints aren't met.
type ListPipelinesAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelinesAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelinesAdminRequestMultiError) AllErrors() []error { return m }

// ListPipelinesAdminRequestValidationError is the validation error returned by
// ListPipelinesAdminRequest.Validate if the designated constraints aren't met.
type ListPipelinesAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelinesAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelinesAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelinesAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelinesAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelinesAdminRequestValidationError) ErrorName() string {
	return "ListPipelinesAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelinesAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelinesAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelinesAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelinesAdminRequestValidationError{}

// Validate checks the field values on ListPipelinesAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPipelinesAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipelinesAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPipelinesAdminResponseMultiError, or nil if none found.
func (m *ListPipelinesAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelinesAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipelines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPipelinesAdminResponseValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPipelinesAdminResponseValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPipelinesAdminResponseValidationError{
					field:  fmt.Sprintf("Pipelines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListPipelinesAdminResponseMultiError(errors)
	}

	return nil
}

// ListPipelinesAdminResponseMultiError is an error wrapping multiple
// validation errors returned by ListPipelinesAdminResponse.ValidateAll() if
// the designated constraints aren't met.
type ListPipelinesAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelinesAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelinesAdminResponseMultiError) AllErrors() []error { return m }

// ListPipelinesAdminResponseValidationError is the validation error returned
// by ListPipelinesAdminResponse.Validate if the designated constraints aren't met.
type ListPipelinesAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelinesAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelinesAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelinesAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelinesAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelinesAdminResponseValidationError) ErrorName() string {
	return "ListPipelinesAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelinesAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelinesAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelinesAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelinesAdminResponseValidationError{}

// Validate checks the field values on ListPipelineReleasesAdminRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListPipelineReleasesAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipelineReleasesAdminRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListPipelineReleasesAdminRequestMultiError, or nil if none found.
func (m *ListPipelineReleasesAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelineReleasesAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.ShowDeleted != nil {
		// no validation rules for ShowDeleted
	}

	if len(errors) > 0 {
		return ListPipelineReleasesAdminRequestMultiError(errors)
	}

	return nil
}

// ListPipelineReleasesAdminRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListPipelineReleasesAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPipelineReleasesAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelineReleasesAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelineReleasesAdminRequestMultiError) AllErrors() []error { return m }

// ListPipelineReleasesAdminRequestValidationError is the validation error
// returned by ListPipelineReleasesAdminRequest.Validate if the designated
// constraints aren't met.
type ListPipelineReleasesAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelineReleasesAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelineReleasesAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelineReleasesAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelineReleasesAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelineReleasesAdminRequestValidationError) ErrorName() string {
	return "ListPipelineReleasesAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelineReleasesAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelineReleasesAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelineReleasesAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelineReleasesAdminRequestValidationError{}

// Validate checks the field values on ListPipelineReleasesAdminResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListPipelineReleasesAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipelineReleasesAdminResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListPipelineReleasesAdminResponseMultiError, or nil if none found.
func (m *ListPipelineReleasesAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelineReleasesAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReleases() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPipelineReleasesAdminResponseValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPipelineReleasesAdminResponseValidationError{
						field:  fmt.Sprintf("Releases[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPipelineReleasesAdminResponseValidationError{
					field:  fmt.Sprintf("Releases[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListPipelineReleasesAdminResponseMultiError(errors)
	}

	return nil
}

// ListPipelineReleasesAdminResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListPipelineReleasesAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPipelineReleasesAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelineReleasesAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelineReleasesAdminResponseMultiError) AllErrors() []error { return m }

// ListPipelineReleasesAdminResponseValidationError is the validation error
// returned by ListPipelineReleasesAdminResponse.Validate if the designated
// constraints aren't met.
type ListPipelineReleasesAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelineReleasesAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelineReleasesAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelineReleasesAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelineReleasesAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelineReleasesAdminResponseValidationError) ErrorName() string {
	return "ListPipelineReleasesAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelineReleasesAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelineReleasesAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelineReleasesAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelineReleasesAdminResponseValidationError{}

// Validate checks the field values on LookUpPipelineAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookUpPipelineAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookUpPipelineAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookUpPipelineAdminRequestMultiError, or nil if none found.
func (m *LookUpPipelineAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LookUpPipelineAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Permalink

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return LookUpPipelineAdminRequestMultiError(errors)
	}

	return nil
}

// LookUpPipelineAdminRequestMultiError is an error wrapping multiple
// validation errors returned by LookUpPipelineAdminRequest.ValidateAll() if
// the designated constraints aren't met.
type LookUpPipelineAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookUpPipelineAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookUpPipelineAdminRequestMultiError) AllErrors() []error { return m }

// LookUpPipelineAdminRequestValidationError is the validation error returned
// by LookUpPipelineAdminRequest.Validate if the designated constraints aren't met.
type LookUpPipelineAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookUpPipelineAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookUpPipelineAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookUpPipelineAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookUpPipelineAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookUpPipelineAdminRequestValidationError) ErrorName() string {
	return "LookUpPipelineAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LookUpPipelineAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookUpPipelineAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookUpPipelineAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookUpPipelineAdminRequestValidationError{}

// Validate checks the field values on LookUpPipelineAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookUpPipelineAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookUpPipelineAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookUpPipelineAdminResponseMultiError, or nil if none found.
func (m *LookUpPipelineAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LookUpPipelineAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LookUpPipelineAdminResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LookUpPipelineAdminResponseValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LookUpPipelineAdminResponseValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LookUpPipelineAdminResponseMultiError(errors)
	}

	return nil
}

// LookUpPipelineAdminResponseMultiError is an error wrapping multiple
// validation errors returned by LookUpPipelineAdminResponse.ValidateAll() if
// the designated constraints aren't met.
type LookUpPipelineAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookUpPipelineAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookUpPipelineAdminResponseMultiError) AllErrors() []error { return m }

// LookUpPipelineAdminResponseValidationError is the validation error returned
// by LookUpPipelineAdminResponse.Validate if the designated constraints
// aren't met.
type LookUpPipelineAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookUpPipelineAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookUpPipelineAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookUpPipelineAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookUpPipelineAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookUpPipelineAdminResponseValidationError) ErrorName() string {
	return "LookUpPipelineAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LookUpPipelineAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookUpPipelineAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookUpPipelineAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookUpPipelineAdminResponseValidationError{}

// Validate checks the field values on ListPipelineRunsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPipelineRunsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipelineRunsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPipelineRunsRequestMultiError, or nil if none found.
func (m *ListPipelineRunsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelineRunsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for PipelineId

	// no validation rules for Page

	// no validation rules for PageSize

	if m.View != nil {
		// no validation rules for View
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if len(errors) > 0 {
		return ListPipelineRunsRequestMultiError(errors)
	}

	return nil
}

// ListPipelineRunsRequestMultiError is an error wrapping multiple validation
// errors returned by ListPipelineRunsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPipelineRunsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelineRunsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelineRunsRequestMultiError) AllErrors() []error { return m }

// ListPipelineRunsRequestValidationError is the validation error returned by
// ListPipelineRunsRequest.Validate if the designated constraints aren't met.
type ListPipelineRunsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelineRunsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelineRunsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelineRunsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelineRunsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelineRunsRequestValidationError) ErrorName() string {
	return "ListPipelineRunsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelineRunsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelineRunsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelineRunsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelineRunsRequestValidationError{}

// Validate checks the field values on ListPipelineRunsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPipelineRunsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipelineRunsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPipelineRunsResponseMultiError, or nil if none found.
func (m *ListPipelineRunsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelineRunsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipelineRuns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPipelineRunsResponseValidationError{
						field:  fmt.Sprintf("PipelineRuns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPipelineRunsResponseValidationError{
						field:  fmt.Sprintf("PipelineRuns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPipelineRunsResponseValidationError{
					field:  fmt.Sprintf("PipelineRuns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalSize

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListPipelineRunsResponseMultiError(errors)
	}

	return nil
}

// ListPipelineRunsResponseMultiError is an error wrapping multiple validation
// errors returned by ListPipelineRunsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPipelineRunsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelineRunsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelineRunsResponseMultiError) AllErrors() []error { return m }

// ListPipelineRunsResponseValidationError is the validation error returned by
// ListPipelineRunsResponse.Validate if the designated constraints aren't met.
type ListPipelineRunsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelineRunsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelineRunsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelineRunsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelineRunsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelineRunsResponseValidationError) ErrorName() string {
	return "ListPipelineRunsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelineRunsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelineRunsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelineRunsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelineRunsResponseValidationError{}

// Validate checks the field values on ListComponentRunsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListComponentRunsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListComponentRunsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListComponentRunsRequestMultiError, or nil if none found.
func (m *ListComponentRunsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListComponentRunsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineRunId

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return ListComponentRunsRequestMultiError(errors)
	}

	return nil
}

// ListComponentRunsRequestMultiError is an error wrapping multiple validation
// errors returned by ListComponentRunsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListComponentRunsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListComponentRunsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListComponentRunsRequestMultiError) AllErrors() []error { return m }

// ListComponentRunsRequestValidationError is the validation error returned by
// ListComponentRunsRequest.Validate if the designated constraints aren't met.
type ListComponentRunsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComponentRunsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComponentRunsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComponentRunsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComponentRunsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComponentRunsRequestValidationError) ErrorName() string {
	return "ListComponentRunsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListComponentRunsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComponentRunsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComponentRunsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComponentRunsRequestValidationError{}

// Validate checks the field values on ListComponentRunsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListComponentRunsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListComponentRunsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListComponentRunsResponseMultiError, or nil if none found.
func (m *ListComponentRunsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListComponentRunsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComponentRuns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListComponentRunsResponseValidationError{
						field:  fmt.Sprintf("ComponentRuns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListComponentRunsResponseValidationError{
						field:  fmt.Sprintf("ComponentRuns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListComponentRunsResponseValidationError{
					field:  fmt.Sprintf("ComponentRuns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalSize

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListComponentRunsResponseMultiError(errors)
	}

	return nil
}

// ListComponentRunsResponseMultiError is an error wrapping multiple validation
// errors returned by ListComponentRunsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListComponentRunsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListComponentRunsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListComponentRunsResponseMultiError) AllErrors() []error { return m }

// ListComponentRunsResponseValidationError is the validation error returned by
// ListComponentRunsResponse.Validate if the designated constraints aren't met.
type ListComponentRunsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListComponentRunsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListComponentRunsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListComponentRunsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListComponentRunsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListComponentRunsResponseValidationError) ErrorName() string {
	return "ListComponentRunsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListComponentRunsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListComponentRunsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListComponentRunsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListComponentRunsResponseValidationError{}

// Validate checks the field values on FileReference with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileReference) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileReference with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileReferenceMultiError, or
// nil if none found.
func (m *FileReference) ValidateAll() error {
	return m.validate(true)
}

func (m *FileReference) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Size

	// no validation rules for Url

	if len(errors) > 0 {
		return FileReferenceMultiError(errors)
	}

	return nil
}

// FileReferenceMultiError is an error wrapping multiple validation errors
// returned by FileReference.ValidateAll() if the designated constraints
// aren't met.
type FileReferenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileReferenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileReferenceMultiError) AllErrors() []error { return m }

// FileReferenceValidationError is the validation error returned by
// FileReference.Validate if the designated constraints aren't met.
type FileReferenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileReferenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileReferenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileReferenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileReferenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileReferenceValidationError) ErrorName() string { return "FileReferenceValidationError" }

// Error satisfies the builtin error interface
func (e FileReferenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileReference.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileReferenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileReferenceValidationError{}

// Validate checks the field values on PipelineRun with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipelineRun) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineRun with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineRunMultiError, or
// nil if none found.
func (m *PipelineRun) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineRun) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineUid

	// no validation rules for PipelineRunUid

	// no validation rules for PipelineVersion

	// no validation rules for Status

	// no validation rules for Source

	for idx, item := range m.GetInputsReference() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineRunValidationError{
						field:  fmt.Sprintf("InputsReference[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineRunValidationError{
						field:  fmt.Sprintf("InputsReference[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineRunValidationError{
					field:  fmt.Sprintf("InputsReference[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineRunValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineRunValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineRunValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOutputsReference() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineRunValidationError{
						field:  fmt.Sprintf("OutputsReference[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineRunValidationError{
						field:  fmt.Sprintf("OutputsReference[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineRunValidationError{
					field:  fmt.Sprintf("OutputsReference[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineRunValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineRunValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineRunValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRecipeSnapshot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineRunValidationError{
					field:  "RecipeSnapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineRunValidationError{
					field:  "RecipeSnapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecipeSnapshot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineRunValidationError{
				field:  "RecipeSnapshot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineRunValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineRunValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineRunValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDataSpecification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineRunValidationError{
					field:  "DataSpecification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineRunValidationError{
					field:  "DataSpecification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDataSpecification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineRunValidationError{
				field:  "DataSpecification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.TotalDuration != nil {
		// no validation rules for TotalDuration
	}

	if m.RunnerId != nil {
		// no validation rules for RunnerId
	}

	if m.CompleteTime != nil {

		if all {
			switch v := interface{}(m.GetCompleteTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineRunValidationError{
						field:  "CompleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineRunValidationError{
						field:  "CompleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCompleteTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineRunValidationError{
					field:  "CompleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {
		// no validation rules for Error
	}

	if m.CreditAmount != nil {
		// no validation rules for CreditAmount
	}

	if len(errors) > 0 {
		return PipelineRunMultiError(errors)
	}

	return nil
}

// PipelineRunMultiError is an error wrapping multiple validation errors
// returned by PipelineRun.ValidateAll() if the designated constraints aren't met.
type PipelineRunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineRunMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineRunMultiError) AllErrors() []error { return m }

// PipelineRunValidationError is the validation error returned by
// PipelineRun.Validate if the designated constraints aren't met.
type PipelineRunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineRunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineRunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineRunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineRunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineRunValidationError) ErrorName() string { return "PipelineRunValidationError" }

// Error satisfies the builtin error interface
func (e PipelineRunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineRun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineRunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineRunValidationError{}

// Validate checks the field values on ComponentRun with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ComponentRun) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComponentRun with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ComponentRunMultiError, or
// nil if none found.
func (m *ComponentRun) ValidateAll() error {
	return m.validate(true)
}

func (m *ComponentRun) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineRunUid

	// no validation rules for ComponentId

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ComponentRunValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ComponentRunValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ComponentRunValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetInputsReference() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ComponentRunValidationError{
						field:  fmt.Sprintf("InputsReference[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ComponentRunValidationError{
						field:  fmt.Sprintf("InputsReference[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ComponentRunValidationError{
					field:  fmt.Sprintf("InputsReference[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ComponentRunValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ComponentRunValidationError{
						field:  fmt.Sprintf("Inputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ComponentRunValidationError{
					field:  fmt.Sprintf("Inputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOutputsReference() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ComponentRunValidationError{
						field:  fmt.Sprintf("OutputsReference[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ComponentRunValidationError{
						field:  fmt.Sprintf("OutputsReference[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ComponentRunValidationError{
					field:  fmt.Sprintf("OutputsReference[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ComponentRunValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ComponentRunValidationError{
						field:  fmt.Sprintf("Outputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ComponentRunValidationError{
					field:  fmt.Sprintf("Outputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TotalDuration != nil {
		// no validation rules for TotalDuration
	}

	if m.CompleteTime != nil {

		if all {
			switch v := interface{}(m.GetCompleteTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ComponentRunValidationError{
						field:  "CompleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ComponentRunValidationError{
						field:  "CompleteTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCompleteTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ComponentRunValidationError{
					field:  "CompleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Error != nil {
		// no validation rules for Error
	}

	if m.CreditAmount != nil {
		// no validation rules for CreditAmount
	}

	if len(errors) > 0 {
		return ComponentRunMultiError(errors)
	}

	return nil
}

// ComponentRunMultiError is an error wrapping multiple validation errors
// returned by ComponentRun.ValidateAll() if the designated constraints aren't met.
type ComponentRunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComponentRunMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComponentRunMultiError) AllErrors() []error { return m }

// ComponentRunValidationError is the validation error returned by
// ComponentRun.Validate if the designated constraints aren't met.
type ComponentRunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentRunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentRunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentRunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentRunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentRunValidationError) ErrorName() string { return "ComponentRunValidationError" }

// Error satisfies the builtin error interface
func (e ComponentRunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentRun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentRunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentRunValidationError{}

// Validate checks the field values on Endpoints_WebhookEndpoint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Endpoints_WebhookEndpoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Endpoints_WebhookEndpoint with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Endpoints_WebhookEndpointMultiError, or nil if none found.
func (m *Endpoints_WebhookEndpoint) ValidateAll() error {
	return m.validate(true)
}

func (m *Endpoints_WebhookEndpoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Description

	if len(errors) > 0 {
		return Endpoints_WebhookEndpointMultiError(errors)
	}

	return nil
}

// Endpoints_WebhookEndpointMultiError is an error wrapping multiple validation
// errors returned by Endpoints_WebhookEndpoint.ValidateAll() if the
// designated constraints aren't met.
type Endpoints_WebhookEndpointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Endpoints_WebhookEndpointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Endpoints_WebhookEndpointMultiError) AllErrors() []error { return m }

// Endpoints_WebhookEndpointValidationError is the validation error returned by
// Endpoints_WebhookEndpoint.Validate if the designated constraints aren't met.
type Endpoints_WebhookEndpointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Endpoints_WebhookEndpointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Endpoints_WebhookEndpointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Endpoints_WebhookEndpointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Endpoints_WebhookEndpointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Endpoints_WebhookEndpointValidationError) ErrorName() string {
	return "Endpoints_WebhookEndpointValidationError"
}

// Error satisfies the builtin error interface
func (e Endpoints_WebhookEndpointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpoints_WebhookEndpoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Endpoints_WebhookEndpointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Endpoints_WebhookEndpointValidationError{}

// Validate checks the field values on Pipeline_Stats with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Pipeline_Stats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pipeline_Stats with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Pipeline_StatsMultiError,
// or nil if none found.
func (m *Pipeline_Stats) ValidateAll() error {
	return m.validate(true)
}

func (m *Pipeline_Stats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumberOfRuns

	if all {
		switch v := interface{}(m.GetLastRunTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Pipeline_StatsValidationError{
					field:  "LastRunTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Pipeline_StatsValidationError{
					field:  "LastRunTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastRunTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Pipeline_StatsValidationError{
				field:  "LastRunTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NumberOfClones

	if len(errors) > 0 {
		return Pipeline_StatsMultiError(errors)
	}

	return nil
}

// Pipeline_StatsMultiError is an error wrapping multiple validation errors
// returned by Pipeline_Stats.ValidateAll() if the designated constraints
// aren't met.
type Pipeline_StatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Pipeline_StatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Pipeline_StatsMultiError) AllErrors() []error { return m }

// Pipeline_StatsValidationError is the validation error returned by
// Pipeline_Stats.Validate if the designated constraints aren't met.
type Pipeline_StatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Pipeline_StatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Pipeline_StatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Pipeline_StatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Pipeline_StatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Pipeline_StatsValidationError) ErrorName() string { return "Pipeline_StatsValidationError" }

// Error satisfies the builtin error interface
func (e Pipeline_StatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipeline_Stats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Pipeline_StatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Pipeline_StatsValidationError{}
