// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: vdp/pipeline/v1alpha/connector.proto

package pipelinev1alpha

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State enumerates the connector state
type Connector_State int32

const (
	// State: UNSPECIFIED
	Connector_STATE_UNSPECIFIED Connector_State = 0
	// State: DISCONNECTED
	Connector_STATE_DISCONNECTED Connector_State = 1
	// State: CONNECTED
	Connector_STATE_CONNECTED Connector_State = 2
	// State: ERROR
	Connector_STATE_ERROR Connector_State = 3
)

// Enum value maps for Connector_State.
var (
	Connector_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_DISCONNECTED",
		2: "STATE_CONNECTED",
		3: "STATE_ERROR",
	}
	Connector_State_value = map[string]int32{
		"STATE_UNSPECIFIED":  0,
		"STATE_DISCONNECTED": 1,
		"STATE_CONNECTED":    2,
		"STATE_ERROR":        3,
	}
)

func (x Connector_State) Enum() *Connector_State {
	p := new(Connector_State)
	*p = x
	return p
}

func (x Connector_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connector_State) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_connector_proto_enumTypes[0].Descriptor()
}

func (Connector_State) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_connector_proto_enumTypes[0]
}

func (x Connector_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connector_State.Descriptor instead.
func (Connector_State) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{0, 0}
}

// Connector visibility including public or private
type Connector_Visibility int32

const (
	// Visibility: UNSPECIFIED, equivalent to PRIVATE.
	Connector_VISIBILITY_UNSPECIFIED Connector_Visibility = 0
	// Visibility: PRIVATE
	Connector_VISIBILITY_PRIVATE Connector_Visibility = 1
	// Visibility: PUBLIC
	Connector_VISIBILITY_PUBLIC Connector_Visibility = 2
)

// Enum value maps for Connector_Visibility.
var (
	Connector_Visibility_name = map[int32]string{
		0: "VISIBILITY_UNSPECIFIED",
		1: "VISIBILITY_PRIVATE",
		2: "VISIBILITY_PUBLIC",
	}
	Connector_Visibility_value = map[string]int32{
		"VISIBILITY_UNSPECIFIED": 0,
		"VISIBILITY_PRIVATE":     1,
		"VISIBILITY_PUBLIC":      2,
	}
)

func (x Connector_Visibility) Enum() *Connector_Visibility {
	p := new(Connector_Visibility)
	*p = x
	return p
}

func (x Connector_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connector_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_connector_proto_enumTypes[1].Descriptor()
}

func (Connector_Visibility) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_connector_proto_enumTypes[1]
}

func (x Connector_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connector_Visibility.Descriptor instead.
func (Connector_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{0, 1}
}

// View enumerates the definition views
type ListConnectorsRequest_View int32

const (
	// View: UNSPECIFIED
	ListConnectorsRequest_VIEW_UNSPECIFIED ListConnectorsRequest_View = 0
	// View: BASIC
	ListConnectorsRequest_VIEW_BASIC ListConnectorsRequest_View = 1
	// View: FULL
	ListConnectorsRequest_VIEW_FULL ListConnectorsRequest_View = 2
	// View: CONFIGURATION
	ListConnectorsRequest_VIEW_CONFIGURATION ListConnectorsRequest_View = 3
)

// Enum value maps for ListConnectorsRequest_View.
var (
	ListConnectorsRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_CONFIGURATION",
	}
	ListConnectorsRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED":   0,
		"VIEW_BASIC":         1,
		"VIEW_FULL":          2,
		"VIEW_CONFIGURATION": 3,
	}
)

func (x ListConnectorsRequest_View) Enum() *ListConnectorsRequest_View {
	p := new(ListConnectorsRequest_View)
	*p = x
	return p
}

func (x ListConnectorsRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListConnectorsRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_connector_proto_enumTypes[2].Descriptor()
}

func (ListConnectorsRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_connector_proto_enumTypes[2]
}

func (x ListConnectorsRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListConnectorsRequest_View.Descriptor instead.
func (ListConnectorsRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{1, 0}
}

// View enumerates the definition views
type LookUpConnectorRequest_View int32

const (
	// View: UNSPECIFIED
	LookUpConnectorRequest_VIEW_UNSPECIFIED LookUpConnectorRequest_View = 0
	// View: BASIC
	LookUpConnectorRequest_VIEW_BASIC LookUpConnectorRequest_View = 1
	// View: FULL
	LookUpConnectorRequest_VIEW_FULL LookUpConnectorRequest_View = 2
	// View: CONFIGURATION
	LookUpConnectorRequest_VIEW_CONFIGURATION LookUpConnectorRequest_View = 3
)

// Enum value maps for LookUpConnectorRequest_View.
var (
	LookUpConnectorRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_CONFIGURATION",
	}
	LookUpConnectorRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED":   0,
		"VIEW_BASIC":         1,
		"VIEW_FULL":          2,
		"VIEW_CONFIGURATION": 3,
	}
)

func (x LookUpConnectorRequest_View) Enum() *LookUpConnectorRequest_View {
	p := new(LookUpConnectorRequest_View)
	*p = x
	return p
}

func (x LookUpConnectorRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LookUpConnectorRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_connector_proto_enumTypes[3].Descriptor()
}

func (LookUpConnectorRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_connector_proto_enumTypes[3]
}

func (x LookUpConnectorRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LookUpConnectorRequest_View.Descriptor instead.
func (LookUpConnectorRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{3, 0}
}

// View enumerates the definition views
type ListUserConnectorsRequest_View int32

const (
	// View: UNSPECIFIED
	ListUserConnectorsRequest_VIEW_UNSPECIFIED ListUserConnectorsRequest_View = 0
	// View: BASIC
	ListUserConnectorsRequest_VIEW_BASIC ListUserConnectorsRequest_View = 1
	// View: FULL
	ListUserConnectorsRequest_VIEW_FULL ListUserConnectorsRequest_View = 2
	// View: CONFIGURATION
	ListUserConnectorsRequest_VIEW_CONFIGURATION ListUserConnectorsRequest_View = 3
)

// Enum value maps for ListUserConnectorsRequest_View.
var (
	ListUserConnectorsRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_CONFIGURATION",
	}
	ListUserConnectorsRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED":   0,
		"VIEW_BASIC":         1,
		"VIEW_FULL":          2,
		"VIEW_CONFIGURATION": 3,
	}
)

func (x ListUserConnectorsRequest_View) Enum() *ListUserConnectorsRequest_View {
	p := new(ListUserConnectorsRequest_View)
	*p = x
	return p
}

func (x ListUserConnectorsRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListUserConnectorsRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_connector_proto_enumTypes[4].Descriptor()
}

func (ListUserConnectorsRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_connector_proto_enumTypes[4]
}

func (x ListUserConnectorsRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListUserConnectorsRequest_View.Descriptor instead.
func (ListUserConnectorsRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{7, 0}
}

// View enumerates the definition views
type GetUserConnectorRequest_View int32

const (
	// View: UNSPECIFIED
	GetUserConnectorRequest_VIEW_UNSPECIFIED GetUserConnectorRequest_View = 0
	// View: BASIC
	GetUserConnectorRequest_VIEW_BASIC GetUserConnectorRequest_View = 1
	// View: FULL
	GetUserConnectorRequest_VIEW_FULL GetUserConnectorRequest_View = 2
	// View: CONFIGURATION
	GetUserConnectorRequest_VIEW_CONFIGURATION GetUserConnectorRequest_View = 3
)

// Enum value maps for GetUserConnectorRequest_View.
var (
	GetUserConnectorRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_CONFIGURATION",
	}
	GetUserConnectorRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED":   0,
		"VIEW_BASIC":         1,
		"VIEW_FULL":          2,
		"VIEW_CONFIGURATION": 3,
	}
)

func (x GetUserConnectorRequest_View) Enum() *GetUserConnectorRequest_View {
	p := new(GetUserConnectorRequest_View)
	*p = x
	return p
}

func (x GetUserConnectorRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserConnectorRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_connector_proto_enumTypes[5].Descriptor()
}

func (GetUserConnectorRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_connector_proto_enumTypes[5]
}

func (x GetUserConnectorRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUserConnectorRequest_View.Descriptor instead.
func (GetUserConnectorRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{9, 0}
}

// View enumerates the definition views
type ListConnectorsAdminRequest_View int32

const (
	// View: UNSPECIFIED
	ListConnectorsAdminRequest_VIEW_UNSPECIFIED ListConnectorsAdminRequest_View = 0
	// View: BASIC
	ListConnectorsAdminRequest_VIEW_BASIC ListConnectorsAdminRequest_View = 1
	// View: FULL
	ListConnectorsAdminRequest_VIEW_FULL ListConnectorsAdminRequest_View = 2
	// View: CONFIGURATION
	ListConnectorsAdminRequest_VIEW_CONFIGURATION ListConnectorsAdminRequest_View = 3
)

// Enum value maps for ListConnectorsAdminRequest_View.
var (
	ListConnectorsAdminRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_CONFIGURATION",
	}
	ListConnectorsAdminRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED":   0,
		"VIEW_BASIC":         1,
		"VIEW_FULL":          2,
		"VIEW_CONFIGURATION": 3,
	}
)

func (x ListConnectorsAdminRequest_View) Enum() *ListConnectorsAdminRequest_View {
	p := new(ListConnectorsAdminRequest_View)
	*p = x
	return p
}

func (x ListConnectorsAdminRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListConnectorsAdminRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_connector_proto_enumTypes[6].Descriptor()
}

func (ListConnectorsAdminRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_connector_proto_enumTypes[6]
}

func (x ListConnectorsAdminRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListConnectorsAdminRequest_View.Descriptor instead.
func (ListConnectorsAdminRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{27, 0}
}

// View enumerates the definition views
type LookUpConnectorAdminRequest_View int32

const (
	// View: UNSPECIFIED
	LookUpConnectorAdminRequest_VIEW_UNSPECIFIED LookUpConnectorAdminRequest_View = 0
	// View: BASIC
	LookUpConnectorAdminRequest_VIEW_BASIC LookUpConnectorAdminRequest_View = 1
	// View: FULL
	LookUpConnectorAdminRequest_VIEW_FULL LookUpConnectorAdminRequest_View = 2
	// View: CONFIGURATION
	LookUpConnectorAdminRequest_VIEW_CONFIGURATION LookUpConnectorAdminRequest_View = 3
)

// Enum value maps for LookUpConnectorAdminRequest_View.
var (
	LookUpConnectorAdminRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_CONFIGURATION",
	}
	LookUpConnectorAdminRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED":   0,
		"VIEW_BASIC":         1,
		"VIEW_FULL":          2,
		"VIEW_CONFIGURATION": 3,
	}
)

func (x LookUpConnectorAdminRequest_View) Enum() *LookUpConnectorAdminRequest_View {
	p := new(LookUpConnectorAdminRequest_View)
	*p = x
	return p
}

func (x LookUpConnectorAdminRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LookUpConnectorAdminRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_connector_proto_enumTypes[7].Descriptor()
}

func (LookUpConnectorAdminRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_connector_proto_enumTypes[7]
}

func (x LookUpConnectorAdminRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LookUpConnectorAdminRequest_View.Descriptor instead.
func (LookUpConnectorAdminRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{29, 0}
}

// Connector represents a connector data model
type Connector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connector name. It must have the format of
	// "connectors/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Connector UUID
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// connector ID (the last segment of the resource name)
	// used to construct the resource name. This conforms to RFC-1034, which
	// restricts to letters, numbers, and hyphen, with the first character a
	// letter, the last a letter or a number, and a 63 character maximum.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// ConnectorDefinition resource
	ConnectorDefinitionName string `protobuf:"bytes,4,opt,name=connector_definition_name,json=connectorDefinitionName,proto3" json:"connector_definition_name,omitempty"`
	// Connector Type
	Type ConnectorType `protobuf:"varint,5,opt,name=type,proto3,enum=vdp.pipeline.v1alpha.ConnectorType" json:"type,omitempty"`
	// Connector description
	Description *string `protobuf:"bytes,7,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Connector configuration in JSON format
	Configuration *structpb.Struct `protobuf:"bytes,8,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// Connector state
	State Connector_State `protobuf:"varint,9,opt,name=state,proto3,enum=vdp.pipeline.v1alpha.Connector_State" json:"state,omitempty"`
	// Connector tombstone
	Tombstone bool `protobuf:"varint,10,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	// Connector owner
	//
	// Types that are assignable to Owner:
	//
	//	*Connector_User
	//	*Connector_Org
	Owner isConnector_Owner `protobuf_oneof:"owner"`
	// Connector creation time
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Connector update time
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Connector visibility including public or private
	Visibility Connector_Visibility `protobuf:"varint,15,opt,name=visibility,proto3,enum=vdp.pipeline.v1alpha.Connector_Visibility" json:"visibility,omitempty"`
	// Embed the content of the connector_definition
	ConnectorDefinition *ConnectorDefinition `protobuf:"bytes,16,opt,name=connector_definition,json=connectorDefinition,proto3" json:"connector_definition,omitempty"`
	// Connector delete time
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
}

func (x *Connector) Reset() {
	*x = Connector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connector) ProtoMessage() {}

func (x *Connector) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connector.ProtoReflect.Descriptor instead.
func (*Connector) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{0}
}

func (x *Connector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Connector) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Connector) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Connector) GetConnectorDefinitionName() string {
	if x != nil {
		return x.ConnectorDefinitionName
	}
	return ""
}

func (x *Connector) GetType() ConnectorType {
	if x != nil {
		return x.Type
	}
	return ConnectorType_CONNECTOR_TYPE_UNSPECIFIED
}

func (x *Connector) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Connector) GetConfiguration() *structpb.Struct {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *Connector) GetState() Connector_State {
	if x != nil {
		return x.State
	}
	return Connector_STATE_UNSPECIFIED
}

func (x *Connector) GetTombstone() bool {
	if x != nil {
		return x.Tombstone
	}
	return false
}

func (m *Connector) GetOwner() isConnector_Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (x *Connector) GetUser() string {
	if x, ok := x.GetOwner().(*Connector_User); ok {
		return x.User
	}
	return ""
}

func (x *Connector) GetOrg() string {
	if x, ok := x.GetOwner().(*Connector_Org); ok {
		return x.Org
	}
	return ""
}

func (x *Connector) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Connector) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Connector) GetVisibility() Connector_Visibility {
	if x != nil {
		return x.Visibility
	}
	return Connector_VISIBILITY_UNSPECIFIED
}

func (x *Connector) GetConnectorDefinition() *ConnectorDefinition {
	if x != nil {
		return x.ConnectorDefinition
	}
	return nil
}

func (x *Connector) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

type isConnector_Owner interface {
	isConnector_Owner()
}

type Connector_User struct {
	// The resource name with UUID of a user, e.g.,
	// "users/bfb978f8-78d3-4338-aa2b-a6c699cb07c5".
	User string `protobuf:"bytes,11,opt,name=user,proto3,oneof"`
}

type Connector_Org struct {
	// The resource name with UUID of an organization
	Org string `protobuf:"bytes,12,opt,name=org,proto3,oneof"`
}

func (*Connector_User) isConnector_Owner() {}

func (*Connector_Org) isConnector_Owner() {}

// ListConnectorsRequest represents a request to list
// connectors
type ListConnectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of connectors to return. The service may return fewer
	// than this value. If unspecified, at most 10 connectors will be returned.
	// The maximum value is 100; values above 100 will be coerced to 100.
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// Connector view (default is VIEW_BASIC)
	View *ListConnectorsRequest_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.ListConnectorsRequest_View,oneof" json:"view,omitempty"`
	// Filter expression to list connectors
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// Return soft_deleted connectors
	ShowDeleted *bool `protobuf:"varint,5,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
}

func (x *ListConnectorsRequest) Reset() {
	*x = ListConnectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectorsRequest) ProtoMessage() {}

func (x *ListConnectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectorsRequest.ProtoReflect.Descriptor instead.
func (*ListConnectorsRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{1}
}

func (x *ListConnectorsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListConnectorsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListConnectorsRequest) GetView() ListConnectorsRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return ListConnectorsRequest_VIEW_UNSPECIFIED
}

func (x *ListConnectorsRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListConnectorsRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

// ListConnectorsResponse represents a response for a list of
// connectors
type ListConnectorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of connectors
	Connectors []*Connector `protobuf:"bytes,1,rep,name=connectors,proto3" json:"connectors,omitempty"`
	// Next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of connectors
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListConnectorsResponse) Reset() {
	*x = ListConnectorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectorsResponse) ProtoMessage() {}

func (x *ListConnectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectorsResponse.ProtoReflect.Descriptor instead.
func (*ListConnectorsResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{2}
}

func (x *ListConnectorsResponse) GetConnectors() []*Connector {
	if x != nil {
		return x.Connectors
	}
	return nil
}

func (x *ListConnectorsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListConnectorsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// LookUpConnectorRequest represents a request to query a
// connector via permalink
type LookUpConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Permalink of a connector. For example:
	// "connectors/{uid}"
	Permalink string `protobuf:"bytes,1,opt,name=permalink,proto3" json:"permalink,omitempty"`
	// Connector view (default is VIEW_BASIC)
	View *LookUpConnectorRequest_View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.LookUpConnectorRequest_View,oneof" json:"view,omitempty"`
}

func (x *LookUpConnectorRequest) Reset() {
	*x = LookUpConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpConnectorRequest) ProtoMessage() {}

func (x *LookUpConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpConnectorRequest.ProtoReflect.Descriptor instead.
func (*LookUpConnectorRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{3}
}

func (x *LookUpConnectorRequest) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

func (x *LookUpConnectorRequest) GetView() LookUpConnectorRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return LookUpConnectorRequest_VIEW_UNSPECIFIED
}

// LookUpConnectorResponse represents a response for a
// connector
type LookUpConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connector
	Connector *Connector `protobuf:"bytes,1,opt,name=connector,proto3" json:"connector,omitempty"`
}

func (x *LookUpConnectorResponse) Reset() {
	*x = LookUpConnectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpConnectorResponse) ProtoMessage() {}

func (x *LookUpConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpConnectorResponse.ProtoReflect.Descriptor instead.
func (*LookUpConnectorResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{4}
}

func (x *LookUpConnectorResponse) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

// CreateUserConnectorRequest represents a request to create a
// connector
type CreateUserConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connector
	Connector *Connector `protobuf:"bytes,1,opt,name=connector,proto3" json:"connector,omitempty"`
	// The parent resource where this connector will be created.
	// Format: users/{users}
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *CreateUserConnectorRequest) Reset() {
	*x = CreateUserConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserConnectorRequest) ProtoMessage() {}

func (x *CreateUserConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserConnectorRequest.ProtoReflect.Descriptor instead.
func (*CreateUserConnectorRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{5}
}

func (x *CreateUserConnectorRequest) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

func (x *CreateUserConnectorRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

// CreateUserConnectorResponse represents a response for a
// connector
type CreateUserConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connector
	Connector *Connector `protobuf:"bytes,1,opt,name=connector,proto3" json:"connector,omitempty"`
}

func (x *CreateUserConnectorResponse) Reset() {
	*x = CreateUserConnectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserConnectorResponse) ProtoMessage() {}

func (x *CreateUserConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserConnectorResponse.ProtoReflect.Descriptor instead.
func (*CreateUserConnectorResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{6}
}

func (x *CreateUserConnectorResponse) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

// ListUserConnectorsRequest represents a request to list
// connectors
type ListUserConnectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of connectors to return. The service may return fewer
	// than this value. If unspecified, at most 10 connectors will be returned.
	// The maximum value is 100; values above 100 will be coerced to 100.
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// Connector view (default is VIEW_BASIC)
	View *ListUserConnectorsRequest_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.ListUserConnectorsRequest_View,oneof" json:"view,omitempty"`
	// Filter expression to list connectors
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// The parent resource where this connector will be created.
	// Format: users/{users}
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// Return soft_deleted connectors
	ShowDeleted *bool `protobuf:"varint,6,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
}

func (x *ListUserConnectorsRequest) Reset() {
	*x = ListUserConnectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserConnectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserConnectorsRequest) ProtoMessage() {}

func (x *ListUserConnectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserConnectorsRequest.ProtoReflect.Descriptor instead.
func (*ListUserConnectorsRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{7}
}

func (x *ListUserConnectorsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListUserConnectorsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListUserConnectorsRequest) GetView() ListUserConnectorsRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return ListUserConnectorsRequest_VIEW_UNSPECIFIED
}

func (x *ListUserConnectorsRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListUserConnectorsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListUserConnectorsRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

// ListUserConnectorsResponse represents a response for a list of
// connectors
type ListUserConnectorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of connectors
	Connectors []*Connector `protobuf:"bytes,1,rep,name=connectors,proto3" json:"connectors,omitempty"`
	// Next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of connectors
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListUserConnectorsResponse) Reset() {
	*x = ListUserConnectorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserConnectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserConnectorsResponse) ProtoMessage() {}

func (x *ListUserConnectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserConnectorsResponse.ProtoReflect.Descriptor instead.
func (*ListUserConnectorsResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{8}
}

func (x *ListUserConnectorsResponse) GetConnectors() []*Connector {
	if x != nil {
		return x.Connectors
	}
	return nil
}

func (x *ListUserConnectorsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListUserConnectorsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// GetUserConnectorRequest represents a request to query a
// connector
type GetUserConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connectorconnector name. It must have the format of
	// "connectors/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Connector view (default is VIEW_BASIC)
	View *GetUserConnectorRequest_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.GetUserConnectorRequest_View,oneof" json:"view,omitempty"`
}

func (x *GetUserConnectorRequest) Reset() {
	*x = GetUserConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserConnectorRequest) ProtoMessage() {}

func (x *GetUserConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserConnectorRequest.ProtoReflect.Descriptor instead.
func (*GetUserConnectorRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserConnectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetUserConnectorRequest) GetView() GetUserConnectorRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return GetUserConnectorRequest_VIEW_UNSPECIFIED
}

// GetUserConnectorResponse represents a response for a
// connector
type GetUserConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connector
	Connector *Connector `protobuf:"bytes,1,opt,name=connector,proto3" json:"connector,omitempty"`
}

func (x *GetUserConnectorResponse) Reset() {
	*x = GetUserConnectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserConnectorResponse) ProtoMessage() {}

func (x *GetUserConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserConnectorResponse.ProtoReflect.Descriptor instead.
func (*GetUserConnectorResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserConnectorResponse) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

// UpdateUserConnectorRequest represents a request to update a
// connector
type UpdateUserConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connector
	Connector *Connector `protobuf:"bytes,1,opt,name=connector,proto3" json:"connector,omitempty"`
	// Update mask for a connector
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateUserConnectorRequest) Reset() {
	*x = UpdateUserConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserConnectorRequest) ProtoMessage() {}

func (x *UpdateUserConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserConnectorRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserConnectorRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateUserConnectorRequest) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

func (x *UpdateUserConnectorRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdateUserConnectorResponse represents a response for a
// connector
type UpdateUserConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connector
	Connector *Connector `protobuf:"bytes,1,opt,name=connector,proto3" json:"connector,omitempty"`
}

func (x *UpdateUserConnectorResponse) Reset() {
	*x = UpdateUserConnectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserConnectorResponse) ProtoMessage() {}

func (x *UpdateUserConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserConnectorResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserConnectorResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateUserConnectorResponse) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

// DeleteUserConnectorRequest represents a request to delete a
// connector
type DeleteUserConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connector name. It must have the format of
	// "connectors/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteUserConnectorRequest) Reset() {
	*x = DeleteUserConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserConnectorRequest) ProtoMessage() {}

func (x *DeleteUserConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserConnectorRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserConnectorRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteUserConnectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteUserConnectorResponse represents an empty response
type DeleteUserConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteUserConnectorResponse) Reset() {
	*x = DeleteUserConnectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserConnectorResponse) ProtoMessage() {}

func (x *DeleteUserConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserConnectorResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserConnectorResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{14}
}

// ConnectUserConnectorRequest represents a request to connect a
// connector
type ConnectUserConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connector name. It must have the format of
	// "connectors/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ConnectUserConnectorRequest) Reset() {
	*x = ConnectUserConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectUserConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectUserConnectorRequest) ProtoMessage() {}

func (x *ConnectUserConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectUserConnectorRequest.ProtoReflect.Descriptor instead.
func (*ConnectUserConnectorRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{15}
}

func (x *ConnectUserConnectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ConnectUserConnectorResponse represents a connected
// connector
type ConnectUserConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A connector
	Connector *Connector `protobuf:"bytes,1,opt,name=connector,proto3" json:"connector,omitempty"`
}

func (x *ConnectUserConnectorResponse) Reset() {
	*x = ConnectUserConnectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectUserConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectUserConnectorResponse) ProtoMessage() {}

func (x *ConnectUserConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectUserConnectorResponse.ProtoReflect.Descriptor instead.
func (*ConnectUserConnectorResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{16}
}

func (x *ConnectUserConnectorResponse) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

// DisconnectUserConnectorRequest represents a request to disconnect a
// connector
type DisconnectUserConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connector name. It must have the format of
	// "connectors/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DisconnectUserConnectorRequest) Reset() {
	*x = DisconnectUserConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectUserConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectUserConnectorRequest) ProtoMessage() {}

func (x *DisconnectUserConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectUserConnectorRequest.ProtoReflect.Descriptor instead.
func (*DisconnectUserConnectorRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{17}
}

func (x *DisconnectUserConnectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DisconnectUserConnectorResponse represents a disconnected
// connector
type DisconnectUserConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A connector
	Connector *Connector `protobuf:"bytes,1,opt,name=connector,proto3" json:"connector,omitempty"`
}

func (x *DisconnectUserConnectorResponse) Reset() {
	*x = DisconnectUserConnectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectUserConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectUserConnectorResponse) ProtoMessage() {}

func (x *DisconnectUserConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectUserConnectorResponse.ProtoReflect.Descriptor instead.
func (*DisconnectUserConnectorResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{18}
}

func (x *DisconnectUserConnectorResponse) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

// RenameUserConnectorRequest represents a request to rename the
// connector name
type RenameUserConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connector name. It must have the format of
	// "connectors/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Connector new resource id to replace with the
	// connector name to be
	// "connectors/{new_connector_id}"
	NewConnectorId string `protobuf:"bytes,2,opt,name=new_connector_id,json=newConnectorId,proto3" json:"new_connector_id,omitempty"`
}

func (x *RenameUserConnectorRequest) Reset() {
	*x = RenameUserConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameUserConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameUserConnectorRequest) ProtoMessage() {}

func (x *RenameUserConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameUserConnectorRequest.ProtoReflect.Descriptor instead.
func (*RenameUserConnectorRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{19}
}

func (x *RenameUserConnectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenameUserConnectorRequest) GetNewConnectorId() string {
	if x != nil {
		return x.NewConnectorId
	}
	return ""
}

// RenameUserConnectorResponse represents a renamed Connector
// resource
type RenameUserConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A connector
	Connector *Connector `protobuf:"bytes,1,opt,name=connector,proto3" json:"connector,omitempty"`
}

func (x *RenameUserConnectorResponse) Reset() {
	*x = RenameUserConnectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameUserConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameUserConnectorResponse) ProtoMessage() {}

func (x *RenameUserConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameUserConnectorResponse.ProtoReflect.Descriptor instead.
func (*RenameUserConnectorResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{20}
}

func (x *RenameUserConnectorResponse) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

// ExecuteUserConnectorRequest represents a private request to execution
// connector
type ExecuteUserConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a connector. For example:
	// "connectors/{name}"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Inputs
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Task
	Task string `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *ExecuteUserConnectorRequest) Reset() {
	*x = ExecuteUserConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteUserConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteUserConnectorRequest) ProtoMessage() {}

func (x *ExecuteUserConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteUserConnectorRequest.ProtoReflect.Descriptor instead.
func (*ExecuteUserConnectorRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{21}
}

func (x *ExecuteUserConnectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecuteUserConnectorRequest) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *ExecuteUserConnectorRequest) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

// ExecuteUserConnectorResponse represents a response for execution
// output
type ExecuteUserConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Outputs
	Outputs []*structpb.Struct `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
}

func (x *ExecuteUserConnectorResponse) Reset() {
	*x = ExecuteUserConnectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteUserConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteUserConnectorResponse) ProtoMessage() {}

func (x *ExecuteUserConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteUserConnectorResponse.ProtoReflect.Descriptor instead.
func (*ExecuteUserConnectorResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{22}
}

func (x *ExecuteUserConnectorResponse) GetOutputs() []*structpb.Struct {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// TestUserConnectorRequest represents a public request to trigger check
// action on a connector
type TestUserConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connector name. It must have the format of
	// "connectors/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TestUserConnectorRequest) Reset() {
	*x = TestUserConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestUserConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestUserConnectorRequest) ProtoMessage() {}

func (x *TestUserConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestUserConnectorRequest.ProtoReflect.Descriptor instead.
func (*TestUserConnectorRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{23}
}

func (x *TestUserConnectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// TestUserConnectorResponse represents a response containing a
// connector's current state
type TestUserConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Retrieved connector state
	State Connector_State `protobuf:"varint,1,opt,name=state,proto3,enum=vdp.pipeline.v1alpha.Connector_State" json:"state,omitempty"`
}

func (x *TestUserConnectorResponse) Reset() {
	*x = TestUserConnectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestUserConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestUserConnectorResponse) ProtoMessage() {}

func (x *TestUserConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestUserConnectorResponse.ProtoReflect.Descriptor instead.
func (*TestUserConnectorResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{24}
}

func (x *TestUserConnectorResponse) GetState() Connector_State {
	if x != nil {
		return x.State
	}
	return Connector_STATE_UNSPECIFIED
}

// WatchUserConnectorRequest represents a public request to query
// a connector's current state
type WatchUserConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connector name. It must have the format of
	// "connectors/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WatchUserConnectorRequest) Reset() {
	*x = WatchUserConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchUserConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchUserConnectorRequest) ProtoMessage() {}

func (x *WatchUserConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchUserConnectorRequest.ProtoReflect.Descriptor instead.
func (*WatchUserConnectorRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{25}
}

func (x *WatchUserConnectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// WatchUserConnectorResponse represents a response to fetch a
// connector's current state
type WatchUserConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Retrieved connector state
	State Connector_State `protobuf:"varint,1,opt,name=state,proto3,enum=vdp.pipeline.v1alpha.Connector_State" json:"state,omitempty"`
}

func (x *WatchUserConnectorResponse) Reset() {
	*x = WatchUserConnectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchUserConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchUserConnectorResponse) ProtoMessage() {}

func (x *WatchUserConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchUserConnectorResponse.ProtoReflect.Descriptor instead.
func (*WatchUserConnectorResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{26}
}

func (x *WatchUserConnectorResponse) GetState() Connector_State {
	if x != nil {
		return x.State
	}
	return Connector_STATE_UNSPECIFIED
}

// ListConnectorsAdminRequest represents a request to list
// connectors from all users by admin
type ListConnectorsAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of connectors to return. The service may return fewer
	// than this value. If unspecified, at most 10 connectors will be returned.
	// The maximum value is 100; values above 100 will be coerced to 100.
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// Connector view (default is VIEW_BASIC)
	View *ListConnectorsAdminRequest_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.ListConnectorsAdminRequest_View,oneof" json:"view,omitempty"`
	// Filter expression to list connectors
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// Return soft_deleted connectors
	ShowDeleted *bool `protobuf:"varint,5,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
}

func (x *ListConnectorsAdminRequest) Reset() {
	*x = ListConnectorsAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectorsAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectorsAdminRequest) ProtoMessage() {}

func (x *ListConnectorsAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectorsAdminRequest.ProtoReflect.Descriptor instead.
func (*ListConnectorsAdminRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{27}
}

func (x *ListConnectorsAdminRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListConnectorsAdminRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListConnectorsAdminRequest) GetView() ListConnectorsAdminRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return ListConnectorsAdminRequest_VIEW_UNSPECIFIED
}

func (x *ListConnectorsAdminRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListConnectorsAdminRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

// ListConnectorsAdminResponse represents a response for a list of
// connectors
type ListConnectorsAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of connectors
	Connectors []*Connector `protobuf:"bytes,1,rep,name=connectors,proto3" json:"connectors,omitempty"`
	// Next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of connectors
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListConnectorsAdminResponse) Reset() {
	*x = ListConnectorsAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectorsAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectorsAdminResponse) ProtoMessage() {}

func (x *ListConnectorsAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectorsAdminResponse.ProtoReflect.Descriptor instead.
func (*ListConnectorsAdminResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{28}
}

func (x *ListConnectorsAdminResponse) GetConnectors() []*Connector {
	if x != nil {
		return x.Connectors
	}
	return nil
}

func (x *ListConnectorsAdminResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListConnectorsAdminResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// LookUpConnectorAdminRequest represents a request to query a
// connector via permalink by admin
type LookUpConnectorAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Permalink of a connector. For example:
	// "connectors/{uid}"
	Permalink string `protobuf:"bytes,1,opt,name=permalink,proto3" json:"permalink,omitempty"`
	// Connector view (default is VIEW_BASIC)
	View *LookUpConnectorAdminRequest_View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.LookUpConnectorAdminRequest_View,oneof" json:"view,omitempty"`
}

func (x *LookUpConnectorAdminRequest) Reset() {
	*x = LookUpConnectorAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpConnectorAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpConnectorAdminRequest) ProtoMessage() {}

func (x *LookUpConnectorAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpConnectorAdminRequest.ProtoReflect.Descriptor instead.
func (*LookUpConnectorAdminRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{29}
}

func (x *LookUpConnectorAdminRequest) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

func (x *LookUpConnectorAdminRequest) GetView() LookUpConnectorAdminRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return LookUpConnectorAdminRequest_VIEW_UNSPECIFIED
}

// LookUpConnectorAdminResponse represents a response for a
// connector
type LookUpConnectorAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connector
	Connector *Connector `protobuf:"bytes,1,opt,name=connector,proto3" json:"connector,omitempty"`
}

func (x *LookUpConnectorAdminResponse) Reset() {
	*x = LookUpConnectorAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpConnectorAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpConnectorAdminResponse) ProtoMessage() {}

func (x *LookUpConnectorAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpConnectorAdminResponse.ProtoReflect.Descriptor instead.
func (*LookUpConnectorAdminResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{30}
}

func (x *LookUpConnectorAdminResponse) GetConnector() *Connector {
	if x != nil {
		return x.Connector
	}
	return nil
}

// CheckConnectorRequest represents a private request to query
// a connector's current state
type CheckConnectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Permalink of a connector. For example:
	// "connectors/{uid}"
	Permalink string `protobuf:"bytes,1,opt,name=permalink,proto3" json:"permalink,omitempty"`
}

func (x *CheckConnectorRequest) Reset() {
	*x = CheckConnectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckConnectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConnectorRequest) ProtoMessage() {}

func (x *CheckConnectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConnectorRequest.ProtoReflect.Descriptor instead.
func (*CheckConnectorRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{31}
}

func (x *CheckConnectorRequest) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

// CheckConnectorResponse represents a response to fetch a
// connector's current state
type CheckConnectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Retrieved connector state
	State Connector_State `protobuf:"varint,1,opt,name=state,proto3,enum=vdp.pipeline.v1alpha.Connector_State" json:"state,omitempty"`
}

func (x *CheckConnectorResponse) Reset() {
	*x = CheckConnectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckConnectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConnectorResponse) ProtoMessage() {}

func (x *CheckConnectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_connector_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConnectorResponse.ProtoReflect.Descriptor instead.
func (*CheckConnectorResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP(), []int{32}
}

func (x *CheckConnectorResponse) GetState() Connector_State {
	if x != nil {
		return x.State
	}
	return Connector_STATE_UNSPECIFIED
}

var File_vdp_pipeline_v1alpha_connector_proto protoreflect.FileDescriptor

var file_vdp_pipeline_v1alpha_connector_proto_rawDesc = []byte{
	0x0a, 0x24, 0x76, 0x64, 0x70, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x76, 0x64, 0x70, 0x2f, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x09, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x68, 0x0a,
	0x19, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2c, 0xe0, 0x41, 0x05, 0xfa, 0x41, 0x26, 0x0a, 0x24, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x17,
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65,
	0x63, 0x68, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41,
	0x03, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c,
	0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f,
	0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x61, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49,
	0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x22, 0x57, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x1a, 0x0a, 0x16, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x02, 0x3a, 0x37, 0xea, 0x41, 0x34,
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65,
	0x63, 0x68, 0x2f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x7d, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x03,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x22, 0x53, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14,
	0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53,
	0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c,
	0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xa0, 0x01,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76,
	0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xea, 0x01, 0x0a, 0x16, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x70,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x4f,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x76,
	0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x22,
	0x53, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x58, 0x0a,
	0x17, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x64,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x9c, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x64, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x1c, 0x12, 0x1a, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e,
	0x74, 0x65, 0x63, 0x68, 0x2f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x22, 0xe1, 0x03, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x52, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1c,
	0x12, 0x1a, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65,
	0x63, 0x68, 0x2f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x04, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x22, 0x53, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x64,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x98, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x14, 0xca, 0x3e,
	0x11, 0xfa, 0x02, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x22, 0x53, 0x0a, 0x04,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x59, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x64, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x5c, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76,
	0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x6b, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x14, 0xca, 0x3e, 0x11, 0xfa, 0x02, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x1c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x58, 0x0a, 0x1e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e,
	0x74, 0x65, 0x63, 0x68, 0x2f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a, 0x1f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x64, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x22, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x10, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x6e, 0x65,
	0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x1b,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x7b, 0x0a, 0x1b, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x51, 0x0a, 0x1c, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x18, 0x54, 0x65,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x14, 0xca, 0x3e, 0x11, 0xfa, 0x02, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x19, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x6a, 0x0a, 0x19, 0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x14, 0xca,
	0x3e, 0x11, 0xfa, 0x02, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1c, 0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x1a, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa7, 0x03, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x53, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x02, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x22, 0x53, 0x0a, 0x04, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x22, 0xa5, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x1b, 0x4c, 0x6f, 0x6f,
	0x6b, 0x55, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x54, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x76, 0x64, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01,
	0x01, 0x22, 0x53, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22,
	0x5d, 0x0a, 0x1c, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x3a,
	0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x55, 0x0a, 0x16, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x42, 0xe4, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x6c, 0x6c, 0x2d, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e,
	0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x64, 0x70, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x56, 0x50, 0x58, 0xaa, 0x02,
	0x14, 0x56, 0x64, 0x70, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x14, 0x56, 0x64, 0x70, 0x5c, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x20, 0x56,
	0x64, 0x70, 0x5c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x16, 0x56, 0x64, 0x70, 0x3a, 0x3a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x3a,
	0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vdp_pipeline_v1alpha_connector_proto_rawDescOnce sync.Once
	file_vdp_pipeline_v1alpha_connector_proto_rawDescData = file_vdp_pipeline_v1alpha_connector_proto_rawDesc
)

func file_vdp_pipeline_v1alpha_connector_proto_rawDescGZIP() []byte {
	file_vdp_pipeline_v1alpha_connector_proto_rawDescOnce.Do(func() {
		file_vdp_pipeline_v1alpha_connector_proto_rawDescData = protoimpl.X.CompressGZIP(file_vdp_pipeline_v1alpha_connector_proto_rawDescData)
	})
	return file_vdp_pipeline_v1alpha_connector_proto_rawDescData
}

var file_vdp_pipeline_v1alpha_connector_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_vdp_pipeline_v1alpha_connector_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_vdp_pipeline_v1alpha_connector_proto_goTypes = []interface{}{
	(Connector_State)(0),                    // 0: vdp.pipeline.v1alpha.Connector.State
	(Connector_Visibility)(0),               // 1: vdp.pipeline.v1alpha.Connector.Visibility
	(ListConnectorsRequest_View)(0),         // 2: vdp.pipeline.v1alpha.ListConnectorsRequest.View
	(LookUpConnectorRequest_View)(0),        // 3: vdp.pipeline.v1alpha.LookUpConnectorRequest.View
	(ListUserConnectorsRequest_View)(0),     // 4: vdp.pipeline.v1alpha.ListUserConnectorsRequest.View
	(GetUserConnectorRequest_View)(0),       // 5: vdp.pipeline.v1alpha.GetUserConnectorRequest.View
	(ListConnectorsAdminRequest_View)(0),    // 6: vdp.pipeline.v1alpha.ListConnectorsAdminRequest.View
	(LookUpConnectorAdminRequest_View)(0),   // 7: vdp.pipeline.v1alpha.LookUpConnectorAdminRequest.View
	(*Connector)(nil),                       // 8: vdp.pipeline.v1alpha.Connector
	(*ListConnectorsRequest)(nil),           // 9: vdp.pipeline.v1alpha.ListConnectorsRequest
	(*ListConnectorsResponse)(nil),          // 10: vdp.pipeline.v1alpha.ListConnectorsResponse
	(*LookUpConnectorRequest)(nil),          // 11: vdp.pipeline.v1alpha.LookUpConnectorRequest
	(*LookUpConnectorResponse)(nil),         // 12: vdp.pipeline.v1alpha.LookUpConnectorResponse
	(*CreateUserConnectorRequest)(nil),      // 13: vdp.pipeline.v1alpha.CreateUserConnectorRequest
	(*CreateUserConnectorResponse)(nil),     // 14: vdp.pipeline.v1alpha.CreateUserConnectorResponse
	(*ListUserConnectorsRequest)(nil),       // 15: vdp.pipeline.v1alpha.ListUserConnectorsRequest
	(*ListUserConnectorsResponse)(nil),      // 16: vdp.pipeline.v1alpha.ListUserConnectorsResponse
	(*GetUserConnectorRequest)(nil),         // 17: vdp.pipeline.v1alpha.GetUserConnectorRequest
	(*GetUserConnectorResponse)(nil),        // 18: vdp.pipeline.v1alpha.GetUserConnectorResponse
	(*UpdateUserConnectorRequest)(nil),      // 19: vdp.pipeline.v1alpha.UpdateUserConnectorRequest
	(*UpdateUserConnectorResponse)(nil),     // 20: vdp.pipeline.v1alpha.UpdateUserConnectorResponse
	(*DeleteUserConnectorRequest)(nil),      // 21: vdp.pipeline.v1alpha.DeleteUserConnectorRequest
	(*DeleteUserConnectorResponse)(nil),     // 22: vdp.pipeline.v1alpha.DeleteUserConnectorResponse
	(*ConnectUserConnectorRequest)(nil),     // 23: vdp.pipeline.v1alpha.ConnectUserConnectorRequest
	(*ConnectUserConnectorResponse)(nil),    // 24: vdp.pipeline.v1alpha.ConnectUserConnectorResponse
	(*DisconnectUserConnectorRequest)(nil),  // 25: vdp.pipeline.v1alpha.DisconnectUserConnectorRequest
	(*DisconnectUserConnectorResponse)(nil), // 26: vdp.pipeline.v1alpha.DisconnectUserConnectorResponse
	(*RenameUserConnectorRequest)(nil),      // 27: vdp.pipeline.v1alpha.RenameUserConnectorRequest
	(*RenameUserConnectorResponse)(nil),     // 28: vdp.pipeline.v1alpha.RenameUserConnectorResponse
	(*ExecuteUserConnectorRequest)(nil),     // 29: vdp.pipeline.v1alpha.ExecuteUserConnectorRequest
	(*ExecuteUserConnectorResponse)(nil),    // 30: vdp.pipeline.v1alpha.ExecuteUserConnectorResponse
	(*TestUserConnectorRequest)(nil),        // 31: vdp.pipeline.v1alpha.TestUserConnectorRequest
	(*TestUserConnectorResponse)(nil),       // 32: vdp.pipeline.v1alpha.TestUserConnectorResponse
	(*WatchUserConnectorRequest)(nil),       // 33: vdp.pipeline.v1alpha.WatchUserConnectorRequest
	(*WatchUserConnectorResponse)(nil),      // 34: vdp.pipeline.v1alpha.WatchUserConnectorResponse
	(*ListConnectorsAdminRequest)(nil),      // 35: vdp.pipeline.v1alpha.ListConnectorsAdminRequest
	(*ListConnectorsAdminResponse)(nil),     // 36: vdp.pipeline.v1alpha.ListConnectorsAdminResponse
	(*LookUpConnectorAdminRequest)(nil),     // 37: vdp.pipeline.v1alpha.LookUpConnectorAdminRequest
	(*LookUpConnectorAdminResponse)(nil),    // 38: vdp.pipeline.v1alpha.LookUpConnectorAdminResponse
	(*CheckConnectorRequest)(nil),           // 39: vdp.pipeline.v1alpha.CheckConnectorRequest
	(*CheckConnectorResponse)(nil),          // 40: vdp.pipeline.v1alpha.CheckConnectorResponse
	(ConnectorType)(0),                      // 41: vdp.pipeline.v1alpha.ConnectorType
	(*structpb.Struct)(nil),                 // 42: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),           // 43: google.protobuf.Timestamp
	(*ConnectorDefinition)(nil),             // 44: vdp.pipeline.v1alpha.ConnectorDefinition
	(*fieldmaskpb.FieldMask)(nil),           // 45: google.protobuf.FieldMask
}
var file_vdp_pipeline_v1alpha_connector_proto_depIdxs = []int32{
	41, // 0: vdp.pipeline.v1alpha.Connector.type:type_name -> vdp.pipeline.v1alpha.ConnectorType
	42, // 1: vdp.pipeline.v1alpha.Connector.configuration:type_name -> google.protobuf.Struct
	0,  // 2: vdp.pipeline.v1alpha.Connector.state:type_name -> vdp.pipeline.v1alpha.Connector.State
	43, // 3: vdp.pipeline.v1alpha.Connector.create_time:type_name -> google.protobuf.Timestamp
	43, // 4: vdp.pipeline.v1alpha.Connector.update_time:type_name -> google.protobuf.Timestamp
	1,  // 5: vdp.pipeline.v1alpha.Connector.visibility:type_name -> vdp.pipeline.v1alpha.Connector.Visibility
	44, // 6: vdp.pipeline.v1alpha.Connector.connector_definition:type_name -> vdp.pipeline.v1alpha.ConnectorDefinition
	43, // 7: vdp.pipeline.v1alpha.Connector.delete_time:type_name -> google.protobuf.Timestamp
	2,  // 8: vdp.pipeline.v1alpha.ListConnectorsRequest.view:type_name -> vdp.pipeline.v1alpha.ListConnectorsRequest.View
	8,  // 9: vdp.pipeline.v1alpha.ListConnectorsResponse.connectors:type_name -> vdp.pipeline.v1alpha.Connector
	3,  // 10: vdp.pipeline.v1alpha.LookUpConnectorRequest.view:type_name -> vdp.pipeline.v1alpha.LookUpConnectorRequest.View
	8,  // 11: vdp.pipeline.v1alpha.LookUpConnectorResponse.connector:type_name -> vdp.pipeline.v1alpha.Connector
	8,  // 12: vdp.pipeline.v1alpha.CreateUserConnectorRequest.connector:type_name -> vdp.pipeline.v1alpha.Connector
	8,  // 13: vdp.pipeline.v1alpha.CreateUserConnectorResponse.connector:type_name -> vdp.pipeline.v1alpha.Connector
	4,  // 14: vdp.pipeline.v1alpha.ListUserConnectorsRequest.view:type_name -> vdp.pipeline.v1alpha.ListUserConnectorsRequest.View
	8,  // 15: vdp.pipeline.v1alpha.ListUserConnectorsResponse.connectors:type_name -> vdp.pipeline.v1alpha.Connector
	5,  // 16: vdp.pipeline.v1alpha.GetUserConnectorRequest.view:type_name -> vdp.pipeline.v1alpha.GetUserConnectorRequest.View
	8,  // 17: vdp.pipeline.v1alpha.GetUserConnectorResponse.connector:type_name -> vdp.pipeline.v1alpha.Connector
	8,  // 18: vdp.pipeline.v1alpha.UpdateUserConnectorRequest.connector:type_name -> vdp.pipeline.v1alpha.Connector
	45, // 19: vdp.pipeline.v1alpha.UpdateUserConnectorRequest.update_mask:type_name -> google.protobuf.FieldMask
	8,  // 20: vdp.pipeline.v1alpha.UpdateUserConnectorResponse.connector:type_name -> vdp.pipeline.v1alpha.Connector
	8,  // 21: vdp.pipeline.v1alpha.ConnectUserConnectorResponse.connector:type_name -> vdp.pipeline.v1alpha.Connector
	8,  // 22: vdp.pipeline.v1alpha.DisconnectUserConnectorResponse.connector:type_name -> vdp.pipeline.v1alpha.Connector
	8,  // 23: vdp.pipeline.v1alpha.RenameUserConnectorResponse.connector:type_name -> vdp.pipeline.v1alpha.Connector
	42, // 24: vdp.pipeline.v1alpha.ExecuteUserConnectorRequest.inputs:type_name -> google.protobuf.Struct
	42, // 25: vdp.pipeline.v1alpha.ExecuteUserConnectorResponse.outputs:type_name -> google.protobuf.Struct
	0,  // 26: vdp.pipeline.v1alpha.TestUserConnectorResponse.state:type_name -> vdp.pipeline.v1alpha.Connector.State
	0,  // 27: vdp.pipeline.v1alpha.WatchUserConnectorResponse.state:type_name -> vdp.pipeline.v1alpha.Connector.State
	6,  // 28: vdp.pipeline.v1alpha.ListConnectorsAdminRequest.view:type_name -> vdp.pipeline.v1alpha.ListConnectorsAdminRequest.View
	8,  // 29: vdp.pipeline.v1alpha.ListConnectorsAdminResponse.connectors:type_name -> vdp.pipeline.v1alpha.Connector
	7,  // 30: vdp.pipeline.v1alpha.LookUpConnectorAdminRequest.view:type_name -> vdp.pipeline.v1alpha.LookUpConnectorAdminRequest.View
	8,  // 31: vdp.pipeline.v1alpha.LookUpConnectorAdminResponse.connector:type_name -> vdp.pipeline.v1alpha.Connector
	0,  // 32: vdp.pipeline.v1alpha.CheckConnectorResponse.state:type_name -> vdp.pipeline.v1alpha.Connector.State
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_vdp_pipeline_v1alpha_connector_proto_init() }
func file_vdp_pipeline_v1alpha_connector_proto_init() {
	if File_vdp_pipeline_v1alpha_connector_proto != nil {
		return
	}
	file_vdp_pipeline_v1alpha_connector_definition_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpConnectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserConnectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserConnectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserConnectorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserConnectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserConnectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserConnectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectUserConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectUserConnectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectUserConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectUserConnectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameUserConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameUserConnectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteUserConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteUserConnectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestUserConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestUserConnectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchUserConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchUserConnectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectorsAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectorsAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpConnectorAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpConnectorAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckConnectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_connector_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckConnectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vdp_pipeline_v1alpha_connector_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Connector_User)(nil),
		(*Connector_Org)(nil),
	}
	file_vdp_pipeline_v1alpha_connector_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_connector_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_connector_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_connector_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_connector_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_connector_proto_msgTypes[29].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vdp_pipeline_v1alpha_connector_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vdp_pipeline_v1alpha_connector_proto_goTypes,
		DependencyIndexes: file_vdp_pipeline_v1alpha_connector_proto_depIdxs,
		EnumInfos:         file_vdp_pipeline_v1alpha_connector_proto_enumTypes,
		MessageInfos:      file_vdp_pipeline_v1alpha_connector_proto_msgTypes,
	}.Build()
	File_vdp_pipeline_v1alpha_connector_proto = out.File
	file_vdp_pipeline_v1alpha_connector_proto_rawDesc = nil
	file_vdp_pipeline_v1alpha_connector_proto_goTypes = nil
	file_vdp_pipeline_v1alpha_connector_proto_depIdxs = nil
}
