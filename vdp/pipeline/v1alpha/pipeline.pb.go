// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: vdp/pipeline/v1alpha/pipeline.proto

package pipelinev1alpha

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v1alpha "github.com/instill-ai/protogen-go/common/healthcheck/v1alpha"
	v1alpha1 "github.com/instill-ai/protogen-go/model/model/v1alpha"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// View represents a view of any resource. The resource view is implemented by
// adding a parameter to the method request which allows the client to specify
// which view of the resource it wants to receive in the response.
type View int32

const (
	// View: UNSPECIFIED
	View_VIEW_UNSPECIFIED View = 0
	// View: BASIC
	View_VIEW_BASIC View = 1
	// View: FULL
	View_VIEW_FULL View = 2
)

// Enum value maps for View.
var (
	View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
	}
	View_value = map[string]int32{
		"VIEW_UNSPECIFIED": 0,
		"VIEW_BASIC":       1,
		"VIEW_FULL":        2,
	}
)

func (x View) Enum() *View {
	p := new(View)
	*p = x
	return p
}

func (x View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[0].Descriptor()
}

func (View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[0]
}

func (x View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use View.Descriptor instead.
func (View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{0}
}

// Mode enumerates the pipeline modes
type Pipeline_Mode int32

const (
	// Mode: UNSPECIFIED
	Pipeline_MODE_UNSPECIFIED Pipeline_Mode = 0
	// Mode: SYNC
	Pipeline_MODE_SYNC Pipeline_Mode = 1
	// Mode: ASYNC
	Pipeline_MODE_ASYNC Pipeline_Mode = 2
)

// Enum value maps for Pipeline_Mode.
var (
	Pipeline_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_SYNC",
		2: "MODE_ASYNC",
	}
	Pipeline_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"MODE_SYNC":        1,
		"MODE_ASYNC":       2,
	}
)

func (x Pipeline_Mode) Enum() *Pipeline_Mode {
	p := new(Pipeline_Mode)
	*p = x
	return p
}

func (x Pipeline_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pipeline_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[1].Descriptor()
}

func (Pipeline_Mode) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[1]
}

func (x Pipeline_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pipeline_Mode.Descriptor instead.
func (Pipeline_Mode) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{6, 0}
}

// State enumerates the state of a pipeline
type Pipeline_State int32

const (
	// State: UNSPECIFIED
	Pipeline_STATE_UNSPECIFIED Pipeline_State = 0
	// State INACTIVE indicates the pipeline is inactive
	Pipeline_STATE_INACTIVE Pipeline_State = 1
	// State ACTIVE indicates the pipeline is active
	Pipeline_STATE_ACTIVE Pipeline_State = 2
	// State ERROR indicates the pipeline has error
	Pipeline_STATE_ERROR Pipeline_State = 3
)

// Enum value maps for Pipeline_State.
var (
	Pipeline_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_INACTIVE",
		2: "STATE_ACTIVE",
		3: "STATE_ERROR",
	}
	Pipeline_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_INACTIVE":    1,
		"STATE_ACTIVE":      2,
		"STATE_ERROR":       3,
	}
)

func (x Pipeline_State) Enum() *Pipeline_State {
	p := new(Pipeline_State)
	*p = x
	return p
}

func (x Pipeline_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Pipeline_State) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[2].Descriptor()
}

func (Pipeline_State) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[2]
}

func (x Pipeline_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Pipeline_State.Descriptor instead.
func (Pipeline_State) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{6, 1}
}

// LivenessRequest represents a request to check a service liveness status
type LivenessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckRequest message
	HealthCheckRequest *v1alpha.HealthCheckRequest `protobuf:"bytes,1,opt,name=health_check_request,json=healthCheckRequest,proto3,oneof" json:"health_check_request,omitempty"`
}

func (x *LivenessRequest) Reset() {
	*x = LivenessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessRequest) ProtoMessage() {}

func (x *LivenessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessRequest.ProtoReflect.Descriptor instead.
func (*LivenessRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *LivenessRequest) GetHealthCheckRequest() *v1alpha.HealthCheckRequest {
	if x != nil {
		return x.HealthCheckRequest
	}
	return nil
}

// LivenessResponse represents a response for a service liveness status
type LivenessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckResponse message
	HealthCheckResponse *v1alpha.HealthCheckResponse `protobuf:"bytes,1,opt,name=health_check_response,json=healthCheckResponse,proto3" json:"health_check_response,omitempty"`
}

func (x *LivenessResponse) Reset() {
	*x = LivenessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessResponse) ProtoMessage() {}

func (x *LivenessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessResponse.ProtoReflect.Descriptor instead.
func (*LivenessResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{1}
}

func (x *LivenessResponse) GetHealthCheckResponse() *v1alpha.HealthCheckResponse {
	if x != nil {
		return x.HealthCheckResponse
	}
	return nil
}

// ReadinessRequest represents a request to check a service readiness status
type ReadinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckRequest message
	HealthCheckRequest *v1alpha.HealthCheckRequest `protobuf:"bytes,1,opt,name=health_check_request,json=healthCheckRequest,proto3,oneof" json:"health_check_request,omitempty"`
}

func (x *ReadinessRequest) Reset() {
	*x = ReadinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadinessRequest) ProtoMessage() {}

func (x *ReadinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadinessRequest.ProtoReflect.Descriptor instead.
func (*ReadinessRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{2}
}

func (x *ReadinessRequest) GetHealthCheckRequest() *v1alpha.HealthCheckRequest {
	if x != nil {
		return x.HealthCheckRequest
	}
	return nil
}

// ReadinessResponse represents a response for a service readiness status
type ReadinessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckResponse message
	HealthCheckResponse *v1alpha.HealthCheckResponse `protobuf:"bytes,1,opt,name=health_check_response,json=healthCheckResponse,proto3" json:"health_check_response,omitempty"`
}

func (x *ReadinessResponse) Reset() {
	*x = ReadinessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadinessResponse) ProtoMessage() {}

func (x *ReadinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadinessResponse.ProtoReflect.Descriptor instead.
func (*ReadinessResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{3}
}

func (x *ReadinessResponse) GetHealthCheckResponse() *v1alpha.HealthCheckResponse {
	if x != nil {
		return x.HealthCheckResponse
	}
	return nil
}

// Represents a pipeline component
type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Component id that is given by the users
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A pipeline component resource name
	ResourceName string `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// A pipeline component resource detail
	ResourceDetail *structpb.Struct `protobuf:"bytes,3,opt,name=resource_detail,json=resourceDetail,proto3" json:"resource_detail,omitempty"`
	// Metadata for the pipeline component
	Metadata *structpb.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Dependencies for the pipeline component
	Dependencies map[string]string `protobuf:"bytes,5,rep,name=dependencies,proto3" json:"dependencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{4}
}

func (x *Component) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Component) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *Component) GetResourceDetail() *structpb.Struct {
	if x != nil {
		return x.ResourceDetail
	}
	return nil
}

func (x *Component) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Component) GetDependencies() map[string]string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

// Pipeline represents a pipeline recipe
type Recipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Recipe schema version
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// List of pipeline components
	Components []*Component `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{5}
}

func (x *Recipe) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Recipe) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

// Pipeline represents the content of a pipeline
type Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline UUID
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Pipeline resource ID (the last segment of the resource name) used to
	// construct the resource name. This conforms to RFC-1034, which restricts to
	// letters, numbers, and hyphen, with the first character a letter, the last a
	// letter or a number, and a 63 character maximum.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Pipeline description
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Pipeline recipe
	Recipe *Recipe `protobuf:"bytes,5,opt,name=recipe,proto3" json:"recipe,omitempty"`
	// Pipeline mode
	Mode Pipeline_Mode `protobuf:"varint,6,opt,name=mode,proto3,enum=vdp.pipeline.v1alpha.Pipeline_Mode" json:"mode,omitempty"`
	// Pipeline state
	State Pipeline_State `protobuf:"varint,7,opt,name=state,proto3,enum=vdp.pipeline.v1alpha.Pipeline_State" json:"state,omitempty"`
	// Pipeline owner
	//
	// Types that are assignable to Owner:
	//
	//	*Pipeline_User
	//	*Pipeline_Org
	Owner isPipeline_Owner `protobuf_oneof:"owner"`
	// Pipeline creation time
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Pipeline update time
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{6}
}

func (x *Pipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pipeline) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Pipeline) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pipeline) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Pipeline) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

func (x *Pipeline) GetMode() Pipeline_Mode {
	if x != nil {
		return x.Mode
	}
	return Pipeline_MODE_UNSPECIFIED
}

func (x *Pipeline) GetState() Pipeline_State {
	if x != nil {
		return x.State
	}
	return Pipeline_STATE_UNSPECIFIED
}

func (m *Pipeline) GetOwner() isPipeline_Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (x *Pipeline) GetUser() string {
	if x, ok := x.GetOwner().(*Pipeline_User); ok {
		return x.User
	}
	return ""
}

func (x *Pipeline) GetOrg() string {
	if x, ok := x.GetOwner().(*Pipeline_Org); ok {
		return x.Org
	}
	return ""
}

func (x *Pipeline) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Pipeline) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type isPipeline_Owner interface {
	isPipeline_Owner()
}

type Pipeline_User struct {
	// The resource name with UUID of a user, e.g.,
	// "users/bfb978f8-78d3-4338-aa2b-a6c699cb07c5".
	User string `protobuf:"bytes,8,opt,name=user,proto3,oneof"`
}

type Pipeline_Org struct {
	// The resource name with UUID of an organization
	Org string `protobuf:"bytes,9,opt,name=org,proto3,oneof"`
}

func (*Pipeline_User) isPipeline_Owner() {}

func (*Pipeline_Org) isPipeline_Owner() {}

// CreatePipelineRequest represents a request to create a pipeline
type CreatePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource to create
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *CreatePipelineRequest) Reset() {
	*x = CreatePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePipelineRequest) ProtoMessage() {}

func (x *CreatePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePipelineRequest.ProtoReflect.Descriptor instead.
func (*CreatePipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{7}
}

func (x *CreatePipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// CreatePipelineResponse represents a response for a pipeline resource
type CreatePipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *CreatePipelineResponse) Reset() {
	*x = CreatePipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePipelineResponse) ProtoMessage() {}

func (x *CreatePipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePipelineResponse.ProtoReflect.Descriptor instead.
func (*CreatePipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{8}
}

func (x *CreatePipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// ListPipelinesRequest represents a request to list pipelines
type ListPipelinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of pipelines to return. The service may return fewer
	// than this value. If unspecified, at most 10 pipelines will be returned. The
	// maximum value is 100; values above 100 will be coerced to 100.
	PageSize *int64 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// View view (default is VIEW_BASIC)
	View *View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.View,oneof" json:"view,omitempty"`
	// Filter expression to list pipelines
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
}

func (x *ListPipelinesRequest) Reset() {
	*x = ListPipelinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesRequest) ProtoMessage() {}

func (x *ListPipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesRequest.ProtoReflect.Descriptor instead.
func (*ListPipelinesRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{9}
}

func (x *ListPipelinesRequest) GetPageSize() int64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListPipelinesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListPipelinesRequest) GetView() View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return View_VIEW_UNSPECIFIED
}

func (x *ListPipelinesRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

// ListPipelinesResponse represents a response for a list of pipelines
type ListPipelinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline resources
	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	// Next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of pipeline resources
	TotalSize int64 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListPipelinesResponse) Reset() {
	*x = ListPipelinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesResponse) ProtoMessage() {}

func (x *ListPipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesResponse.ProtoReflect.Descriptor instead.
func (*ListPipelinesResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{10}
}

func (x *ListPipelinesResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *ListPipelinesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListPipelinesResponse) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// GetPipelineRequest represents a request to query a pipeline
type GetPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline resource view (default is VIEW_BASIC)
	View *View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.View,oneof" json:"view,omitempty"`
}

func (x *GetPipelineRequest) Reset() {
	*x = GetPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPipelineRequest) ProtoMessage() {}

func (x *GetPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPipelineRequest.ProtoReflect.Descriptor instead.
func (*GetPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{11}
}

func (x *GetPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPipelineRequest) GetView() View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return View_VIEW_UNSPECIFIED
}

// GetPipelineResponse represents a response for a pipeline resource
type GetPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *GetPipelineResponse) Reset() {
	*x = GetPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPipelineResponse) ProtoMessage() {}

func (x *GetPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPipelineResponse.ProtoReflect.Descriptor instead.
func (*GetPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{12}
}

func (x *GetPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// UpdatePipelineRequest represents a request to update a pipeline
type UpdatePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource to update
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// Update mask for a pipeline resource
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdatePipelineRequest) Reset() {
	*x = UpdatePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePipelineRequest) ProtoMessage() {}

func (x *UpdatePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePipelineRequest.ProtoReflect.Descriptor instead.
func (*UpdatePipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{13}
}

func (x *UpdatePipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *UpdatePipelineRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdatePipelineResponse represents a response for a pipeline resource
type UpdatePipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An updated pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *UpdatePipelineResponse) Reset() {
	*x = UpdatePipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePipelineResponse) ProtoMessage() {}

func (x *UpdatePipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePipelineResponse.ProtoReflect.Descriptor instead.
func (*UpdatePipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{14}
}

func (x *UpdatePipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// DeletePipelineRequest represents a request to delete a pipeline resource
type DeletePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeletePipelineRequest) Reset() {
	*x = DeletePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePipelineRequest) ProtoMessage() {}

func (x *DeletePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePipelineRequest.ProtoReflect.Descriptor instead.
func (*DeletePipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{15}
}

func (x *DeletePipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeletePipelineResponse represents an empty response
type DeletePipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePipelineResponse) Reset() {
	*x = DeletePipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePipelineResponse) ProtoMessage() {}

func (x *DeletePipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePipelineResponse.ProtoReflect.Descriptor instead.
func (*DeletePipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{16}
}

// LookUpPipelineRequest represents a request to query a pipeline via permalink
type LookUpPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Permalink of a pipeline. For example:
	// "pipelines/{uid}"
	Permalink string `protobuf:"bytes,1,opt,name=permalink,proto3" json:"permalink,omitempty"`
	// View view (default is VIEW_BASIC)
	View *View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.View,oneof" json:"view,omitempty"`
}

func (x *LookUpPipelineRequest) Reset() {
	*x = LookUpPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpPipelineRequest) ProtoMessage() {}

func (x *LookUpPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpPipelineRequest.ProtoReflect.Descriptor instead.
func (*LookUpPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{17}
}

func (x *LookUpPipelineRequest) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

func (x *LookUpPipelineRequest) GetView() View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return View_VIEW_UNSPECIFIED
}

// LookUpPipelineResponse represents a response for a pipeline resource
type LookUpPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *LookUpPipelineResponse) Reset() {
	*x = LookUpPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpPipelineResponse) ProtoMessage() {}

func (x *LookUpPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpPipelineResponse.ProtoReflect.Descriptor instead.
func (*LookUpPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{18}
}

func (x *LookUpPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// ActivatePipelineRequest represents a request to activate a pipeline
type ActivatePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ActivatePipelineRequest) Reset() {
	*x = ActivatePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivatePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivatePipelineRequest) ProtoMessage() {}

func (x *ActivatePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivatePipelineRequest.ProtoReflect.Descriptor instead.
func (*ActivatePipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{19}
}

func (x *ActivatePipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ActivatePipelineResponse represents an activated pipeline
type ActivatePipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *ActivatePipelineResponse) Reset() {
	*x = ActivatePipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivatePipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivatePipelineResponse) ProtoMessage() {}

func (x *ActivatePipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivatePipelineResponse.ProtoReflect.Descriptor instead.
func (*ActivatePipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{20}
}

func (x *ActivatePipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// DeactivatePipelineRequest represents a request to deactivate a pipeline
type DeactivatePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeactivatePipelineRequest) Reset() {
	*x = DeactivatePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivatePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivatePipelineRequest) ProtoMessage() {}

func (x *DeactivatePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivatePipelineRequest.ProtoReflect.Descriptor instead.
func (*DeactivatePipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{21}
}

func (x *DeactivatePipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeactivatePipelineResponse represents an inactivated pipeline
type DeactivatePipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *DeactivatePipelineResponse) Reset() {
	*x = DeactivatePipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivatePipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivatePipelineResponse) ProtoMessage() {}

func (x *DeactivatePipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivatePipelineResponse.ProtoReflect.Descriptor instead.
func (*DeactivatePipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{22}
}

func (x *DeactivatePipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// RenamePipelineRequest represents a request to rename the pipeline resource
// name
type RenamePipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline new resource id to replace with the pipeline resource name to be
	// "pipelines/{new_pipeline_id}"
	NewPipelineId string `protobuf:"bytes,2,opt,name=new_pipeline_id,json=newPipelineId,proto3" json:"new_pipeline_id,omitempty"`
}

func (x *RenamePipelineRequest) Reset() {
	*x = RenamePipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenamePipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenamePipelineRequest) ProtoMessage() {}

func (x *RenamePipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenamePipelineRequest.ProtoReflect.Descriptor instead.
func (*RenamePipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{23}
}

func (x *RenamePipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenamePipelineRequest) GetNewPipelineId() string {
	if x != nil {
		return x.NewPipelineId
	}
	return ""
}

// RenamePipelineResponse represents a renamed pipeline resource
type RenamePipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *RenamePipelineResponse) Reset() {
	*x = RenamePipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenamePipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenamePipelineResponse) ProtoMessage() {}

func (x *RenamePipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenamePipelineResponse.ProtoReflect.Descriptor instead.
func (*RenamePipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{24}
}

func (x *RenamePipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// TaskOutput represents the output of a CV Task result from a
// model, extended from model.v1alpha.TaskOutput.
// Here we don't use a model.v1alpha.TaskOutput type field but explicitly use
// the replicated oneof field because we want the CV Task output to be at the
// same message layer like the trigger output of model.
type TaskOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of input data in a batch
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// The inference task output
	//
	// Types that are assignable to Output:
	//
	//	*TaskOutput_Classification
	//	*TaskOutput_Detection
	//	*TaskOutput_Keypoint
	//	*TaskOutput_Ocr
	//	*TaskOutput_InstanceSegmentation
	//	*TaskOutput_SemanticSegmentation
	//	*TaskOutput_TextToImage
	//	*TaskOutput_TextGeneration
	//	*TaskOutput_Unspecified
	Output isTaskOutput_Output `protobuf_oneof:"output"`
}

func (x *TaskOutput) Reset() {
	*x = TaskOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOutput) ProtoMessage() {}

func (x *TaskOutput) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOutput.ProtoReflect.Descriptor instead.
func (*TaskOutput) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{25}
}

func (x *TaskOutput) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (m *TaskOutput) GetOutput() isTaskOutput_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (x *TaskOutput) GetClassification() *v1alpha1.ClassificationOutput {
	if x, ok := x.GetOutput().(*TaskOutput_Classification); ok {
		return x.Classification
	}
	return nil
}

func (x *TaskOutput) GetDetection() *v1alpha1.DetectionOutput {
	if x, ok := x.GetOutput().(*TaskOutput_Detection); ok {
		return x.Detection
	}
	return nil
}

func (x *TaskOutput) GetKeypoint() *v1alpha1.KeypointOutput {
	if x, ok := x.GetOutput().(*TaskOutput_Keypoint); ok {
		return x.Keypoint
	}
	return nil
}

func (x *TaskOutput) GetOcr() *v1alpha1.OcrOutput {
	if x, ok := x.GetOutput().(*TaskOutput_Ocr); ok {
		return x.Ocr
	}
	return nil
}

func (x *TaskOutput) GetInstanceSegmentation() *v1alpha1.InstanceSegmentationOutput {
	if x, ok := x.GetOutput().(*TaskOutput_InstanceSegmentation); ok {
		return x.InstanceSegmentation
	}
	return nil
}

func (x *TaskOutput) GetSemanticSegmentation() *v1alpha1.SemanticSegmentationOutput {
	if x, ok := x.GetOutput().(*TaskOutput_SemanticSegmentation); ok {
		return x.SemanticSegmentation
	}
	return nil
}

func (x *TaskOutput) GetTextToImage() *v1alpha1.TextToImageOutput {
	if x, ok := x.GetOutput().(*TaskOutput_TextToImage); ok {
		return x.TextToImage
	}
	return nil
}

func (x *TaskOutput) GetTextGeneration() *v1alpha1.TextGenerationOutput {
	if x, ok := x.GetOutput().(*TaskOutput_TextGeneration); ok {
		return x.TextGeneration
	}
	return nil
}

func (x *TaskOutput) GetUnspecified() *v1alpha1.UnspecifiedOutput {
	if x, ok := x.GetOutput().(*TaskOutput_Unspecified); ok {
		return x.Unspecified
	}
	return nil
}

type isTaskOutput_Output interface {
	isTaskOutput_Output()
}

type TaskOutput_Classification struct {
	// The classification output
	Classification *v1alpha1.ClassificationOutput `protobuf:"bytes,2,opt,name=classification,proto3,oneof"`
}

type TaskOutput_Detection struct {
	// The detection output
	Detection *v1alpha1.DetectionOutput `protobuf:"bytes,3,opt,name=detection,proto3,oneof"`
}

type TaskOutput_Keypoint struct {
	// The keypoint output
	Keypoint *v1alpha1.KeypointOutput `protobuf:"bytes,4,opt,name=keypoint,proto3,oneof"`
}

type TaskOutput_Ocr struct {
	// The ocr output
	Ocr *v1alpha1.OcrOutput `protobuf:"bytes,5,opt,name=ocr,proto3,oneof"`
}

type TaskOutput_InstanceSegmentation struct {
	// The instance segmentation output
	InstanceSegmentation *v1alpha1.InstanceSegmentationOutput `protobuf:"bytes,6,opt,name=instance_segmentation,json=instanceSegmentation,proto3,oneof"`
}

type TaskOutput_SemanticSegmentation struct {
	// The semantic segmentation output
	SemanticSegmentation *v1alpha1.SemanticSegmentationOutput `protobuf:"bytes,7,opt,name=semantic_segmentation,json=semanticSegmentation,proto3,oneof"`
}

type TaskOutput_TextToImage struct {
	// The text to image output
	TextToImage *v1alpha1.TextToImageOutput `protobuf:"bytes,8,opt,name=text_to_image,json=textToImage,proto3,oneof"`
}

type TaskOutput_TextGeneration struct {
	// The text generation
	TextGeneration *v1alpha1.TextGenerationOutput `protobuf:"bytes,9,opt,name=text_generation,json=textGeneration,proto3,oneof"`
}

type TaskOutput_Unspecified struct {
	// The unspecified task output
	Unspecified *v1alpha1.UnspecifiedOutput `protobuf:"bytes,10,opt,name=unspecified,proto3,oneof"`
}

func (*TaskOutput_Classification) isTaskOutput_Output() {}

func (*TaskOutput_Detection) isTaskOutput_Output() {}

func (*TaskOutput_Keypoint) isTaskOutput_Output() {}

func (*TaskOutput_Ocr) isTaskOutput_Output() {}

func (*TaskOutput_InstanceSegmentation) isTaskOutput_Output() {}

func (*TaskOutput_SemanticSegmentation) isTaskOutput_Output() {}

func (*TaskOutput_TextToImage) isTaskOutput_Output() {}

func (*TaskOutput_TextGeneration) isTaskOutput_Output() {}

func (*TaskOutput_Unspecified) isTaskOutput_Output() {}

// ModelOutput represents one model inference result
type ModelOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The model
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// The task type
	Task v1alpha1.Model_Task `protobuf:"varint,2,opt,name=task,proto3,enum=model.model.v1alpha.Model_Task" json:"task,omitempty"`
	// The extended task outputs based on the model inference (i.e.,
	// from a trigger endpoint of model-backend)
	TaskOutputs []*TaskOutput `protobuf:"bytes,3,rep,name=task_outputs,json=taskOutputs,proto3" json:"task_outputs,omitempty"`
}

func (x *ModelOutput) Reset() {
	*x = ModelOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelOutput) ProtoMessage() {}

func (x *ModelOutput) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelOutput.ProtoReflect.Descriptor instead.
func (*ModelOutput) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{26}
}

func (x *ModelOutput) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ModelOutput) GetTask() v1alpha1.Model_Task {
	if x != nil {
		return x.Task
	}
	return v1alpha1.Model_Task(0)
}

func (x *ModelOutput) GetTaskOutputs() []*TaskOutput {
	if x != nil {
		return x.TaskOutputs
	}
	return nil
}

// TriggerSyncPipelineRequest represents a request to trigger a pipeline
type TriggerSyncPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Input to the pipeline
	TaskInputs []*v1alpha1.TaskInput `protobuf:"bytes,2,rep,name=task_inputs,json=taskInputs,proto3" json:"task_inputs,omitempty"`
}

func (x *TriggerSyncPipelineRequest) Reset() {
	*x = TriggerSyncPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerSyncPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerSyncPipelineRequest) ProtoMessage() {}

func (x *TriggerSyncPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerSyncPipelineRequest.ProtoReflect.Descriptor instead.
func (*TriggerSyncPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{27}
}

func (x *TriggerSyncPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerSyncPipelineRequest) GetTaskInputs() []*v1alpha1.TaskInput {
	if x != nil {
		return x.TaskInputs
	}
	return nil
}

// TriggerSyncPipelineResponse represents a response for the output
// of a pipeline, i.e., the multiple model inference outputs
type TriggerSyncPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data mapping indices stores UUID for each input
	DataMappingIndices []string `protobuf:"bytes,1,rep,name=data_mapping_indices,json=dataMappingIndices,proto3" json:"data_mapping_indices,omitempty"`
	// The multiple model inference outputs
	ModelOutputs []*ModelOutput `protobuf:"bytes,2,rep,name=model_outputs,json=modelOutputs,proto3" json:"model_outputs,omitempty"`
}

func (x *TriggerSyncPipelineResponse) Reset() {
	*x = TriggerSyncPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerSyncPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerSyncPipelineResponse) ProtoMessage() {}

func (x *TriggerSyncPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerSyncPipelineResponse.ProtoReflect.Descriptor instead.
func (*TriggerSyncPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{28}
}

func (x *TriggerSyncPipelineResponse) GetDataMappingIndices() []string {
	if x != nil {
		return x.DataMappingIndices
	}
	return nil
}

func (x *TriggerSyncPipelineResponse) GetModelOutputs() []*ModelOutput {
	if x != nil {
		return x.ModelOutputs
	}
	return nil
}

// TriggerSyncPipelineBinaryFileUploadRequest represents a request to trigger a
// pipeline
type TriggerSyncPipelineBinaryFileUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Input to the pipeline
	TaskInput *v1alpha1.TaskInputStream `protobuf:"bytes,2,opt,name=task_input,json=taskInput,proto3" json:"task_input,omitempty"`
}

func (x *TriggerSyncPipelineBinaryFileUploadRequest) Reset() {
	*x = TriggerSyncPipelineBinaryFileUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerSyncPipelineBinaryFileUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerSyncPipelineBinaryFileUploadRequest) ProtoMessage() {}

func (x *TriggerSyncPipelineBinaryFileUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerSyncPipelineBinaryFileUploadRequest.ProtoReflect.Descriptor instead.
func (*TriggerSyncPipelineBinaryFileUploadRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{29}
}

func (x *TriggerSyncPipelineBinaryFileUploadRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerSyncPipelineBinaryFileUploadRequest) GetTaskInput() *v1alpha1.TaskInputStream {
	if x != nil {
		return x.TaskInput
	}
	return nil
}

// TriggerSyncPipelineBinaryFileUploadResponse represents a response for the
// output of a pipeline, i.e., the multiple model inference outputs
type TriggerSyncPipelineBinaryFileUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data mapping indices stores UUID for each input
	DataMappingIndices []string `protobuf:"bytes,1,rep,name=data_mapping_indices,json=dataMappingIndices,proto3" json:"data_mapping_indices,omitempty"`
	// The multiple model inference outputs
	ModelOutputs []*ModelOutput `protobuf:"bytes,2,rep,name=model_outputs,json=modelOutputs,proto3" json:"model_outputs,omitempty"`
}

func (x *TriggerSyncPipelineBinaryFileUploadResponse) Reset() {
	*x = TriggerSyncPipelineBinaryFileUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerSyncPipelineBinaryFileUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerSyncPipelineBinaryFileUploadResponse) ProtoMessage() {}

func (x *TriggerSyncPipelineBinaryFileUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerSyncPipelineBinaryFileUploadResponse.ProtoReflect.Descriptor instead.
func (*TriggerSyncPipelineBinaryFileUploadResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{30}
}

func (x *TriggerSyncPipelineBinaryFileUploadResponse) GetDataMappingIndices() []string {
	if x != nil {
		return x.DataMappingIndices
	}
	return nil
}

func (x *TriggerSyncPipelineBinaryFileUploadResponse) GetModelOutputs() []*ModelOutput {
	if x != nil {
		return x.ModelOutputs
	}
	return nil
}

// TriggerAsyncPipelineRequest represents a request to trigger a async pipeline
type TriggerAsyncPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Input to the pipeline
	TaskInputs []*v1alpha1.TaskInput `protobuf:"bytes,2,rep,name=task_inputs,json=taskInputs,proto3" json:"task_inputs,omitempty"`
}

func (x *TriggerAsyncPipelineRequest) Reset() {
	*x = TriggerAsyncPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncPipelineRequest) ProtoMessage() {}

func (x *TriggerAsyncPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncPipelineRequest.ProtoReflect.Descriptor instead.
func (*TriggerAsyncPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{31}
}

func (x *TriggerAsyncPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerAsyncPipelineRequest) GetTaskInputs() []*v1alpha1.TaskInput {
	if x != nil {
		return x.TaskInputs
	}
	return nil
}

// TriggerAsyncPipelineResponse represents a response for the longrunning
// operation of a pipeline
type TriggerAsyncPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trigger async pipeline operation message
	Operation *longrunningpb.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	// The data mapping indices for each input
	DataMappingIndices []string `protobuf:"bytes,2,rep,name=data_mapping_indices,json=dataMappingIndices,proto3" json:"data_mapping_indices,omitempty"`
}

func (x *TriggerAsyncPipelineResponse) Reset() {
	*x = TriggerAsyncPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncPipelineResponse) ProtoMessage() {}

func (x *TriggerAsyncPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncPipelineResponse.ProtoReflect.Descriptor instead.
func (*TriggerAsyncPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{32}
}

func (x *TriggerAsyncPipelineResponse) GetOperation() *longrunningpb.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *TriggerAsyncPipelineResponse) GetDataMappingIndices() []string {
	if x != nil {
		return x.DataMappingIndices
	}
	return nil
}

// TriggerAsyncPipelineBinaryFileUploadRequest represents a request to trigger a
// pipeline
type TriggerAsyncPipelineBinaryFileUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Input to the pipeline
	TaskInput *v1alpha1.TaskInputStream `protobuf:"bytes,2,opt,name=task_input,json=taskInput,proto3" json:"task_input,omitempty"`
}

func (x *TriggerAsyncPipelineBinaryFileUploadRequest) Reset() {
	*x = TriggerAsyncPipelineBinaryFileUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncPipelineBinaryFileUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncPipelineBinaryFileUploadRequest) ProtoMessage() {}

func (x *TriggerAsyncPipelineBinaryFileUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncPipelineBinaryFileUploadRequest.ProtoReflect.Descriptor instead.
func (*TriggerAsyncPipelineBinaryFileUploadRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{33}
}

func (x *TriggerAsyncPipelineBinaryFileUploadRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerAsyncPipelineBinaryFileUploadRequest) GetTaskInput() *v1alpha1.TaskInputStream {
	if x != nil {
		return x.TaskInput
	}
	return nil
}

// TriggerAsyncPipelineBinaryFileUploadResponse represents a response for the
// longrunning operation of a pipeline
type TriggerAsyncPipelineBinaryFileUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trigger async pipeline operation message
	Operation *longrunningpb.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	// The data mapping indices for each input
	DataMappingIndices []string `protobuf:"bytes,2,rep,name=data_mapping_indices,json=dataMappingIndices,proto3" json:"data_mapping_indices,omitempty"`
}

func (x *TriggerAsyncPipelineBinaryFileUploadResponse) Reset() {
	*x = TriggerAsyncPipelineBinaryFileUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncPipelineBinaryFileUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncPipelineBinaryFileUploadResponse) ProtoMessage() {}

func (x *TriggerAsyncPipelineBinaryFileUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncPipelineBinaryFileUploadResponse.ProtoReflect.Descriptor instead.
func (*TriggerAsyncPipelineBinaryFileUploadResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{34}
}

func (x *TriggerAsyncPipelineBinaryFileUploadResponse) GetOperation() *longrunningpb.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *TriggerAsyncPipelineBinaryFileUploadResponse) GetDataMappingIndices() []string {
	if x != nil {
		return x.DataMappingIndices
	}
	return nil
}

// GetTriggerAsyncOperationRequest represents a request to query a longrunning
// operation
type GetTriggerAsyncOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the operation resource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTriggerAsyncOperationRequest) Reset() {
	*x = GetTriggerAsyncOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTriggerAsyncOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTriggerAsyncOperationRequest) ProtoMessage() {}

func (x *GetTriggerAsyncOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTriggerAsyncOperationRequest.ProtoReflect.Descriptor instead.
func (*GetTriggerAsyncOperationRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{35}
}

func (x *GetTriggerAsyncOperationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetTriggerAsyncOperationResponse represents a response for a longrunning
// operation
type GetTriggerAsyncOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The retrieved longrunning operation
	Operation *longrunningpb.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *GetTriggerAsyncOperationResponse) Reset() {
	*x = GetTriggerAsyncOperationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTriggerAsyncOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTriggerAsyncOperationResponse) ProtoMessage() {}

func (x *GetTriggerAsyncOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTriggerAsyncOperationResponse.ProtoReflect.Descriptor instead.
func (*GetTriggerAsyncOperationResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{36}
}

func (x *GetTriggerAsyncOperationResponse) GetOperation() *longrunningpb.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// WatchPipelineRequest represents a public request to query
// a pipeline's current state
type WatchPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WatchPipelineRequest) Reset() {
	*x = WatchPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchPipelineRequest) ProtoMessage() {}

func (x *WatchPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchPipelineRequest.ProtoReflect.Descriptor instead.
func (*WatchPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{37}
}

func (x *WatchPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// WatchPipelineResponse represents a response to fetch a pipeline's
// current state
type WatchPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Retrieved pipeline state
	State Pipeline_State `protobuf:"varint,1,opt,name=state,proto3,enum=vdp.pipeline.v1alpha.Pipeline_State" json:"state,omitempty"`
}

func (x *WatchPipelineResponse) Reset() {
	*x = WatchPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchPipelineResponse) ProtoMessage() {}

func (x *WatchPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchPipelineResponse.ProtoReflect.Descriptor instead.
func (*WatchPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{38}
}

func (x *WatchPipelineResponse) GetState() Pipeline_State {
	if x != nil {
		return x.State
	}
	return Pipeline_STATE_UNSPECIFIED
}

// ListPipelinesAdminRequest represents a request to list all pipelines from all
// users by admin
type ListPipelinesAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of pipelines to return. The service may return fewer
	// than this value. If unspecified, at most 10 pipelines will be returned. The
	// maximum value is 100; values above 100 will be coerced to 100.
	PageSize *int64 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// View view (default is VIEW_BASIC)
	View *View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.View,oneof" json:"view,omitempty"`
	// Filter expression to list pipelines
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
}

func (x *ListPipelinesAdminRequest) Reset() {
	*x = ListPipelinesAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinesAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesAdminRequest) ProtoMessage() {}

func (x *ListPipelinesAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesAdminRequest.ProtoReflect.Descriptor instead.
func (*ListPipelinesAdminRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{39}
}

func (x *ListPipelinesAdminRequest) GetPageSize() int64 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListPipelinesAdminRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListPipelinesAdminRequest) GetView() View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return View_VIEW_UNSPECIFIED
}

func (x *ListPipelinesAdminRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

// ListPipelinesAdminResponse represents a response for a list of pipelines
// The recipe returned will be permaLinks instead of resourceName temporary,
// this will be refactored soon
type ListPipelinesAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline resources
	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	// Next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of pipeline resources
	TotalSize int64 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListPipelinesAdminResponse) Reset() {
	*x = ListPipelinesAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinesAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesAdminResponse) ProtoMessage() {}

func (x *ListPipelinesAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesAdminResponse.ProtoReflect.Descriptor instead.
func (*ListPipelinesAdminResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{40}
}

func (x *ListPipelinesAdminResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *ListPipelinesAdminResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListPipelinesAdminResponse) GetTotalSize() int64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// GetPipelineAdminRequest represents a request to query a user's pipeline by
// admin
type GetPipelineAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline resource view (default is VIEW_BASIC)
	View *View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.View,oneof" json:"view,omitempty"`
}

func (x *GetPipelineAdminRequest) Reset() {
	*x = GetPipelineAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPipelineAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPipelineAdminRequest) ProtoMessage() {}

func (x *GetPipelineAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPipelineAdminRequest.ProtoReflect.Descriptor instead.
func (*GetPipelineAdminRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{41}
}

func (x *GetPipelineAdminRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPipelineAdminRequest) GetView() View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return View_VIEW_UNSPECIFIED
}

// GetPipelineAdminResponse represents a response for a pipeline resource
type GetPipelineAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *GetPipelineAdminResponse) Reset() {
	*x = GetPipelineAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPipelineAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPipelineAdminResponse) ProtoMessage() {}

func (x *GetPipelineAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPipelineAdminResponse.ProtoReflect.Descriptor instead.
func (*GetPipelineAdminResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{42}
}

func (x *GetPipelineAdminResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// LookUpPipelineAdminRequest represents a request to query a user's pipeline
// via permalink by admin
type LookUpPipelineAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Permalink of a pipeline. For example:
	// "pipelines/{uid}"
	Permalink string `protobuf:"bytes,1,opt,name=permalink,proto3" json:"permalink,omitempty"`
	// View view (default is VIEW_BASIC)
	View *View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.View,oneof" json:"view,omitempty"`
}

func (x *LookUpPipelineAdminRequest) Reset() {
	*x = LookUpPipelineAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpPipelineAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpPipelineAdminRequest) ProtoMessage() {}

func (x *LookUpPipelineAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpPipelineAdminRequest.ProtoReflect.Descriptor instead.
func (*LookUpPipelineAdminRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{43}
}

func (x *LookUpPipelineAdminRequest) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

func (x *LookUpPipelineAdminRequest) GetView() View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return View_VIEW_UNSPECIFIED
}

// LookUpPipelineAdminResponse represents a response for a pipeline resource
type LookUpPipelineAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *LookUpPipelineAdminResponse) Reset() {
	*x = LookUpPipelineAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpPipelineAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpPipelineAdminResponse) ProtoMessage() {}

func (x *LookUpPipelineAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpPipelineAdminResponse.ProtoReflect.Descriptor instead.
func (*LookUpPipelineAdminResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{44}
}

func (x *LookUpPipelineAdminResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

var File_vdp_pipeline_v1alpha_pipeline_proto protoreflect.FileDescriptor

var file_vdp_pipeline_v1alpha_pipeline_proto_rawDesc = []byte{
	0x0a, 0x23, 0x76, 0x64, 0x70, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x63, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x34, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x14,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x00, 0x52, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x77, 0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x6a, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x00, 0x52, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x78, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x15, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe4,
	0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2e, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x03,
	0x0a, 0x01, 0x2a, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x45, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a,
	0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x63, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8c, 0x06, 0x0a, 0x08, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x06, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x17, 0x0a, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6f,
	0x72, 0x67, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x59, 0x4e,
	0x43, 0x10, 0x02, 0x22, 0x55, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x3a, 0x34, 0xea, 0x41, 0x31, 0x0a,
	0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63,
	0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x7d,
	0x42, 0x07, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x58, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x22, 0x54, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x02, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x9c, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76,
	0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa4,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x13, 0xca, 0x3e, 0x10, 0xfa, 0x02, 0x0d, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74,
	0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x51, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x54, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x64, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x13, 0xca, 0x3e, 0x10, 0xfa, 0x02, 0x0d, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b,
	0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65,
	0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x15, 0x4c,
	0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x65,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x54, 0x0a, 0x16, 0x4c, 0x6f,
	0x6f, 0x6b, 0x55, 0x70, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0x50, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe0, 0x41, 0x02, 0xfa, 0x41,
	0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74,
	0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x56, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x52, 0x0a, 0x19, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x58,
	0x0a, 0x1a, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x7b, 0x0a, 0x15, 0x52, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x21, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x16, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xb0, 0x06, 0x0a, 0x0a,
	0x54, 0x61, 0x73, 0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x58, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52,
	0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x49, 0x0a, 0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52,
	0x09, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x37, 0x0a, 0x03, 0x6f, 0x63, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x63, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x63, 0x72, 0x12, 0x6b, 0x0a, 0x15, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x15, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65,
	0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52,
	0x14, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x78,
	0x74, 0x54, 0x6f, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x74, 0x65, 0x78, 0x74,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x65, 0x78, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x55,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xc7,
	0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x34,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0,
	0x41, 0x03, 0xfa, 0x41, 0x18, 0x0a, 0x16, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x48,
	0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x74, 0x61, 0x73,
	0x6b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x1a, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44,
	0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x53, 0x79, 0x6e, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0xad,
	0x01, 0x0a, 0x2a, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xa7,
	0x01, 0x0a, 0x2b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x46, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1b, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68,
	0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x44, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x1c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x12, 0x64, 0x61, 0x74,
	0x61, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22,
	0xae, 0x01, 0x0a, 0x2b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe0,
	0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0xa7, 0x01, 0x0a, 0x2c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f,
	0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x14,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x3d, 0x92, 0x41, 0x19, 0xca, 0x3e, 0x16, 0xfa, 0x02, 0x13, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf8, 0x01, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x76, 0x69,
	0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41, 0x13, 0xca, 0x3e, 0x10, 0xfa, 0x02, 0x0d,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x56, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0x82, 0x01, 0x0a, 0x1a, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x38, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x22, 0x59, 0x0a, 0x1b, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2a,
	0x3b, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x42, 0xe3, 0x01, 0x0a,
	0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0d, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2d, 0x61,
	0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x64,
	0x70, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x3b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0xa2, 0x02, 0x03, 0x56, 0x50, 0x58, 0xaa, 0x02, 0x14, 0x56, 0x64, 0x70, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca,
	0x02, 0x14, 0x56, 0x64, 0x70, 0x5c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x20, 0x56, 0x64, 0x70, 0x5c, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x56, 0x64, 0x70, 0x3a,
	0x3a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vdp_pipeline_v1alpha_pipeline_proto_rawDescOnce sync.Once
	file_vdp_pipeline_v1alpha_pipeline_proto_rawDescData = file_vdp_pipeline_v1alpha_pipeline_proto_rawDesc
)

func file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP() []byte {
	file_vdp_pipeline_v1alpha_pipeline_proto_rawDescOnce.Do(func() {
		file_vdp_pipeline_v1alpha_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(file_vdp_pipeline_v1alpha_pipeline_proto_rawDescData)
	})
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescData
}

var file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_vdp_pipeline_v1alpha_pipeline_proto_goTypes = []interface{}{
	(View)(0),                                            // 0: vdp.pipeline.v1alpha.View
	(Pipeline_Mode)(0),                                   // 1: vdp.pipeline.v1alpha.Pipeline.Mode
	(Pipeline_State)(0),                                  // 2: vdp.pipeline.v1alpha.Pipeline.State
	(*LivenessRequest)(nil),                              // 3: vdp.pipeline.v1alpha.LivenessRequest
	(*LivenessResponse)(nil),                             // 4: vdp.pipeline.v1alpha.LivenessResponse
	(*ReadinessRequest)(nil),                             // 5: vdp.pipeline.v1alpha.ReadinessRequest
	(*ReadinessResponse)(nil),                            // 6: vdp.pipeline.v1alpha.ReadinessResponse
	(*Component)(nil),                                    // 7: vdp.pipeline.v1alpha.Component
	(*Recipe)(nil),                                       // 8: vdp.pipeline.v1alpha.Recipe
	(*Pipeline)(nil),                                     // 9: vdp.pipeline.v1alpha.Pipeline
	(*CreatePipelineRequest)(nil),                        // 10: vdp.pipeline.v1alpha.CreatePipelineRequest
	(*CreatePipelineResponse)(nil),                       // 11: vdp.pipeline.v1alpha.CreatePipelineResponse
	(*ListPipelinesRequest)(nil),                         // 12: vdp.pipeline.v1alpha.ListPipelinesRequest
	(*ListPipelinesResponse)(nil),                        // 13: vdp.pipeline.v1alpha.ListPipelinesResponse
	(*GetPipelineRequest)(nil),                           // 14: vdp.pipeline.v1alpha.GetPipelineRequest
	(*GetPipelineResponse)(nil),                          // 15: vdp.pipeline.v1alpha.GetPipelineResponse
	(*UpdatePipelineRequest)(nil),                        // 16: vdp.pipeline.v1alpha.UpdatePipelineRequest
	(*UpdatePipelineResponse)(nil),                       // 17: vdp.pipeline.v1alpha.UpdatePipelineResponse
	(*DeletePipelineRequest)(nil),                        // 18: vdp.pipeline.v1alpha.DeletePipelineRequest
	(*DeletePipelineResponse)(nil),                       // 19: vdp.pipeline.v1alpha.DeletePipelineResponse
	(*LookUpPipelineRequest)(nil),                        // 20: vdp.pipeline.v1alpha.LookUpPipelineRequest
	(*LookUpPipelineResponse)(nil),                       // 21: vdp.pipeline.v1alpha.LookUpPipelineResponse
	(*ActivatePipelineRequest)(nil),                      // 22: vdp.pipeline.v1alpha.ActivatePipelineRequest
	(*ActivatePipelineResponse)(nil),                     // 23: vdp.pipeline.v1alpha.ActivatePipelineResponse
	(*DeactivatePipelineRequest)(nil),                    // 24: vdp.pipeline.v1alpha.DeactivatePipelineRequest
	(*DeactivatePipelineResponse)(nil),                   // 25: vdp.pipeline.v1alpha.DeactivatePipelineResponse
	(*RenamePipelineRequest)(nil),                        // 26: vdp.pipeline.v1alpha.RenamePipelineRequest
	(*RenamePipelineResponse)(nil),                       // 27: vdp.pipeline.v1alpha.RenamePipelineResponse
	(*TaskOutput)(nil),                                   // 28: vdp.pipeline.v1alpha.TaskOutput
	(*ModelOutput)(nil),                                  // 29: vdp.pipeline.v1alpha.ModelOutput
	(*TriggerSyncPipelineRequest)(nil),                   // 30: vdp.pipeline.v1alpha.TriggerSyncPipelineRequest
	(*TriggerSyncPipelineResponse)(nil),                  // 31: vdp.pipeline.v1alpha.TriggerSyncPipelineResponse
	(*TriggerSyncPipelineBinaryFileUploadRequest)(nil),   // 32: vdp.pipeline.v1alpha.TriggerSyncPipelineBinaryFileUploadRequest
	(*TriggerSyncPipelineBinaryFileUploadResponse)(nil),  // 33: vdp.pipeline.v1alpha.TriggerSyncPipelineBinaryFileUploadResponse
	(*TriggerAsyncPipelineRequest)(nil),                  // 34: vdp.pipeline.v1alpha.TriggerAsyncPipelineRequest
	(*TriggerAsyncPipelineResponse)(nil),                 // 35: vdp.pipeline.v1alpha.TriggerAsyncPipelineResponse
	(*TriggerAsyncPipelineBinaryFileUploadRequest)(nil),  // 36: vdp.pipeline.v1alpha.TriggerAsyncPipelineBinaryFileUploadRequest
	(*TriggerAsyncPipelineBinaryFileUploadResponse)(nil), // 37: vdp.pipeline.v1alpha.TriggerAsyncPipelineBinaryFileUploadResponse
	(*GetTriggerAsyncOperationRequest)(nil),              // 38: vdp.pipeline.v1alpha.GetTriggerAsyncOperationRequest
	(*GetTriggerAsyncOperationResponse)(nil),             // 39: vdp.pipeline.v1alpha.GetTriggerAsyncOperationResponse
	(*WatchPipelineRequest)(nil),                         // 40: vdp.pipeline.v1alpha.WatchPipelineRequest
	(*WatchPipelineResponse)(nil),                        // 41: vdp.pipeline.v1alpha.WatchPipelineResponse
	(*ListPipelinesAdminRequest)(nil),                    // 42: vdp.pipeline.v1alpha.ListPipelinesAdminRequest
	(*ListPipelinesAdminResponse)(nil),                   // 43: vdp.pipeline.v1alpha.ListPipelinesAdminResponse
	(*GetPipelineAdminRequest)(nil),                      // 44: vdp.pipeline.v1alpha.GetPipelineAdminRequest
	(*GetPipelineAdminResponse)(nil),                     // 45: vdp.pipeline.v1alpha.GetPipelineAdminResponse
	(*LookUpPipelineAdminRequest)(nil),                   // 46: vdp.pipeline.v1alpha.LookUpPipelineAdminRequest
	(*LookUpPipelineAdminResponse)(nil),                  // 47: vdp.pipeline.v1alpha.LookUpPipelineAdminResponse
	nil,                                                  // 48: vdp.pipeline.v1alpha.Component.DependenciesEntry
	(*v1alpha.HealthCheckRequest)(nil),                   // 49: common.healthcheck.v1alpha.HealthCheckRequest
	(*v1alpha.HealthCheckResponse)(nil),                  // 50: common.healthcheck.v1alpha.HealthCheckResponse
	(*structpb.Struct)(nil),                              // 51: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil),                        // 52: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),                        // 53: google.protobuf.FieldMask
	(*v1alpha1.ClassificationOutput)(nil),                // 54: model.model.v1alpha.ClassificationOutput
	(*v1alpha1.DetectionOutput)(nil),                     // 55: model.model.v1alpha.DetectionOutput
	(*v1alpha1.KeypointOutput)(nil),                      // 56: model.model.v1alpha.KeypointOutput
	(*v1alpha1.OcrOutput)(nil),                           // 57: model.model.v1alpha.OcrOutput
	(*v1alpha1.InstanceSegmentationOutput)(nil),          // 58: model.model.v1alpha.InstanceSegmentationOutput
	(*v1alpha1.SemanticSegmentationOutput)(nil),          // 59: model.model.v1alpha.SemanticSegmentationOutput
	(*v1alpha1.TextToImageOutput)(nil),                   // 60: model.model.v1alpha.TextToImageOutput
	(*v1alpha1.TextGenerationOutput)(nil),                // 61: model.model.v1alpha.TextGenerationOutput
	(*v1alpha1.UnspecifiedOutput)(nil),                   // 62: model.model.v1alpha.UnspecifiedOutput
	(v1alpha1.Model_Task)(0),                             // 63: model.model.v1alpha.Model.Task
	(*v1alpha1.TaskInput)(nil),                           // 64: model.model.v1alpha.TaskInput
	(*v1alpha1.TaskInputStream)(nil),                     // 65: model.model.v1alpha.TaskInputStream
	(*longrunningpb.Operation)(nil),                      // 66: google.longrunning.Operation
}
var file_vdp_pipeline_v1alpha_pipeline_proto_depIdxs = []int32{
	49, // 0: vdp.pipeline.v1alpha.LivenessRequest.health_check_request:type_name -> common.healthcheck.v1alpha.HealthCheckRequest
	50, // 1: vdp.pipeline.v1alpha.LivenessResponse.health_check_response:type_name -> common.healthcheck.v1alpha.HealthCheckResponse
	49, // 2: vdp.pipeline.v1alpha.ReadinessRequest.health_check_request:type_name -> common.healthcheck.v1alpha.HealthCheckRequest
	50, // 3: vdp.pipeline.v1alpha.ReadinessResponse.health_check_response:type_name -> common.healthcheck.v1alpha.HealthCheckResponse
	51, // 4: vdp.pipeline.v1alpha.Component.resource_detail:type_name -> google.protobuf.Struct
	51, // 5: vdp.pipeline.v1alpha.Component.metadata:type_name -> google.protobuf.Struct
	48, // 6: vdp.pipeline.v1alpha.Component.dependencies:type_name -> vdp.pipeline.v1alpha.Component.DependenciesEntry
	7,  // 7: vdp.pipeline.v1alpha.Recipe.components:type_name -> vdp.pipeline.v1alpha.Component
	8,  // 8: vdp.pipeline.v1alpha.Pipeline.recipe:type_name -> vdp.pipeline.v1alpha.Recipe
	1,  // 9: vdp.pipeline.v1alpha.Pipeline.mode:type_name -> vdp.pipeline.v1alpha.Pipeline.Mode
	2,  // 10: vdp.pipeline.v1alpha.Pipeline.state:type_name -> vdp.pipeline.v1alpha.Pipeline.State
	52, // 11: vdp.pipeline.v1alpha.Pipeline.create_time:type_name -> google.protobuf.Timestamp
	52, // 12: vdp.pipeline.v1alpha.Pipeline.update_time:type_name -> google.protobuf.Timestamp
	9,  // 13: vdp.pipeline.v1alpha.CreatePipelineRequest.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	9,  // 14: vdp.pipeline.v1alpha.CreatePipelineResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	0,  // 15: vdp.pipeline.v1alpha.ListPipelinesRequest.view:type_name -> vdp.pipeline.v1alpha.View
	9,  // 16: vdp.pipeline.v1alpha.ListPipelinesResponse.pipelines:type_name -> vdp.pipeline.v1alpha.Pipeline
	0,  // 17: vdp.pipeline.v1alpha.GetPipelineRequest.view:type_name -> vdp.pipeline.v1alpha.View
	9,  // 18: vdp.pipeline.v1alpha.GetPipelineResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	9,  // 19: vdp.pipeline.v1alpha.UpdatePipelineRequest.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	53, // 20: vdp.pipeline.v1alpha.UpdatePipelineRequest.update_mask:type_name -> google.protobuf.FieldMask
	9,  // 21: vdp.pipeline.v1alpha.UpdatePipelineResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	0,  // 22: vdp.pipeline.v1alpha.LookUpPipelineRequest.view:type_name -> vdp.pipeline.v1alpha.View
	9,  // 23: vdp.pipeline.v1alpha.LookUpPipelineResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	9,  // 24: vdp.pipeline.v1alpha.ActivatePipelineResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	9,  // 25: vdp.pipeline.v1alpha.DeactivatePipelineResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	9,  // 26: vdp.pipeline.v1alpha.RenamePipelineResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	54, // 27: vdp.pipeline.v1alpha.TaskOutput.classification:type_name -> model.model.v1alpha.ClassificationOutput
	55, // 28: vdp.pipeline.v1alpha.TaskOutput.detection:type_name -> model.model.v1alpha.DetectionOutput
	56, // 29: vdp.pipeline.v1alpha.TaskOutput.keypoint:type_name -> model.model.v1alpha.KeypointOutput
	57, // 30: vdp.pipeline.v1alpha.TaskOutput.ocr:type_name -> model.model.v1alpha.OcrOutput
	58, // 31: vdp.pipeline.v1alpha.TaskOutput.instance_segmentation:type_name -> model.model.v1alpha.InstanceSegmentationOutput
	59, // 32: vdp.pipeline.v1alpha.TaskOutput.semantic_segmentation:type_name -> model.model.v1alpha.SemanticSegmentationOutput
	60, // 33: vdp.pipeline.v1alpha.TaskOutput.text_to_image:type_name -> model.model.v1alpha.TextToImageOutput
	61, // 34: vdp.pipeline.v1alpha.TaskOutput.text_generation:type_name -> model.model.v1alpha.TextGenerationOutput
	62, // 35: vdp.pipeline.v1alpha.TaskOutput.unspecified:type_name -> model.model.v1alpha.UnspecifiedOutput
	63, // 36: vdp.pipeline.v1alpha.ModelOutput.task:type_name -> model.model.v1alpha.Model.Task
	28, // 37: vdp.pipeline.v1alpha.ModelOutput.task_outputs:type_name -> vdp.pipeline.v1alpha.TaskOutput
	64, // 38: vdp.pipeline.v1alpha.TriggerSyncPipelineRequest.task_inputs:type_name -> model.model.v1alpha.TaskInput
	29, // 39: vdp.pipeline.v1alpha.TriggerSyncPipelineResponse.model_outputs:type_name -> vdp.pipeline.v1alpha.ModelOutput
	65, // 40: vdp.pipeline.v1alpha.TriggerSyncPipelineBinaryFileUploadRequest.task_input:type_name -> model.model.v1alpha.TaskInputStream
	29, // 41: vdp.pipeline.v1alpha.TriggerSyncPipelineBinaryFileUploadResponse.model_outputs:type_name -> vdp.pipeline.v1alpha.ModelOutput
	64, // 42: vdp.pipeline.v1alpha.TriggerAsyncPipelineRequest.task_inputs:type_name -> model.model.v1alpha.TaskInput
	66, // 43: vdp.pipeline.v1alpha.TriggerAsyncPipelineResponse.operation:type_name -> google.longrunning.Operation
	65, // 44: vdp.pipeline.v1alpha.TriggerAsyncPipelineBinaryFileUploadRequest.task_input:type_name -> model.model.v1alpha.TaskInputStream
	66, // 45: vdp.pipeline.v1alpha.TriggerAsyncPipelineBinaryFileUploadResponse.operation:type_name -> google.longrunning.Operation
	66, // 46: vdp.pipeline.v1alpha.GetTriggerAsyncOperationResponse.operation:type_name -> google.longrunning.Operation
	2,  // 47: vdp.pipeline.v1alpha.WatchPipelineResponse.state:type_name -> vdp.pipeline.v1alpha.Pipeline.State
	0,  // 48: vdp.pipeline.v1alpha.ListPipelinesAdminRequest.view:type_name -> vdp.pipeline.v1alpha.View
	9,  // 49: vdp.pipeline.v1alpha.ListPipelinesAdminResponse.pipelines:type_name -> vdp.pipeline.v1alpha.Pipeline
	0,  // 50: vdp.pipeline.v1alpha.GetPipelineAdminRequest.view:type_name -> vdp.pipeline.v1alpha.View
	9,  // 51: vdp.pipeline.v1alpha.GetPipelineAdminResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	0,  // 52: vdp.pipeline.v1alpha.LookUpPipelineAdminRequest.view:type_name -> vdp.pipeline.v1alpha.View
	9,  // 53: vdp.pipeline.v1alpha.LookUpPipelineAdminResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_vdp_pipeline_v1alpha_pipeline_proto_init() }
func file_vdp_pipeline_v1alpha_pipeline_proto_init() {
	if File_vdp_pipeline_v1alpha_pipeline_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadinessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivatePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivatePipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivatePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivatePipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenamePipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenamePipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerSyncPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerSyncPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerSyncPipelineBinaryFileUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerSyncPipelineBinaryFileUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncPipelineBinaryFileUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncPipelineBinaryFileUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTriggerAsyncOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTriggerAsyncOperationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinesAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinesAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPipelineAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPipelineAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpPipelineAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpPipelineAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Pipeline_User)(nil),
		(*Pipeline_Org)(nil),
	}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*TaskOutput_Classification)(nil),
		(*TaskOutput_Detection)(nil),
		(*TaskOutput_Keypoint)(nil),
		(*TaskOutput_Ocr)(nil),
		(*TaskOutput_InstanceSegmentation)(nil),
		(*TaskOutput_SemanticSegmentation)(nil),
		(*TaskOutput_TextToImage)(nil),
		(*TaskOutput_TextGeneration)(nil),
		(*TaskOutput_Unspecified)(nil),
	}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[39].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[43].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vdp_pipeline_v1alpha_pipeline_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vdp_pipeline_v1alpha_pipeline_proto_goTypes,
		DependencyIndexes: file_vdp_pipeline_v1alpha_pipeline_proto_depIdxs,
		EnumInfos:         file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes,
		MessageInfos:      file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes,
	}.Build()
	File_vdp_pipeline_v1alpha_pipeline_proto = out.File
	file_vdp_pipeline_v1alpha_pipeline_proto_rawDesc = nil
	file_vdp_pipeline_v1alpha_pipeline_proto_goTypes = nil
	file_vdp_pipeline_v1alpha_pipeline_proto_depIdxs = nil
}
