// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: vdp/pipeline/v1alpha/pipeline.proto

package pipelinev1alpha

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	v1alpha "github.com/instill-ai/protogen-go/common/healthcheck/v1alpha"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ComponentType
type ComponentType int32

const (
	// TYPE_UNSPECIFIED
	ComponentType_COMPONENT_TYPE_UNSPECIFIED ComponentType = 0
	// CONNECTOR_AI
	ComponentType_COMPONENT_TYPE_CONNECTOR_AI ComponentType = 1
	// CONNECTOR_DATA
	ComponentType_COMPONENT_TYPE_CONNECTOR_DATA ComponentType = 2
	// CONNECTOR_BLOCKCHAIN
	ComponentType_COMPONENT_TYPE_CONNECTOR_BLOCKCHAIN ComponentType = 3
	// CONNECTOR_OPERATOR
	ComponentType_COMPONENT_TYPE_OPERATOR ComponentType = 4
)

// Enum value maps for ComponentType.
var (
	ComponentType_name = map[int32]string{
		0: "COMPONENT_TYPE_UNSPECIFIED",
		1: "COMPONENT_TYPE_CONNECTOR_AI",
		2: "COMPONENT_TYPE_CONNECTOR_DATA",
		3: "COMPONENT_TYPE_CONNECTOR_BLOCKCHAIN",
		4: "COMPONENT_TYPE_OPERATOR",
	}
	ComponentType_value = map[string]int32{
		"COMPONENT_TYPE_UNSPECIFIED":          0,
		"COMPONENT_TYPE_CONNECTOR_AI":         1,
		"COMPONENT_TYPE_CONNECTOR_DATA":       2,
		"COMPONENT_TYPE_CONNECTOR_BLOCKCHAIN": 3,
		"COMPONENT_TYPE_OPERATOR":             4,
	}
)

func (x ComponentType) Enum() *ComponentType {
	p := new(ComponentType)
	*p = x
	return p
}

func (x ComponentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComponentType) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[0].Descriptor()
}

func (ComponentType) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[0]
}

func (x ComponentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComponentType.Descriptor instead.
func (ComponentType) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{0}
}

// State enumerates the state of a pipeline
type State int32

const (
	// State: UNSPECIFIED
	State_STATE_UNSPECIFIED State = 0
	// State INACTIVE indicates the pipeline is inactive
	State_STATE_INACTIVE State = 1
	// State ACTIVE indicates the pipeline is active
	State_STATE_ACTIVE State = 2
	// State ERROR indicates the pipeline has error
	State_STATE_ERROR State = 3
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_INACTIVE",
		2: "STATE_ACTIVE",
		3: "STATE_ERROR",
	}
	State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_INACTIVE":    1,
		"STATE_ACTIVE":      2,
		"STATE_ERROR":       3,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[1].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[1]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{1}
}

// Pipeline View
type ListPipelinesRequest_View int32

const (
	// View: UNSPECIFIED
	ListPipelinesRequest_VIEW_UNSPECIFIED ListPipelinesRequest_View = 0
	// View: BASIC
	ListPipelinesRequest_VIEW_BASIC ListPipelinesRequest_View = 1
	// View: FULL
	ListPipelinesRequest_VIEW_FULL ListPipelinesRequest_View = 2
	// View: RECIPE: will return recipe
	ListPipelinesRequest_VIEW_RECIPE ListPipelinesRequest_View = 3
)

// Enum value maps for ListPipelinesRequest_View.
var (
	ListPipelinesRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_RECIPE",
	}
	ListPipelinesRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED": 0,
		"VIEW_BASIC":       1,
		"VIEW_FULL":        2,
		"VIEW_RECIPE":      3,
	}
)

func (x ListPipelinesRequest_View) Enum() *ListPipelinesRequest_View {
	p := new(ListPipelinesRequest_View)
	*p = x
	return p
}

func (x ListPipelinesRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListPipelinesRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[2].Descriptor()
}

func (ListPipelinesRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[2]
}

func (x ListPipelinesRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListPipelinesRequest_View.Descriptor instead.
func (ListPipelinesRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{10, 0}
}

// Pipeline View
type ListUserPipelinesRequest_View int32

const (
	// View: UNSPECIFIED
	ListUserPipelinesRequest_VIEW_UNSPECIFIED ListUserPipelinesRequest_View = 0
	// View: BASIC
	ListUserPipelinesRequest_VIEW_BASIC ListUserPipelinesRequest_View = 1
	// View: FULL
	ListUserPipelinesRequest_VIEW_FULL ListUserPipelinesRequest_View = 2
	// View: RECIPE: will return recipe
	ListUserPipelinesRequest_VIEW_RECIPE ListUserPipelinesRequest_View = 3
)

// Enum value maps for ListUserPipelinesRequest_View.
var (
	ListUserPipelinesRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_RECIPE",
	}
	ListUserPipelinesRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED": 0,
		"VIEW_BASIC":       1,
		"VIEW_FULL":        2,
		"VIEW_RECIPE":      3,
	}
)

func (x ListUserPipelinesRequest_View) Enum() *ListUserPipelinesRequest_View {
	p := new(ListUserPipelinesRequest_View)
	*p = x
	return p
}

func (x ListUserPipelinesRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListUserPipelinesRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[3].Descriptor()
}

func (ListUserPipelinesRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[3]
}

func (x ListUserPipelinesRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListUserPipelinesRequest_View.Descriptor instead.
func (ListUserPipelinesRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{14, 0}
}

// Pipeline View
type LookUpPipelineRequest_View int32

const (
	// View: UNSPECIFIED
	LookUpPipelineRequest_VIEW_UNSPECIFIED LookUpPipelineRequest_View = 0
	// View: BASIC
	LookUpPipelineRequest_VIEW_BASIC LookUpPipelineRequest_View = 1
	// View: FULL
	LookUpPipelineRequest_VIEW_FULL LookUpPipelineRequest_View = 2
	// View: RECIPE: will return recipe
	LookUpPipelineRequest_VIEW_RECIPE LookUpPipelineRequest_View = 3
)

// Enum value maps for LookUpPipelineRequest_View.
var (
	LookUpPipelineRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_RECIPE",
	}
	LookUpPipelineRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED": 0,
		"VIEW_BASIC":       1,
		"VIEW_FULL":        2,
		"VIEW_RECIPE":      3,
	}
)

func (x LookUpPipelineRequest_View) Enum() *LookUpPipelineRequest_View {
	p := new(LookUpPipelineRequest_View)
	*p = x
	return p
}

func (x LookUpPipelineRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LookUpPipelineRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[4].Descriptor()
}

func (LookUpPipelineRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[4]
}

func (x LookUpPipelineRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LookUpPipelineRequest_View.Descriptor instead.
func (LookUpPipelineRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{16, 0}
}

// Pipeline View
type GetUserPipelineRequest_View int32

const (
	// View: UNSPECIFIED
	GetUserPipelineRequest_VIEW_UNSPECIFIED GetUserPipelineRequest_View = 0
	// View: BASIC
	GetUserPipelineRequest_VIEW_BASIC GetUserPipelineRequest_View = 1
	// View: FULL
	GetUserPipelineRequest_VIEW_FULL GetUserPipelineRequest_View = 2
	// View: RECIPE: will return recipe
	GetUserPipelineRequest_VIEW_RECIPE GetUserPipelineRequest_View = 3
)

// Enum value maps for GetUserPipelineRequest_View.
var (
	GetUserPipelineRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_RECIPE",
	}
	GetUserPipelineRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED": 0,
		"VIEW_BASIC":       1,
		"VIEW_FULL":        2,
		"VIEW_RECIPE":      3,
	}
)

func (x GetUserPipelineRequest_View) Enum() *GetUserPipelineRequest_View {
	p := new(GetUserPipelineRequest_View)
	*p = x
	return p
}

func (x GetUserPipelineRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserPipelineRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[5].Descriptor()
}

func (GetUserPipelineRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[5]
}

func (x GetUserPipelineRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUserPipelineRequest_View.Descriptor instead.
func (GetUserPipelineRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{18, 0}
}

// Pipeline View
type ListUserPipelineReleasesRequest_View int32

const (
	// View: UNSPECIFIED
	ListUserPipelineReleasesRequest_VIEW_UNSPECIFIED ListUserPipelineReleasesRequest_View = 0
	// View: BASIC
	ListUserPipelineReleasesRequest_VIEW_BASIC ListUserPipelineReleasesRequest_View = 1
	// View: FULL
	ListUserPipelineReleasesRequest_VIEW_FULL ListUserPipelineReleasesRequest_View = 2
	// View: RECIPE: will return recipe
	ListUserPipelineReleasesRequest_VIEW_RECIPE ListUserPipelineReleasesRequest_View = 3
)

// Enum value maps for ListUserPipelineReleasesRequest_View.
var (
	ListUserPipelineReleasesRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_RECIPE",
	}
	ListUserPipelineReleasesRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED": 0,
		"VIEW_BASIC":       1,
		"VIEW_FULL":        2,
		"VIEW_RECIPE":      3,
	}
)

func (x ListUserPipelineReleasesRequest_View) Enum() *ListUserPipelineReleasesRequest_View {
	p := new(ListUserPipelineReleasesRequest_View)
	*p = x
	return p
}

func (x ListUserPipelineReleasesRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListUserPipelineReleasesRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[6].Descriptor()
}

func (ListUserPipelineReleasesRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[6]
}

func (x ListUserPipelineReleasesRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListUserPipelineReleasesRequest_View.Descriptor instead.
func (ListUserPipelineReleasesRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{36, 0}
}

// Pipeline View
type GetUserPipelineReleaseRequest_View int32

const (
	// View: UNSPECIFIED
	GetUserPipelineReleaseRequest_VIEW_UNSPECIFIED GetUserPipelineReleaseRequest_View = 0
	// View: BASIC
	GetUserPipelineReleaseRequest_VIEW_BASIC GetUserPipelineReleaseRequest_View = 1
	// View: FULL
	GetUserPipelineReleaseRequest_VIEW_FULL GetUserPipelineReleaseRequest_View = 2
	// View: RECIPE: will return recipe
	GetUserPipelineReleaseRequest_VIEW_RECIPE GetUserPipelineReleaseRequest_View = 3
)

// Enum value maps for GetUserPipelineReleaseRequest_View.
var (
	GetUserPipelineReleaseRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_RECIPE",
	}
	GetUserPipelineReleaseRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED": 0,
		"VIEW_BASIC":       1,
		"VIEW_FULL":        2,
		"VIEW_RECIPE":      3,
	}
)

func (x GetUserPipelineReleaseRequest_View) Enum() *GetUserPipelineReleaseRequest_View {
	p := new(GetUserPipelineReleaseRequest_View)
	*p = x
	return p
}

func (x GetUserPipelineReleaseRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserPipelineReleaseRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[7].Descriptor()
}

func (GetUserPipelineReleaseRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[7]
}

func (x GetUserPipelineReleaseRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUserPipelineReleaseRequest_View.Descriptor instead.
func (GetUserPipelineReleaseRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{38, 0}
}

// Pipeline View
type ListPipelinesAdminRequest_View int32

const (
	// View: UNSPECIFIED
	ListPipelinesAdminRequest_VIEW_UNSPECIFIED ListPipelinesAdminRequest_View = 0
	// View: BASIC
	ListPipelinesAdminRequest_VIEW_BASIC ListPipelinesAdminRequest_View = 1
	// View: FULL
	ListPipelinesAdminRequest_VIEW_FULL ListPipelinesAdminRequest_View = 2
	// View: RECIPE: will return recipe
	ListPipelinesAdminRequest_VIEW_RECIPE ListPipelinesAdminRequest_View = 3
)

// Enum value maps for ListPipelinesAdminRequest_View.
var (
	ListPipelinesAdminRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_RECIPE",
	}
	ListPipelinesAdminRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED": 0,
		"VIEW_BASIC":       1,
		"VIEW_FULL":        2,
		"VIEW_RECIPE":      3,
	}
)

func (x ListPipelinesAdminRequest_View) Enum() *ListPipelinesAdminRequest_View {
	p := new(ListPipelinesAdminRequest_View)
	*p = x
	return p
}

func (x ListPipelinesAdminRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListPipelinesAdminRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[8].Descriptor()
}

func (ListPipelinesAdminRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[8]
}

func (x ListPipelinesAdminRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListPipelinesAdminRequest_View.Descriptor instead.
func (ListPipelinesAdminRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{56, 0}
}

// Pipeline View
type ListPipelineReleasesAdminRequest_View int32

const (
	// View: UNSPECIFIED
	ListPipelineReleasesAdminRequest_VIEW_UNSPECIFIED ListPipelineReleasesAdminRequest_View = 0
	// View: BASIC
	ListPipelineReleasesAdminRequest_VIEW_BASIC ListPipelineReleasesAdminRequest_View = 1
	// View: FULL
	ListPipelineReleasesAdminRequest_VIEW_FULL ListPipelineReleasesAdminRequest_View = 2
	// View: RECIPE: will return recipe
	ListPipelineReleasesAdminRequest_VIEW_RECIPE ListPipelineReleasesAdminRequest_View = 3
)

// Enum value maps for ListPipelineReleasesAdminRequest_View.
var (
	ListPipelineReleasesAdminRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_RECIPE",
	}
	ListPipelineReleasesAdminRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED": 0,
		"VIEW_BASIC":       1,
		"VIEW_FULL":        2,
		"VIEW_RECIPE":      3,
	}
)

func (x ListPipelineReleasesAdminRequest_View) Enum() *ListPipelineReleasesAdminRequest_View {
	p := new(ListPipelineReleasesAdminRequest_View)
	*p = x
	return p
}

func (x ListPipelineReleasesAdminRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListPipelineReleasesAdminRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[9].Descriptor()
}

func (ListPipelineReleasesAdminRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[9]
}

func (x ListPipelineReleasesAdminRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListPipelineReleasesAdminRequest_View.Descriptor instead.
func (ListPipelineReleasesAdminRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{58, 0}
}

// Pipeline View
type LookUpPipelineAdminRequest_View int32

const (
	// View: UNSPECIFIED
	LookUpPipelineAdminRequest_VIEW_UNSPECIFIED LookUpPipelineAdminRequest_View = 0
	// View: BASIC
	LookUpPipelineAdminRequest_VIEW_BASIC LookUpPipelineAdminRequest_View = 1
	// View: FULL
	LookUpPipelineAdminRequest_VIEW_FULL LookUpPipelineAdminRequest_View = 2
	// View: RECIPE: will return recipe
	LookUpPipelineAdminRequest_VIEW_RECIPE LookUpPipelineAdminRequest_View = 3
)

// Enum value maps for LookUpPipelineAdminRequest_View.
var (
	LookUpPipelineAdminRequest_View_name = map[int32]string{
		0: "VIEW_UNSPECIFIED",
		1: "VIEW_BASIC",
		2: "VIEW_FULL",
		3: "VIEW_RECIPE",
	}
	LookUpPipelineAdminRequest_View_value = map[string]int32{
		"VIEW_UNSPECIFIED": 0,
		"VIEW_BASIC":       1,
		"VIEW_FULL":        2,
		"VIEW_RECIPE":      3,
	}
)

func (x LookUpPipelineAdminRequest_View) Enum() *LookUpPipelineAdminRequest_View {
	p := new(LookUpPipelineAdminRequest_View)
	*p = x
	return p
}

func (x LookUpPipelineAdminRequest_View) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LookUpPipelineAdminRequest_View) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[10].Descriptor()
}

func (LookUpPipelineAdminRequest_View) Type() protoreflect.EnumType {
	return &file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes[10]
}

func (x LookUpPipelineAdminRequest_View) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LookUpPipelineAdminRequest_View.Descriptor instead.
func (LookUpPipelineAdminRequest_View) EnumDescriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{60, 0}
}

// LivenessRequest represents a request to check a service liveness status
type LivenessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckRequest message
	HealthCheckRequest *v1alpha.HealthCheckRequest `protobuf:"bytes,1,opt,name=health_check_request,json=healthCheckRequest,proto3,oneof" json:"health_check_request,omitempty"`
}

func (x *LivenessRequest) Reset() {
	*x = LivenessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessRequest) ProtoMessage() {}

func (x *LivenessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessRequest.ProtoReflect.Descriptor instead.
func (*LivenessRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *LivenessRequest) GetHealthCheckRequest() *v1alpha.HealthCheckRequest {
	if x != nil {
		return x.HealthCheckRequest
	}
	return nil
}

// LivenessResponse represents a response for a service liveness status
type LivenessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckResponse message
	HealthCheckResponse *v1alpha.HealthCheckResponse `protobuf:"bytes,1,opt,name=health_check_response,json=healthCheckResponse,proto3" json:"health_check_response,omitempty"`
}

func (x *LivenessResponse) Reset() {
	*x = LivenessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessResponse) ProtoMessage() {}

func (x *LivenessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessResponse.ProtoReflect.Descriptor instead.
func (*LivenessResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{1}
}

func (x *LivenessResponse) GetHealthCheckResponse() *v1alpha.HealthCheckResponse {
	if x != nil {
		return x.HealthCheckResponse
	}
	return nil
}

// ReadinessRequest represents a request to check a service readiness status
type ReadinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckRequest message
	HealthCheckRequest *v1alpha.HealthCheckRequest `protobuf:"bytes,1,opt,name=health_check_request,json=healthCheckRequest,proto3,oneof" json:"health_check_request,omitempty"`
}

func (x *ReadinessRequest) Reset() {
	*x = ReadinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadinessRequest) ProtoMessage() {}

func (x *ReadinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadinessRequest.ProtoReflect.Descriptor instead.
func (*ReadinessRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{2}
}

func (x *ReadinessRequest) GetHealthCheckRequest() *v1alpha.HealthCheckRequest {
	if x != nil {
		return x.HealthCheckRequest
	}
	return nil
}

// ReadinessResponse represents a response for a service readiness status
type ReadinessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckResponse message
	HealthCheckResponse *v1alpha.HealthCheckResponse `protobuf:"bytes,1,opt,name=health_check_response,json=healthCheckResponse,proto3" json:"health_check_response,omitempty"`
}

func (x *ReadinessResponse) Reset() {
	*x = ReadinessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadinessResponse) ProtoMessage() {}

func (x *ReadinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadinessResponse.ProtoReflect.Descriptor instead.
func (*ReadinessResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{3}
}

func (x *ReadinessResponse) GetHealthCheckResponse() *v1alpha.HealthCheckResponse {
	if x != nil {
		return x.HealthCheckResponse
	}
	return nil
}

// Represents a pipeline component
type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Component id that is given by the users
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// A pipeline component resource name
	ResourceName string `protobuf:"bytes,2,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// A pipeline component resource detail
	Resource *Connector `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	// Configuration for the pipeline component
	Configuration *structpb.Struct `protobuf:"bytes,4,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// Resource Type
	Type ComponentType `protobuf:"varint,6,opt,name=type,proto3,enum=vdp.pipeline.v1alpha.ComponentType" json:"type,omitempty"`
	// A pipeline component definition name
	DefinitionName string `protobuf:"bytes,7,opt,name=definition_name,json=definitionName,proto3" json:"definition_name,omitempty"`
	// A pipeline component definition detail
	//
	// Types that are assignable to Definition:
	//
	//	*Component_OperatorDefinition
	//	*Component_ConnectorDefinition
	Definition isComponent_Definition `protobuf_oneof:"definition"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{4}
}

func (x *Component) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Component) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *Component) GetResource() *Connector {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Component) GetConfiguration() *structpb.Struct {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *Component) GetType() ComponentType {
	if x != nil {
		return x.Type
	}
	return ComponentType_COMPONENT_TYPE_UNSPECIFIED
}

func (x *Component) GetDefinitionName() string {
	if x != nil {
		return x.DefinitionName
	}
	return ""
}

func (m *Component) GetDefinition() isComponent_Definition {
	if m != nil {
		return m.Definition
	}
	return nil
}

func (x *Component) GetOperatorDefinition() *OperatorDefinition {
	if x, ok := x.GetDefinition().(*Component_OperatorDefinition); ok {
		return x.OperatorDefinition
	}
	return nil
}

func (x *Component) GetConnectorDefinition() *ConnectorDefinition {
	if x, ok := x.GetDefinition().(*Component_ConnectorDefinition); ok {
		return x.ConnectorDefinition
	}
	return nil
}

type isComponent_Definition interface {
	isComponent_Definition()
}

type Component_OperatorDefinition struct {
	// operator definition detail
	OperatorDefinition *OperatorDefinition `protobuf:"bytes,8,opt,name=operator_definition,json=operatorDefinition,proto3,oneof"`
}

type Component_ConnectorDefinition struct {
	// connector definition detail
	ConnectorDefinition *ConnectorDefinition `protobuf:"bytes,9,opt,name=connector_definition,json=connectorDefinition,proto3,oneof"`
}

func (*Component_OperatorDefinition) isComponent_Definition() {}

func (*Component_ConnectorDefinition) isComponent_Definition() {}

// Pipeline represents a pipeline recipe
type Recipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Recipe schema version
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// List of pipeline components
	Components []*Component `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty"`
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{5}
}

func (x *Recipe) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Recipe) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

// Pipeline represents the content of a pipeline
type Pipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "users/{user}/pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline UUID
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Pipeline resource ID (the last segment of the resource name) used to
	// construct the resource name. This conforms to RFC-1034, which restricts to
	// letters, numbers, and hyphen, with the first character a letter, the last a
	// letter or a number, and a 63 character maximum.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Pipeline description
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Pipeline recipe
	Recipe *Recipe `protobuf:"bytes,5,opt,name=recipe,proto3" json:"recipe,omitempty"`
	// Pipeline owner
	//
	// Types that are assignable to Owner:
	//
	//	*Pipeline_User
	//	*Pipeline_Org
	Owner isPipeline_Owner `protobuf_oneof:"owner"`
	// Pipeline creation time
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Pipeline update time
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// OpenAPI schema
	OpenapiSchema *structpb.Struct `protobuf:"bytes,13,opt,name=openapi_schema,json=openapiSchema,proto3" json:"openapi_schema,omitempty"`
	// Pipeline delete time
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Pipeline permission
	Permission *Permission `protobuf:"bytes,15,opt,name=permission,proto3" json:"permission,omitempty"`
	// Metadata: store Console-related data such as pipeline builder layout
	Metadata *structpb.Struct `protobuf:"bytes,16,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{6}
}

func (x *Pipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pipeline) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Pipeline) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Pipeline) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Pipeline) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

func (m *Pipeline) GetOwner() isPipeline_Owner {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (x *Pipeline) GetUser() string {
	if x, ok := x.GetOwner().(*Pipeline_User); ok {
		return x.User
	}
	return ""
}

func (x *Pipeline) GetOrg() string {
	if x, ok := x.GetOwner().(*Pipeline_Org); ok {
		return x.Org
	}
	return ""
}

func (x *Pipeline) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Pipeline) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Pipeline) GetOpenapiSchema() *structpb.Struct {
	if x != nil {
		return x.OpenapiSchema
	}
	return nil
}

func (x *Pipeline) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *Pipeline) GetPermission() *Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *Pipeline) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type isPipeline_Owner interface {
	isPipeline_Owner()
}

type Pipeline_User struct {
	// The resource name with UUID of a user, e.g.,
	// "users/bfb978f8-78d3-4338-aa2b-a6c699cb07c5".
	User string `protobuf:"bytes,8,opt,name=user,proto3,oneof"`
}

type Pipeline_Org struct {
	// The resource name with UUID of an organization
	Org string `protobuf:"bytes,9,opt,name=org,proto3,oneof"`
}

func (*Pipeline_User) isPipeline_Owner() {}

func (*Pipeline_Org) isPipeline_Owner() {}

// The metadata
type TriggerMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The traces of the pipeline inference, {component_id: Trace}
	Traces map[string]*Trace `protobuf:"bytes,1,rep,name=traces,proto3" json:"traces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TriggerMetadata) Reset() {
	*x = TriggerMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerMetadata) ProtoMessage() {}

func (x *TriggerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerMetadata.ProtoReflect.Descriptor instead.
func (*TriggerMetadata) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{7}
}

func (x *TriggerMetadata) GetTraces() map[string]*Trace {
	if x != nil {
		return x.Traces
	}
	return nil
}

// Trace for the intermediate component
type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success or not
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Inputs of the component
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Outputs of the component
	Outputs []*structpb.Struct `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Error of the component
	Error *structpb.Struct `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// Compute Time
	ComputeTimeInSeconds float32 `protobuf:"fixed32,5,opt,name=compute_time_in_seconds,json=computeTimeInSeconds,proto3" json:"compute_time_in_seconds,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{8}
}

func (x *Trace) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Trace) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Trace) GetOutputs() []*structpb.Struct {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Trace) GetError() *structpb.Struct {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *Trace) GetComputeTimeInSeconds() float32 {
	if x != nil {
		return x.ComputeTimeInSeconds
	}
	return 0
}

// PipelineRelease represents the content of a pipeline release
type PipelineRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PipelineRelease resource name. It must have the format of "users/*/pipelines/*/releases/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// PipelineRelease UUID
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// PipelineRelease resource ID (the last segment of the resource name) used to
	// construct the resource name. Must be a sematic version vX.Y.Z
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// PipelineRelease description
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Pipeline recipe snapshot
	Recipe *Recipe `protobuf:"bytes,5,opt,name=recipe,proto3" json:"recipe,omitempty"`
	// Pipeline creation time
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Pipeline update time
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// OpenAPI schema
	OpenapiSchema *structpb.Struct `protobuf:"bytes,9,opt,name=openapi_schema,json=openapiSchema,proto3" json:"openapi_schema,omitempty"`
	// Pipeline delete time
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty"`
	// Alias
	Alias string `protobuf:"bytes,11,opt,name=alias,proto3" json:"alias,omitempty"`
	// Metadata: store Console-related data such as pipeline builder layout
	Metadata *structpb.Struct `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *PipelineRelease) Reset() {
	*x = PipelineRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineRelease) ProtoMessage() {}

func (x *PipelineRelease) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineRelease.ProtoReflect.Descriptor instead.
func (*PipelineRelease) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{9}
}

func (x *PipelineRelease) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineRelease) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PipelineRelease) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PipelineRelease) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PipelineRelease) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

func (x *PipelineRelease) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *PipelineRelease) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *PipelineRelease) GetOpenapiSchema() *structpb.Struct {
	if x != nil {
		return x.OpenapiSchema
	}
	return nil
}

func (x *PipelineRelease) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

func (x *PipelineRelease) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *PipelineRelease) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ListPipelinesRequest represents a request to list pipelines
type ListPipelinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of pipelines to return. The service may return fewer
	// than this value. If unspecified, at most 10 pipelines will be returned. The
	// maximum value is 100; values above 100 will be coerced to 100.
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// View view (default is VIEW_BASIC)
	View *ListPipelinesRequest_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.ListPipelinesRequest_View,oneof" json:"view,omitempty"`
	// Filter expression to list pipelines
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// Return soft_deleted pipelines
	ShowDeleted *bool `protobuf:"varint,5,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
}

func (x *ListPipelinesRequest) Reset() {
	*x = ListPipelinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesRequest) ProtoMessage() {}

func (x *ListPipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesRequest.ProtoReflect.Descriptor instead.
func (*ListPipelinesRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{10}
}

func (x *ListPipelinesRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListPipelinesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListPipelinesRequest) GetView() ListPipelinesRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return ListPipelinesRequest_VIEW_UNSPECIFIED
}

func (x *ListPipelinesRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListPipelinesRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

// ListPipelinesResponse represents a response for a list of pipelines
type ListPipelinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline resources
	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	// Next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of pipeline resources
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListPipelinesResponse) Reset() {
	*x = ListPipelinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesResponse) ProtoMessage() {}

func (x *ListPipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesResponse.ProtoReflect.Descriptor instead.
func (*ListPipelinesResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{11}
}

func (x *ListPipelinesResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *ListPipelinesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListPipelinesResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// CreateUserPipelineRequest represents a request to create a pipeline
type CreateUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource to create
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// The parent resource where this connector resource will be created.
	// Format: users/{users}
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *CreateUserPipelineRequest) Reset() {
	*x = CreateUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserPipelineRequest) ProtoMessage() {}

func (x *CreateUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*CreateUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{12}
}

func (x *CreateUserPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *CreateUserPipelineRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

// CreateUserPipelineResponse represents a response for a pipeline resource
type CreateUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *CreateUserPipelineResponse) Reset() {
	*x = CreateUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserPipelineResponse) ProtoMessage() {}

func (x *CreateUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*CreateUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{13}
}

func (x *CreateUserPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// ListUserPipelinesRequest represents a request to list pipelines
type ListUserPipelinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of pipelines to return. The service may return fewer
	// than this value. If unspecified, at most 10 pipelines will be returned. The
	// maximum value is 100; values above 100 will be coerced to 100.
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// View view (default is VIEW_BASIC)
	View *ListUserPipelinesRequest_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.ListUserPipelinesRequest_View,oneof" json:"view,omitempty"`
	// Filter expression to list pipelines
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// The parent resource where this connector resource will be created.
	// Format: users/{users}
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// Return soft_deleted pipeline releases
	ShowDeleted *bool `protobuf:"varint,6,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
}

func (x *ListUserPipelinesRequest) Reset() {
	*x = ListUserPipelinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserPipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserPipelinesRequest) ProtoMessage() {}

func (x *ListUserPipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserPipelinesRequest.ProtoReflect.Descriptor instead.
func (*ListUserPipelinesRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{14}
}

func (x *ListUserPipelinesRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListUserPipelinesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListUserPipelinesRequest) GetView() ListUserPipelinesRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return ListUserPipelinesRequest_VIEW_UNSPECIFIED
}

func (x *ListUserPipelinesRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListUserPipelinesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListUserPipelinesRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

// ListUserPipelinesResponse represents a response for a list of pipelines
type ListUserPipelinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline resources
	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	// Next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of pipeline resources
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListUserPipelinesResponse) Reset() {
	*x = ListUserPipelinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserPipelinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserPipelinesResponse) ProtoMessage() {}

func (x *ListUserPipelinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserPipelinesResponse.ProtoReflect.Descriptor instead.
func (*ListUserPipelinesResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{15}
}

func (x *ListUserPipelinesResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *ListUserPipelinesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListUserPipelinesResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// LookUpPipelineRequest represents a request to query a pipeline via permalink
type LookUpPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Permalink of a pipeline. For example:
	// "pipelines/{uid}"
	Permalink string `protobuf:"bytes,1,opt,name=permalink,proto3" json:"permalink,omitempty"`
	// View view (default is VIEW_BASIC)
	View *LookUpPipelineRequest_View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.LookUpPipelineRequest_View,oneof" json:"view,omitempty"`
}

func (x *LookUpPipelineRequest) Reset() {
	*x = LookUpPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpPipelineRequest) ProtoMessage() {}

func (x *LookUpPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpPipelineRequest.ProtoReflect.Descriptor instead.
func (*LookUpPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{16}
}

func (x *LookUpPipelineRequest) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

func (x *LookUpPipelineRequest) GetView() LookUpPipelineRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return LookUpPipelineRequest_VIEW_UNSPECIFIED
}

// LookUpPipelineResponse represents a response for a pipeline resource
type LookUpPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *LookUpPipelineResponse) Reset() {
	*x = LookUpPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpPipelineResponse) ProtoMessage() {}

func (x *LookUpPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpPipelineResponse.ProtoReflect.Descriptor instead.
func (*LookUpPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{17}
}

func (x *LookUpPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// GetUserPipelineRequest represents a request to query a pipeline
type GetUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "users/*/pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline resource view (default is VIEW_BASIC)
	View *GetUserPipelineRequest_View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.GetUserPipelineRequest_View,oneof" json:"view,omitempty"`
}

func (x *GetUserPipelineRequest) Reset() {
	*x = GetUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPipelineRequest) ProtoMessage() {}

func (x *GetUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*GetUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{18}
}

func (x *GetUserPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetUserPipelineRequest) GetView() GetUserPipelineRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return GetUserPipelineRequest_VIEW_UNSPECIFIED
}

// GetUserPipelineResponse represents a response for a pipeline resource
type GetUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *GetUserPipelineResponse) Reset() {
	*x = GetUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPipelineResponse) ProtoMessage() {}

func (x *GetUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*GetUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{19}
}

func (x *GetUserPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// UpdateUserPipelineRequest represents a request to update a pipeline
type UpdateUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource to update
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	// Update mask for a pipeline resource
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateUserPipelineRequest) Reset() {
	*x = UpdateUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPipelineRequest) ProtoMessage() {}

func (x *UpdateUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateUserPipelineRequest) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *UpdateUserPipelineRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdateUserPipelineResponse represents a response for a pipeline resource
type UpdateUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An updated pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *UpdateUserPipelineResponse) Reset() {
	*x = UpdateUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPipelineResponse) ProtoMessage() {}

func (x *UpdateUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateUserPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// DeleteUserPipelineRequest represents a request to delete a pipeline resource
type DeleteUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "users/*/pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteUserPipelineRequest) Reset() {
	*x = DeleteUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserPipelineRequest) ProtoMessage() {}

func (x *DeleteUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteUserPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteUserPipelineResponse represents an empty response
type DeleteUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteUserPipelineResponse) Reset() {
	*x = DeleteUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserPipelineResponse) ProtoMessage() {}

func (x *DeleteUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{23}
}

// ValidatePUseripelineRequest represents a request to validate a pipeline
type ValidateUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "users/*/pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ValidateUserPipelineRequest) Reset() {
	*x = ValidateUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateUserPipelineRequest) ProtoMessage() {}

func (x *ValidateUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*ValidateUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{24}
}

func (x *ValidateUserPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ValidateUserPipelineResponse represents an response of validated pipeline
type ValidateUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *ValidateUserPipelineResponse) Reset() {
	*x = ValidateUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateUserPipelineResponse) ProtoMessage() {}

func (x *ValidateUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*ValidateUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{25}
}

func (x *ValidateUserPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// RenameUserPipelineRequest represents a request to rename the pipeline resource
// name
type RenameUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "users/*/pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline new resource id to replace with the pipeline resource name to be
	// "users/*/pipelines/{new_pipeline_id}"
	NewPipelineId string `protobuf:"bytes,2,opt,name=new_pipeline_id,json=newPipelineId,proto3" json:"new_pipeline_id,omitempty"`
}

func (x *RenameUserPipelineRequest) Reset() {
	*x = RenameUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameUserPipelineRequest) ProtoMessage() {}

func (x *RenameUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*RenameUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{26}
}

func (x *RenameUserPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenameUserPipelineRequest) GetNewPipelineId() string {
	if x != nil {
		return x.NewPipelineId
	}
	return ""
}

// RenameUserPipelineResponse represents a renamed pipeline resource
type RenameUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *RenameUserPipelineResponse) Reset() {
	*x = RenameUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameUserPipelineResponse) ProtoMessage() {}

func (x *RenameUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*RenameUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{27}
}

func (x *RenameUserPipelineResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

// TriggerUserPipelineRequest represents a request to trigger a pipeline
type TriggerUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "users/*/pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Input to the pipeline
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *TriggerUserPipelineRequest) Reset() {
	*x = TriggerUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerUserPipelineRequest) ProtoMessage() {}

func (x *TriggerUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*TriggerUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{28}
}

func (x *TriggerUserPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerUserPipelineRequest) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// TriggerUserPipelineResponse represents a response for the output
// of a pipeline, i.e., the multiple model inference outputs
type TriggerUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The multiple model inference outputs
	Outputs []*structpb.Struct `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// The traces of the pipeline inference, {component_id: Trace}
	Metadata *TriggerMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *TriggerUserPipelineResponse) Reset() {
	*x = TriggerUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerUserPipelineResponse) ProtoMessage() {}

func (x *TriggerUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*TriggerUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{29}
}

func (x *TriggerUserPipelineResponse) GetOutputs() []*structpb.Struct {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TriggerUserPipelineResponse) GetMetadata() *TriggerMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// TriggerAsyncUserPipelineRequest represents a request to trigger a async pipeline
type TriggerAsyncUserPipelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "users/*/pipelines/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Input to the pipeline
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *TriggerAsyncUserPipelineRequest) Reset() {
	*x = TriggerAsyncUserPipelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncUserPipelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncUserPipelineRequest) ProtoMessage() {}

func (x *TriggerAsyncUserPipelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncUserPipelineRequest.ProtoReflect.Descriptor instead.
func (*TriggerAsyncUserPipelineRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{30}
}

func (x *TriggerAsyncUserPipelineRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerAsyncUserPipelineRequest) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// TriggerAsyncUserPipelineResponse represents a response for the longrunning
// operation of a pipeline
type TriggerAsyncUserPipelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trigger async pipeline operation message
	Operation *longrunningpb.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *TriggerAsyncUserPipelineResponse) Reset() {
	*x = TriggerAsyncUserPipelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncUserPipelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncUserPipelineResponse) ProtoMessage() {}

func (x *TriggerAsyncUserPipelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncUserPipelineResponse.ProtoReflect.Descriptor instead.
func (*TriggerAsyncUserPipelineResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{31}
}

func (x *TriggerAsyncUserPipelineResponse) GetOperation() *longrunningpb.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// GetOperationRequest represents a request to query a longrunning
// operation
type GetOperationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the operation resource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetOperationRequest) Reset() {
	*x = GetOperationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationRequest) ProtoMessage() {}

func (x *GetOperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationRequest.ProtoReflect.Descriptor instead.
func (*GetOperationRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{32}
}

func (x *GetOperationRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetOperationResponse represents a response for a longrunning
// operation
type GetOperationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The retrieved longrunning operation
	Operation *longrunningpb.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *GetOperationResponse) Reset() {
	*x = GetOperationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOperationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOperationResponse) ProtoMessage() {}

func (x *GetOperationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOperationResponse.ProtoReflect.Descriptor instead.
func (*GetOperationResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{33}
}

func (x *GetOperationResponse) GetOperation() *longrunningpb.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// CreateUserPipelineReleaseRequest represents a request to create a pipeline_release
type CreateUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline_release resource to create
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	// The parent resource where this pipeline_release will be created.
	// Format: users/{user}/pipelines/{pipeline}
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *CreateUserPipelineReleaseRequest) Reset() {
	*x = CreateUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserPipelineReleaseRequest) ProtoMessage() {}

func (x *CreateUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*CreateUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{34}
}

func (x *CreateUserPipelineReleaseRequest) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *CreateUserPipelineReleaseRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

// CreateUserPipelineReleaseResponse represents a response for a pipeline_release resource
type CreateUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The created pipeline_release resource
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *CreateUserPipelineReleaseResponse) Reset() {
	*x = CreateUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserPipelineReleaseResponse) ProtoMessage() {}

func (x *CreateUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*CreateUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{35}
}

func (x *CreateUserPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// ListUserPipelineReleasesRequest represents a request to list pipeline_releases
type ListUserPipelineReleasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of pipeline_releases to return. The service may return fewer
	// than this value. If unspecified, at most 10 pipeline_release will be returned. The
	// maximum value is 100; values above 100 will be coerced to 100.
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// View view (default is VIEW_BASIC)
	View *ListUserPipelineReleasesRequest_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.ListUserPipelineReleasesRequest_View,oneof" json:"view,omitempty"`
	// Filter expression to list pipeline_releases
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// The parent resource where this pipeline_release will be created.
	// Format: users/{user}/pipelines/{pipeline}
	Parent string `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// Return soft_deleted pipelines
	ShowDeleted *bool `protobuf:"varint,6,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
}

func (x *ListUserPipelineReleasesRequest) Reset() {
	*x = ListUserPipelineReleasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserPipelineReleasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserPipelineReleasesRequest) ProtoMessage() {}

func (x *ListUserPipelineReleasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserPipelineReleasesRequest.ProtoReflect.Descriptor instead.
func (*ListUserPipelineReleasesRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{36}
}

func (x *ListUserPipelineReleasesRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListUserPipelineReleasesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListUserPipelineReleasesRequest) GetView() ListUserPipelineReleasesRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return ListUserPipelineReleasesRequest_VIEW_UNSPECIFIED
}

func (x *ListUserPipelineReleasesRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListUserPipelineReleasesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListUserPipelineReleasesRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

// ListUserPipelineReleasesResponse represents a response for a list of pipeline_releases
type ListUserPipelineReleasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline_release resources
	Releases []*PipelineRelease `protobuf:"bytes,1,rep,name=releases,proto3" json:"releases,omitempty"`
	// Next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of pipeline_release resources
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListUserPipelineReleasesResponse) Reset() {
	*x = ListUserPipelineReleasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserPipelineReleasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserPipelineReleasesResponse) ProtoMessage() {}

func (x *ListUserPipelineReleasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserPipelineReleasesResponse.ProtoReflect.Descriptor instead.
func (*ListUserPipelineReleasesResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{37}
}

func (x *ListUserPipelineReleasesResponse) GetReleases() []*PipelineRelease {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *ListUserPipelineReleasesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListUserPipelineReleasesResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// GetUserPipelineReleaseRequest represents a request to query a pipeline_release
type GetUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PipelineRelease resource name. It must have the format of "users/*/pipelines/*/releases/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// PipelineRelease resource view (default is VIEW_BASIC)
	View *GetUserPipelineReleaseRequest_View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.GetUserPipelineReleaseRequest_View,oneof" json:"view,omitempty"`
}

func (x *GetUserPipelineReleaseRequest) Reset() {
	*x = GetUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPipelineReleaseRequest) ProtoMessage() {}

func (x *GetUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*GetUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{38}
}

func (x *GetUserPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetUserPipelineReleaseRequest) GetView() GetUserPipelineReleaseRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return GetUserPipelineReleaseRequest_VIEW_UNSPECIFIED
}

// GetUserPipelineReleaseResponse represents a response for a pipeline_release resource
type GetUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline_release resource
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *GetUserPipelineReleaseResponse) Reset() {
	*x = GetUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPipelineReleaseResponse) ProtoMessage() {}

func (x *GetUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*GetUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{39}
}

func (x *GetUserPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// UpdateUserPipelineReleaseRequest represents a request to update a pipeline release
type UpdateUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline release resource to update
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	// Update mask for a pipeline resource
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateUserPipelineReleaseRequest) Reset() {
	*x = UpdateUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPipelineReleaseRequest) ProtoMessage() {}

func (x *UpdateUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateUserPipelineReleaseRequest) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *UpdateUserPipelineReleaseRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdateUserPipelineReleaseResponse represents a response for a pipeline resource
type UpdateUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An updated pipeline resource
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *UpdateUserPipelineReleaseResponse) Reset() {
	*x = UpdateUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPipelineReleaseResponse) ProtoMessage() {}

func (x *UpdateUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateUserPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// DeleteUserPipelineReleaseRequest represents a request to delete a pipeline_release resource
type DeleteUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PipelineRelease resource name. It must have the format of "users/*/pipelines/*/releases/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteUserPipelineReleaseRequest) Reset() {
	*x = DeleteUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserPipelineReleaseRequest) ProtoMessage() {}

func (x *DeleteUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteUserPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// DeleteUserPipelineReleaseResponse represents an empty response
type DeleteUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteUserPipelineReleaseResponse) Reset() {
	*x = DeleteUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserPipelineReleaseResponse) ProtoMessage() {}

func (x *DeleteUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{43}
}

// SetDefaultUserPipelineReleaseRequest
type SetDefaultUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "users/*/pipelines/*/releases/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SetDefaultUserPipelineReleaseRequest) Reset() {
	*x = SetDefaultUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultUserPipelineReleaseRequest) ProtoMessage() {}

func (x *SetDefaultUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{44}
}

func (x *SetDefaultUserPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// SetDefaultUserPipelineReleaseResponse
type SetDefaultUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *SetDefaultUserPipelineReleaseResponse) Reset() {
	*x = SetDefaultUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDefaultUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultUserPipelineReleaseResponse) ProtoMessage() {}

func (x *SetDefaultUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*SetDefaultUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{45}
}

func (x *SetDefaultUserPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// RestoreUserPipelineReleaseRequest
type RestoreUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "users/*/pipelines/*/releases/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RestoreUserPipelineReleaseRequest) Reset() {
	*x = RestoreUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreUserPipelineReleaseRequest) ProtoMessage() {}

func (x *RestoreUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*RestoreUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{46}
}

func (x *RestoreUserPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// RestoreUserPipelineReleaseResponse
type RestoreUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *RestoreUserPipelineReleaseResponse) Reset() {
	*x = RestoreUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreUserPipelineReleaseResponse) ProtoMessage() {}

func (x *RestoreUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*RestoreUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{47}
}

func (x *RestoreUserPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// RenameUserPipelineReleaseRequest represents a request to rename the pipeline release resource
// name
type RenameUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline release resource name. It must have the format of "users/*/pipelines/*/releases/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Pipeline new resource id to replace with the pipeline resource name to be
	// "users/*/pipelines/*/releases/{new_pipeline_id}"
	NewPipelineReleaseId string `protobuf:"bytes,2,opt,name=new_pipeline_release_id,json=newPipelineReleaseId,proto3" json:"new_pipeline_release_id,omitempty"`
}

func (x *RenameUserPipelineReleaseRequest) Reset() {
	*x = RenameUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameUserPipelineReleaseRequest) ProtoMessage() {}

func (x *RenameUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*RenameUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{48}
}

func (x *RenameUserPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RenameUserPipelineReleaseRequest) GetNewPipelineReleaseId() string {
	if x != nil {
		return x.NewPipelineReleaseId
	}
	return ""
}

// RenameUserPipelineReleaseResponse represents a renamed pipeline release resource
type RenameUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Release *PipelineRelease `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
}

func (x *RenameUserPipelineReleaseResponse) Reset() {
	*x = RenameUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameUserPipelineReleaseResponse) ProtoMessage() {}

func (x *RenameUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*RenameUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{49}
}

func (x *RenameUserPipelineReleaseResponse) GetRelease() *PipelineRelease {
	if x != nil {
		return x.Release
	}
	return nil
}

// WatchUserPipelineReleaseRequest represents a public request to query
// a pipeline's current state
type WatchUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline resource name. It must have the format of "users/*/pipelines/*/releases/*"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WatchUserPipelineReleaseRequest) Reset() {
	*x = WatchUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchUserPipelineReleaseRequest) ProtoMessage() {}

func (x *WatchUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*WatchUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{50}
}

func (x *WatchUserPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// WatchUserPipelineReleaseResponse represents a response to fetch a pipeline's
// current state
type WatchUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Retrieved pipeline state
	State State `protobuf:"varint,1,opt,name=state,proto3,enum=vdp.pipeline.v1alpha.State" json:"state,omitempty"`
}

func (x *WatchUserPipelineReleaseResponse) Reset() {
	*x = WatchUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchUserPipelineReleaseResponse) ProtoMessage() {}

func (x *WatchUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*WatchUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{51}
}

func (x *WatchUserPipelineReleaseResponse) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

// TriggerUserPipelineReleaseRequest represents a request to trigger a pipeline_released pipeline
type TriggerUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Input to the pipeline
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *TriggerUserPipelineReleaseRequest) Reset() {
	*x = TriggerUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerUserPipelineReleaseRequest) ProtoMessage() {}

func (x *TriggerUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*TriggerUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{52}
}

func (x *TriggerUserPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerUserPipelineReleaseRequest) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// TriggerUserPipelineReleaseResponse represents a response for the output
// of a pipeline, i.e., the multiple model inference outputs
type TriggerUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The multiple model inference outputs
	Outputs []*structpb.Struct `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// The traces of the pipeline inference, {component_id: Trace}
	Metadata *TriggerMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *TriggerUserPipelineReleaseResponse) Reset() {
	*x = TriggerUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerUserPipelineReleaseResponse) ProtoMessage() {}

func (x *TriggerUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*TriggerUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{53}
}

func (x *TriggerUserPipelineReleaseResponse) GetOutputs() []*structpb.Struct {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TriggerUserPipelineReleaseResponse) GetMetadata() *TriggerMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// TriggerAsyncUserPipelineReleaseRequest represents a request to trigger a pipeline_released pipeline
type TriggerAsyncUserPipelineReleaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Input to the pipeline
	Inputs []*structpb.Struct `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *TriggerAsyncUserPipelineReleaseRequest) Reset() {
	*x = TriggerAsyncUserPipelineReleaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncUserPipelineReleaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncUserPipelineReleaseRequest) ProtoMessage() {}

func (x *TriggerAsyncUserPipelineReleaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncUserPipelineReleaseRequest.ProtoReflect.Descriptor instead.
func (*TriggerAsyncUserPipelineReleaseRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{54}
}

func (x *TriggerAsyncUserPipelineReleaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerAsyncUserPipelineReleaseRequest) GetInputs() []*structpb.Struct {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// TriggerAsyncUserPipelineReleaseResponse represents a response for the longrunning
// operation of a pipeline
type TriggerAsyncUserPipelineReleaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trigger async pipeline operation message
	Operation *longrunningpb.Operation `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
}

func (x *TriggerAsyncUserPipelineReleaseResponse) Reset() {
	*x = TriggerAsyncUserPipelineReleaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerAsyncUserPipelineReleaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerAsyncUserPipelineReleaseResponse) ProtoMessage() {}

func (x *TriggerAsyncUserPipelineReleaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerAsyncUserPipelineReleaseResponse.ProtoReflect.Descriptor instead.
func (*TriggerAsyncUserPipelineReleaseResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{55}
}

func (x *TriggerAsyncUserPipelineReleaseResponse) GetOperation() *longrunningpb.Operation {
	if x != nil {
		return x.Operation
	}
	return nil
}

// ListPipelinesAdminRequest represents a request to list all pipelines from all
// users by admin
type ListPipelinesAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of pipelines to return. The service may return fewer
	// than this value. If unspecified, at most 10 pipelines will be returned. The
	// maximum value is 100; values above 100 will be coerced to 100.
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// View view (default is VIEW_BASIC)
	View *ListPipelinesAdminRequest_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.ListPipelinesAdminRequest_View,oneof" json:"view,omitempty"`
	// Filter expression to list pipelines
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// Return soft_deleted pipelines
	ShowDeleted *bool `protobuf:"varint,5,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
}

func (x *ListPipelinesAdminRequest) Reset() {
	*x = ListPipelinesAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinesAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesAdminRequest) ProtoMessage() {}

func (x *ListPipelinesAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesAdminRequest.ProtoReflect.Descriptor instead.
func (*ListPipelinesAdminRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{56}
}

func (x *ListPipelinesAdminRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListPipelinesAdminRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListPipelinesAdminRequest) GetView() ListPipelinesAdminRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return ListPipelinesAdminRequest_VIEW_UNSPECIFIED
}

func (x *ListPipelinesAdminRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListPipelinesAdminRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

// ListPipelinesAdminResponse represents a response for a list of pipelines
// The recipe returned will be permaLinks instead of resourceName temporary,
// this will be refactored soon
type ListPipelinesAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline resources
	Pipelines []*Pipeline `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	// Next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of pipeline resources
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListPipelinesAdminResponse) Reset() {
	*x = ListPipelinesAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelinesAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelinesAdminResponse) ProtoMessage() {}

func (x *ListPipelinesAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelinesAdminResponse.ProtoReflect.Descriptor instead.
func (*ListPipelinesAdminResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{57}
}

func (x *ListPipelinesAdminResponse) GetPipelines() []*Pipeline {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *ListPipelinesAdminResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListPipelinesAdminResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// ListPipelinesReleaseAdminRequest represents a request to list all pipeline_releases from all
// users by admin
type ListPipelineReleasesAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of pipelines to return. The service may return fewer
	// than this value. If unspecified, at most 10 pipelines will be returned. The
	// maximum value is 100; values above 100 will be coerced to 100.
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// View view (default is VIEW_BASIC)
	View *ListPipelineReleasesAdminRequest_View `protobuf:"varint,3,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.ListPipelineReleasesAdminRequest_View,oneof" json:"view,omitempty"`
	// Filter expression to list pipelines
	Filter *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// Return soft_deleted pipelines
	ShowDeleted *bool `protobuf:"varint,5,opt,name=show_deleted,json=showDeleted,proto3,oneof" json:"show_deleted,omitempty"`
}

func (x *ListPipelineReleasesAdminRequest) Reset() {
	*x = ListPipelineReleasesAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineReleasesAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineReleasesAdminRequest) ProtoMessage() {}

func (x *ListPipelineReleasesAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineReleasesAdminRequest.ProtoReflect.Descriptor instead.
func (*ListPipelineReleasesAdminRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{58}
}

func (x *ListPipelineReleasesAdminRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListPipelineReleasesAdminRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListPipelineReleasesAdminRequest) GetView() ListPipelineReleasesAdminRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return ListPipelineReleasesAdminRequest_VIEW_UNSPECIFIED
}

func (x *ListPipelineReleasesAdminRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ListPipelineReleasesAdminRequest) GetShowDeleted() bool {
	if x != nil && x.ShowDeleted != nil {
		return *x.ShowDeleted
	}
	return false
}

// ListPipelineReleasesAdminResponse represents a response for a list of pipeline_releases
// The recipe returned will be permaLinks instead of resourceName temporary,
// this will be refactored soon
type ListPipelineReleasesAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline resources
	Releases []*PipelineRelease `protobuf:"bytes,1,rep,name=releases,proto3" json:"releases,omitempty"`
	// Next page token
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total count of pipeline resources
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListPipelineReleasesAdminResponse) Reset() {
	*x = ListPipelineReleasesAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineReleasesAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineReleasesAdminResponse) ProtoMessage() {}

func (x *ListPipelineReleasesAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineReleasesAdminResponse.ProtoReflect.Descriptor instead.
func (*ListPipelineReleasesAdminResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{59}
}

func (x *ListPipelineReleasesAdminResponse) GetReleases() []*PipelineRelease {
	if x != nil {
		return x.Releases
	}
	return nil
}

func (x *ListPipelineReleasesAdminResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListPipelineReleasesAdminResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// LookUpPipelineAdminRequest represents a request to query a user's pipeline
// via permalink by admin
type LookUpPipelineAdminRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Permalink of a pipeline. For example:
	// "pipelines/{uid}"
	Permalink string `protobuf:"bytes,1,opt,name=permalink,proto3" json:"permalink,omitempty"`
	// View view (default is VIEW_BASIC)
	View *LookUpPipelineAdminRequest_View `protobuf:"varint,2,opt,name=view,proto3,enum=vdp.pipeline.v1alpha.LookUpPipelineAdminRequest_View,oneof" json:"view,omitempty"`
}

func (x *LookUpPipelineAdminRequest) Reset() {
	*x = LookUpPipelineAdminRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpPipelineAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpPipelineAdminRequest) ProtoMessage() {}

func (x *LookUpPipelineAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpPipelineAdminRequest.ProtoReflect.Descriptor instead.
func (*LookUpPipelineAdminRequest) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{60}
}

func (x *LookUpPipelineAdminRequest) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

func (x *LookUpPipelineAdminRequest) GetView() LookUpPipelineAdminRequest_View {
	if x != nil && x.View != nil {
		return *x.View
	}
	return LookUpPipelineAdminRequest_VIEW_UNSPECIFIED
}

// LookUpPipelineAdminResponse represents a response for a pipeline resource
type LookUpPipelineAdminResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A pipeline resource
	Pipeline *Pipeline `protobuf:"bytes,1,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (x *LookUpPipelineAdminResponse) Reset() {
	*x = LookUpPipelineAdminResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookUpPipelineAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookUpPipelineAdminResponse) ProtoMessage() {}

func (x *LookUpPipelineAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookUpPipelineAdminResponse.ProtoReflect.Descriptor instead.
func (*LookUpPipelineAdminResponse) Descriptor() ([]byte, []int) {
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP(), []int{61}
}

func (x *LookUpPipelineAdminResponse) GetPipeline() *Pipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

var File_vdp_pipeline_v1alpha_pipeline_proto protoreflect.FileDescriptor

var file_vdp_pipeline_v1alpha_pipeline_proto_rawDesc = []byte{
	0x0a, 0x23, 0x76, 0x64, 0x70, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x2c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x6c, 0x6f,
	0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x76, 0x64, 0x70,
	0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x76, 0x64, 0x70, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x76, 0x64, 0x70, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x76, 0x64, 0x70, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x14, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x12,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x77,
	0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x63, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x14,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x00, 0x52, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x78, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x04, 0x0a, 0x09,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xfa, 0x41, 0x03, 0x0a, 0x01, 0x2a, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x76, 0x64, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x03, 0x0a, 0x01, 0x2a, 0x52, 0x0e,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x60,
	0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76, 0x64,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x63, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x48, 0x00,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x64,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x84, 0x06, 0x0a, 0x08, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x17, 0x0a, 0x15, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x03, 0x6f, 0x72, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x03, 0xfa, 0x41, 0x1f, 0x0a, 0x1d, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x72,
	0x67, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x3a, 0x41, 0xea, 0x41, 0x3e, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x21, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72,
	0x7d, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x7d, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xb4, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x1a, 0x56,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x2d,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a,
	0x17, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0xdb, 0x04, 0x0a, 0x0f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x64, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x40, 0x0a,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a,
	0x31, 0xea, 0x41, 0x2e, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c,
	0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x12,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x7d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x94, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x76, 0x64, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x02, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x22, 0x4c, 0x0a, 0x04, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52,
	0x45, 0x43, 0x49, 0x50, 0x45, 0x10, 0x03, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x12,
	0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63,
	0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x22, 0x58, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xd7, 0x03, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x02, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x12, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x22, 0x4c, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14,
	0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53,
	0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c,
	0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x43, 0x49,
	0x50, 0x45, 0x10, 0x03, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x15, 0x4c, 0x6f,
	0x6f, 0x6b, 0x55, 0x70, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x65, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x4e, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x55, 0x70, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x22, 0x4c, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14,
	0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53,
	0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c,
	0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x43, 0x49,
	0x50, 0x45, 0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x54, 0x0a,
	0x16, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x37, 0x92, 0x41,
	0x13, 0xca, 0x3e, 0x10, 0xfa, 0x02, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x76,
	0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x76, 0x64, 0x70, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x22, 0x4c, 0x0a, 0x04,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x45, 0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x22, 0x55, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x58, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x68, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x37, 0x92, 0x41, 0x13, 0xca, 0x3e, 0x10, 0xfa, 0x02, 0x0d, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68,
	0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a,
	0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e,
	0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x1c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0x7f, 0x0a, 0x19, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe0, 0x41, 0x02, 0xfa,
	0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e,
	0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x22, 0x58, 0x0a, 0x1a, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1a, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a,
	0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63,
	0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x64,
	0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x01, 0x0a,
	0x1f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x64, 0x0a,
	0x20, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f,
	0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01,
	0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22,
	0x12, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65,
	0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x21, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x22, 0xec, 0x03, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x40, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x12, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52,
	0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x22,
	0x4c, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x45, 0x10, 0x03, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22,
	0xac, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xaa,
	0x02, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46,
	0x92, 0x41, 0x1b, 0xca, 0x3e, 0x18, 0xfa, 0x02, 0x15, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c,
	0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x76, 0x64, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x04, 0x76, 0x69, 0x65,
	0x77, 0x88, 0x01, 0x01, 0x22, 0x4c, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x10,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x45,
	0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x61, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a,
	0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xaa,
	0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x64, 0x0a, 0x21, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x22, 0x7e, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x1b, 0xca, 0x3e, 0x18, 0xfa, 0x02, 0x15, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x23, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x0a, 0x24, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe0, 0x41,
	0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c,
	0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x68, 0x0a, 0x25, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22,
	0x5a, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x1b, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x22, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x17, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x6e, 0x65, 0x77,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x22, 0x64, 0x0a, 0x21, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x7b, 0x0a, 0x1f, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0x92, 0x41, 0x19, 0xca, 0x3e, 0x16,
	0xfa, 0x02, 0x13, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x20, 0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x21,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0xe0, 0x41, 0x02, 0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x22, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x41, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x9c, 0x01, 0x0a, 0x26, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x73,
	0x79, 0x6e, 0x63, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x02,
	0xfa, 0x41, 0x22, 0x0a, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x22, 0x6b, 0x0a, 0x27, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6c, 0x6f, 0x6e, 0x67, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e,
	0x03, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x76, 0x64, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x04, 0x52,
	0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x22,
	0x4c, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x45, 0x10, 0x03, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22,
	0xa1, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x09, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xac, 0x03, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x59, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56,
	0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x04, 0x76, 0x69, 0x65, 0x77,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x03, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x01,
	0x48, 0x04, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x22, 0x4c, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x50, 0x45, 0x10, 0x03,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x64, 0x70,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x1a, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x53, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x35, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x22, 0x4c, 0x0a, 0x04, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52,
	0x45, 0x43, 0x49, 0x50, 0x45, 0x10, 0x03, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x69, 0x65, 0x77,
	0x22, 0x59, 0x0a, 0x1b, 0x4c, 0x6f, 0x6f, 0x6b, 0x55, 0x70, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2a, 0xb9, 0x01, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x49, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x02, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f,
	0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x55, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x42, 0xe3,
	0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0d, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c,
	0x2d, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f,
	0x76, 0x64, 0x70, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x3b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x56, 0x50, 0x58, 0xaa, 0x02, 0x14, 0x56, 0x64, 0x70,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0xca, 0x02, 0x14, 0x56, 0x64, 0x70, 0x5c, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x20, 0x56, 0x64, 0x70, 0x5c, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x56, 0x64,
	0x70, 0x3a, 0x3a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vdp_pipeline_v1alpha_pipeline_proto_rawDescOnce sync.Once
	file_vdp_pipeline_v1alpha_pipeline_proto_rawDescData = file_vdp_pipeline_v1alpha_pipeline_proto_rawDesc
)

func file_vdp_pipeline_v1alpha_pipeline_proto_rawDescGZIP() []byte {
	file_vdp_pipeline_v1alpha_pipeline_proto_rawDescOnce.Do(func() {
		file_vdp_pipeline_v1alpha_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(file_vdp_pipeline_v1alpha_pipeline_proto_rawDescData)
	})
	return file_vdp_pipeline_v1alpha_pipeline_proto_rawDescData
}

var file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 63)
var file_vdp_pipeline_v1alpha_pipeline_proto_goTypes = []interface{}{
	(ComponentType)(0),                              // 0: vdp.pipeline.v1alpha.ComponentType
	(State)(0),                                      // 1: vdp.pipeline.v1alpha.State
	(ListPipelinesRequest_View)(0),                  // 2: vdp.pipeline.v1alpha.ListPipelinesRequest.View
	(ListUserPipelinesRequest_View)(0),              // 3: vdp.pipeline.v1alpha.ListUserPipelinesRequest.View
	(LookUpPipelineRequest_View)(0),                 // 4: vdp.pipeline.v1alpha.LookUpPipelineRequest.View
	(GetUserPipelineRequest_View)(0),                // 5: vdp.pipeline.v1alpha.GetUserPipelineRequest.View
	(ListUserPipelineReleasesRequest_View)(0),       // 6: vdp.pipeline.v1alpha.ListUserPipelineReleasesRequest.View
	(GetUserPipelineReleaseRequest_View)(0),         // 7: vdp.pipeline.v1alpha.GetUserPipelineReleaseRequest.View
	(ListPipelinesAdminRequest_View)(0),             // 8: vdp.pipeline.v1alpha.ListPipelinesAdminRequest.View
	(ListPipelineReleasesAdminRequest_View)(0),      // 9: vdp.pipeline.v1alpha.ListPipelineReleasesAdminRequest.View
	(LookUpPipelineAdminRequest_View)(0),            // 10: vdp.pipeline.v1alpha.LookUpPipelineAdminRequest.View
	(*LivenessRequest)(nil),                         // 11: vdp.pipeline.v1alpha.LivenessRequest
	(*LivenessResponse)(nil),                        // 12: vdp.pipeline.v1alpha.LivenessResponse
	(*ReadinessRequest)(nil),                        // 13: vdp.pipeline.v1alpha.ReadinessRequest
	(*ReadinessResponse)(nil),                       // 14: vdp.pipeline.v1alpha.ReadinessResponse
	(*Component)(nil),                               // 15: vdp.pipeline.v1alpha.Component
	(*Recipe)(nil),                                  // 16: vdp.pipeline.v1alpha.Recipe
	(*Pipeline)(nil),                                // 17: vdp.pipeline.v1alpha.Pipeline
	(*TriggerMetadata)(nil),                         // 18: vdp.pipeline.v1alpha.TriggerMetadata
	(*Trace)(nil),                                   // 19: vdp.pipeline.v1alpha.Trace
	(*PipelineRelease)(nil),                         // 20: vdp.pipeline.v1alpha.PipelineRelease
	(*ListPipelinesRequest)(nil),                    // 21: vdp.pipeline.v1alpha.ListPipelinesRequest
	(*ListPipelinesResponse)(nil),                   // 22: vdp.pipeline.v1alpha.ListPipelinesResponse
	(*CreateUserPipelineRequest)(nil),               // 23: vdp.pipeline.v1alpha.CreateUserPipelineRequest
	(*CreateUserPipelineResponse)(nil),              // 24: vdp.pipeline.v1alpha.CreateUserPipelineResponse
	(*ListUserPipelinesRequest)(nil),                // 25: vdp.pipeline.v1alpha.ListUserPipelinesRequest
	(*ListUserPipelinesResponse)(nil),               // 26: vdp.pipeline.v1alpha.ListUserPipelinesResponse
	(*LookUpPipelineRequest)(nil),                   // 27: vdp.pipeline.v1alpha.LookUpPipelineRequest
	(*LookUpPipelineResponse)(nil),                  // 28: vdp.pipeline.v1alpha.LookUpPipelineResponse
	(*GetUserPipelineRequest)(nil),                  // 29: vdp.pipeline.v1alpha.GetUserPipelineRequest
	(*GetUserPipelineResponse)(nil),                 // 30: vdp.pipeline.v1alpha.GetUserPipelineResponse
	(*UpdateUserPipelineRequest)(nil),               // 31: vdp.pipeline.v1alpha.UpdateUserPipelineRequest
	(*UpdateUserPipelineResponse)(nil),              // 32: vdp.pipeline.v1alpha.UpdateUserPipelineResponse
	(*DeleteUserPipelineRequest)(nil),               // 33: vdp.pipeline.v1alpha.DeleteUserPipelineRequest
	(*DeleteUserPipelineResponse)(nil),              // 34: vdp.pipeline.v1alpha.DeleteUserPipelineResponse
	(*ValidateUserPipelineRequest)(nil),             // 35: vdp.pipeline.v1alpha.ValidateUserPipelineRequest
	(*ValidateUserPipelineResponse)(nil),            // 36: vdp.pipeline.v1alpha.ValidateUserPipelineResponse
	(*RenameUserPipelineRequest)(nil),               // 37: vdp.pipeline.v1alpha.RenameUserPipelineRequest
	(*RenameUserPipelineResponse)(nil),              // 38: vdp.pipeline.v1alpha.RenameUserPipelineResponse
	(*TriggerUserPipelineRequest)(nil),              // 39: vdp.pipeline.v1alpha.TriggerUserPipelineRequest
	(*TriggerUserPipelineResponse)(nil),             // 40: vdp.pipeline.v1alpha.TriggerUserPipelineResponse
	(*TriggerAsyncUserPipelineRequest)(nil),         // 41: vdp.pipeline.v1alpha.TriggerAsyncUserPipelineRequest
	(*TriggerAsyncUserPipelineResponse)(nil),        // 42: vdp.pipeline.v1alpha.TriggerAsyncUserPipelineResponse
	(*GetOperationRequest)(nil),                     // 43: vdp.pipeline.v1alpha.GetOperationRequest
	(*GetOperationResponse)(nil),                    // 44: vdp.pipeline.v1alpha.GetOperationResponse
	(*CreateUserPipelineReleaseRequest)(nil),        // 45: vdp.pipeline.v1alpha.CreateUserPipelineReleaseRequest
	(*CreateUserPipelineReleaseResponse)(nil),       // 46: vdp.pipeline.v1alpha.CreateUserPipelineReleaseResponse
	(*ListUserPipelineReleasesRequest)(nil),         // 47: vdp.pipeline.v1alpha.ListUserPipelineReleasesRequest
	(*ListUserPipelineReleasesResponse)(nil),        // 48: vdp.pipeline.v1alpha.ListUserPipelineReleasesResponse
	(*GetUserPipelineReleaseRequest)(nil),           // 49: vdp.pipeline.v1alpha.GetUserPipelineReleaseRequest
	(*GetUserPipelineReleaseResponse)(nil),          // 50: vdp.pipeline.v1alpha.GetUserPipelineReleaseResponse
	(*UpdateUserPipelineReleaseRequest)(nil),        // 51: vdp.pipeline.v1alpha.UpdateUserPipelineReleaseRequest
	(*UpdateUserPipelineReleaseResponse)(nil),       // 52: vdp.pipeline.v1alpha.UpdateUserPipelineReleaseResponse
	(*DeleteUserPipelineReleaseRequest)(nil),        // 53: vdp.pipeline.v1alpha.DeleteUserPipelineReleaseRequest
	(*DeleteUserPipelineReleaseResponse)(nil),       // 54: vdp.pipeline.v1alpha.DeleteUserPipelineReleaseResponse
	(*SetDefaultUserPipelineReleaseRequest)(nil),    // 55: vdp.pipeline.v1alpha.SetDefaultUserPipelineReleaseRequest
	(*SetDefaultUserPipelineReleaseResponse)(nil),   // 56: vdp.pipeline.v1alpha.SetDefaultUserPipelineReleaseResponse
	(*RestoreUserPipelineReleaseRequest)(nil),       // 57: vdp.pipeline.v1alpha.RestoreUserPipelineReleaseRequest
	(*RestoreUserPipelineReleaseResponse)(nil),      // 58: vdp.pipeline.v1alpha.RestoreUserPipelineReleaseResponse
	(*RenameUserPipelineReleaseRequest)(nil),        // 59: vdp.pipeline.v1alpha.RenameUserPipelineReleaseRequest
	(*RenameUserPipelineReleaseResponse)(nil),       // 60: vdp.pipeline.v1alpha.RenameUserPipelineReleaseResponse
	(*WatchUserPipelineReleaseRequest)(nil),         // 61: vdp.pipeline.v1alpha.WatchUserPipelineReleaseRequest
	(*WatchUserPipelineReleaseResponse)(nil),        // 62: vdp.pipeline.v1alpha.WatchUserPipelineReleaseResponse
	(*TriggerUserPipelineReleaseRequest)(nil),       // 63: vdp.pipeline.v1alpha.TriggerUserPipelineReleaseRequest
	(*TriggerUserPipelineReleaseResponse)(nil),      // 64: vdp.pipeline.v1alpha.TriggerUserPipelineReleaseResponse
	(*TriggerAsyncUserPipelineReleaseRequest)(nil),  // 65: vdp.pipeline.v1alpha.TriggerAsyncUserPipelineReleaseRequest
	(*TriggerAsyncUserPipelineReleaseResponse)(nil), // 66: vdp.pipeline.v1alpha.TriggerAsyncUserPipelineReleaseResponse
	(*ListPipelinesAdminRequest)(nil),               // 67: vdp.pipeline.v1alpha.ListPipelinesAdminRequest
	(*ListPipelinesAdminResponse)(nil),              // 68: vdp.pipeline.v1alpha.ListPipelinesAdminResponse
	(*ListPipelineReleasesAdminRequest)(nil),        // 69: vdp.pipeline.v1alpha.ListPipelineReleasesAdminRequest
	(*ListPipelineReleasesAdminResponse)(nil),       // 70: vdp.pipeline.v1alpha.ListPipelineReleasesAdminResponse
	(*LookUpPipelineAdminRequest)(nil),              // 71: vdp.pipeline.v1alpha.LookUpPipelineAdminRequest
	(*LookUpPipelineAdminResponse)(nil),             // 72: vdp.pipeline.v1alpha.LookUpPipelineAdminResponse
	nil,                                             // 73: vdp.pipeline.v1alpha.TriggerMetadata.TracesEntry
	(*v1alpha.HealthCheckRequest)(nil),              // 74: common.healthcheck.v1alpha.HealthCheckRequest
	(*v1alpha.HealthCheckResponse)(nil),             // 75: common.healthcheck.v1alpha.HealthCheckResponse
	(*Connector)(nil),                               // 76: vdp.pipeline.v1alpha.Connector
	(*structpb.Struct)(nil),                         // 77: google.protobuf.Struct
	(*OperatorDefinition)(nil),                      // 78: vdp.pipeline.v1alpha.OperatorDefinition
	(*ConnectorDefinition)(nil),                     // 79: vdp.pipeline.v1alpha.ConnectorDefinition
	(*timestamppb.Timestamp)(nil),                   // 80: google.protobuf.Timestamp
	(*Permission)(nil),                              // 81: vdp.pipeline.v1alpha.Permission
	(*fieldmaskpb.FieldMask)(nil),                   // 82: google.protobuf.FieldMask
	(*longrunningpb.Operation)(nil),                 // 83: google.longrunning.Operation
}
var file_vdp_pipeline_v1alpha_pipeline_proto_depIdxs = []int32{
	74, // 0: vdp.pipeline.v1alpha.LivenessRequest.health_check_request:type_name -> common.healthcheck.v1alpha.HealthCheckRequest
	75, // 1: vdp.pipeline.v1alpha.LivenessResponse.health_check_response:type_name -> common.healthcheck.v1alpha.HealthCheckResponse
	74, // 2: vdp.pipeline.v1alpha.ReadinessRequest.health_check_request:type_name -> common.healthcheck.v1alpha.HealthCheckRequest
	75, // 3: vdp.pipeline.v1alpha.ReadinessResponse.health_check_response:type_name -> common.healthcheck.v1alpha.HealthCheckResponse
	76, // 4: vdp.pipeline.v1alpha.Component.resource:type_name -> vdp.pipeline.v1alpha.Connector
	77, // 5: vdp.pipeline.v1alpha.Component.configuration:type_name -> google.protobuf.Struct
	0,  // 6: vdp.pipeline.v1alpha.Component.type:type_name -> vdp.pipeline.v1alpha.ComponentType
	78, // 7: vdp.pipeline.v1alpha.Component.operator_definition:type_name -> vdp.pipeline.v1alpha.OperatorDefinition
	79, // 8: vdp.pipeline.v1alpha.Component.connector_definition:type_name -> vdp.pipeline.v1alpha.ConnectorDefinition
	15, // 9: vdp.pipeline.v1alpha.Recipe.components:type_name -> vdp.pipeline.v1alpha.Component
	16, // 10: vdp.pipeline.v1alpha.Pipeline.recipe:type_name -> vdp.pipeline.v1alpha.Recipe
	80, // 11: vdp.pipeline.v1alpha.Pipeline.create_time:type_name -> google.protobuf.Timestamp
	80, // 12: vdp.pipeline.v1alpha.Pipeline.update_time:type_name -> google.protobuf.Timestamp
	77, // 13: vdp.pipeline.v1alpha.Pipeline.openapi_schema:type_name -> google.protobuf.Struct
	80, // 14: vdp.pipeline.v1alpha.Pipeline.delete_time:type_name -> google.protobuf.Timestamp
	81, // 15: vdp.pipeline.v1alpha.Pipeline.permission:type_name -> vdp.pipeline.v1alpha.Permission
	77, // 16: vdp.pipeline.v1alpha.Pipeline.metadata:type_name -> google.protobuf.Struct
	73, // 17: vdp.pipeline.v1alpha.TriggerMetadata.traces:type_name -> vdp.pipeline.v1alpha.TriggerMetadata.TracesEntry
	77, // 18: vdp.pipeline.v1alpha.Trace.inputs:type_name -> google.protobuf.Struct
	77, // 19: vdp.pipeline.v1alpha.Trace.outputs:type_name -> google.protobuf.Struct
	77, // 20: vdp.pipeline.v1alpha.Trace.error:type_name -> google.protobuf.Struct
	16, // 21: vdp.pipeline.v1alpha.PipelineRelease.recipe:type_name -> vdp.pipeline.v1alpha.Recipe
	80, // 22: vdp.pipeline.v1alpha.PipelineRelease.create_time:type_name -> google.protobuf.Timestamp
	80, // 23: vdp.pipeline.v1alpha.PipelineRelease.update_time:type_name -> google.protobuf.Timestamp
	77, // 24: vdp.pipeline.v1alpha.PipelineRelease.openapi_schema:type_name -> google.protobuf.Struct
	80, // 25: vdp.pipeline.v1alpha.PipelineRelease.delete_time:type_name -> google.protobuf.Timestamp
	77, // 26: vdp.pipeline.v1alpha.PipelineRelease.metadata:type_name -> google.protobuf.Struct
	2,  // 27: vdp.pipeline.v1alpha.ListPipelinesRequest.view:type_name -> vdp.pipeline.v1alpha.ListPipelinesRequest.View
	17, // 28: vdp.pipeline.v1alpha.ListPipelinesResponse.pipelines:type_name -> vdp.pipeline.v1alpha.Pipeline
	17, // 29: vdp.pipeline.v1alpha.CreateUserPipelineRequest.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	17, // 30: vdp.pipeline.v1alpha.CreateUserPipelineResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	3,  // 31: vdp.pipeline.v1alpha.ListUserPipelinesRequest.view:type_name -> vdp.pipeline.v1alpha.ListUserPipelinesRequest.View
	17, // 32: vdp.pipeline.v1alpha.ListUserPipelinesResponse.pipelines:type_name -> vdp.pipeline.v1alpha.Pipeline
	4,  // 33: vdp.pipeline.v1alpha.LookUpPipelineRequest.view:type_name -> vdp.pipeline.v1alpha.LookUpPipelineRequest.View
	17, // 34: vdp.pipeline.v1alpha.LookUpPipelineResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	5,  // 35: vdp.pipeline.v1alpha.GetUserPipelineRequest.view:type_name -> vdp.pipeline.v1alpha.GetUserPipelineRequest.View
	17, // 36: vdp.pipeline.v1alpha.GetUserPipelineResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	17, // 37: vdp.pipeline.v1alpha.UpdateUserPipelineRequest.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	82, // 38: vdp.pipeline.v1alpha.UpdateUserPipelineRequest.update_mask:type_name -> google.protobuf.FieldMask
	17, // 39: vdp.pipeline.v1alpha.UpdateUserPipelineResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	17, // 40: vdp.pipeline.v1alpha.ValidateUserPipelineResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	17, // 41: vdp.pipeline.v1alpha.RenameUserPipelineResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	77, // 42: vdp.pipeline.v1alpha.TriggerUserPipelineRequest.inputs:type_name -> google.protobuf.Struct
	77, // 43: vdp.pipeline.v1alpha.TriggerUserPipelineResponse.outputs:type_name -> google.protobuf.Struct
	18, // 44: vdp.pipeline.v1alpha.TriggerUserPipelineResponse.metadata:type_name -> vdp.pipeline.v1alpha.TriggerMetadata
	77, // 45: vdp.pipeline.v1alpha.TriggerAsyncUserPipelineRequest.inputs:type_name -> google.protobuf.Struct
	83, // 46: vdp.pipeline.v1alpha.TriggerAsyncUserPipelineResponse.operation:type_name -> google.longrunning.Operation
	83, // 47: vdp.pipeline.v1alpha.GetOperationResponse.operation:type_name -> google.longrunning.Operation
	20, // 48: vdp.pipeline.v1alpha.CreateUserPipelineReleaseRequest.release:type_name -> vdp.pipeline.v1alpha.PipelineRelease
	20, // 49: vdp.pipeline.v1alpha.CreateUserPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1alpha.PipelineRelease
	6,  // 50: vdp.pipeline.v1alpha.ListUserPipelineReleasesRequest.view:type_name -> vdp.pipeline.v1alpha.ListUserPipelineReleasesRequest.View
	20, // 51: vdp.pipeline.v1alpha.ListUserPipelineReleasesResponse.releases:type_name -> vdp.pipeline.v1alpha.PipelineRelease
	7,  // 52: vdp.pipeline.v1alpha.GetUserPipelineReleaseRequest.view:type_name -> vdp.pipeline.v1alpha.GetUserPipelineReleaseRequest.View
	20, // 53: vdp.pipeline.v1alpha.GetUserPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1alpha.PipelineRelease
	20, // 54: vdp.pipeline.v1alpha.UpdateUserPipelineReleaseRequest.release:type_name -> vdp.pipeline.v1alpha.PipelineRelease
	82, // 55: vdp.pipeline.v1alpha.UpdateUserPipelineReleaseRequest.update_mask:type_name -> google.protobuf.FieldMask
	20, // 56: vdp.pipeline.v1alpha.UpdateUserPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1alpha.PipelineRelease
	20, // 57: vdp.pipeline.v1alpha.SetDefaultUserPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1alpha.PipelineRelease
	20, // 58: vdp.pipeline.v1alpha.RestoreUserPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1alpha.PipelineRelease
	20, // 59: vdp.pipeline.v1alpha.RenameUserPipelineReleaseResponse.release:type_name -> vdp.pipeline.v1alpha.PipelineRelease
	1,  // 60: vdp.pipeline.v1alpha.WatchUserPipelineReleaseResponse.state:type_name -> vdp.pipeline.v1alpha.State
	77, // 61: vdp.pipeline.v1alpha.TriggerUserPipelineReleaseRequest.inputs:type_name -> google.protobuf.Struct
	77, // 62: vdp.pipeline.v1alpha.TriggerUserPipelineReleaseResponse.outputs:type_name -> google.protobuf.Struct
	18, // 63: vdp.pipeline.v1alpha.TriggerUserPipelineReleaseResponse.metadata:type_name -> vdp.pipeline.v1alpha.TriggerMetadata
	77, // 64: vdp.pipeline.v1alpha.TriggerAsyncUserPipelineReleaseRequest.inputs:type_name -> google.protobuf.Struct
	83, // 65: vdp.pipeline.v1alpha.TriggerAsyncUserPipelineReleaseResponse.operation:type_name -> google.longrunning.Operation
	8,  // 66: vdp.pipeline.v1alpha.ListPipelinesAdminRequest.view:type_name -> vdp.pipeline.v1alpha.ListPipelinesAdminRequest.View
	17, // 67: vdp.pipeline.v1alpha.ListPipelinesAdminResponse.pipelines:type_name -> vdp.pipeline.v1alpha.Pipeline
	9,  // 68: vdp.pipeline.v1alpha.ListPipelineReleasesAdminRequest.view:type_name -> vdp.pipeline.v1alpha.ListPipelineReleasesAdminRequest.View
	20, // 69: vdp.pipeline.v1alpha.ListPipelineReleasesAdminResponse.releases:type_name -> vdp.pipeline.v1alpha.PipelineRelease
	10, // 70: vdp.pipeline.v1alpha.LookUpPipelineAdminRequest.view:type_name -> vdp.pipeline.v1alpha.LookUpPipelineAdminRequest.View
	17, // 71: vdp.pipeline.v1alpha.LookUpPipelineAdminResponse.pipeline:type_name -> vdp.pipeline.v1alpha.Pipeline
	19, // 72: vdp.pipeline.v1alpha.TriggerMetadata.TracesEntry.value:type_name -> vdp.pipeline.v1alpha.Trace
	73, // [73:73] is the sub-list for method output_type
	73, // [73:73] is the sub-list for method input_type
	73, // [73:73] is the sub-list for extension type_name
	73, // [73:73] is the sub-list for extension extendee
	0,  // [0:73] is the sub-list for field type_name
}

func init() { file_vdp_pipeline_v1alpha_pipeline_proto_init() }
func file_vdp_pipeline_v1alpha_pipeline_proto_init() {
	if File_vdp_pipeline_v1alpha_pipeline_proto != nil {
		return
	}
	file_vdp_pipeline_v1alpha_common_proto_init()
	file_vdp_pipeline_v1alpha_connector_proto_init()
	file_vdp_pipeline_v1alpha_connector_definition_proto_init()
	file_vdp_pipeline_v1alpha_operator_definition_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadinessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserPipelinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserPipelinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncUserPipelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncUserPipelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOperationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserPipelineReleasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserPipelineReleasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDefaultUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncUserPipelineReleaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerAsyncUserPipelineReleaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinesAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelinesAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineReleasesAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineReleasesAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpPipelineAdminRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LookUpPipelineAdminResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Component_OperatorDefinition)(nil),
		(*Component_ConnectorDefinition)(nil),
	}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Pipeline_User)(nil),
		(*Pipeline_Org)(nil),
	}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[36].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[56].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[58].OneofWrappers = []interface{}{}
	file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes[60].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vdp_pipeline_v1alpha_pipeline_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   63,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vdp_pipeline_v1alpha_pipeline_proto_goTypes,
		DependencyIndexes: file_vdp_pipeline_v1alpha_pipeline_proto_depIdxs,
		EnumInfos:         file_vdp_pipeline_v1alpha_pipeline_proto_enumTypes,
		MessageInfos:      file_vdp_pipeline_v1alpha_pipeline_proto_msgTypes,
	}.Build()
	File_vdp_pipeline_v1alpha_pipeline_proto = out.File
	file_vdp_pipeline_v1alpha_pipeline_proto_rawDesc = nil
	file_vdp_pipeline_v1alpha_pipeline_proto_goTypes = nil
	file_vdp_pipeline_v1alpha_pipeline_proto_depIdxs = nil
}
