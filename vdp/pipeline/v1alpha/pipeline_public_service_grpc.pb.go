// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: vdp/pipeline/v1alpha/pipeline_public_service.proto

package pipelinev1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PipelinePublicService_Liveness_FullMethodName                             = "/vdp.pipeline.v1alpha.PipelinePublicService/Liveness"
	PipelinePublicService_Readiness_FullMethodName                            = "/vdp.pipeline.v1alpha.PipelinePublicService/Readiness"
	PipelinePublicService_CreatePipeline_FullMethodName                       = "/vdp.pipeline.v1alpha.PipelinePublicService/CreatePipeline"
	PipelinePublicService_ListPipelines_FullMethodName                        = "/vdp.pipeline.v1alpha.PipelinePublicService/ListPipelines"
	PipelinePublicService_GetPipeline_FullMethodName                          = "/vdp.pipeline.v1alpha.PipelinePublicService/GetPipeline"
	PipelinePublicService_UpdatePipeline_FullMethodName                       = "/vdp.pipeline.v1alpha.PipelinePublicService/UpdatePipeline"
	PipelinePublicService_DeletePipeline_FullMethodName                       = "/vdp.pipeline.v1alpha.PipelinePublicService/DeletePipeline"
	PipelinePublicService_LookUpPipeline_FullMethodName                       = "/vdp.pipeline.v1alpha.PipelinePublicService/LookUpPipeline"
	PipelinePublicService_ActivatePipeline_FullMethodName                     = "/vdp.pipeline.v1alpha.PipelinePublicService/ActivatePipeline"
	PipelinePublicService_DeactivatePipeline_FullMethodName                   = "/vdp.pipeline.v1alpha.PipelinePublicService/DeactivatePipeline"
	PipelinePublicService_RenamePipeline_FullMethodName                       = "/vdp.pipeline.v1alpha.PipelinePublicService/RenamePipeline"
	PipelinePublicService_TriggerSyncPipeline_FullMethodName                  = "/vdp.pipeline.v1alpha.PipelinePublicService/TriggerSyncPipeline"
	PipelinePublicService_TriggerSyncPipelineBinaryFileUpload_FullMethodName  = "/vdp.pipeline.v1alpha.PipelinePublicService/TriggerSyncPipelineBinaryFileUpload"
	PipelinePublicService_TriggerAsyncPipeline_FullMethodName                 = "/vdp.pipeline.v1alpha.PipelinePublicService/TriggerAsyncPipeline"
	PipelinePublicService_TriggerAsyncPipelineBinaryFileUpload_FullMethodName = "/vdp.pipeline.v1alpha.PipelinePublicService/TriggerAsyncPipelineBinaryFileUpload"
	PipelinePublicService_WatchPipeline_FullMethodName                        = "/vdp.pipeline.v1alpha.PipelinePublicService/WatchPipeline"
	PipelinePublicService_GetTriggerAsyncOperation_FullMethodName             = "/vdp.pipeline.v1alpha.PipelinePublicService/GetTriggerAsyncOperation"
)

// PipelinePublicServiceClient is the client API for PipelinePublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipelinePublicServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// CreatePipeline method receives a CreatePipelineRequest message and returns
	// a CreatePipelineResponse message.
	CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error)
	// ListPipelines method receives a ListPipelinesRequest message and returns a
	// ListPipelinesResponse message.
	ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error)
	// GetPipeline method receives a GetPipelineRequest message and returns a
	// GetPipelineResponse message.
	GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*GetPipelineResponse, error)
	// UpdatePipeline method receives a UpdatePipelineRequest message and returns
	// a UpdatePipelineResponse message.
	UpdatePipeline(ctx context.Context, in *UpdatePipelineRequest, opts ...grpc.CallOption) (*UpdatePipelineResponse, error)
	// DeletePipeline method receives a DeletePipelineRequest message and returns
	// a DeletePipelineResponse message.
	DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*DeletePipelineResponse, error)
	// LookUpPipeline method receives a LookUpPipelineRequest message and returns
	// a LookUpPipelineResponse
	LookUpPipeline(ctx context.Context, in *LookUpPipelineRequest, opts ...grpc.CallOption) (*LookUpPipelineResponse, error)
	// Activate a pipeline.
	// The "state" of the pipeline after activating is "ACTIVE".
	// ActivatePipeline can be called on Pipelines in the state "INACTIVE";
	// Pipelines in a different state (including "ACTIVE") returns an error.
	ActivatePipeline(ctx context.Context, in *ActivatePipelineRequest, opts ...grpc.CallOption) (*ActivatePipelineResponse, error)
	// Deactivate a pipeline.
	// The "state" of the pipeline after inactivating is "INACTIVE".
	// DeactivatePipeline can be called on Pipelines in the state "ACTIVE";
	// Pipelines in a different state (including "INACTIVE") returns an error.
	DeactivatePipeline(ctx context.Context, in *DeactivatePipelineRequest, opts ...grpc.CallOption) (*DeactivatePipelineResponse, error)
	// RenamePipeline method receives a RenamePipelineRequest message and returns
	// a RenamePipelineResponse message.
	RenamePipeline(ctx context.Context, in *RenamePipelineRequest, opts ...grpc.CallOption) (*RenamePipelineResponse, error)
	// TriggerSyncPipeline method receives a TriggerSyncPipelineRequest message
	// and returns a TriggerSyncPipelineResponse.
	TriggerSyncPipeline(ctx context.Context, in *TriggerSyncPipelineRequest, opts ...grpc.CallOption) (*TriggerSyncPipelineResponse, error)
	// TriggerSyncPipelineBinaryFileUpload method receives a
	// TriggerSyncPipelineBinaryFileUploadRequest message and returns a
	// TriggerSyncPipelineBinaryFileUploadResponse message.
	//
	// Endpoint: "POST /v1alpha/{name=pipelines/*}/triggerSyncMultipart"
	TriggerSyncPipelineBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (PipelinePublicService_TriggerSyncPipelineBinaryFileUploadClient, error)
	// TriggerAsyncPipeline method receives a TriggerPipelineRequest message and
	// returns a TriggerAsyncPipelineResponse.
	TriggerAsyncPipeline(ctx context.Context, in *TriggerAsyncPipelineRequest, opts ...grpc.CallOption) (*TriggerAsyncPipelineResponse, error)
	// TriggerAsyncPipelineBinaryFileUpload method receives a
	// TriggerPipelineBinaryFileUploadRequest message and returns a
	// TriggerAsyncPipelineResponse message.
	//
	// Endpoint: "POST /v1alpha/{name=pipelines/*}/triggerAsyncMultipart"
	TriggerAsyncPipelineBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (PipelinePublicService_TriggerAsyncPipelineBinaryFileUploadClient, error)
	// WatchPipeline method receives a WatchPipelineRequest message
	// and returns a WatchPipelineResponse
	WatchPipeline(ctx context.Context, in *WatchPipelineRequest, opts ...grpc.CallOption) (*WatchPipelineResponse, error)
	// GetTriggerAsyncOperation method receives a
	// GetTriggerAsyncOperationRequest message and returns a
	// GetTriggerAsyncOperationResponse message.
	GetTriggerAsyncOperation(ctx context.Context, in *GetTriggerAsyncOperationRequest, opts ...grpc.CallOption) (*GetTriggerAsyncOperationResponse, error)
}

type pipelinePublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelinePublicServiceClient(cc grpc.ClientConnInterface) PipelinePublicServiceClient {
	return &pipelinePublicServiceClient{cc}
}

func (c *pipelinePublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_Liveness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_Readiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error) {
	out := new(CreatePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreatePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error) {
	out := new(ListPipelinesResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListPipelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*GetPipelineResponse, error) {
	out := new(GetPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) UpdatePipeline(ctx context.Context, in *UpdatePipelineRequest, opts ...grpc.CallOption) (*UpdatePipelineResponse, error) {
	out := new(UpdatePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdatePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*DeletePipelineResponse, error) {
	out := new(DeletePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeletePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) LookUpPipeline(ctx context.Context, in *LookUpPipelineRequest, opts ...grpc.CallOption) (*LookUpPipelineResponse, error) {
	out := new(LookUpPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_LookUpPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ActivatePipeline(ctx context.Context, in *ActivatePipelineRequest, opts ...grpc.CallOption) (*ActivatePipelineResponse, error) {
	out := new(ActivatePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ActivatePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) DeactivatePipeline(ctx context.Context, in *DeactivatePipelineRequest, opts ...grpc.CallOption) (*DeactivatePipelineResponse, error) {
	out := new(DeactivatePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeactivatePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) RenamePipeline(ctx context.Context, in *RenamePipelineRequest, opts ...grpc.CallOption) (*RenamePipelineResponse, error) {
	out := new(RenamePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RenamePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerSyncPipeline(ctx context.Context, in *TriggerSyncPipelineRequest, opts ...grpc.CallOption) (*TriggerSyncPipelineResponse, error) {
	out := new(TriggerSyncPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerSyncPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerSyncPipelineBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (PipelinePublicService_TriggerSyncPipelineBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &PipelinePublicService_ServiceDesc.Streams[0], PipelinePublicService_TriggerSyncPipelineBinaryFileUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pipelinePublicServiceTriggerSyncPipelineBinaryFileUploadClient{stream}
	return x, nil
}

type PipelinePublicService_TriggerSyncPipelineBinaryFileUploadClient interface {
	Send(*TriggerSyncPipelineBinaryFileUploadRequest) error
	CloseAndRecv() (*TriggerSyncPipelineBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type pipelinePublicServiceTriggerSyncPipelineBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *pipelinePublicServiceTriggerSyncPipelineBinaryFileUploadClient) Send(m *TriggerSyncPipelineBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pipelinePublicServiceTriggerSyncPipelineBinaryFileUploadClient) CloseAndRecv() (*TriggerSyncPipelineBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TriggerSyncPipelineBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pipelinePublicServiceClient) TriggerAsyncPipeline(ctx context.Context, in *TriggerAsyncPipelineRequest, opts ...grpc.CallOption) (*TriggerAsyncPipelineResponse, error) {
	out := new(TriggerAsyncPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerAsyncPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerAsyncPipelineBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (PipelinePublicService_TriggerAsyncPipelineBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &PipelinePublicService_ServiceDesc.Streams[1], PipelinePublicService_TriggerAsyncPipelineBinaryFileUpload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pipelinePublicServiceTriggerAsyncPipelineBinaryFileUploadClient{stream}
	return x, nil
}

type PipelinePublicService_TriggerAsyncPipelineBinaryFileUploadClient interface {
	Send(*TriggerAsyncPipelineBinaryFileUploadRequest) error
	CloseAndRecv() (*TriggerAsyncPipelineBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type pipelinePublicServiceTriggerAsyncPipelineBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *pipelinePublicServiceTriggerAsyncPipelineBinaryFileUploadClient) Send(m *TriggerAsyncPipelineBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pipelinePublicServiceTriggerAsyncPipelineBinaryFileUploadClient) CloseAndRecv() (*TriggerAsyncPipelineBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TriggerAsyncPipelineBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pipelinePublicServiceClient) WatchPipeline(ctx context.Context, in *WatchPipelineRequest, opts ...grpc.CallOption) (*WatchPipelineResponse, error) {
	out := new(WatchPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_WatchPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetTriggerAsyncOperation(ctx context.Context, in *GetTriggerAsyncOperationRequest, opts ...grpc.CallOption) (*GetTriggerAsyncOperationResponse, error) {
	out := new(GetTriggerAsyncOperationResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetTriggerAsyncOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelinePublicServiceServer is the server API for PipelinePublicService service.
// All implementations should embed UnimplementedPipelinePublicServiceServer
// for forward compatibility
type PipelinePublicServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// CreatePipeline method receives a CreatePipelineRequest message and returns
	// a CreatePipelineResponse message.
	CreatePipeline(context.Context, *CreatePipelineRequest) (*CreatePipelineResponse, error)
	// ListPipelines method receives a ListPipelinesRequest message and returns a
	// ListPipelinesResponse message.
	ListPipelines(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error)
	// GetPipeline method receives a GetPipelineRequest message and returns a
	// GetPipelineResponse message.
	GetPipeline(context.Context, *GetPipelineRequest) (*GetPipelineResponse, error)
	// UpdatePipeline method receives a UpdatePipelineRequest message and returns
	// a UpdatePipelineResponse message.
	UpdatePipeline(context.Context, *UpdatePipelineRequest) (*UpdatePipelineResponse, error)
	// DeletePipeline method receives a DeletePipelineRequest message and returns
	// a DeletePipelineResponse message.
	DeletePipeline(context.Context, *DeletePipelineRequest) (*DeletePipelineResponse, error)
	// LookUpPipeline method receives a LookUpPipelineRequest message and returns
	// a LookUpPipelineResponse
	LookUpPipeline(context.Context, *LookUpPipelineRequest) (*LookUpPipelineResponse, error)
	// Activate a pipeline.
	// The "state" of the pipeline after activating is "ACTIVE".
	// ActivatePipeline can be called on Pipelines in the state "INACTIVE";
	// Pipelines in a different state (including "ACTIVE") returns an error.
	ActivatePipeline(context.Context, *ActivatePipelineRequest) (*ActivatePipelineResponse, error)
	// Deactivate a pipeline.
	// The "state" of the pipeline after inactivating is "INACTIVE".
	// DeactivatePipeline can be called on Pipelines in the state "ACTIVE";
	// Pipelines in a different state (including "INACTIVE") returns an error.
	DeactivatePipeline(context.Context, *DeactivatePipelineRequest) (*DeactivatePipelineResponse, error)
	// RenamePipeline method receives a RenamePipelineRequest message and returns
	// a RenamePipelineResponse message.
	RenamePipeline(context.Context, *RenamePipelineRequest) (*RenamePipelineResponse, error)
	// TriggerSyncPipeline method receives a TriggerSyncPipelineRequest message
	// and returns a TriggerSyncPipelineResponse.
	TriggerSyncPipeline(context.Context, *TriggerSyncPipelineRequest) (*TriggerSyncPipelineResponse, error)
	// TriggerSyncPipelineBinaryFileUpload method receives a
	// TriggerSyncPipelineBinaryFileUploadRequest message and returns a
	// TriggerSyncPipelineBinaryFileUploadResponse message.
	//
	// Endpoint: "POST /v1alpha/{name=pipelines/*}/triggerSyncMultipart"
	TriggerSyncPipelineBinaryFileUpload(PipelinePublicService_TriggerSyncPipelineBinaryFileUploadServer) error
	// TriggerAsyncPipeline method receives a TriggerPipelineRequest message and
	// returns a TriggerAsyncPipelineResponse.
	TriggerAsyncPipeline(context.Context, *TriggerAsyncPipelineRequest) (*TriggerAsyncPipelineResponse, error)
	// TriggerAsyncPipelineBinaryFileUpload method receives a
	// TriggerPipelineBinaryFileUploadRequest message and returns a
	// TriggerAsyncPipelineResponse message.
	//
	// Endpoint: "POST /v1alpha/{name=pipelines/*}/triggerAsyncMultipart"
	TriggerAsyncPipelineBinaryFileUpload(PipelinePublicService_TriggerAsyncPipelineBinaryFileUploadServer) error
	// WatchPipeline method receives a WatchPipelineRequest message
	// and returns a WatchPipelineResponse
	WatchPipeline(context.Context, *WatchPipelineRequest) (*WatchPipelineResponse, error)
	// GetTriggerAsyncOperation method receives a
	// GetTriggerAsyncOperationRequest message and returns a
	// GetTriggerAsyncOperationResponse message.
	GetTriggerAsyncOperation(context.Context, *GetTriggerAsyncOperationRequest) (*GetTriggerAsyncOperationResponse, error)
}

// UnimplementedPipelinePublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPipelinePublicServiceServer struct {
}

func (UnimplementedPipelinePublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedPipelinePublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreatePipeline(context.Context, *CreatePipelineRequest) (*CreatePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListPipelines(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelines not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetPipeline(context.Context, *GetPipelineRequest) (*GetPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdatePipeline(context.Context, *UpdatePipelineRequest) (*UpdatePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeletePipeline(context.Context, *DeletePipelineRequest) (*DeletePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) LookUpPipeline(context.Context, *LookUpPipelineRequest) (*LookUpPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ActivatePipeline(context.Context, *ActivatePipelineRequest) (*ActivatePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivatePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeactivatePipeline(context.Context, *DeactivatePipelineRequest) (*DeactivatePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivatePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RenamePipeline(context.Context, *RenamePipelineRequest) (*RenamePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenamePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerSyncPipeline(context.Context, *TriggerSyncPipelineRequest) (*TriggerSyncPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSyncPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerSyncPipelineBinaryFileUpload(PipelinePublicService_TriggerSyncPipelineBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method TriggerSyncPipelineBinaryFileUpload not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerAsyncPipeline(context.Context, *TriggerAsyncPipelineRequest) (*TriggerAsyncPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerAsyncPipelineBinaryFileUpload(PipelinePublicService_TriggerAsyncPipelineBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method TriggerAsyncPipelineBinaryFileUpload not implemented")
}
func (UnimplementedPipelinePublicServiceServer) WatchPipeline(context.Context, *WatchPipelineRequest) (*WatchPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetTriggerAsyncOperation(context.Context, *GetTriggerAsyncOperationRequest) (*GetTriggerAsyncOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTriggerAsyncOperation not implemented")
}

// UnsafePipelinePublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipelinePublicServiceServer will
// result in compilation errors.
type UnsafePipelinePublicServiceServer interface {
	mustEmbedUnimplementedPipelinePublicServiceServer()
}

func RegisterPipelinePublicServiceServer(s grpc.ServiceRegistrar, srv PipelinePublicServiceServer) {
	s.RegisterService(&PipelinePublicService_ServiceDesc, srv)
}

func _PipelinePublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreatePipeline(ctx, req.(*CreatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListPipelines(ctx, req.(*ListPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetPipeline(ctx, req.(*GetPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdatePipeline(ctx, req.(*UpdatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeletePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeletePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeletePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeletePipeline(ctx, req.(*DeletePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_LookUpPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).LookUpPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_LookUpPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).LookUpPipeline(ctx, req.(*LookUpPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ActivatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ActivatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ActivatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ActivatePipeline(ctx, req.(*ActivatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeactivatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeactivatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeactivatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeactivatePipeline(ctx, req.(*DeactivatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RenamePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenamePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RenamePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RenamePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RenamePipeline(ctx, req.(*RenamePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerSyncPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerSyncPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerSyncPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerSyncPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerSyncPipeline(ctx, req.(*TriggerSyncPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerSyncPipelineBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PipelinePublicServiceServer).TriggerSyncPipelineBinaryFileUpload(&pipelinePublicServiceTriggerSyncPipelineBinaryFileUploadServer{stream})
}

type PipelinePublicService_TriggerSyncPipelineBinaryFileUploadServer interface {
	SendAndClose(*TriggerSyncPipelineBinaryFileUploadResponse) error
	Recv() (*TriggerSyncPipelineBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type pipelinePublicServiceTriggerSyncPipelineBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *pipelinePublicServiceTriggerSyncPipelineBinaryFileUploadServer) SendAndClose(m *TriggerSyncPipelineBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pipelinePublicServiceTriggerSyncPipelineBinaryFileUploadServer) Recv() (*TriggerSyncPipelineBinaryFileUploadRequest, error) {
	m := new(TriggerSyncPipelineBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PipelinePublicService_TriggerAsyncPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerAsyncPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerAsyncPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerAsyncPipeline(ctx, req.(*TriggerAsyncPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerAsyncPipelineBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PipelinePublicServiceServer).TriggerAsyncPipelineBinaryFileUpload(&pipelinePublicServiceTriggerAsyncPipelineBinaryFileUploadServer{stream})
}

type PipelinePublicService_TriggerAsyncPipelineBinaryFileUploadServer interface {
	SendAndClose(*TriggerAsyncPipelineBinaryFileUploadResponse) error
	Recv() (*TriggerAsyncPipelineBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type pipelinePublicServiceTriggerAsyncPipelineBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *pipelinePublicServiceTriggerAsyncPipelineBinaryFileUploadServer) SendAndClose(m *TriggerAsyncPipelineBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pipelinePublicServiceTriggerAsyncPipelineBinaryFileUploadServer) Recv() (*TriggerAsyncPipelineBinaryFileUploadRequest, error) {
	m := new(TriggerAsyncPipelineBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PipelinePublicService_WatchPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).WatchPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_WatchPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).WatchPipeline(ctx, req.(*WatchPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetTriggerAsyncOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTriggerAsyncOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetTriggerAsyncOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetTriggerAsyncOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetTriggerAsyncOperation(ctx, req.(*GetTriggerAsyncOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PipelinePublicService_ServiceDesc is the grpc.ServiceDesc for PipelinePublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PipelinePublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.pipeline.v1alpha.PipelinePublicService",
	HandlerType: (*PipelinePublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _PipelinePublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _PipelinePublicService_Readiness_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _PipelinePublicService_CreatePipeline_Handler,
		},
		{
			MethodName: "ListPipelines",
			Handler:    _PipelinePublicService_ListPipelines_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _PipelinePublicService_GetPipeline_Handler,
		},
		{
			MethodName: "UpdatePipeline",
			Handler:    _PipelinePublicService_UpdatePipeline_Handler,
		},
		{
			MethodName: "DeletePipeline",
			Handler:    _PipelinePublicService_DeletePipeline_Handler,
		},
		{
			MethodName: "LookUpPipeline",
			Handler:    _PipelinePublicService_LookUpPipeline_Handler,
		},
		{
			MethodName: "ActivatePipeline",
			Handler:    _PipelinePublicService_ActivatePipeline_Handler,
		},
		{
			MethodName: "DeactivatePipeline",
			Handler:    _PipelinePublicService_DeactivatePipeline_Handler,
		},
		{
			MethodName: "RenamePipeline",
			Handler:    _PipelinePublicService_RenamePipeline_Handler,
		},
		{
			MethodName: "TriggerSyncPipeline",
			Handler:    _PipelinePublicService_TriggerSyncPipeline_Handler,
		},
		{
			MethodName: "TriggerAsyncPipeline",
			Handler:    _PipelinePublicService_TriggerAsyncPipeline_Handler,
		},
		{
			MethodName: "WatchPipeline",
			Handler:    _PipelinePublicService_WatchPipeline_Handler,
		},
		{
			MethodName: "GetTriggerAsyncOperation",
			Handler:    _PipelinePublicService_GetTriggerAsyncOperation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TriggerSyncPipelineBinaryFileUpload",
			Handler:       _PipelinePublicService_TriggerSyncPipelineBinaryFileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TriggerAsyncPipelineBinaryFileUpload",
			Handler:       _PipelinePublicService_TriggerAsyncPipelineBinaryFileUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "vdp/pipeline/v1alpha/pipeline_public_service.proto",
}
