// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: vdp/pipeline/v1alpha/pipeline_public_service.proto

package pipelinev1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PipelinePublicService_Liveness_FullMethodName                        = "/vdp.pipeline.v1alpha.PipelinePublicService/Liveness"
	PipelinePublicService_Readiness_FullMethodName                       = "/vdp.pipeline.v1alpha.PipelinePublicService/Readiness"
	PipelinePublicService_ListOperatorDefinitions_FullMethodName         = "/vdp.pipeline.v1alpha.PipelinePublicService/ListOperatorDefinitions"
	PipelinePublicService_GetOperatorDefinition_FullMethodName           = "/vdp.pipeline.v1alpha.PipelinePublicService/GetOperatorDefinition"
	PipelinePublicService_ListPipelines_FullMethodName                   = "/vdp.pipeline.v1alpha.PipelinePublicService/ListPipelines"
	PipelinePublicService_LookUpPipeline_FullMethodName                  = "/vdp.pipeline.v1alpha.PipelinePublicService/LookUpPipeline"
	PipelinePublicService_CreateUserPipeline_FullMethodName              = "/vdp.pipeline.v1alpha.PipelinePublicService/CreateUserPipeline"
	PipelinePublicService_ListUserPipelines_FullMethodName               = "/vdp.pipeline.v1alpha.PipelinePublicService/ListUserPipelines"
	PipelinePublicService_GetUserPipeline_FullMethodName                 = "/vdp.pipeline.v1alpha.PipelinePublicService/GetUserPipeline"
	PipelinePublicService_UpdateUserPipeline_FullMethodName              = "/vdp.pipeline.v1alpha.PipelinePublicService/UpdateUserPipeline"
	PipelinePublicService_DeleteUserPipeline_FullMethodName              = "/vdp.pipeline.v1alpha.PipelinePublicService/DeleteUserPipeline"
	PipelinePublicService_ValidateUserPipeline_FullMethodName            = "/vdp.pipeline.v1alpha.PipelinePublicService/ValidateUserPipeline"
	PipelinePublicService_RenameUserPipeline_FullMethodName              = "/vdp.pipeline.v1alpha.PipelinePublicService/RenameUserPipeline"
	PipelinePublicService_TriggerUserPipeline_FullMethodName             = "/vdp.pipeline.v1alpha.PipelinePublicService/TriggerUserPipeline"
	PipelinePublicService_TriggerAsyncUserPipeline_FullMethodName        = "/vdp.pipeline.v1alpha.PipelinePublicService/TriggerAsyncUserPipeline"
	PipelinePublicService_GetOperation_FullMethodName                    = "/vdp.pipeline.v1alpha.PipelinePublicService/GetOperation"
	PipelinePublicService_CreateUserPipelineRelease_FullMethodName       = "/vdp.pipeline.v1alpha.PipelinePublicService/CreateUserPipelineRelease"
	PipelinePublicService_ListUserPipelineReleases_FullMethodName        = "/vdp.pipeline.v1alpha.PipelinePublicService/ListUserPipelineReleases"
	PipelinePublicService_GetUserPipelineRelease_FullMethodName          = "/vdp.pipeline.v1alpha.PipelinePublicService/GetUserPipelineRelease"
	PipelinePublicService_UpdateUserPipelineRelease_FullMethodName       = "/vdp.pipeline.v1alpha.PipelinePublicService/UpdateUserPipelineRelease"
	PipelinePublicService_DeleteUserPipelineRelease_FullMethodName       = "/vdp.pipeline.v1alpha.PipelinePublicService/DeleteUserPipelineRelease"
	PipelinePublicService_RestoreUserPipelineRelease_FullMethodName      = "/vdp.pipeline.v1alpha.PipelinePublicService/RestoreUserPipelineRelease"
	PipelinePublicService_SetDefaultUserPipelineRelease_FullMethodName   = "/vdp.pipeline.v1alpha.PipelinePublicService/SetDefaultUserPipelineRelease"
	PipelinePublicService_WatchUserPipelineRelease_FullMethodName        = "/vdp.pipeline.v1alpha.PipelinePublicService/WatchUserPipelineRelease"
	PipelinePublicService_RenameUserPipelineRelease_FullMethodName       = "/vdp.pipeline.v1alpha.PipelinePublicService/RenameUserPipelineRelease"
	PipelinePublicService_TriggerUserPipelineRelease_FullMethodName      = "/vdp.pipeline.v1alpha.PipelinePublicService/TriggerUserPipelineRelease"
	PipelinePublicService_TriggerAsyncUserPipelineRelease_FullMethodName = "/vdp.pipeline.v1alpha.PipelinePublicService/TriggerAsyncUserPipelineRelease"
	PipelinePublicService_ListConnectorDefinitions_FullMethodName        = "/vdp.pipeline.v1alpha.PipelinePublicService/ListConnectorDefinitions"
	PipelinePublicService_GetConnectorDefinition_FullMethodName          = "/vdp.pipeline.v1alpha.PipelinePublicService/GetConnectorDefinition"
	PipelinePublicService_ListConnectors_FullMethodName                  = "/vdp.pipeline.v1alpha.PipelinePublicService/ListConnectors"
	PipelinePublicService_LookUpConnector_FullMethodName                 = "/vdp.pipeline.v1alpha.PipelinePublicService/LookUpConnector"
	PipelinePublicService_CreateUserConnector_FullMethodName             = "/vdp.pipeline.v1alpha.PipelinePublicService/CreateUserConnector"
	PipelinePublicService_ListUserConnectors_FullMethodName              = "/vdp.pipeline.v1alpha.PipelinePublicService/ListUserConnectors"
	PipelinePublicService_GetUserConnector_FullMethodName                = "/vdp.pipeline.v1alpha.PipelinePublicService/GetUserConnector"
	PipelinePublicService_UpdateUserConnector_FullMethodName             = "/vdp.pipeline.v1alpha.PipelinePublicService/UpdateUserConnector"
	PipelinePublicService_DeleteUserConnector_FullMethodName             = "/vdp.pipeline.v1alpha.PipelinePublicService/DeleteUserConnector"
	PipelinePublicService_ConnectUserConnector_FullMethodName            = "/vdp.pipeline.v1alpha.PipelinePublicService/ConnectUserConnector"
	PipelinePublicService_DisconnectUserConnector_FullMethodName         = "/vdp.pipeline.v1alpha.PipelinePublicService/DisconnectUserConnector"
	PipelinePublicService_RenameUserConnector_FullMethodName             = "/vdp.pipeline.v1alpha.PipelinePublicService/RenameUserConnector"
	PipelinePublicService_ExecuteUserConnector_FullMethodName            = "/vdp.pipeline.v1alpha.PipelinePublicService/ExecuteUserConnector"
	PipelinePublicService_WatchUserConnector_FullMethodName              = "/vdp.pipeline.v1alpha.PipelinePublicService/WatchUserConnector"
	PipelinePublicService_TestUserConnector_FullMethodName               = "/vdp.pipeline.v1alpha.PipelinePublicService/TestUserConnector"
)

// PipelinePublicServiceClient is the client API for PipelinePublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipelinePublicServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// ListOperatorDefinitions method receives a
	// ListOperatorDefinitionsRequest message and returns a
	// ListOperatorDefinitionsResponse message.
	ListOperatorDefinitions(ctx context.Context, in *ListOperatorDefinitionsRequest, opts ...grpc.CallOption) (*ListOperatorDefinitionsResponse, error)
	// GetOperatorDefinition method receives a
	// GetOperatorDefinitionRequest message and returns a
	// GetGetOperatorDefinitionResponse message.
	GetOperatorDefinition(ctx context.Context, in *GetOperatorDefinitionRequest, opts ...grpc.CallOption) (*GetOperatorDefinitionResponse, error)
	// ListPipelines method receives a ListPipelinesRequest message and returns a
	// ListPipelinesResponse message.
	ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error)
	// LookUpPipeline method receives a LookUpPipelineRequest message and returns
	// a LookUpPipelineResponse
	LookUpPipeline(ctx context.Context, in *LookUpPipelineRequest, opts ...grpc.CallOption) (*LookUpPipelineResponse, error)
	// CreateUserPipeline method receives a CreateUserPipelineRequest message and returns
	// a CreateUserPipelineResponse message.
	CreateUserPipeline(ctx context.Context, in *CreateUserPipelineRequest, opts ...grpc.CallOption) (*CreateUserPipelineResponse, error)
	// ListUserPipelines method receives a ListUserPipelinesRequest message and returns a
	// ListUserPipelinesResponse message.
	ListUserPipelines(ctx context.Context, in *ListUserPipelinesRequest, opts ...grpc.CallOption) (*ListUserPipelinesResponse, error)
	// GetUserPipeline method receives a GetUserPipelineRequest message and returns a
	// GetUserPipelineResponse message.
	GetUserPipeline(ctx context.Context, in *GetUserPipelineRequest, opts ...grpc.CallOption) (*GetUserPipelineResponse, error)
	// UpdateUserPipeline method receives a UpdateUserPipelineRequest message and returns
	// a UpdateUserPipelineResponse message.
	UpdateUserPipeline(ctx context.Context, in *UpdateUserPipelineRequest, opts ...grpc.CallOption) (*UpdateUserPipelineResponse, error)
	// DeleteUserPipeline method receives a DeleteUserPipelineRequest message and returns
	// a DeleteUserPipelineResponse message.
	DeleteUserPipeline(ctx context.Context, in *DeleteUserPipelineRequest, opts ...grpc.CallOption) (*DeleteUserPipelineResponse, error)
	// Validate a pipeline.
	ValidateUserPipeline(ctx context.Context, in *ValidateUserPipelineRequest, opts ...grpc.CallOption) (*ValidateUserPipelineResponse, error)
	// RenameUserPipeline method receives a RenameUserPipelineRequest message and returns
	// a RenameUserPipelineResponse message.
	RenameUserPipeline(ctx context.Context, in *RenameUserPipelineRequest, opts ...grpc.CallOption) (*RenameUserPipelineResponse, error)
	// TriggerUserPipeline method receives a TriggerUserPipelineRequest message
	// and returns a TriggerUserPipelineResponse.
	TriggerUserPipeline(ctx context.Context, in *TriggerUserPipelineRequest, opts ...grpc.CallOption) (*TriggerUserPipelineResponse, error)
	// TriggerAsyncUserPipeline method receives a TriggerAsyncUserPipelineRequest message and
	// returns a TriggerAsyncUserPipelineResponse.
	TriggerAsyncUserPipeline(ctx context.Context, in *TriggerAsyncUserPipelineRequest, opts ...grpc.CallOption) (*TriggerAsyncUserPipelineResponse, error)
	// GetOperation method receives a
	// GetOperationRequest message and returns a
	// GetOperationResponse message.
	GetOperation(ctx context.Context, in *GetOperationRequest, opts ...grpc.CallOption) (*GetOperationResponse, error)
	// CreateUserPipelineRelease method receives a CreateUserPipelineReleaseRequest message and returns
	// a CreateUserPipelineReleaseResponse message.
	CreateUserPipelineRelease(ctx context.Context, in *CreateUserPipelineReleaseRequest, opts ...grpc.CallOption) (*CreateUserPipelineReleaseResponse, error)
	// ListUserPipelineReleases method receives a ListUserPipelineReleasesRequest message and returns a
	// ListUserPipelineReleasesResponse message.
	ListUserPipelineReleases(ctx context.Context, in *ListUserPipelineReleasesRequest, opts ...grpc.CallOption) (*ListUserPipelineReleasesResponse, error)
	// GetUserPipelineRelease method receives a GetUserPipelineReleaseRequest message and returns a
	// GetUserPipelineReleaseResponse message.
	GetUserPipelineRelease(ctx context.Context, in *GetUserPipelineReleaseRequest, opts ...grpc.CallOption) (*GetUserPipelineReleaseResponse, error)
	// UpdateUserPipelineRelease method receives a UpdateUserPipelineReleaseRequest message and returns
	// a UpdateUserPipelineReleaseResponse message.
	UpdateUserPipelineRelease(ctx context.Context, in *UpdateUserPipelineReleaseRequest, opts ...grpc.CallOption) (*UpdateUserPipelineReleaseResponse, error)
	// DeleteUserPipelineRelease method receives a DeleteUserPipelineReleaseRequest message and returns
	// a DeleteUserPipelineReleaseResponse message.
	DeleteUserPipelineRelease(ctx context.Context, in *DeleteUserPipelineReleaseRequest, opts ...grpc.CallOption) (*DeleteUserPipelineReleaseResponse, error)
	// RestoreUserPipelineRelease method receives a RestoreUserPipelineReleaseRequest message
	// and returns a RestoreUserPipelineReleaseResponse
	RestoreUserPipelineRelease(ctx context.Context, in *RestoreUserPipelineReleaseRequest, opts ...grpc.CallOption) (*RestoreUserPipelineReleaseResponse, error)
	// SetDefaultUserPipelineRelease method receives a SetDefaultUserPipelineReleaseRequest message
	// and returns a SetDefaultUserPipelineReleaseResponse
	SetDefaultUserPipelineRelease(ctx context.Context, in *SetDefaultUserPipelineReleaseRequest, opts ...grpc.CallOption) (*SetDefaultUserPipelineReleaseResponse, error)
	// WatchUserPipelineRelease method receives a WatchUserPipelineReleaseRequest message
	// and returns a WatchUserPipelineReleaseResponse
	WatchUserPipelineRelease(ctx context.Context, in *WatchUserPipelineReleaseRequest, opts ...grpc.CallOption) (*WatchUserPipelineReleaseResponse, error)
	// RenameUserPipelineRelease method receives a RenameUserPipelineReleaseRequest message and returns
	// a RenameUserPipelineReleaseResponse message.
	RenameUserPipelineRelease(ctx context.Context, in *RenameUserPipelineReleaseRequest, opts ...grpc.CallOption) (*RenameUserPipelineReleaseResponse, error)
	// TriggerUserPipelineRelease method receives a TriggeUserPipelineReleaseRequest message
	// and returns a TriggerPipelineReleasePipelineResponse.
	TriggerUserPipelineRelease(ctx context.Context, in *TriggerUserPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerUserPipelineReleaseResponse, error)
	// TriggerAsyncUserPipelineRelease method receives a TriggerAsyncUserPipelineReleaseRequest message and
	// returns a TriggerAsyncUserPipelineReleaseResponse.
	TriggerAsyncUserPipelineRelease(ctx context.Context, in *TriggerAsyncUserPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerAsyncUserPipelineReleaseResponse, error)
	// ListConnectorDefinitions method receives a
	// ListConnectorDefinitionsRequest message and returns a
	// ListConnectorDefinitionsResponse message.
	ListConnectorDefinitions(ctx context.Context, in *ListConnectorDefinitionsRequest, opts ...grpc.CallOption) (*ListConnectorDefinitionsResponse, error)
	// GetConnectorDefinition method receives a
	// GetConnectorDefinitionRequest message and returns a
	// GetGetConnectorDefinitionResponse message.
	GetConnectorDefinition(ctx context.Context, in *GetConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetConnectorDefinitionResponse, error)
	// ListConnectors method receives a
	// ListConnectorsRequest message and returns a
	// ListConnectorsResponse message.
	ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error)
	// LookUpConnector method receives a
	// LookUpConnectorRequest message and returns a
	// LookUpConnectorResponse
	LookUpConnector(ctx context.Context, in *LookUpConnectorRequest, opts ...grpc.CallOption) (*LookUpConnectorResponse, error)
	// CreateUserConnector method receives a
	// CreateUserConnectorRequest message and returns a
	// CreateUserConnectorResponse message.
	CreateUserConnector(ctx context.Context, in *CreateUserConnectorRequest, opts ...grpc.CallOption) (*CreateUserConnectorResponse, error)
	// ListUserConnectors method receives a
	// ListUserConnectorsRequest message and returns a
	// ListUserConnectorsResponse message.
	ListUserConnectors(ctx context.Context, in *ListUserConnectorsRequest, opts ...grpc.CallOption) (*ListUserConnectorsResponse, error)
	// GetUserConnector method receives a GetUserConnectorRequest
	// message and returns a GetUserConnectorResponse message.
	GetUserConnector(ctx context.Context, in *GetUserConnectorRequest, opts ...grpc.CallOption) (*GetUserConnectorResponse, error)
	// UpdateUserConnector method receives a
	// UpdateUserConnectorRequest message and returns a
	// UpdateUserConnectorResponse message.
	UpdateUserConnector(ctx context.Context, in *UpdateUserConnectorRequest, opts ...grpc.CallOption) (*UpdateUserConnectorResponse, error)
	// DeleteUserConnector method receives a
	// DeleteUserConnectorRequest message and returns a
	// DeleteUserConnectorResponse message.
	DeleteUserConnector(ctx context.Context, in *DeleteUserConnectorRequest, opts ...grpc.CallOption) (*DeleteUserConnectorResponse, error)
	// Connect a connector.
	// The "state" of the connector after connecting is "CONNECTED".
	// ConnectUserConnector can be called on Connector in the
	// state `DISCONNECTED`; Connector in a different state (including
	// `CONNECTED`) returns an error.
	ConnectUserConnector(ctx context.Context, in *ConnectUserConnectorRequest, opts ...grpc.CallOption) (*ConnectUserConnectorResponse, error)
	// Disconnect a connector.
	// The "state" of the connector after disconnecting is "DISCONNECTED".
	// DisconnectUserConnector can be called on Connector in the
	// state `CONNECTED`; Connector in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectUserConnector(ctx context.Context, in *DisconnectUserConnectorRequest, opts ...grpc.CallOption) (*DisconnectUserConnectorResponse, error)
	// RenameUserConnector method receives a
	// RenameUserConnectorRequest message and returns a
	// RenameUserConnectorResponse message.
	RenameUserConnector(ctx context.Context, in *RenameUserConnectorRequest, opts ...grpc.CallOption) (*RenameUserConnectorResponse, error)
	// ExecuteUserConnector method receives a
	// ExecuteUserConnectorRequest message and returns a
	// ExecuteUserConnectorResponse message.
	ExecuteUserConnector(ctx context.Context, in *ExecuteUserConnectorRequest, opts ...grpc.CallOption) (*ExecuteUserConnectorResponse, error)
	// WatchUserConnector method receives a
	// WatchUserConnectorRequest message and returns a
	// WatchUserConnectorResponse
	WatchUserConnector(ctx context.Context, in *WatchUserConnectorRequest, opts ...grpc.CallOption) (*WatchUserConnectorResponse, error)
	// TestUserConnector method receives a TestUserConnectorRequest
	// message and returns a TestUserConnectorResponse
	TestUserConnector(ctx context.Context, in *TestUserConnectorRequest, opts ...grpc.CallOption) (*TestUserConnectorResponse, error)
}

type pipelinePublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelinePublicServiceClient(cc grpc.ClientConnInterface) PipelinePublicServiceClient {
	return &pipelinePublicServiceClient{cc}
}

func (c *pipelinePublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_Liveness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_Readiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListOperatorDefinitions(ctx context.Context, in *ListOperatorDefinitionsRequest, opts ...grpc.CallOption) (*ListOperatorDefinitionsResponse, error) {
	out := new(ListOperatorDefinitionsResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListOperatorDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetOperatorDefinition(ctx context.Context, in *GetOperatorDefinitionRequest, opts ...grpc.CallOption) (*GetOperatorDefinitionResponse, error) {
	out := new(GetOperatorDefinitionResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetOperatorDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error) {
	out := new(ListPipelinesResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListPipelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) LookUpPipeline(ctx context.Context, in *LookUpPipelineRequest, opts ...grpc.CallOption) (*LookUpPipelineResponse, error) {
	out := new(LookUpPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_LookUpPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) CreateUserPipeline(ctx context.Context, in *CreateUserPipelineRequest, opts ...grpc.CallOption) (*CreateUserPipelineResponse, error) {
	out := new(CreateUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreateUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListUserPipelines(ctx context.Context, in *ListUserPipelinesRequest, opts ...grpc.CallOption) (*ListUserPipelinesResponse, error) {
	out := new(ListUserPipelinesResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListUserPipelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetUserPipeline(ctx context.Context, in *GetUserPipelineRequest, opts ...grpc.CallOption) (*GetUserPipelineResponse, error) {
	out := new(GetUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) UpdateUserPipeline(ctx context.Context, in *UpdateUserPipelineRequest, opts ...grpc.CallOption) (*UpdateUserPipelineResponse, error) {
	out := new(UpdateUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdateUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) DeleteUserPipeline(ctx context.Context, in *DeleteUserPipelineRequest, opts ...grpc.CallOption) (*DeleteUserPipelineResponse, error) {
	out := new(DeleteUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeleteUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ValidateUserPipeline(ctx context.Context, in *ValidateUserPipelineRequest, opts ...grpc.CallOption) (*ValidateUserPipelineResponse, error) {
	out := new(ValidateUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ValidateUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) RenameUserPipeline(ctx context.Context, in *RenameUserPipelineRequest, opts ...grpc.CallOption) (*RenameUserPipelineResponse, error) {
	out := new(RenameUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RenameUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerUserPipeline(ctx context.Context, in *TriggerUserPipelineRequest, opts ...grpc.CallOption) (*TriggerUserPipelineResponse, error) {
	out := new(TriggerUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerAsyncUserPipeline(ctx context.Context, in *TriggerAsyncUserPipelineRequest, opts ...grpc.CallOption) (*TriggerAsyncUserPipelineResponse, error) {
	out := new(TriggerAsyncUserPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerAsyncUserPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetOperation(ctx context.Context, in *GetOperationRequest, opts ...grpc.CallOption) (*GetOperationResponse, error) {
	out := new(GetOperationResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) CreateUserPipelineRelease(ctx context.Context, in *CreateUserPipelineReleaseRequest, opts ...grpc.CallOption) (*CreateUserPipelineReleaseResponse, error) {
	out := new(CreateUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreateUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListUserPipelineReleases(ctx context.Context, in *ListUserPipelineReleasesRequest, opts ...grpc.CallOption) (*ListUserPipelineReleasesResponse, error) {
	out := new(ListUserPipelineReleasesResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListUserPipelineReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetUserPipelineRelease(ctx context.Context, in *GetUserPipelineReleaseRequest, opts ...grpc.CallOption) (*GetUserPipelineReleaseResponse, error) {
	out := new(GetUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) UpdateUserPipelineRelease(ctx context.Context, in *UpdateUserPipelineReleaseRequest, opts ...grpc.CallOption) (*UpdateUserPipelineReleaseResponse, error) {
	out := new(UpdateUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdateUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) DeleteUserPipelineRelease(ctx context.Context, in *DeleteUserPipelineReleaseRequest, opts ...grpc.CallOption) (*DeleteUserPipelineReleaseResponse, error) {
	out := new(DeleteUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeleteUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) RestoreUserPipelineRelease(ctx context.Context, in *RestoreUserPipelineReleaseRequest, opts ...grpc.CallOption) (*RestoreUserPipelineReleaseResponse, error) {
	out := new(RestoreUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RestoreUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) SetDefaultUserPipelineRelease(ctx context.Context, in *SetDefaultUserPipelineReleaseRequest, opts ...grpc.CallOption) (*SetDefaultUserPipelineReleaseResponse, error) {
	out := new(SetDefaultUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_SetDefaultUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) WatchUserPipelineRelease(ctx context.Context, in *WatchUserPipelineReleaseRequest, opts ...grpc.CallOption) (*WatchUserPipelineReleaseResponse, error) {
	out := new(WatchUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_WatchUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) RenameUserPipelineRelease(ctx context.Context, in *RenameUserPipelineReleaseRequest, opts ...grpc.CallOption) (*RenameUserPipelineReleaseResponse, error) {
	out := new(RenameUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RenameUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerUserPipelineRelease(ctx context.Context, in *TriggerUserPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerUserPipelineReleaseResponse, error) {
	out := new(TriggerUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerAsyncUserPipelineRelease(ctx context.Context, in *TriggerAsyncUserPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerAsyncUserPipelineReleaseResponse, error) {
	out := new(TriggerAsyncUserPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerAsyncUserPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListConnectorDefinitions(ctx context.Context, in *ListConnectorDefinitionsRequest, opts ...grpc.CallOption) (*ListConnectorDefinitionsResponse, error) {
	out := new(ListConnectorDefinitionsResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListConnectorDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetConnectorDefinition(ctx context.Context, in *GetConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetConnectorDefinitionResponse, error) {
	out := new(GetConnectorDefinitionResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetConnectorDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error) {
	out := new(ListConnectorsResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListConnectors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) LookUpConnector(ctx context.Context, in *LookUpConnectorRequest, opts ...grpc.CallOption) (*LookUpConnectorResponse, error) {
	out := new(LookUpConnectorResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_LookUpConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) CreateUserConnector(ctx context.Context, in *CreateUserConnectorRequest, opts ...grpc.CallOption) (*CreateUserConnectorResponse, error) {
	out := new(CreateUserConnectorResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreateUserConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListUserConnectors(ctx context.Context, in *ListUserConnectorsRequest, opts ...grpc.CallOption) (*ListUserConnectorsResponse, error) {
	out := new(ListUserConnectorsResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListUserConnectors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetUserConnector(ctx context.Context, in *GetUserConnectorRequest, opts ...grpc.CallOption) (*GetUserConnectorResponse, error) {
	out := new(GetUserConnectorResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetUserConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) UpdateUserConnector(ctx context.Context, in *UpdateUserConnectorRequest, opts ...grpc.CallOption) (*UpdateUserConnectorResponse, error) {
	out := new(UpdateUserConnectorResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdateUserConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) DeleteUserConnector(ctx context.Context, in *DeleteUserConnectorRequest, opts ...grpc.CallOption) (*DeleteUserConnectorResponse, error) {
	out := new(DeleteUserConnectorResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeleteUserConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ConnectUserConnector(ctx context.Context, in *ConnectUserConnectorRequest, opts ...grpc.CallOption) (*ConnectUserConnectorResponse, error) {
	out := new(ConnectUserConnectorResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ConnectUserConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) DisconnectUserConnector(ctx context.Context, in *DisconnectUserConnectorRequest, opts ...grpc.CallOption) (*DisconnectUserConnectorResponse, error) {
	out := new(DisconnectUserConnectorResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DisconnectUserConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) RenameUserConnector(ctx context.Context, in *RenameUserConnectorRequest, opts ...grpc.CallOption) (*RenameUserConnectorResponse, error) {
	out := new(RenameUserConnectorResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RenameUserConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ExecuteUserConnector(ctx context.Context, in *ExecuteUserConnectorRequest, opts ...grpc.CallOption) (*ExecuteUserConnectorResponse, error) {
	out := new(ExecuteUserConnectorResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ExecuteUserConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) WatchUserConnector(ctx context.Context, in *WatchUserConnectorRequest, opts ...grpc.CallOption) (*WatchUserConnectorResponse, error) {
	out := new(WatchUserConnectorResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_WatchUserConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TestUserConnector(ctx context.Context, in *TestUserConnectorRequest, opts ...grpc.CallOption) (*TestUserConnectorResponse, error) {
	out := new(TestUserConnectorResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TestUserConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelinePublicServiceServer is the server API for PipelinePublicService service.
// All implementations should embed UnimplementedPipelinePublicServiceServer
// for forward compatibility
type PipelinePublicServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// ListOperatorDefinitions method receives a
	// ListOperatorDefinitionsRequest message and returns a
	// ListOperatorDefinitionsResponse message.
	ListOperatorDefinitions(context.Context, *ListOperatorDefinitionsRequest) (*ListOperatorDefinitionsResponse, error)
	// GetOperatorDefinition method receives a
	// GetOperatorDefinitionRequest message and returns a
	// GetGetOperatorDefinitionResponse message.
	GetOperatorDefinition(context.Context, *GetOperatorDefinitionRequest) (*GetOperatorDefinitionResponse, error)
	// ListPipelines method receives a ListPipelinesRequest message and returns a
	// ListPipelinesResponse message.
	ListPipelines(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error)
	// LookUpPipeline method receives a LookUpPipelineRequest message and returns
	// a LookUpPipelineResponse
	LookUpPipeline(context.Context, *LookUpPipelineRequest) (*LookUpPipelineResponse, error)
	// CreateUserPipeline method receives a CreateUserPipelineRequest message and returns
	// a CreateUserPipelineResponse message.
	CreateUserPipeline(context.Context, *CreateUserPipelineRequest) (*CreateUserPipelineResponse, error)
	// ListUserPipelines method receives a ListUserPipelinesRequest message and returns a
	// ListUserPipelinesResponse message.
	ListUserPipelines(context.Context, *ListUserPipelinesRequest) (*ListUserPipelinesResponse, error)
	// GetUserPipeline method receives a GetUserPipelineRequest message and returns a
	// GetUserPipelineResponse message.
	GetUserPipeline(context.Context, *GetUserPipelineRequest) (*GetUserPipelineResponse, error)
	// UpdateUserPipeline method receives a UpdateUserPipelineRequest message and returns
	// a UpdateUserPipelineResponse message.
	UpdateUserPipeline(context.Context, *UpdateUserPipelineRequest) (*UpdateUserPipelineResponse, error)
	// DeleteUserPipeline method receives a DeleteUserPipelineRequest message and returns
	// a DeleteUserPipelineResponse message.
	DeleteUserPipeline(context.Context, *DeleteUserPipelineRequest) (*DeleteUserPipelineResponse, error)
	// Validate a pipeline.
	ValidateUserPipeline(context.Context, *ValidateUserPipelineRequest) (*ValidateUserPipelineResponse, error)
	// RenameUserPipeline method receives a RenameUserPipelineRequest message and returns
	// a RenameUserPipelineResponse message.
	RenameUserPipeline(context.Context, *RenameUserPipelineRequest) (*RenameUserPipelineResponse, error)
	// TriggerUserPipeline method receives a TriggerUserPipelineRequest message
	// and returns a TriggerUserPipelineResponse.
	TriggerUserPipeline(context.Context, *TriggerUserPipelineRequest) (*TriggerUserPipelineResponse, error)
	// TriggerAsyncUserPipeline method receives a TriggerAsyncUserPipelineRequest message and
	// returns a TriggerAsyncUserPipelineResponse.
	TriggerAsyncUserPipeline(context.Context, *TriggerAsyncUserPipelineRequest) (*TriggerAsyncUserPipelineResponse, error)
	// GetOperation method receives a
	// GetOperationRequest message and returns a
	// GetOperationResponse message.
	GetOperation(context.Context, *GetOperationRequest) (*GetOperationResponse, error)
	// CreateUserPipelineRelease method receives a CreateUserPipelineReleaseRequest message and returns
	// a CreateUserPipelineReleaseResponse message.
	CreateUserPipelineRelease(context.Context, *CreateUserPipelineReleaseRequest) (*CreateUserPipelineReleaseResponse, error)
	// ListUserPipelineReleases method receives a ListUserPipelineReleasesRequest message and returns a
	// ListUserPipelineReleasesResponse message.
	ListUserPipelineReleases(context.Context, *ListUserPipelineReleasesRequest) (*ListUserPipelineReleasesResponse, error)
	// GetUserPipelineRelease method receives a GetUserPipelineReleaseRequest message and returns a
	// GetUserPipelineReleaseResponse message.
	GetUserPipelineRelease(context.Context, *GetUserPipelineReleaseRequest) (*GetUserPipelineReleaseResponse, error)
	// UpdateUserPipelineRelease method receives a UpdateUserPipelineReleaseRequest message and returns
	// a UpdateUserPipelineReleaseResponse message.
	UpdateUserPipelineRelease(context.Context, *UpdateUserPipelineReleaseRequest) (*UpdateUserPipelineReleaseResponse, error)
	// DeleteUserPipelineRelease method receives a DeleteUserPipelineReleaseRequest message and returns
	// a DeleteUserPipelineReleaseResponse message.
	DeleteUserPipelineRelease(context.Context, *DeleteUserPipelineReleaseRequest) (*DeleteUserPipelineReleaseResponse, error)
	// RestoreUserPipelineRelease method receives a RestoreUserPipelineReleaseRequest message
	// and returns a RestoreUserPipelineReleaseResponse
	RestoreUserPipelineRelease(context.Context, *RestoreUserPipelineReleaseRequest) (*RestoreUserPipelineReleaseResponse, error)
	// SetDefaultUserPipelineRelease method receives a SetDefaultUserPipelineReleaseRequest message
	// and returns a SetDefaultUserPipelineReleaseResponse
	SetDefaultUserPipelineRelease(context.Context, *SetDefaultUserPipelineReleaseRequest) (*SetDefaultUserPipelineReleaseResponse, error)
	// WatchUserPipelineRelease method receives a WatchUserPipelineReleaseRequest message
	// and returns a WatchUserPipelineReleaseResponse
	WatchUserPipelineRelease(context.Context, *WatchUserPipelineReleaseRequest) (*WatchUserPipelineReleaseResponse, error)
	// RenameUserPipelineRelease method receives a RenameUserPipelineReleaseRequest message and returns
	// a RenameUserPipelineReleaseResponse message.
	RenameUserPipelineRelease(context.Context, *RenameUserPipelineReleaseRequest) (*RenameUserPipelineReleaseResponse, error)
	// TriggerUserPipelineRelease method receives a TriggeUserPipelineReleaseRequest message
	// and returns a TriggerPipelineReleasePipelineResponse.
	TriggerUserPipelineRelease(context.Context, *TriggerUserPipelineReleaseRequest) (*TriggerUserPipelineReleaseResponse, error)
	// TriggerAsyncUserPipelineRelease method receives a TriggerAsyncUserPipelineReleaseRequest message and
	// returns a TriggerAsyncUserPipelineReleaseResponse.
	TriggerAsyncUserPipelineRelease(context.Context, *TriggerAsyncUserPipelineReleaseRequest) (*TriggerAsyncUserPipelineReleaseResponse, error)
	// ListConnectorDefinitions method receives a
	// ListConnectorDefinitionsRequest message and returns a
	// ListConnectorDefinitionsResponse message.
	ListConnectorDefinitions(context.Context, *ListConnectorDefinitionsRequest) (*ListConnectorDefinitionsResponse, error)
	// GetConnectorDefinition method receives a
	// GetConnectorDefinitionRequest message and returns a
	// GetGetConnectorDefinitionResponse message.
	GetConnectorDefinition(context.Context, *GetConnectorDefinitionRequest) (*GetConnectorDefinitionResponse, error)
	// ListConnectors method receives a
	// ListConnectorsRequest message and returns a
	// ListConnectorsResponse message.
	ListConnectors(context.Context, *ListConnectorsRequest) (*ListConnectorsResponse, error)
	// LookUpConnector method receives a
	// LookUpConnectorRequest message and returns a
	// LookUpConnectorResponse
	LookUpConnector(context.Context, *LookUpConnectorRequest) (*LookUpConnectorResponse, error)
	// CreateUserConnector method receives a
	// CreateUserConnectorRequest message and returns a
	// CreateUserConnectorResponse message.
	CreateUserConnector(context.Context, *CreateUserConnectorRequest) (*CreateUserConnectorResponse, error)
	// ListUserConnectors method receives a
	// ListUserConnectorsRequest message and returns a
	// ListUserConnectorsResponse message.
	ListUserConnectors(context.Context, *ListUserConnectorsRequest) (*ListUserConnectorsResponse, error)
	// GetUserConnector method receives a GetUserConnectorRequest
	// message and returns a GetUserConnectorResponse message.
	GetUserConnector(context.Context, *GetUserConnectorRequest) (*GetUserConnectorResponse, error)
	// UpdateUserConnector method receives a
	// UpdateUserConnectorRequest message and returns a
	// UpdateUserConnectorResponse message.
	UpdateUserConnector(context.Context, *UpdateUserConnectorRequest) (*UpdateUserConnectorResponse, error)
	// DeleteUserConnector method receives a
	// DeleteUserConnectorRequest message and returns a
	// DeleteUserConnectorResponse message.
	DeleteUserConnector(context.Context, *DeleteUserConnectorRequest) (*DeleteUserConnectorResponse, error)
	// Connect a connector.
	// The "state" of the connector after connecting is "CONNECTED".
	// ConnectUserConnector can be called on Connector in the
	// state `DISCONNECTED`; Connector in a different state (including
	// `CONNECTED`) returns an error.
	ConnectUserConnector(context.Context, *ConnectUserConnectorRequest) (*ConnectUserConnectorResponse, error)
	// Disconnect a connector.
	// The "state" of the connector after disconnecting is "DISCONNECTED".
	// DisconnectUserConnector can be called on Connector in the
	// state `CONNECTED`; Connector in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectUserConnector(context.Context, *DisconnectUserConnectorRequest) (*DisconnectUserConnectorResponse, error)
	// RenameUserConnector method receives a
	// RenameUserConnectorRequest message and returns a
	// RenameUserConnectorResponse message.
	RenameUserConnector(context.Context, *RenameUserConnectorRequest) (*RenameUserConnectorResponse, error)
	// ExecuteUserConnector method receives a
	// ExecuteUserConnectorRequest message and returns a
	// ExecuteUserConnectorResponse message.
	ExecuteUserConnector(context.Context, *ExecuteUserConnectorRequest) (*ExecuteUserConnectorResponse, error)
	// WatchUserConnector method receives a
	// WatchUserConnectorRequest message and returns a
	// WatchUserConnectorResponse
	WatchUserConnector(context.Context, *WatchUserConnectorRequest) (*WatchUserConnectorResponse, error)
	// TestUserConnector method receives a TestUserConnectorRequest
	// message and returns a TestUserConnectorResponse
	TestUserConnector(context.Context, *TestUserConnectorRequest) (*TestUserConnectorResponse, error)
}

// UnimplementedPipelinePublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPipelinePublicServiceServer struct {
}

func (UnimplementedPipelinePublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedPipelinePublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListOperatorDefinitions(context.Context, *ListOperatorDefinitionsRequest) (*ListOperatorDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorDefinitions not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetOperatorDefinition(context.Context, *GetOperatorDefinitionRequest) (*GetOperatorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorDefinition not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListPipelines(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelines not implemented")
}
func (UnimplementedPipelinePublicServiceServer) LookUpPipeline(context.Context, *LookUpPipelineRequest) (*LookUpPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreateUserPipeline(context.Context, *CreateUserPipelineRequest) (*CreateUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListUserPipelines(context.Context, *ListUserPipelinesRequest) (*ListUserPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPipelines not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetUserPipeline(context.Context, *GetUserPipelineRequest) (*GetUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdateUserPipeline(context.Context, *UpdateUserPipelineRequest) (*UpdateUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeleteUserPipeline(context.Context, *DeleteUserPipelineRequest) (*DeleteUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ValidateUserPipeline(context.Context, *ValidateUserPipelineRequest) (*ValidateUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RenameUserPipeline(context.Context, *RenameUserPipelineRequest) (*RenameUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerUserPipeline(context.Context, *TriggerUserPipelineRequest) (*TriggerUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerAsyncUserPipeline(context.Context, *TriggerAsyncUserPipelineRequest) (*TriggerAsyncUserPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncUserPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetOperation(context.Context, *GetOperationRequest) (*GetOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperation not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreateUserPipelineRelease(context.Context, *CreateUserPipelineReleaseRequest) (*CreateUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListUserPipelineReleases(context.Context, *ListUserPipelineReleasesRequest) (*ListUserPipelineReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPipelineReleases not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetUserPipelineRelease(context.Context, *GetUserPipelineReleaseRequest) (*GetUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdateUserPipelineRelease(context.Context, *UpdateUserPipelineReleaseRequest) (*UpdateUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeleteUserPipelineRelease(context.Context, *DeleteUserPipelineReleaseRequest) (*DeleteUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RestoreUserPipelineRelease(context.Context, *RestoreUserPipelineReleaseRequest) (*RestoreUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) SetDefaultUserPipelineRelease(context.Context, *SetDefaultUserPipelineReleaseRequest) (*SetDefaultUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) WatchUserPipelineRelease(context.Context, *WatchUserPipelineReleaseRequest) (*WatchUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RenameUserPipelineRelease(context.Context, *RenameUserPipelineReleaseRequest) (*RenameUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerUserPipelineRelease(context.Context, *TriggerUserPipelineReleaseRequest) (*TriggerUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerAsyncUserPipelineRelease(context.Context, *TriggerAsyncUserPipelineReleaseRequest) (*TriggerAsyncUserPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncUserPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListConnectorDefinitions(context.Context, *ListConnectorDefinitionsRequest) (*ListConnectorDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectorDefinitions not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetConnectorDefinition(context.Context, *GetConnectorDefinitionRequest) (*GetConnectorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectorDefinition not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListConnectors(context.Context, *ListConnectorsRequest) (*ListConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectors not implemented")
}
func (UnimplementedPipelinePublicServiceServer) LookUpConnector(context.Context, *LookUpConnectorRequest) (*LookUpConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpConnector not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreateUserConnector(context.Context, *CreateUserConnectorRequest) (*CreateUserConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserConnector not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListUserConnectors(context.Context, *ListUserConnectorsRequest) (*ListUserConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserConnectors not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetUserConnector(context.Context, *GetUserConnectorRequest) (*GetUserConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserConnector not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdateUserConnector(context.Context, *UpdateUserConnectorRequest) (*UpdateUserConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserConnector not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeleteUserConnector(context.Context, *DeleteUserConnectorRequest) (*DeleteUserConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserConnector not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ConnectUserConnector(context.Context, *ConnectUserConnectorRequest) (*ConnectUserConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectUserConnector not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DisconnectUserConnector(context.Context, *DisconnectUserConnectorRequest) (*DisconnectUserConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectUserConnector not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RenameUserConnector(context.Context, *RenameUserConnectorRequest) (*RenameUserConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameUserConnector not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ExecuteUserConnector(context.Context, *ExecuteUserConnectorRequest) (*ExecuteUserConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUserConnector not implemented")
}
func (UnimplementedPipelinePublicServiceServer) WatchUserConnector(context.Context, *WatchUserConnectorRequest) (*WatchUserConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchUserConnector not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TestUserConnector(context.Context, *TestUserConnectorRequest) (*TestUserConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUserConnector not implemented")
}

// UnsafePipelinePublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipelinePublicServiceServer will
// result in compilation errors.
type UnsafePipelinePublicServiceServer interface {
	mustEmbedUnimplementedPipelinePublicServiceServer()
}

func RegisterPipelinePublicServiceServer(s grpc.ServiceRegistrar, srv PipelinePublicServiceServer) {
	s.RegisterService(&PipelinePublicService_ServiceDesc, srv)
}

func _PipelinePublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListOperatorDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListOperatorDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListOperatorDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListOperatorDefinitions(ctx, req.(*ListOperatorDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetOperatorDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetOperatorDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetOperatorDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetOperatorDefinition(ctx, req.(*GetOperatorDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListPipelines(ctx, req.(*ListPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_LookUpPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).LookUpPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_LookUpPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).LookUpPipeline(ctx, req.(*LookUpPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreateUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreateUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreateUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreateUserPipeline(ctx, req.(*CreateUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListUserPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListUserPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListUserPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListUserPipelines(ctx, req.(*ListUserPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetUserPipeline(ctx, req.(*GetUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdateUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdateUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdateUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdateUserPipeline(ctx, req.(*UpdateUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeleteUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeleteUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeleteUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeleteUserPipeline(ctx, req.(*DeleteUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ValidateUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ValidateUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ValidateUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ValidateUserPipeline(ctx, req.(*ValidateUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RenameUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RenameUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RenameUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RenameUserPipeline(ctx, req.(*RenameUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerUserPipeline(ctx, req.(*TriggerUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerAsyncUserPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncUserPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerAsyncUserPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerAsyncUserPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerAsyncUserPipeline(ctx, req.(*TriggerAsyncUserPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetOperation(ctx, req.(*GetOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreateUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreateUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreateUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreateUserPipelineRelease(ctx, req.(*CreateUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListUserPipelineReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPipelineReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListUserPipelineReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListUserPipelineReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListUserPipelineReleases(ctx, req.(*ListUserPipelineReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetUserPipelineRelease(ctx, req.(*GetUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdateUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdateUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdateUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdateUserPipelineRelease(ctx, req.(*UpdateUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeleteUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeleteUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeleteUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeleteUserPipelineRelease(ctx, req.(*DeleteUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RestoreUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RestoreUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RestoreUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RestoreUserPipelineRelease(ctx, req.(*RestoreUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_SetDefaultUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).SetDefaultUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_SetDefaultUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).SetDefaultUserPipelineRelease(ctx, req.(*SetDefaultUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_WatchUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).WatchUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_WatchUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).WatchUserPipelineRelease(ctx, req.(*WatchUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RenameUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RenameUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RenameUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RenameUserPipelineRelease(ctx, req.(*RenameUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerUserPipelineRelease(ctx, req.(*TriggerUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerAsyncUserPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncUserPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerAsyncUserPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerAsyncUserPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerAsyncUserPipelineRelease(ctx, req.(*TriggerAsyncUserPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListConnectorDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListConnectorDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListConnectorDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListConnectorDefinitions(ctx, req.(*ListConnectorDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetConnectorDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetConnectorDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetConnectorDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetConnectorDefinition(ctx, req.(*GetConnectorDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListConnectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListConnectors(ctx, req.(*ListConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_LookUpConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).LookUpConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_LookUpConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).LookUpConnector(ctx, req.(*LookUpConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreateUserConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreateUserConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreateUserConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreateUserConnector(ctx, req.(*CreateUserConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListUserConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListUserConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListUserConnectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListUserConnectors(ctx, req.(*ListUserConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetUserConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetUserConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetUserConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetUserConnector(ctx, req.(*GetUserConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdateUserConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdateUserConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdateUserConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdateUserConnector(ctx, req.(*UpdateUserConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeleteUserConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeleteUserConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeleteUserConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeleteUserConnector(ctx, req.(*DeleteUserConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ConnectUserConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectUserConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ConnectUserConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ConnectUserConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ConnectUserConnector(ctx, req.(*ConnectUserConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DisconnectUserConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectUserConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DisconnectUserConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DisconnectUserConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DisconnectUserConnector(ctx, req.(*DisconnectUserConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RenameUserConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameUserConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RenameUserConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RenameUserConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RenameUserConnector(ctx, req.(*RenameUserConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ExecuteUserConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteUserConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ExecuteUserConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ExecuteUserConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ExecuteUserConnector(ctx, req.(*ExecuteUserConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_WatchUserConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchUserConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).WatchUserConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_WatchUserConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).WatchUserConnector(ctx, req.(*WatchUserConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TestUserConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestUserConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TestUserConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TestUserConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TestUserConnector(ctx, req.(*TestUserConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PipelinePublicService_ServiceDesc is the grpc.ServiceDesc for PipelinePublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PipelinePublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.pipeline.v1alpha.PipelinePublicService",
	HandlerType: (*PipelinePublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _PipelinePublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _PipelinePublicService_Readiness_Handler,
		},
		{
			MethodName: "ListOperatorDefinitions",
			Handler:    _PipelinePublicService_ListOperatorDefinitions_Handler,
		},
		{
			MethodName: "GetOperatorDefinition",
			Handler:    _PipelinePublicService_GetOperatorDefinition_Handler,
		},
		{
			MethodName: "ListPipelines",
			Handler:    _PipelinePublicService_ListPipelines_Handler,
		},
		{
			MethodName: "LookUpPipeline",
			Handler:    _PipelinePublicService_LookUpPipeline_Handler,
		},
		{
			MethodName: "CreateUserPipeline",
			Handler:    _PipelinePublicService_CreateUserPipeline_Handler,
		},
		{
			MethodName: "ListUserPipelines",
			Handler:    _PipelinePublicService_ListUserPipelines_Handler,
		},
		{
			MethodName: "GetUserPipeline",
			Handler:    _PipelinePublicService_GetUserPipeline_Handler,
		},
		{
			MethodName: "UpdateUserPipeline",
			Handler:    _PipelinePublicService_UpdateUserPipeline_Handler,
		},
		{
			MethodName: "DeleteUserPipeline",
			Handler:    _PipelinePublicService_DeleteUserPipeline_Handler,
		},
		{
			MethodName: "ValidateUserPipeline",
			Handler:    _PipelinePublicService_ValidateUserPipeline_Handler,
		},
		{
			MethodName: "RenameUserPipeline",
			Handler:    _PipelinePublicService_RenameUserPipeline_Handler,
		},
		{
			MethodName: "TriggerUserPipeline",
			Handler:    _PipelinePublicService_TriggerUserPipeline_Handler,
		},
		{
			MethodName: "TriggerAsyncUserPipeline",
			Handler:    _PipelinePublicService_TriggerAsyncUserPipeline_Handler,
		},
		{
			MethodName: "GetOperation",
			Handler:    _PipelinePublicService_GetOperation_Handler,
		},
		{
			MethodName: "CreateUserPipelineRelease",
			Handler:    _PipelinePublicService_CreateUserPipelineRelease_Handler,
		},
		{
			MethodName: "ListUserPipelineReleases",
			Handler:    _PipelinePublicService_ListUserPipelineReleases_Handler,
		},
		{
			MethodName: "GetUserPipelineRelease",
			Handler:    _PipelinePublicService_GetUserPipelineRelease_Handler,
		},
		{
			MethodName: "UpdateUserPipelineRelease",
			Handler:    _PipelinePublicService_UpdateUserPipelineRelease_Handler,
		},
		{
			MethodName: "DeleteUserPipelineRelease",
			Handler:    _PipelinePublicService_DeleteUserPipelineRelease_Handler,
		},
		{
			MethodName: "RestoreUserPipelineRelease",
			Handler:    _PipelinePublicService_RestoreUserPipelineRelease_Handler,
		},
		{
			MethodName: "SetDefaultUserPipelineRelease",
			Handler:    _PipelinePublicService_SetDefaultUserPipelineRelease_Handler,
		},
		{
			MethodName: "WatchUserPipelineRelease",
			Handler:    _PipelinePublicService_WatchUserPipelineRelease_Handler,
		},
		{
			MethodName: "RenameUserPipelineRelease",
			Handler:    _PipelinePublicService_RenameUserPipelineRelease_Handler,
		},
		{
			MethodName: "TriggerUserPipelineRelease",
			Handler:    _PipelinePublicService_TriggerUserPipelineRelease_Handler,
		},
		{
			MethodName: "TriggerAsyncUserPipelineRelease",
			Handler:    _PipelinePublicService_TriggerAsyncUserPipelineRelease_Handler,
		},
		{
			MethodName: "ListConnectorDefinitions",
			Handler:    _PipelinePublicService_ListConnectorDefinitions_Handler,
		},
		{
			MethodName: "GetConnectorDefinition",
			Handler:    _PipelinePublicService_GetConnectorDefinition_Handler,
		},
		{
			MethodName: "ListConnectors",
			Handler:    _PipelinePublicService_ListConnectors_Handler,
		},
		{
			MethodName: "LookUpConnector",
			Handler:    _PipelinePublicService_LookUpConnector_Handler,
		},
		{
			MethodName: "CreateUserConnector",
			Handler:    _PipelinePublicService_CreateUserConnector_Handler,
		},
		{
			MethodName: "ListUserConnectors",
			Handler:    _PipelinePublicService_ListUserConnectors_Handler,
		},
		{
			MethodName: "GetUserConnector",
			Handler:    _PipelinePublicService_GetUserConnector_Handler,
		},
		{
			MethodName: "UpdateUserConnector",
			Handler:    _PipelinePublicService_UpdateUserConnector_Handler,
		},
		{
			MethodName: "DeleteUserConnector",
			Handler:    _PipelinePublicService_DeleteUserConnector_Handler,
		},
		{
			MethodName: "ConnectUserConnector",
			Handler:    _PipelinePublicService_ConnectUserConnector_Handler,
		},
		{
			MethodName: "DisconnectUserConnector",
			Handler:    _PipelinePublicService_DisconnectUserConnector_Handler,
		},
		{
			MethodName: "RenameUserConnector",
			Handler:    _PipelinePublicService_RenameUserConnector_Handler,
		},
		{
			MethodName: "ExecuteUserConnector",
			Handler:    _PipelinePublicService_ExecuteUserConnector_Handler,
		},
		{
			MethodName: "WatchUserConnector",
			Handler:    _PipelinePublicService_WatchUserConnector_Handler,
		},
		{
			MethodName: "TestUserConnector",
			Handler:    _PipelinePublicService_TestUserConnector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vdp/pipeline/v1alpha/pipeline_public_service.proto",
}
