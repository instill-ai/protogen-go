// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: vdp/pipeline/v1alpha/pipeline_public_service.proto

package pipelinev1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PipelinePublicService_Liveness_FullMethodName                    = "/vdp.pipeline.v1alpha.PipelinePublicService/Liveness"
	PipelinePublicService_Readiness_FullMethodName                   = "/vdp.pipeline.v1alpha.PipelinePublicService/Readiness"
	PipelinePublicService_ListOperatorDefinitions_FullMethodName     = "/vdp.pipeline.v1alpha.PipelinePublicService/ListOperatorDefinitions"
	PipelinePublicService_GetOperatorDefinition_FullMethodName       = "/vdp.pipeline.v1alpha.PipelinePublicService/GetOperatorDefinition"
	PipelinePublicService_CreatePipeline_FullMethodName              = "/vdp.pipeline.v1alpha.PipelinePublicService/CreatePipeline"
	PipelinePublicService_ListPipelines_FullMethodName               = "/vdp.pipeline.v1alpha.PipelinePublicService/ListPipelines"
	PipelinePublicService_GetPipeline_FullMethodName                 = "/vdp.pipeline.v1alpha.PipelinePublicService/GetPipeline"
	PipelinePublicService_UpdatePipeline_FullMethodName              = "/vdp.pipeline.v1alpha.PipelinePublicService/UpdatePipeline"
	PipelinePublicService_DeletePipeline_FullMethodName              = "/vdp.pipeline.v1alpha.PipelinePublicService/DeletePipeline"
	PipelinePublicService_LookUpPipeline_FullMethodName              = "/vdp.pipeline.v1alpha.PipelinePublicService/LookUpPipeline"
	PipelinePublicService_ValidatePipeline_FullMethodName            = "/vdp.pipeline.v1alpha.PipelinePublicService/ValidatePipeline"
	PipelinePublicService_RenamePipeline_FullMethodName              = "/vdp.pipeline.v1alpha.PipelinePublicService/RenamePipeline"
	PipelinePublicService_TriggerPipeline_FullMethodName             = "/vdp.pipeline.v1alpha.PipelinePublicService/TriggerPipeline"
	PipelinePublicService_TriggerAsyncPipeline_FullMethodName        = "/vdp.pipeline.v1alpha.PipelinePublicService/TriggerAsyncPipeline"
	PipelinePublicService_GetOperation_FullMethodName                = "/vdp.pipeline.v1alpha.PipelinePublicService/GetOperation"
	PipelinePublicService_CreatePipelineRelease_FullMethodName       = "/vdp.pipeline.v1alpha.PipelinePublicService/CreatePipelineRelease"
	PipelinePublicService_ListPipelineReleases_FullMethodName        = "/vdp.pipeline.v1alpha.PipelinePublicService/ListPipelineReleases"
	PipelinePublicService_GetPipelineRelease_FullMethodName          = "/vdp.pipeline.v1alpha.PipelinePublicService/GetPipelineRelease"
	PipelinePublicService_UpdatePipelineRelease_FullMethodName       = "/vdp.pipeline.v1alpha.PipelinePublicService/UpdatePipelineRelease"
	PipelinePublicService_DeletePipelineRelease_FullMethodName       = "/vdp.pipeline.v1alpha.PipelinePublicService/DeletePipelineRelease"
	PipelinePublicService_RestorePipelineRelease_FullMethodName      = "/vdp.pipeline.v1alpha.PipelinePublicService/RestorePipelineRelease"
	PipelinePublicService_SetDefaultPipelineRelease_FullMethodName   = "/vdp.pipeline.v1alpha.PipelinePublicService/SetDefaultPipelineRelease"
	PipelinePublicService_WatchPipelineRelease_FullMethodName        = "/vdp.pipeline.v1alpha.PipelinePublicService/WatchPipelineRelease"
	PipelinePublicService_RenamePipelineRelease_FullMethodName       = "/vdp.pipeline.v1alpha.PipelinePublicService/RenamePipelineRelease"
	PipelinePublicService_TriggerPipelineRelease_FullMethodName      = "/vdp.pipeline.v1alpha.PipelinePublicService/TriggerPipelineRelease"
	PipelinePublicService_TriggerAsyncPipelineRelease_FullMethodName = "/vdp.pipeline.v1alpha.PipelinePublicService/TriggerAsyncPipelineRelease"
)

// PipelinePublicServiceClient is the client API for PipelinePublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipelinePublicServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// ListOperatorDefinitions method receives a
	// ListOperatorDefinitionsRequest message and returns a
	// ListOperatorDefinitionsResponse message.
	ListOperatorDefinitions(ctx context.Context, in *ListOperatorDefinitionsRequest, opts ...grpc.CallOption) (*ListOperatorDefinitionsResponse, error)
	// GetOperatorDefinition method receives a
	// GetOperatorDefinitionRequest message and returns a
	// GetGetOperatorDefinitionResponse message.
	GetOperatorDefinition(ctx context.Context, in *GetOperatorDefinitionRequest, opts ...grpc.CallOption) (*GetOperatorDefinitionResponse, error)
	// CreatePipeline method receives a CreatePipelineRequest message and returns
	// a CreatePipelineResponse message.
	CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error)
	// ListPipelines method receives a ListPipelinesRequest message and returns a
	// ListPipelinesResponse message.
	ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error)
	// GetPipeline method receives a GetPipelineRequest message and returns a
	// GetPipelineResponse message.
	GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*GetPipelineResponse, error)
	// UpdatePipeline method receives a UpdatePipelineRequest message and returns
	// a UpdatePipelineResponse message.
	UpdatePipeline(ctx context.Context, in *UpdatePipelineRequest, opts ...grpc.CallOption) (*UpdatePipelineResponse, error)
	// DeletePipeline method receives a DeletePipelineRequest message and returns
	// a DeletePipelineResponse message.
	DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*DeletePipelineResponse, error)
	// LookUpPipeline method receives a LookUpPipelineRequest message and returns
	// a LookUpPipelineResponse
	LookUpPipeline(ctx context.Context, in *LookUpPipelineRequest, opts ...grpc.CallOption) (*LookUpPipelineResponse, error)
	// Validate a pipeline.
	ValidatePipeline(ctx context.Context, in *ValidatePipelineRequest, opts ...grpc.CallOption) (*ValidatePipelineResponse, error)
	// RenamePipeline method receives a RenamePipelineRequest message and returns
	// a RenamePipelineResponse message.
	RenamePipeline(ctx context.Context, in *RenamePipelineRequest, opts ...grpc.CallOption) (*RenamePipelineResponse, error)
	// TriggerPipeline method receives a TriggerPipelineRequest message
	// and returns a TriggerPipelineResponse.
	TriggerPipeline(ctx context.Context, in *TriggerPipelineRequest, opts ...grpc.CallOption) (*TriggerPipelineResponse, error)
	// TriggerAsyncPipeline method receives a TriggerPipelineRequest message and
	// returns a TriggerAsyncPipelineResponse.
	TriggerAsyncPipeline(ctx context.Context, in *TriggerAsyncPipelineRequest, opts ...grpc.CallOption) (*TriggerAsyncPipelineResponse, error)
	// GetOperation method receives a
	// GetOperationRequest message and returns a
	// GetOperationResponse message.
	GetOperation(ctx context.Context, in *GetOperationRequest, opts ...grpc.CallOption) (*GetOperationResponse, error)
	// CreatePipelineRelease method receives a CreatePipelineReleaseRequest message and returns
	// a CreatePipelineReleaseResponse message.
	CreatePipelineRelease(ctx context.Context, in *CreatePipelineReleaseRequest, opts ...grpc.CallOption) (*CreatePipelineReleaseResponse, error)
	// ListPipelineReleases method receives a ListPipelineReleasesRequest message and returns a
	// ListPipelineReleasesResponse message.
	ListPipelineReleases(ctx context.Context, in *ListPipelineReleasesRequest, opts ...grpc.CallOption) (*ListPipelineReleasesResponse, error)
	// GetPipelineRelease method receives a GetPipelineReleaseRequest message and returns a
	// GetPipelineReleaseResponse message.
	GetPipelineRelease(ctx context.Context, in *GetPipelineReleaseRequest, opts ...grpc.CallOption) (*GetPipelineReleaseResponse, error)
	// UpdatePipelineRelease method receives a UpdatePipelineReleaseRequest message and returns
	// a UpdatePipelineReleaseResponse message.
	UpdatePipelineRelease(ctx context.Context, in *UpdatePipelineReleaseRequest, opts ...grpc.CallOption) (*UpdatePipelineReleaseResponse, error)
	// DeletePipelineRelease method receives a DeletePipelineReleaseRequest message and returns
	// a DeletePipelineReleaseResponse message.
	DeletePipelineRelease(ctx context.Context, in *DeletePipelineReleaseRequest, opts ...grpc.CallOption) (*DeletePipelineReleaseResponse, error)
	// RestorePipelineRelease method receives a RestorePipelineReleaseRequest message
	// and returns a RestorePipelineReleaseResponse
	RestorePipelineRelease(ctx context.Context, in *RestorePipelineReleaseRequest, opts ...grpc.CallOption) (*RestorePipelineReleaseResponse, error)
	// SetDefaultPipelineRelease method receives a SetDefaultPipelineReleaseRequest message
	// and returns a SetDefaultPipelineReleaseResponse
	SetDefaultPipelineRelease(ctx context.Context, in *SetDefaultPipelineReleaseRequest, opts ...grpc.CallOption) (*SetDefaultPipelineReleaseResponse, error)
	// WatchPipelineRelease method receives a WatchPipelineReleaseRequest message
	// and returns a WatchPipelineReleaseResponse
	WatchPipelineRelease(ctx context.Context, in *WatchPipelineReleaseRequest, opts ...grpc.CallOption) (*WatchPipelineReleaseResponse, error)
	// RenamePipelineRelease method receives a RenamePipelineReleaseRequest message and returns
	// a RenamePipelineReleaseResponse message.
	RenamePipelineRelease(ctx context.Context, in *RenamePipelineReleaseRequest, opts ...grpc.CallOption) (*RenamePipelineReleaseResponse, error)
	// TriggerPipelineRelease method receives a TriggePipelineReleaseRequest message
	// and returns a TriggerPipelineReleasePipelineResponse.
	TriggerPipelineRelease(ctx context.Context, in *TriggerPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerPipelineReleaseResponse, error)
	// TriggerAsyncPipelineRelease method receives a TriggerAsyncPipelineReleaseRequest message and
	// returns a TriggerAsyncPipelineReleaseResponse.
	TriggerAsyncPipelineRelease(ctx context.Context, in *TriggerAsyncPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerAsyncPipelineReleaseResponse, error)
}

type pipelinePublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelinePublicServiceClient(cc grpc.ClientConnInterface) PipelinePublicServiceClient {
	return &pipelinePublicServiceClient{cc}
}

func (c *pipelinePublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_Liveness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_Readiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListOperatorDefinitions(ctx context.Context, in *ListOperatorDefinitionsRequest, opts ...grpc.CallOption) (*ListOperatorDefinitionsResponse, error) {
	out := new(ListOperatorDefinitionsResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListOperatorDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetOperatorDefinition(ctx context.Context, in *GetOperatorDefinitionRequest, opts ...grpc.CallOption) (*GetOperatorDefinitionResponse, error) {
	out := new(GetOperatorDefinitionResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetOperatorDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) CreatePipeline(ctx context.Context, in *CreatePipelineRequest, opts ...grpc.CallOption) (*CreatePipelineResponse, error) {
	out := new(CreatePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreatePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListPipelines(ctx context.Context, in *ListPipelinesRequest, opts ...grpc.CallOption) (*ListPipelinesResponse, error) {
	out := new(ListPipelinesResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListPipelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetPipeline(ctx context.Context, in *GetPipelineRequest, opts ...grpc.CallOption) (*GetPipelineResponse, error) {
	out := new(GetPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) UpdatePipeline(ctx context.Context, in *UpdatePipelineRequest, opts ...grpc.CallOption) (*UpdatePipelineResponse, error) {
	out := new(UpdatePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdatePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) DeletePipeline(ctx context.Context, in *DeletePipelineRequest, opts ...grpc.CallOption) (*DeletePipelineResponse, error) {
	out := new(DeletePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeletePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) LookUpPipeline(ctx context.Context, in *LookUpPipelineRequest, opts ...grpc.CallOption) (*LookUpPipelineResponse, error) {
	out := new(LookUpPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_LookUpPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ValidatePipeline(ctx context.Context, in *ValidatePipelineRequest, opts ...grpc.CallOption) (*ValidatePipelineResponse, error) {
	out := new(ValidatePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ValidatePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) RenamePipeline(ctx context.Context, in *RenamePipelineRequest, opts ...grpc.CallOption) (*RenamePipelineResponse, error) {
	out := new(RenamePipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RenamePipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerPipeline(ctx context.Context, in *TriggerPipelineRequest, opts ...grpc.CallOption) (*TriggerPipelineResponse, error) {
	out := new(TriggerPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerAsyncPipeline(ctx context.Context, in *TriggerAsyncPipelineRequest, opts ...grpc.CallOption) (*TriggerAsyncPipelineResponse, error) {
	out := new(TriggerAsyncPipelineResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerAsyncPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetOperation(ctx context.Context, in *GetOperationRequest, opts ...grpc.CallOption) (*GetOperationResponse, error) {
	out := new(GetOperationResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetOperation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) CreatePipelineRelease(ctx context.Context, in *CreatePipelineReleaseRequest, opts ...grpc.CallOption) (*CreatePipelineReleaseResponse, error) {
	out := new(CreatePipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_CreatePipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) ListPipelineReleases(ctx context.Context, in *ListPipelineReleasesRequest, opts ...grpc.CallOption) (*ListPipelineReleasesResponse, error) {
	out := new(ListPipelineReleasesResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_ListPipelineReleases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) GetPipelineRelease(ctx context.Context, in *GetPipelineReleaseRequest, opts ...grpc.CallOption) (*GetPipelineReleaseResponse, error) {
	out := new(GetPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_GetPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) UpdatePipelineRelease(ctx context.Context, in *UpdatePipelineReleaseRequest, opts ...grpc.CallOption) (*UpdatePipelineReleaseResponse, error) {
	out := new(UpdatePipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_UpdatePipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) DeletePipelineRelease(ctx context.Context, in *DeletePipelineReleaseRequest, opts ...grpc.CallOption) (*DeletePipelineReleaseResponse, error) {
	out := new(DeletePipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_DeletePipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) RestorePipelineRelease(ctx context.Context, in *RestorePipelineReleaseRequest, opts ...grpc.CallOption) (*RestorePipelineReleaseResponse, error) {
	out := new(RestorePipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RestorePipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) SetDefaultPipelineRelease(ctx context.Context, in *SetDefaultPipelineReleaseRequest, opts ...grpc.CallOption) (*SetDefaultPipelineReleaseResponse, error) {
	out := new(SetDefaultPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_SetDefaultPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) WatchPipelineRelease(ctx context.Context, in *WatchPipelineReleaseRequest, opts ...grpc.CallOption) (*WatchPipelineReleaseResponse, error) {
	out := new(WatchPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_WatchPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) RenamePipelineRelease(ctx context.Context, in *RenamePipelineReleaseRequest, opts ...grpc.CallOption) (*RenamePipelineReleaseResponse, error) {
	out := new(RenamePipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_RenamePipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerPipelineRelease(ctx context.Context, in *TriggerPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerPipelineReleaseResponse, error) {
	out := new(TriggerPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelinePublicServiceClient) TriggerAsyncPipelineRelease(ctx context.Context, in *TriggerAsyncPipelineReleaseRequest, opts ...grpc.CallOption) (*TriggerAsyncPipelineReleaseResponse, error) {
	out := new(TriggerAsyncPipelineReleaseResponse)
	err := c.cc.Invoke(ctx, PipelinePublicService_TriggerAsyncPipelineRelease_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelinePublicServiceServer is the server API for PipelinePublicService service.
// All implementations should embed UnimplementedPipelinePublicServiceServer
// for forward compatibility
type PipelinePublicServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// ListOperatorDefinitions method receives a
	// ListOperatorDefinitionsRequest message and returns a
	// ListOperatorDefinitionsResponse message.
	ListOperatorDefinitions(context.Context, *ListOperatorDefinitionsRequest) (*ListOperatorDefinitionsResponse, error)
	// GetOperatorDefinition method receives a
	// GetOperatorDefinitionRequest message and returns a
	// GetGetOperatorDefinitionResponse message.
	GetOperatorDefinition(context.Context, *GetOperatorDefinitionRequest) (*GetOperatorDefinitionResponse, error)
	// CreatePipeline method receives a CreatePipelineRequest message and returns
	// a CreatePipelineResponse message.
	CreatePipeline(context.Context, *CreatePipelineRequest) (*CreatePipelineResponse, error)
	// ListPipelines method receives a ListPipelinesRequest message and returns a
	// ListPipelinesResponse message.
	ListPipelines(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error)
	// GetPipeline method receives a GetPipelineRequest message and returns a
	// GetPipelineResponse message.
	GetPipeline(context.Context, *GetPipelineRequest) (*GetPipelineResponse, error)
	// UpdatePipeline method receives a UpdatePipelineRequest message and returns
	// a UpdatePipelineResponse message.
	UpdatePipeline(context.Context, *UpdatePipelineRequest) (*UpdatePipelineResponse, error)
	// DeletePipeline method receives a DeletePipelineRequest message and returns
	// a DeletePipelineResponse message.
	DeletePipeline(context.Context, *DeletePipelineRequest) (*DeletePipelineResponse, error)
	// LookUpPipeline method receives a LookUpPipelineRequest message and returns
	// a LookUpPipelineResponse
	LookUpPipeline(context.Context, *LookUpPipelineRequest) (*LookUpPipelineResponse, error)
	// Validate a pipeline.
	ValidatePipeline(context.Context, *ValidatePipelineRequest) (*ValidatePipelineResponse, error)
	// RenamePipeline method receives a RenamePipelineRequest message and returns
	// a RenamePipelineResponse message.
	RenamePipeline(context.Context, *RenamePipelineRequest) (*RenamePipelineResponse, error)
	// TriggerPipeline method receives a TriggerPipelineRequest message
	// and returns a TriggerPipelineResponse.
	TriggerPipeline(context.Context, *TriggerPipelineRequest) (*TriggerPipelineResponse, error)
	// TriggerAsyncPipeline method receives a TriggerPipelineRequest message and
	// returns a TriggerAsyncPipelineResponse.
	TriggerAsyncPipeline(context.Context, *TriggerAsyncPipelineRequest) (*TriggerAsyncPipelineResponse, error)
	// GetOperation method receives a
	// GetOperationRequest message and returns a
	// GetOperationResponse message.
	GetOperation(context.Context, *GetOperationRequest) (*GetOperationResponse, error)
	// CreatePipelineRelease method receives a CreatePipelineReleaseRequest message and returns
	// a CreatePipelineReleaseResponse message.
	CreatePipelineRelease(context.Context, *CreatePipelineReleaseRequest) (*CreatePipelineReleaseResponse, error)
	// ListPipelineReleases method receives a ListPipelineReleasesRequest message and returns a
	// ListPipelineReleasesResponse message.
	ListPipelineReleases(context.Context, *ListPipelineReleasesRequest) (*ListPipelineReleasesResponse, error)
	// GetPipelineRelease method receives a GetPipelineReleaseRequest message and returns a
	// GetPipelineReleaseResponse message.
	GetPipelineRelease(context.Context, *GetPipelineReleaseRequest) (*GetPipelineReleaseResponse, error)
	// UpdatePipelineRelease method receives a UpdatePipelineReleaseRequest message and returns
	// a UpdatePipelineReleaseResponse message.
	UpdatePipelineRelease(context.Context, *UpdatePipelineReleaseRequest) (*UpdatePipelineReleaseResponse, error)
	// DeletePipelineRelease method receives a DeletePipelineReleaseRequest message and returns
	// a DeletePipelineReleaseResponse message.
	DeletePipelineRelease(context.Context, *DeletePipelineReleaseRequest) (*DeletePipelineReleaseResponse, error)
	// RestorePipelineRelease method receives a RestorePipelineReleaseRequest message
	// and returns a RestorePipelineReleaseResponse
	RestorePipelineRelease(context.Context, *RestorePipelineReleaseRequest) (*RestorePipelineReleaseResponse, error)
	// SetDefaultPipelineRelease method receives a SetDefaultPipelineReleaseRequest message
	// and returns a SetDefaultPipelineReleaseResponse
	SetDefaultPipelineRelease(context.Context, *SetDefaultPipelineReleaseRequest) (*SetDefaultPipelineReleaseResponse, error)
	// WatchPipelineRelease method receives a WatchPipelineReleaseRequest message
	// and returns a WatchPipelineReleaseResponse
	WatchPipelineRelease(context.Context, *WatchPipelineReleaseRequest) (*WatchPipelineReleaseResponse, error)
	// RenamePipelineRelease method receives a RenamePipelineReleaseRequest message and returns
	// a RenamePipelineReleaseResponse message.
	RenamePipelineRelease(context.Context, *RenamePipelineReleaseRequest) (*RenamePipelineReleaseResponse, error)
	// TriggerPipelineRelease method receives a TriggePipelineReleaseRequest message
	// and returns a TriggerPipelineReleasePipelineResponse.
	TriggerPipelineRelease(context.Context, *TriggerPipelineReleaseRequest) (*TriggerPipelineReleaseResponse, error)
	// TriggerAsyncPipelineRelease method receives a TriggerAsyncPipelineReleaseRequest message and
	// returns a TriggerAsyncPipelineReleaseResponse.
	TriggerAsyncPipelineRelease(context.Context, *TriggerAsyncPipelineReleaseRequest) (*TriggerAsyncPipelineReleaseResponse, error)
}

// UnimplementedPipelinePublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPipelinePublicServiceServer struct {
}

func (UnimplementedPipelinePublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedPipelinePublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListOperatorDefinitions(context.Context, *ListOperatorDefinitionsRequest) (*ListOperatorDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatorDefinitions not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetOperatorDefinition(context.Context, *GetOperatorDefinitionRequest) (*GetOperatorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatorDefinition not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreatePipeline(context.Context, *CreatePipelineRequest) (*CreatePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListPipelines(context.Context, *ListPipelinesRequest) (*ListPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelines not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetPipeline(context.Context, *GetPipelineRequest) (*GetPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdatePipeline(context.Context, *UpdatePipelineRequest) (*UpdatePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeletePipeline(context.Context, *DeletePipelineRequest) (*DeletePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) LookUpPipeline(context.Context, *LookUpPipelineRequest) (*LookUpPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ValidatePipeline(context.Context, *ValidatePipelineRequest) (*ValidatePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RenamePipeline(context.Context, *RenamePipelineRequest) (*RenamePipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenamePipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerPipeline(context.Context, *TriggerPipelineRequest) (*TriggerPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerAsyncPipeline(context.Context, *TriggerAsyncPipelineRequest) (*TriggerAsyncPipelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncPipeline not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetOperation(context.Context, *GetOperationRequest) (*GetOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperation not implemented")
}
func (UnimplementedPipelinePublicServiceServer) CreatePipelineRelease(context.Context, *CreatePipelineReleaseRequest) (*CreatePipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) ListPipelineReleases(context.Context, *ListPipelineReleasesRequest) (*ListPipelineReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineReleases not implemented")
}
func (UnimplementedPipelinePublicServiceServer) GetPipelineRelease(context.Context, *GetPipelineReleaseRequest) (*GetPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) UpdatePipelineRelease(context.Context, *UpdatePipelineReleaseRequest) (*UpdatePipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) DeletePipelineRelease(context.Context, *DeletePipelineReleaseRequest) (*DeletePipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RestorePipelineRelease(context.Context, *RestorePipelineReleaseRequest) (*RestorePipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestorePipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) SetDefaultPipelineRelease(context.Context, *SetDefaultPipelineReleaseRequest) (*SetDefaultPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) WatchPipelineRelease(context.Context, *WatchPipelineReleaseRequest) (*WatchPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) RenamePipelineRelease(context.Context, *RenamePipelineReleaseRequest) (*RenamePipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenamePipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerPipelineRelease(context.Context, *TriggerPipelineReleaseRequest) (*TriggerPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerPipelineRelease not implemented")
}
func (UnimplementedPipelinePublicServiceServer) TriggerAsyncPipelineRelease(context.Context, *TriggerAsyncPipelineReleaseRequest) (*TriggerAsyncPipelineReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAsyncPipelineRelease not implemented")
}

// UnsafePipelinePublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipelinePublicServiceServer will
// result in compilation errors.
type UnsafePipelinePublicServiceServer interface {
	mustEmbedUnimplementedPipelinePublicServiceServer()
}

func RegisterPipelinePublicServiceServer(s grpc.ServiceRegistrar, srv PipelinePublicServiceServer) {
	s.RegisterService(&PipelinePublicService_ServiceDesc, srv)
}

func _PipelinePublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListOperatorDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatorDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListOperatorDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListOperatorDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListOperatorDefinitions(ctx, req.(*ListOperatorDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetOperatorDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetOperatorDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetOperatorDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetOperatorDefinition(ctx, req.(*GetOperatorDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreatePipeline(ctx, req.(*CreatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListPipelines(ctx, req.(*ListPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetPipeline(ctx, req.(*GetPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdatePipeline(ctx, req.(*UpdatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeletePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeletePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeletePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeletePipeline(ctx, req.(*DeletePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_LookUpPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).LookUpPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_LookUpPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).LookUpPipeline(ctx, req.(*LookUpPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ValidatePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ValidatePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ValidatePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ValidatePipeline(ctx, req.(*ValidatePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RenamePipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenamePipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RenamePipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RenamePipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RenamePipeline(ctx, req.(*RenamePipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerPipeline(ctx, req.(*TriggerPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerAsyncPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncPipelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerAsyncPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerAsyncPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerAsyncPipeline(ctx, req.(*TriggerAsyncPipelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetOperation(ctx, req.(*GetOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_CreatePipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).CreatePipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_CreatePipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).CreatePipelineRelease(ctx, req.(*CreatePipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_ListPipelineReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).ListPipelineReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_ListPipelineReleases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).ListPipelineReleases(ctx, req.(*ListPipelineReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_GetPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).GetPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_GetPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).GetPipelineRelease(ctx, req.(*GetPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_UpdatePipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).UpdatePipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_UpdatePipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).UpdatePipelineRelease(ctx, req.(*UpdatePipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_DeletePipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).DeletePipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_DeletePipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).DeletePipelineRelease(ctx, req.(*DeletePipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RestorePipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestorePipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RestorePipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RestorePipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RestorePipelineRelease(ctx, req.(*RestorePipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_SetDefaultPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).SetDefaultPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_SetDefaultPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).SetDefaultPipelineRelease(ctx, req.(*SetDefaultPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_WatchPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).WatchPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_WatchPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).WatchPipelineRelease(ctx, req.(*WatchPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_RenamePipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenamePipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).RenamePipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_RenamePipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).RenamePipelineRelease(ctx, req.(*RenamePipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerPipelineRelease(ctx, req.(*TriggerPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelinePublicService_TriggerAsyncPipelineRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAsyncPipelineReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelinePublicServiceServer).TriggerAsyncPipelineRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelinePublicService_TriggerAsyncPipelineRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelinePublicServiceServer).TriggerAsyncPipelineRelease(ctx, req.(*TriggerAsyncPipelineReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PipelinePublicService_ServiceDesc is the grpc.ServiceDesc for PipelinePublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PipelinePublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.pipeline.v1alpha.PipelinePublicService",
	HandlerType: (*PipelinePublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _PipelinePublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _PipelinePublicService_Readiness_Handler,
		},
		{
			MethodName: "ListOperatorDefinitions",
			Handler:    _PipelinePublicService_ListOperatorDefinitions_Handler,
		},
		{
			MethodName: "GetOperatorDefinition",
			Handler:    _PipelinePublicService_GetOperatorDefinition_Handler,
		},
		{
			MethodName: "CreatePipeline",
			Handler:    _PipelinePublicService_CreatePipeline_Handler,
		},
		{
			MethodName: "ListPipelines",
			Handler:    _PipelinePublicService_ListPipelines_Handler,
		},
		{
			MethodName: "GetPipeline",
			Handler:    _PipelinePublicService_GetPipeline_Handler,
		},
		{
			MethodName: "UpdatePipeline",
			Handler:    _PipelinePublicService_UpdatePipeline_Handler,
		},
		{
			MethodName: "DeletePipeline",
			Handler:    _PipelinePublicService_DeletePipeline_Handler,
		},
		{
			MethodName: "LookUpPipeline",
			Handler:    _PipelinePublicService_LookUpPipeline_Handler,
		},
		{
			MethodName: "ValidatePipeline",
			Handler:    _PipelinePublicService_ValidatePipeline_Handler,
		},
		{
			MethodName: "RenamePipeline",
			Handler:    _PipelinePublicService_RenamePipeline_Handler,
		},
		{
			MethodName: "TriggerPipeline",
			Handler:    _PipelinePublicService_TriggerPipeline_Handler,
		},
		{
			MethodName: "TriggerAsyncPipeline",
			Handler:    _PipelinePublicService_TriggerAsyncPipeline_Handler,
		},
		{
			MethodName: "GetOperation",
			Handler:    _PipelinePublicService_GetOperation_Handler,
		},
		{
			MethodName: "CreatePipelineRelease",
			Handler:    _PipelinePublicService_CreatePipelineRelease_Handler,
		},
		{
			MethodName: "ListPipelineReleases",
			Handler:    _PipelinePublicService_ListPipelineReleases_Handler,
		},
		{
			MethodName: "GetPipelineRelease",
			Handler:    _PipelinePublicService_GetPipelineRelease_Handler,
		},
		{
			MethodName: "UpdatePipelineRelease",
			Handler:    _PipelinePublicService_UpdatePipelineRelease_Handler,
		},
		{
			MethodName: "DeletePipelineRelease",
			Handler:    _PipelinePublicService_DeletePipelineRelease_Handler,
		},
		{
			MethodName: "RestorePipelineRelease",
			Handler:    _PipelinePublicService_RestorePipelineRelease_Handler,
		},
		{
			MethodName: "SetDefaultPipelineRelease",
			Handler:    _PipelinePublicService_SetDefaultPipelineRelease_Handler,
		},
		{
			MethodName: "WatchPipelineRelease",
			Handler:    _PipelinePublicService_WatchPipelineRelease_Handler,
		},
		{
			MethodName: "RenamePipelineRelease",
			Handler:    _PipelinePublicService_RenamePipelineRelease_Handler,
		},
		{
			MethodName: "TriggerPipelineRelease",
			Handler:    _PipelinePublicService_TriggerPipelineRelease_Handler,
		},
		{
			MethodName: "TriggerAsyncPipelineRelease",
			Handler:    _PipelinePublicService_TriggerAsyncPipelineRelease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vdp/pipeline/v1alpha/pipeline_public_service.proto",
}
