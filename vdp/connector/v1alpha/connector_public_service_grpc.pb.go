// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: vdp/connector/v1alpha/connector_public_service.proto

package connectorv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConnectorPublicService_Liveness_FullMethodName                    = "/vdp.connector.v1alpha.ConnectorPublicService/Liveness"
	ConnectorPublicService_Readiness_FullMethodName                   = "/vdp.connector.v1alpha.ConnectorPublicService/Readiness"
	ConnectorPublicService_ListConnectorDefinitions_FullMethodName    = "/vdp.connector.v1alpha.ConnectorPublicService/ListConnectorDefinitions"
	ConnectorPublicService_GetConnectorDefinition_FullMethodName      = "/vdp.connector.v1alpha.ConnectorPublicService/GetConnectorDefinition"
	ConnectorPublicService_CreateConnectorResource_FullMethodName     = "/vdp.connector.v1alpha.ConnectorPublicService/CreateConnectorResource"
	ConnectorPublicService_ListConnectorResources_FullMethodName      = "/vdp.connector.v1alpha.ConnectorPublicService/ListConnectorResources"
	ConnectorPublicService_GetConnectorResource_FullMethodName        = "/vdp.connector.v1alpha.ConnectorPublicService/GetConnectorResource"
	ConnectorPublicService_UpdateConnectorResource_FullMethodName     = "/vdp.connector.v1alpha.ConnectorPublicService/UpdateConnectorResource"
	ConnectorPublicService_DeleteConnectorResource_FullMethodName     = "/vdp.connector.v1alpha.ConnectorPublicService/DeleteConnectorResource"
	ConnectorPublicService_LookUpConnectorResource_FullMethodName     = "/vdp.connector.v1alpha.ConnectorPublicService/LookUpConnectorResource"
	ConnectorPublicService_ConnectConnectorResource_FullMethodName    = "/vdp.connector.v1alpha.ConnectorPublicService/ConnectConnectorResource"
	ConnectorPublicService_DisconnectConnectorResource_FullMethodName = "/vdp.connector.v1alpha.ConnectorPublicService/DisconnectConnectorResource"
	ConnectorPublicService_RenameConnectorResource_FullMethodName     = "/vdp.connector.v1alpha.ConnectorPublicService/RenameConnectorResource"
	ConnectorPublicService_ExecuteConnectorResource_FullMethodName    = "/vdp.connector.v1alpha.ConnectorPublicService/ExecuteConnectorResource"
	ConnectorPublicService_WatchConnectorResource_FullMethodName      = "/vdp.connector.v1alpha.ConnectorPublicService/WatchConnectorResource"
	ConnectorPublicService_TestConnectorResource_FullMethodName       = "/vdp.connector.v1alpha.ConnectorPublicService/TestConnectorResource"
)

// ConnectorPublicServiceClient is the client API for ConnectorPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorPublicServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// ListConnectorDefinitions method receives a
	// ListConnectorDefinitionsRequest message and returns a
	// ListConnectorDefinitionsResponse message.
	ListConnectorDefinitions(ctx context.Context, in *ListConnectorDefinitionsRequest, opts ...grpc.CallOption) (*ListConnectorDefinitionsResponse, error)
	// GetConnectorDefinition method receives a
	// GetConnectorDefinitionRequest message and returns a
	// GetGetConnectorDefinitionResponse message.
	GetConnectorDefinition(ctx context.Context, in *GetConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetConnectorDefinitionResponse, error)
	// CreateConnectorResource method receives a
	// CreateConnectorResourceRequest message and returns a
	// CreateConnectorResourceResponse message.
	CreateConnectorResource(ctx context.Context, in *CreateConnectorResourceRequest, opts ...grpc.CallOption) (*CreateConnectorResourceResponse, error)
	// ListConnectorResources method receives a
	// ListConnectorResourcesRequest message and returns a
	// ListConnectorResourcesResponse message.
	ListConnectorResources(ctx context.Context, in *ListConnectorResourcesRequest, opts ...grpc.CallOption) (*ListConnectorResourcesResponse, error)
	// GetConnectorResource method receives a GetConnectorResourceRequest
	// message and returns a GetConnectorResourceResponse message.
	GetConnectorResource(ctx context.Context, in *GetConnectorResourceRequest, opts ...grpc.CallOption) (*GetConnectorResourceResponse, error)
	// UpdateConnectorResource method receives a
	// UpdateConnectorResourceRequest message and returns a
	// UpdateConnectorResourceResponse message.
	UpdateConnectorResource(ctx context.Context, in *UpdateConnectorResourceRequest, opts ...grpc.CallOption) (*UpdateConnectorResourceResponse, error)
	// DeleteConnectorResource method receives a
	// DeleteConnectorResourceRequest message and returns a
	// DeleteConnectorResourceResponse message.
	DeleteConnectorResource(ctx context.Context, in *DeleteConnectorResourceRequest, opts ...grpc.CallOption) (*DeleteConnectorResourceResponse, error)
	// LookUpConnectorResource method receives a
	// LookUpConnectorResourceRequest message and returns a
	// LookUpConnectorResourceResponse
	LookUpConnectorResource(ctx context.Context, in *LookUpConnectorResourceRequest, opts ...grpc.CallOption) (*LookUpConnectorResourceResponse, error)
	// Connect a connector resource.
	// The "state" of the connector resource after connecting is "CONNECTED".
	// ConnectConnectorResource can be called on ConnectorResource in the
	// state `DISCONNECTED`; ConnectorResource in a different state (including
	// `CONNECTED`) returns an error.
	ConnectConnectorResource(ctx context.Context, in *ConnectConnectorResourceRequest, opts ...grpc.CallOption) (*ConnectConnectorResourceResponse, error)
	// Disconnect a connectorResource.
	// The "state" of the connectorResource after disconnecting is "DISCONNECTED".
	// DisconnectConnectorResource can be called on ConnectorResource in the
	// state `CONNECTED`; ConnectorResource in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectConnectorResource(ctx context.Context, in *DisconnectConnectorResourceRequest, opts ...grpc.CallOption) (*DisconnectConnectorResourceResponse, error)
	// RenameConnectorResource method receives a
	// RenameConnectorResourceRequest message and returns a
	// RenameConnectorResourceResponse message.
	RenameConnectorResource(ctx context.Context, in *RenameConnectorResourceRequest, opts ...grpc.CallOption) (*RenameConnectorResourceResponse, error)
	// ExecuteConnectorResource method receives a
	// ExecuteConnectorResourceRequest message and returns a
	// ExecuteConnectorResourceResponse message.
	ExecuteConnectorResource(ctx context.Context, in *ExecuteConnectorResourceRequest, opts ...grpc.CallOption) (*ExecuteConnectorResourceResponse, error)
	// WatchConnectorResource method receives a
	// WatchConnectorResourceRequest message and returns a
	// WatchConnectorResourceResponse
	WatchConnectorResource(ctx context.Context, in *WatchConnectorResourceRequest, opts ...grpc.CallOption) (*WatchConnectorResourceResponse, error)
	// TestConnectorResource method receives a TestConnectorResourceRequest
	// message and returns a TestConnectorResourceResponse
	TestConnectorResource(ctx context.Context, in *TestConnectorResourceRequest, opts ...grpc.CallOption) (*TestConnectorResourceResponse, error)
}

type connectorPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorPublicServiceClient(cc grpc.ClientConnInterface) ConnectorPublicServiceClient {
	return &connectorPublicServiceClient{cc}
}

func (c *connectorPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_Liveness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_Readiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ListConnectorDefinitions(ctx context.Context, in *ListConnectorDefinitionsRequest, opts ...grpc.CallOption) (*ListConnectorDefinitionsResponse, error) {
	out := new(ListConnectorDefinitionsResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_ListConnectorDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) GetConnectorDefinition(ctx context.Context, in *GetConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetConnectorDefinitionResponse, error) {
	out := new(GetConnectorDefinitionResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_GetConnectorDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) CreateConnectorResource(ctx context.Context, in *CreateConnectorResourceRequest, opts ...grpc.CallOption) (*CreateConnectorResourceResponse, error) {
	out := new(CreateConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_CreateConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ListConnectorResources(ctx context.Context, in *ListConnectorResourcesRequest, opts ...grpc.CallOption) (*ListConnectorResourcesResponse, error) {
	out := new(ListConnectorResourcesResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_ListConnectorResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) GetConnectorResource(ctx context.Context, in *GetConnectorResourceRequest, opts ...grpc.CallOption) (*GetConnectorResourceResponse, error) {
	out := new(GetConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_GetConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) UpdateConnectorResource(ctx context.Context, in *UpdateConnectorResourceRequest, opts ...grpc.CallOption) (*UpdateConnectorResourceResponse, error) {
	out := new(UpdateConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_UpdateConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) DeleteConnectorResource(ctx context.Context, in *DeleteConnectorResourceRequest, opts ...grpc.CallOption) (*DeleteConnectorResourceResponse, error) {
	out := new(DeleteConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_DeleteConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) LookUpConnectorResource(ctx context.Context, in *LookUpConnectorResourceRequest, opts ...grpc.CallOption) (*LookUpConnectorResourceResponse, error) {
	out := new(LookUpConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_LookUpConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ConnectConnectorResource(ctx context.Context, in *ConnectConnectorResourceRequest, opts ...grpc.CallOption) (*ConnectConnectorResourceResponse, error) {
	out := new(ConnectConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_ConnectConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) DisconnectConnectorResource(ctx context.Context, in *DisconnectConnectorResourceRequest, opts ...grpc.CallOption) (*DisconnectConnectorResourceResponse, error) {
	out := new(DisconnectConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_DisconnectConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) RenameConnectorResource(ctx context.Context, in *RenameConnectorResourceRequest, opts ...grpc.CallOption) (*RenameConnectorResourceResponse, error) {
	out := new(RenameConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_RenameConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ExecuteConnectorResource(ctx context.Context, in *ExecuteConnectorResourceRequest, opts ...grpc.CallOption) (*ExecuteConnectorResourceResponse, error) {
	out := new(ExecuteConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_ExecuteConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) WatchConnectorResource(ctx context.Context, in *WatchConnectorResourceRequest, opts ...grpc.CallOption) (*WatchConnectorResourceResponse, error) {
	out := new(WatchConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_WatchConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) TestConnectorResource(ctx context.Context, in *TestConnectorResourceRequest, opts ...grpc.CallOption) (*TestConnectorResourceResponse, error) {
	out := new(TestConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_TestConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorPublicServiceServer is the server API for ConnectorPublicService service.
// All implementations should embed UnimplementedConnectorPublicServiceServer
// for forward compatibility
type ConnectorPublicServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// ListConnectorDefinitions method receives a
	// ListConnectorDefinitionsRequest message and returns a
	// ListConnectorDefinitionsResponse message.
	ListConnectorDefinitions(context.Context, *ListConnectorDefinitionsRequest) (*ListConnectorDefinitionsResponse, error)
	// GetConnectorDefinition method receives a
	// GetConnectorDefinitionRequest message and returns a
	// GetGetConnectorDefinitionResponse message.
	GetConnectorDefinition(context.Context, *GetConnectorDefinitionRequest) (*GetConnectorDefinitionResponse, error)
	// CreateConnectorResource method receives a
	// CreateConnectorResourceRequest message and returns a
	// CreateConnectorResourceResponse message.
	CreateConnectorResource(context.Context, *CreateConnectorResourceRequest) (*CreateConnectorResourceResponse, error)
	// ListConnectorResources method receives a
	// ListConnectorResourcesRequest message and returns a
	// ListConnectorResourcesResponse message.
	ListConnectorResources(context.Context, *ListConnectorResourcesRequest) (*ListConnectorResourcesResponse, error)
	// GetConnectorResource method receives a GetConnectorResourceRequest
	// message and returns a GetConnectorResourceResponse message.
	GetConnectorResource(context.Context, *GetConnectorResourceRequest) (*GetConnectorResourceResponse, error)
	// UpdateConnectorResource method receives a
	// UpdateConnectorResourceRequest message and returns a
	// UpdateConnectorResourceResponse message.
	UpdateConnectorResource(context.Context, *UpdateConnectorResourceRequest) (*UpdateConnectorResourceResponse, error)
	// DeleteConnectorResource method receives a
	// DeleteConnectorResourceRequest message and returns a
	// DeleteConnectorResourceResponse message.
	DeleteConnectorResource(context.Context, *DeleteConnectorResourceRequest) (*DeleteConnectorResourceResponse, error)
	// LookUpConnectorResource method receives a
	// LookUpConnectorResourceRequest message and returns a
	// LookUpConnectorResourceResponse
	LookUpConnectorResource(context.Context, *LookUpConnectorResourceRequest) (*LookUpConnectorResourceResponse, error)
	// Connect a connector resource.
	// The "state" of the connector resource after connecting is "CONNECTED".
	// ConnectConnectorResource can be called on ConnectorResource in the
	// state `DISCONNECTED`; ConnectorResource in a different state (including
	// `CONNECTED`) returns an error.
	ConnectConnectorResource(context.Context, *ConnectConnectorResourceRequest) (*ConnectConnectorResourceResponse, error)
	// Disconnect a connectorResource.
	// The "state" of the connectorResource after disconnecting is "DISCONNECTED".
	// DisconnectConnectorResource can be called on ConnectorResource in the
	// state `CONNECTED`; ConnectorResource in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectConnectorResource(context.Context, *DisconnectConnectorResourceRequest) (*DisconnectConnectorResourceResponse, error)
	// RenameConnectorResource method receives a
	// RenameConnectorResourceRequest message and returns a
	// RenameConnectorResourceResponse message.
	RenameConnectorResource(context.Context, *RenameConnectorResourceRequest) (*RenameConnectorResourceResponse, error)
	// ExecuteConnectorResource method receives a
	// ExecuteConnectorResourceRequest message and returns a
	// ExecuteConnectorResourceResponse message.
	ExecuteConnectorResource(context.Context, *ExecuteConnectorResourceRequest) (*ExecuteConnectorResourceResponse, error)
	// WatchConnectorResource method receives a
	// WatchConnectorResourceRequest message and returns a
	// WatchConnectorResourceResponse
	WatchConnectorResource(context.Context, *WatchConnectorResourceRequest) (*WatchConnectorResourceResponse, error)
	// TestConnectorResource method receives a TestConnectorResourceRequest
	// message and returns a TestConnectorResourceResponse
	TestConnectorResource(context.Context, *TestConnectorResourceRequest) (*TestConnectorResourceResponse, error)
}

// UnimplementedConnectorPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConnectorPublicServiceServer struct {
}

func (UnimplementedConnectorPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedConnectorPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ListConnectorDefinitions(context.Context, *ListConnectorDefinitionsRequest) (*ListConnectorDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectorDefinitions not implemented")
}
func (UnimplementedConnectorPublicServiceServer) GetConnectorDefinition(context.Context, *GetConnectorDefinitionRequest) (*GetConnectorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectorDefinition not implemented")
}
func (UnimplementedConnectorPublicServiceServer) CreateConnectorResource(context.Context, *CreateConnectorResourceRequest) (*CreateConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ListConnectorResources(context.Context, *ListConnectorResourcesRequest) (*ListConnectorResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectorResources not implemented")
}
func (UnimplementedConnectorPublicServiceServer) GetConnectorResource(context.Context, *GetConnectorResourceRequest) (*GetConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) UpdateConnectorResource(context.Context, *UpdateConnectorResourceRequest) (*UpdateConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) DeleteConnectorResource(context.Context, *DeleteConnectorResourceRequest) (*DeleteConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) LookUpConnectorResource(context.Context, *LookUpConnectorResourceRequest) (*LookUpConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ConnectConnectorResource(context.Context, *ConnectConnectorResourceRequest) (*ConnectConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) DisconnectConnectorResource(context.Context, *DisconnectConnectorResourceRequest) (*DisconnectConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) RenameConnectorResource(context.Context, *RenameConnectorResourceRequest) (*RenameConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ExecuteConnectorResource(context.Context, *ExecuteConnectorResourceRequest) (*ExecuteConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) WatchConnectorResource(context.Context, *WatchConnectorResourceRequest) (*WatchConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) TestConnectorResource(context.Context, *TestConnectorResourceRequest) (*TestConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnectorResource not implemented")
}

// UnsafeConnectorPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorPublicServiceServer will
// result in compilation errors.
type UnsafeConnectorPublicServiceServer interface {
	mustEmbedUnimplementedConnectorPublicServiceServer()
}

func RegisterConnectorPublicServiceServer(s grpc.ServiceRegistrar, srv ConnectorPublicServiceServer) {
	s.RegisterService(&ConnectorPublicService_ServiceDesc, srv)
}

func _ConnectorPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ListConnectorDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ListConnectorDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_ListConnectorDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ListConnectorDefinitions(ctx, req.(*ListConnectorDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_GetConnectorDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).GetConnectorDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_GetConnectorDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).GetConnectorDefinition(ctx, req.(*GetConnectorDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_CreateConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).CreateConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_CreateConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).CreateConnectorResource(ctx, req.(*CreateConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ListConnectorResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ListConnectorResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_ListConnectorResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ListConnectorResources(ctx, req.(*ListConnectorResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_GetConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).GetConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_GetConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).GetConnectorResource(ctx, req.(*GetConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_UpdateConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).UpdateConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_UpdateConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).UpdateConnectorResource(ctx, req.(*UpdateConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_DeleteConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).DeleteConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_DeleteConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).DeleteConnectorResource(ctx, req.(*DeleteConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_LookUpConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).LookUpConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_LookUpConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).LookUpConnectorResource(ctx, req.(*LookUpConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ConnectConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ConnectConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_ConnectConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ConnectConnectorResource(ctx, req.(*ConnectConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_DisconnectConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).DisconnectConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_DisconnectConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).DisconnectConnectorResource(ctx, req.(*DisconnectConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_RenameConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).RenameConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_RenameConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).RenameConnectorResource(ctx, req.(*RenameConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ExecuteConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ExecuteConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_ExecuteConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ExecuteConnectorResource(ctx, req.(*ExecuteConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_WatchConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).WatchConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_WatchConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).WatchConnectorResource(ctx, req.(*WatchConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_TestConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).TestConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_TestConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).TestConnectorResource(ctx, req.(*TestConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorPublicService_ServiceDesc is the grpc.ServiceDesc for ConnectorPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.connector.v1alpha.ConnectorPublicService",
	HandlerType: (*ConnectorPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _ConnectorPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _ConnectorPublicService_Readiness_Handler,
		},
		{
			MethodName: "ListConnectorDefinitions",
			Handler:    _ConnectorPublicService_ListConnectorDefinitions_Handler,
		},
		{
			MethodName: "GetConnectorDefinition",
			Handler:    _ConnectorPublicService_GetConnectorDefinition_Handler,
		},
		{
			MethodName: "CreateConnectorResource",
			Handler:    _ConnectorPublicService_CreateConnectorResource_Handler,
		},
		{
			MethodName: "ListConnectorResources",
			Handler:    _ConnectorPublicService_ListConnectorResources_Handler,
		},
		{
			MethodName: "GetConnectorResource",
			Handler:    _ConnectorPublicService_GetConnectorResource_Handler,
		},
		{
			MethodName: "UpdateConnectorResource",
			Handler:    _ConnectorPublicService_UpdateConnectorResource_Handler,
		},
		{
			MethodName: "DeleteConnectorResource",
			Handler:    _ConnectorPublicService_DeleteConnectorResource_Handler,
		},
		{
			MethodName: "LookUpConnectorResource",
			Handler:    _ConnectorPublicService_LookUpConnectorResource_Handler,
		},
		{
			MethodName: "ConnectConnectorResource",
			Handler:    _ConnectorPublicService_ConnectConnectorResource_Handler,
		},
		{
			MethodName: "DisconnectConnectorResource",
			Handler:    _ConnectorPublicService_DisconnectConnectorResource_Handler,
		},
		{
			MethodName: "RenameConnectorResource",
			Handler:    _ConnectorPublicService_RenameConnectorResource_Handler,
		},
		{
			MethodName: "ExecuteConnectorResource",
			Handler:    _ConnectorPublicService_ExecuteConnectorResource_Handler,
		},
		{
			MethodName: "WatchConnectorResource",
			Handler:    _ConnectorPublicService_WatchConnectorResource_Handler,
		},
		{
			MethodName: "TestConnectorResource",
			Handler:    _ConnectorPublicService_TestConnectorResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vdp/connector/v1alpha/connector_public_service.proto",
}
