// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: vdp/connector/v1alpha/connector_public_service.proto

package connectorv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConnectorPublicService_Liveness_FullMethodName                 = "/vdp.connector.v1alpha.ConnectorPublicService/Liveness"
	ConnectorPublicService_Readiness_FullMethodName                = "/vdp.connector.v1alpha.ConnectorPublicService/Readiness"
	ConnectorPublicService_ListConnectorDefinitions_FullMethodName = "/vdp.connector.v1alpha.ConnectorPublicService/ListConnectorDefinitions"
	ConnectorPublicService_GetConnectorDefinition_FullMethodName   = "/vdp.connector.v1alpha.ConnectorPublicService/GetConnectorDefinition"
	ConnectorPublicService_CreateConnector_FullMethodName          = "/vdp.connector.v1alpha.ConnectorPublicService/CreateConnector"
	ConnectorPublicService_ListConnectors_FullMethodName           = "/vdp.connector.v1alpha.ConnectorPublicService/ListConnectors"
	ConnectorPublicService_GetConnector_FullMethodName             = "/vdp.connector.v1alpha.ConnectorPublicService/GetConnector"
	ConnectorPublicService_UpdateConnector_FullMethodName          = "/vdp.connector.v1alpha.ConnectorPublicService/UpdateConnector"
	ConnectorPublicService_DeleteConnector_FullMethodName          = "/vdp.connector.v1alpha.ConnectorPublicService/DeleteConnector"
	ConnectorPublicService_LookUpConnector_FullMethodName          = "/vdp.connector.v1alpha.ConnectorPublicService/LookUpConnector"
	ConnectorPublicService_ConnectConnector_FullMethodName         = "/vdp.connector.v1alpha.ConnectorPublicService/ConnectConnector"
	ConnectorPublicService_DisconnectConnector_FullMethodName      = "/vdp.connector.v1alpha.ConnectorPublicService/DisconnectConnector"
	ConnectorPublicService_RenameConnector_FullMethodName          = "/vdp.connector.v1alpha.ConnectorPublicService/RenameConnector"
	ConnectorPublicService_ExecuteConnector_FullMethodName         = "/vdp.connector.v1alpha.ConnectorPublicService/ExecuteConnector"
	ConnectorPublicService_WatchConnector_FullMethodName           = "/vdp.connector.v1alpha.ConnectorPublicService/WatchConnector"
	ConnectorPublicService_TestConnector_FullMethodName            = "/vdp.connector.v1alpha.ConnectorPublicService/TestConnector"
)

// ConnectorPublicServiceClient is the client API for ConnectorPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorPublicServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// ListConnectorDefinitions method receives a
	// ListConnectorDefinitionsRequest message and returns a
	// ListConnectorDefinitionsResponse message.
	ListConnectorDefinitions(ctx context.Context, in *ListConnectorDefinitionsRequest, opts ...grpc.CallOption) (*ListConnectorDefinitionsResponse, error)
	// GetConnectorDefinition method receives a
	// GetConnectorDefinitionRequest message and returns a
	// GetGetConnectorDefinitionResponse message.
	GetConnectorDefinition(ctx context.Context, in *GetConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetConnectorDefinitionResponse, error)
	// CreateConnector method receives a
	// CreateConnectorRequest message and returns a
	// CreateConnectorResponse message.
	CreateConnector(ctx context.Context, in *CreateConnectorRequest, opts ...grpc.CallOption) (*CreateConnectorResponse, error)
	// ListConnectors method receives a
	// ListConnectorsRequest message and returns a
	// ListConnectorsResponse message.
	ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error)
	// GetConnector method receives a GetConnectorRequest
	// message and returns a GetConnectorResponse message.
	GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...grpc.CallOption) (*GetConnectorResponse, error)
	// UpdateConnector method receives a
	// UpdateConnectorRequest message and returns a
	// UpdateConnectorResponse message.
	UpdateConnector(ctx context.Context, in *UpdateConnectorRequest, opts ...grpc.CallOption) (*UpdateConnectorResponse, error)
	// DeleteConnector method receives a
	// DeleteConnectorRequest message and returns a
	// DeleteConnectorResponse message.
	DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...grpc.CallOption) (*DeleteConnectorResponse, error)
	// LookUpConnector method receives a
	// LookUpConnectorRequest message and returns a
	// LookUpConnectorResponse
	LookUpConnector(ctx context.Context, in *LookUpConnectorRequest, opts ...grpc.CallOption) (*LookUpConnectorResponse, error)
	// Connect a connector.
	// The "state" of the connector after connecting is "CONNECTED".
	// ConnectConnector can be called on Connector in the
	// state `DISCONNECTED`; Connector in a different state (including
	// `CONNECTED`) returns an error.
	ConnectConnector(ctx context.Context, in *ConnectConnectorRequest, opts ...grpc.CallOption) (*ConnectConnectorResponse, error)
	// Disconnect a connector.
	// The "state" of the connector after disconnecting is "DISCONNECTED".
	// DisconnectConnector can be called on Connector in the
	// state `CONNECTED`; Connector in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectConnector(ctx context.Context, in *DisconnectConnectorRequest, opts ...grpc.CallOption) (*DisconnectConnectorResponse, error)
	// RenameConnector method receives a
	// RenameConnectorRequest message and returns a
	// RenameConnectorResponse message.
	RenameConnector(ctx context.Context, in *RenameConnectorRequest, opts ...grpc.CallOption) (*RenameConnectorResponse, error)
	// ExecuteConnector method receives a
	// ExecuteConnectorRequest message and returns a
	// ExecuteConnectorResponse message.
	ExecuteConnector(ctx context.Context, in *ExecuteConnectorRequest, opts ...grpc.CallOption) (*ExecuteConnectorResponse, error)
	// WatchConnector method receives a
	// WatchConnectorRequest message and returns a
	// WatchConnectorResponse
	WatchConnector(ctx context.Context, in *WatchConnectorRequest, opts ...grpc.CallOption) (*WatchConnectorResponse, error)
	// TestConnector method receives a TestConnectorRequest
	// message and returns a TestConnectorResponse
	TestConnector(ctx context.Context, in *TestConnectorRequest, opts ...grpc.CallOption) (*TestConnectorResponse, error)
}

type connectorPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorPublicServiceClient(cc grpc.ClientConnInterface) ConnectorPublicServiceClient {
	return &connectorPublicServiceClient{cc}
}

func (c *connectorPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_Liveness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_Readiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ListConnectorDefinitions(ctx context.Context, in *ListConnectorDefinitionsRequest, opts ...grpc.CallOption) (*ListConnectorDefinitionsResponse, error) {
	out := new(ListConnectorDefinitionsResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_ListConnectorDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) GetConnectorDefinition(ctx context.Context, in *GetConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetConnectorDefinitionResponse, error) {
	out := new(GetConnectorDefinitionResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_GetConnectorDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) CreateConnector(ctx context.Context, in *CreateConnectorRequest, opts ...grpc.CallOption) (*CreateConnectorResponse, error) {
	out := new(CreateConnectorResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_CreateConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error) {
	out := new(ListConnectorsResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_ListConnectors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...grpc.CallOption) (*GetConnectorResponse, error) {
	out := new(GetConnectorResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_GetConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) UpdateConnector(ctx context.Context, in *UpdateConnectorRequest, opts ...grpc.CallOption) (*UpdateConnectorResponse, error) {
	out := new(UpdateConnectorResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_UpdateConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...grpc.CallOption) (*DeleteConnectorResponse, error) {
	out := new(DeleteConnectorResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_DeleteConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) LookUpConnector(ctx context.Context, in *LookUpConnectorRequest, opts ...grpc.CallOption) (*LookUpConnectorResponse, error) {
	out := new(LookUpConnectorResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_LookUpConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ConnectConnector(ctx context.Context, in *ConnectConnectorRequest, opts ...grpc.CallOption) (*ConnectConnectorResponse, error) {
	out := new(ConnectConnectorResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_ConnectConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) DisconnectConnector(ctx context.Context, in *DisconnectConnectorRequest, opts ...grpc.CallOption) (*DisconnectConnectorResponse, error) {
	out := new(DisconnectConnectorResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_DisconnectConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) RenameConnector(ctx context.Context, in *RenameConnectorRequest, opts ...grpc.CallOption) (*RenameConnectorResponse, error) {
	out := new(RenameConnectorResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_RenameConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ExecuteConnector(ctx context.Context, in *ExecuteConnectorRequest, opts ...grpc.CallOption) (*ExecuteConnectorResponse, error) {
	out := new(ExecuteConnectorResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_ExecuteConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) WatchConnector(ctx context.Context, in *WatchConnectorRequest, opts ...grpc.CallOption) (*WatchConnectorResponse, error) {
	out := new(WatchConnectorResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_WatchConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) TestConnector(ctx context.Context, in *TestConnectorRequest, opts ...grpc.CallOption) (*TestConnectorResponse, error) {
	out := new(TestConnectorResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_TestConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorPublicServiceServer is the server API for ConnectorPublicService service.
// All implementations should embed UnimplementedConnectorPublicServiceServer
// for forward compatibility
type ConnectorPublicServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// ListConnectorDefinitions method receives a
	// ListConnectorDefinitionsRequest message and returns a
	// ListConnectorDefinitionsResponse message.
	ListConnectorDefinitions(context.Context, *ListConnectorDefinitionsRequest) (*ListConnectorDefinitionsResponse, error)
	// GetConnectorDefinition method receives a
	// GetConnectorDefinitionRequest message and returns a
	// GetGetConnectorDefinitionResponse message.
	GetConnectorDefinition(context.Context, *GetConnectorDefinitionRequest) (*GetConnectorDefinitionResponse, error)
	// CreateConnector method receives a
	// CreateConnectorRequest message and returns a
	// CreateConnectorResponse message.
	CreateConnector(context.Context, *CreateConnectorRequest) (*CreateConnectorResponse, error)
	// ListConnectors method receives a
	// ListConnectorsRequest message and returns a
	// ListConnectorsResponse message.
	ListConnectors(context.Context, *ListConnectorsRequest) (*ListConnectorsResponse, error)
	// GetConnector method receives a GetConnectorRequest
	// message and returns a GetConnectorResponse message.
	GetConnector(context.Context, *GetConnectorRequest) (*GetConnectorResponse, error)
	// UpdateConnector method receives a
	// UpdateConnectorRequest message and returns a
	// UpdateConnectorResponse message.
	UpdateConnector(context.Context, *UpdateConnectorRequest) (*UpdateConnectorResponse, error)
	// DeleteConnector method receives a
	// DeleteConnectorRequest message and returns a
	// DeleteConnectorResponse message.
	DeleteConnector(context.Context, *DeleteConnectorRequest) (*DeleteConnectorResponse, error)
	// LookUpConnector method receives a
	// LookUpConnectorRequest message and returns a
	// LookUpConnectorResponse
	LookUpConnector(context.Context, *LookUpConnectorRequest) (*LookUpConnectorResponse, error)
	// Connect a connector.
	// The "state" of the connector after connecting is "CONNECTED".
	// ConnectConnector can be called on Connector in the
	// state `DISCONNECTED`; Connector in a different state (including
	// `CONNECTED`) returns an error.
	ConnectConnector(context.Context, *ConnectConnectorRequest) (*ConnectConnectorResponse, error)
	// Disconnect a connector.
	// The "state" of the connector after disconnecting is "DISCONNECTED".
	// DisconnectConnector can be called on Connector in the
	// state `CONNECTED`; Connector in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectConnector(context.Context, *DisconnectConnectorRequest) (*DisconnectConnectorResponse, error)
	// RenameConnector method receives a
	// RenameConnectorRequest message and returns a
	// RenameConnectorResponse message.
	RenameConnector(context.Context, *RenameConnectorRequest) (*RenameConnectorResponse, error)
	// ExecuteConnector method receives a
	// ExecuteConnectorRequest message and returns a
	// ExecuteConnectorResponse message.
	ExecuteConnector(context.Context, *ExecuteConnectorRequest) (*ExecuteConnectorResponse, error)
	// WatchConnector method receives a
	// WatchConnectorRequest message and returns a
	// WatchConnectorResponse
	WatchConnector(context.Context, *WatchConnectorRequest) (*WatchConnectorResponse, error)
	// TestConnector method receives a TestConnectorRequest
	// message and returns a TestConnectorResponse
	TestConnector(context.Context, *TestConnectorRequest) (*TestConnectorResponse, error)
}

// UnimplementedConnectorPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConnectorPublicServiceServer struct {
}

func (UnimplementedConnectorPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedConnectorPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ListConnectorDefinitions(context.Context, *ListConnectorDefinitionsRequest) (*ListConnectorDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectorDefinitions not implemented")
}
func (UnimplementedConnectorPublicServiceServer) GetConnectorDefinition(context.Context, *GetConnectorDefinitionRequest) (*GetConnectorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectorDefinition not implemented")
}
func (UnimplementedConnectorPublicServiceServer) CreateConnector(context.Context, *CreateConnectorRequest) (*CreateConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ListConnectors(context.Context, *ListConnectorsRequest) (*ListConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectors not implemented")
}
func (UnimplementedConnectorPublicServiceServer) GetConnector(context.Context, *GetConnectorRequest) (*GetConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) UpdateConnector(context.Context, *UpdateConnectorRequest) (*UpdateConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) DeleteConnector(context.Context, *DeleteConnectorRequest) (*DeleteConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) LookUpConnector(context.Context, *LookUpConnectorRequest) (*LookUpConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ConnectConnector(context.Context, *ConnectConnectorRequest) (*ConnectConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) DisconnectConnector(context.Context, *DisconnectConnectorRequest) (*DisconnectConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) RenameConnector(context.Context, *RenameConnectorRequest) (*RenameConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ExecuteConnector(context.Context, *ExecuteConnectorRequest) (*ExecuteConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) WatchConnector(context.Context, *WatchConnectorRequest) (*WatchConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) TestConnector(context.Context, *TestConnectorRequest) (*TestConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConnector not implemented")
}

// UnsafeConnectorPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorPublicServiceServer will
// result in compilation errors.
type UnsafeConnectorPublicServiceServer interface {
	mustEmbedUnimplementedConnectorPublicServiceServer()
}

func RegisterConnectorPublicServiceServer(s grpc.ServiceRegistrar, srv ConnectorPublicServiceServer) {
	s.RegisterService(&ConnectorPublicService_ServiceDesc, srv)
}

func _ConnectorPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ListConnectorDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ListConnectorDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_ListConnectorDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ListConnectorDefinitions(ctx, req.(*ListConnectorDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_GetConnectorDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).GetConnectorDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_GetConnectorDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).GetConnectorDefinition(ctx, req.(*GetConnectorDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_CreateConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).CreateConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_CreateConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).CreateConnector(ctx, req.(*CreateConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ListConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ListConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_ListConnectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ListConnectors(ctx, req.(*ListConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_GetConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).GetConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_GetConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).GetConnector(ctx, req.(*GetConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_UpdateConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).UpdateConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_UpdateConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).UpdateConnector(ctx, req.(*UpdateConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_DeleteConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).DeleteConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_DeleteConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).DeleteConnector(ctx, req.(*DeleteConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_LookUpConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).LookUpConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_LookUpConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).LookUpConnector(ctx, req.(*LookUpConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ConnectConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ConnectConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_ConnectConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ConnectConnector(ctx, req.(*ConnectConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_DisconnectConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).DisconnectConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_DisconnectConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).DisconnectConnector(ctx, req.(*DisconnectConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_RenameConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).RenameConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_RenameConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).RenameConnector(ctx, req.(*RenameConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ExecuteConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ExecuteConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_ExecuteConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ExecuteConnector(ctx, req.(*ExecuteConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_WatchConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).WatchConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_WatchConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).WatchConnector(ctx, req.(*WatchConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_TestConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).TestConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_TestConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).TestConnector(ctx, req.(*TestConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorPublicService_ServiceDesc is the grpc.ServiceDesc for ConnectorPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.connector.v1alpha.ConnectorPublicService",
	HandlerType: (*ConnectorPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _ConnectorPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _ConnectorPublicService_Readiness_Handler,
		},
		{
			MethodName: "ListConnectorDefinitions",
			Handler:    _ConnectorPublicService_ListConnectorDefinitions_Handler,
		},
		{
			MethodName: "GetConnectorDefinition",
			Handler:    _ConnectorPublicService_GetConnectorDefinition_Handler,
		},
		{
			MethodName: "CreateConnector",
			Handler:    _ConnectorPublicService_CreateConnector_Handler,
		},
		{
			MethodName: "ListConnectors",
			Handler:    _ConnectorPublicService_ListConnectors_Handler,
		},
		{
			MethodName: "GetConnector",
			Handler:    _ConnectorPublicService_GetConnector_Handler,
		},
		{
			MethodName: "UpdateConnector",
			Handler:    _ConnectorPublicService_UpdateConnector_Handler,
		},
		{
			MethodName: "DeleteConnector",
			Handler:    _ConnectorPublicService_DeleteConnector_Handler,
		},
		{
			MethodName: "LookUpConnector",
			Handler:    _ConnectorPublicService_LookUpConnector_Handler,
		},
		{
			MethodName: "ConnectConnector",
			Handler:    _ConnectorPublicService_ConnectConnector_Handler,
		},
		{
			MethodName: "DisconnectConnector",
			Handler:    _ConnectorPublicService_DisconnectConnector_Handler,
		},
		{
			MethodName: "RenameConnector",
			Handler:    _ConnectorPublicService_RenameConnector_Handler,
		},
		{
			MethodName: "ExecuteConnector",
			Handler:    _ConnectorPublicService_ExecuteConnector_Handler,
		},
		{
			MethodName: "WatchConnector",
			Handler:    _ConnectorPublicService_WatchConnector_Handler,
		},
		{
			MethodName: "TestConnector",
			Handler:    _ConnectorPublicService_TestConnector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vdp/connector/v1alpha/connector_public_service.proto",
}
