// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package connectorv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectorPublicServiceClient is the client API for ConnectorPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorPublicServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// ListSourceConnectorDefinitions method receives a
	// ListSourceConnectorDefinitionsRequest message and returns a
	// ListSourceConnectorDefinitionsResponse message.
	ListSourceConnectorDefinitions(ctx context.Context, in *ListSourceConnectorDefinitionsRequest, opts ...grpc.CallOption) (*ListSourceConnectorDefinitionsResponse, error)
	// GetSourceConnectorDefinition method receives a
	// GetSourceConnectorDefinitionRequest message and returns a
	// GetGetSourceConnectorDefinitionResponse message.
	GetSourceConnectorDefinition(ctx context.Context, in *GetSourceConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetSourceConnectorDefinitionResponse, error)
	// ListDestinationConnectorDefinitions method receives a
	// ListDestinationConnectorDefinitionsRequest message and returns a
	// ListDestinationConnectorDefinitionsResponse message.
	ListDestinationConnectorDefinitions(ctx context.Context, in *ListDestinationConnectorDefinitionsRequest, opts ...grpc.CallOption) (*ListDestinationConnectorDefinitionsResponse, error)
	// GetDestinationConnectorDefinition method receives a
	// GetDestinationConnectorDefinitionRequest message and returns a
	// GetGetDestinationConnectorDefinitionResponse message.
	GetDestinationConnectorDefinition(ctx context.Context, in *GetDestinationConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetDestinationConnectorDefinitionResponse, error)
	// CreateSourceConnector method receives a CreateSourceConnectorRequest
	// message and returns a CreateSourceConnectorResponse message.
	CreateSourceConnector(ctx context.Context, in *CreateSourceConnectorRequest, opts ...grpc.CallOption) (*CreateSourceConnectorResponse, error)
	// ListSourceConnectors method receives a ListSourceConnectorsRequest message
	// and returns a ListSourceConnectorsResponse message.
	ListSourceConnectors(ctx context.Context, in *ListSourceConnectorsRequest, opts ...grpc.CallOption) (*ListSourceConnectorsResponse, error)
	// GetSourceConnector method receives a GetSourceConnectorRequest message and
	// returns a GetSourceConnectorResponse message.
	GetSourceConnector(ctx context.Context, in *GetSourceConnectorRequest, opts ...grpc.CallOption) (*GetSourceConnectorResponse, error)
	// UpdateSourceConnector method receives a UpdateSourceConnectorRequest
	// message and returns a UpdateSourceConnectorResponse message.
	UpdateSourceConnector(ctx context.Context, in *UpdateSourceConnectorRequest, opts ...grpc.CallOption) (*UpdateSourceConnectorResponse, error)
	// DeleteSourceConnector method receives a DeleteSourceConnectorRequest
	// message and returns a DeleteSourceConnectorResponse message.
	DeleteSourceConnector(ctx context.Context, in *DeleteSourceConnectorRequest, opts ...grpc.CallOption) (*DeleteSourceConnectorResponse, error)
	// LookUpSourceConnector method receives a LookUpSourceConnectorRequest
	// message and returns a LookUpSourceConnectorResponse
	LookUpSourceConnector(ctx context.Context, in *LookUpSourceConnectorRequest, opts ...grpc.CallOption) (*LookUpSourceConnectorResponse, error)
	// Connect a source connector.
	// The "state" of the connector after connecting is "CONNECTED".
	// ConnectSourceConnector can be called on SourceConnector in the state
	// `DISCONNECTED`; SourceConnector in a different state (including
	// `CONNECTED`) returns an error.
	ConnectSourceConnector(ctx context.Context, in *ConnectSourceConnectorRequest, opts ...grpc.CallOption) (*ConnectSourceConnectorResponse, error)
	// Disconnect a source connector.
	// The "state" of the connector after disconnecting is "DISCONNECTED".
	// DisconnectSourceConnector can be called on SourceConnector in the state
	// `CONNECTED`; SourceConnector in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectSourceConnector(ctx context.Context, in *DisconnectSourceConnectorRequest, opts ...grpc.CallOption) (*DisconnectSourceConnectorResponse, error)
	// RenameSourceConnector method receives a RenameSourceConnectorRequest
	// message and returns a RenameSourceConnectorResponse message.
	RenameSourceConnector(ctx context.Context, in *RenameSourceConnectorRequest, opts ...grpc.CallOption) (*RenameSourceConnectorResponse, error)
	// ExecuteSourceConnector method receives a ExecuteSourceConnectorRequest
	// message and returns a ExecuteSourceConnectorResponse message.
	ExecuteSourceConnector(ctx context.Context, in *ExecuteSourceConnectorRequest, opts ...grpc.CallOption) (*ExecuteSourceConnectorResponse, error)
	// WatchSourceConnector method receives a WatchSourceConnectorRequest message
	// and returns a WatchSourceConnectorResponse
	WatchSourceConnector(ctx context.Context, in *WatchSourceConnectorRequest, opts ...grpc.CallOption) (*WatchSourceConnectorResponse, error)
	// TestSourceConnector method receives a TestSourceConnectorRequest message
	// and returns a TestSourceConnectorResponse
	TestSourceConnector(ctx context.Context, in *TestSourceConnectorRequest, opts ...grpc.CallOption) (*TestSourceConnectorResponse, error)
	// CreateDestinationConnector method receives a
	// CreateDestinationConnectorRequest message and returns a
	// CreateDestinationConnectorResponse message.
	CreateDestinationConnector(ctx context.Context, in *CreateDestinationConnectorRequest, opts ...grpc.CallOption) (*CreateDestinationConnectorResponse, error)
	// ListDestinationConnectors method receives a ListDestinationConnectorsRequest
	// message and returns a ListDestinationConnectorsResponse message.
	ListDestinationConnectors(ctx context.Context, in *ListDestinationConnectorsRequest, opts ...grpc.CallOption) (*ListDestinationConnectorsResponse, error)
	// GetDestinationConnector method receives a GetDestinationConnectorRequest
	// message and returns a GetDestinationConnectorResponse message.
	GetDestinationConnector(ctx context.Context, in *GetDestinationConnectorRequest, opts ...grpc.CallOption) (*GetDestinationConnectorResponse, error)
	// UpdateDestinationConnector method receives a
	// UpdateDestinationConnectorRequest message and returns a
	// UpdateDestinationConnectorResponse message.
	UpdateDestinationConnector(ctx context.Context, in *UpdateDestinationConnectorRequest, opts ...grpc.CallOption) (*UpdateDestinationConnectorResponse, error)
	// DeleteDestinationConnector method receives a
	// DeleteDestinationConnectorRequest message and returns a
	// DeleteDestinationConnectorResponse message.
	DeleteDestinationConnector(ctx context.Context, in *DeleteDestinationConnectorRequest, opts ...grpc.CallOption) (*DeleteDestinationConnectorResponse, error)
	// LookUpDestinationConnector method receives a
	// LookUpDestinationConnectorRequest message and returns a
	// LookUpDestinationConnectorResponse
	LookUpDestinationConnector(ctx context.Context, in *LookUpDestinationConnectorRequest, opts ...grpc.CallOption) (*LookUpDestinationConnectorResponse, error)
	// Connect a destination connector.
	// The "state" of the connector after connecting is "CONNECTED".
	// ConnectDestinationConnector can be called on DestinationConnector in the
	// state `DISCONNECTED`; DestinationConnector in a different state (including
	// `CONNECTED`) returns an error.
	ConnectDestinationConnector(ctx context.Context, in *ConnectDestinationConnectorRequest, opts ...grpc.CallOption) (*ConnectDestinationConnectorResponse, error)
	// Disconnect a destination connector.
	// The "state" of the connector after disconnecting is "DISCONNECTED".
	// DisconnectDestinationConnector can be called on DestinationConnector in the
	// state `CONNECTED`; DestinationConnector in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectDestinationConnector(ctx context.Context, in *DisconnectDestinationConnectorRequest, opts ...grpc.CallOption) (*DisconnectDestinationConnectorResponse, error)
	// RenameDestinationConnector method receives a
	// RenameDestinationConnectorRequest message and returns a
	// RenameDestinationConnectorResponse message.
	RenameDestinationConnector(ctx context.Context, in *RenameDestinationConnectorRequest, opts ...grpc.CallOption) (*RenameDestinationConnectorResponse, error)
	// ExecuteDestinationConnector method receives a
	// ExecuteDestinationConnectorRequest message and returns a
	// ExecuteDestinationConnectorResponse message.
	ExecuteDestinationConnector(ctx context.Context, in *ExecuteDestinationConnectorRequest, opts ...grpc.CallOption) (*ExecuteDestinationConnectorResponse, error)
	// WatchDestinationConnector method receives a WatchDestinationConnectorRequest message
	// and returns a WatchDestinationConnectorResponse
	WatchDestinationConnector(ctx context.Context, in *WatchDestinationConnectorRequest, opts ...grpc.CallOption) (*WatchDestinationConnectorResponse, error)
	// TestDestinationConnector method receives a TestDestinationConnectorRequest message
	// and returns a TestDestinationConnectorResponse
	TestDestinationConnector(ctx context.Context, in *TestDestinationConnectorRequest, opts ...grpc.CallOption) (*TestDestinationConnectorResponse, error)
}

type connectorPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorPublicServiceClient(cc grpc.ClientConnInterface) ConnectorPublicServiceClient {
	return &connectorPublicServiceClient{cc}
}

func (c *connectorPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/Liveness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/Readiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ListSourceConnectorDefinitions(ctx context.Context, in *ListSourceConnectorDefinitionsRequest, opts ...grpc.CallOption) (*ListSourceConnectorDefinitionsResponse, error) {
	out := new(ListSourceConnectorDefinitionsResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/ListSourceConnectorDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) GetSourceConnectorDefinition(ctx context.Context, in *GetSourceConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetSourceConnectorDefinitionResponse, error) {
	out := new(GetSourceConnectorDefinitionResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/GetSourceConnectorDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ListDestinationConnectorDefinitions(ctx context.Context, in *ListDestinationConnectorDefinitionsRequest, opts ...grpc.CallOption) (*ListDestinationConnectorDefinitionsResponse, error) {
	out := new(ListDestinationConnectorDefinitionsResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/ListDestinationConnectorDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) GetDestinationConnectorDefinition(ctx context.Context, in *GetDestinationConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetDestinationConnectorDefinitionResponse, error) {
	out := new(GetDestinationConnectorDefinitionResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/GetDestinationConnectorDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) CreateSourceConnector(ctx context.Context, in *CreateSourceConnectorRequest, opts ...grpc.CallOption) (*CreateSourceConnectorResponse, error) {
	out := new(CreateSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/CreateSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ListSourceConnectors(ctx context.Context, in *ListSourceConnectorsRequest, opts ...grpc.CallOption) (*ListSourceConnectorsResponse, error) {
	out := new(ListSourceConnectorsResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/ListSourceConnectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) GetSourceConnector(ctx context.Context, in *GetSourceConnectorRequest, opts ...grpc.CallOption) (*GetSourceConnectorResponse, error) {
	out := new(GetSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/GetSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) UpdateSourceConnector(ctx context.Context, in *UpdateSourceConnectorRequest, opts ...grpc.CallOption) (*UpdateSourceConnectorResponse, error) {
	out := new(UpdateSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/UpdateSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) DeleteSourceConnector(ctx context.Context, in *DeleteSourceConnectorRequest, opts ...grpc.CallOption) (*DeleteSourceConnectorResponse, error) {
	out := new(DeleteSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/DeleteSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) LookUpSourceConnector(ctx context.Context, in *LookUpSourceConnectorRequest, opts ...grpc.CallOption) (*LookUpSourceConnectorResponse, error) {
	out := new(LookUpSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/LookUpSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ConnectSourceConnector(ctx context.Context, in *ConnectSourceConnectorRequest, opts ...grpc.CallOption) (*ConnectSourceConnectorResponse, error) {
	out := new(ConnectSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/ConnectSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) DisconnectSourceConnector(ctx context.Context, in *DisconnectSourceConnectorRequest, opts ...grpc.CallOption) (*DisconnectSourceConnectorResponse, error) {
	out := new(DisconnectSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/DisconnectSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) RenameSourceConnector(ctx context.Context, in *RenameSourceConnectorRequest, opts ...grpc.CallOption) (*RenameSourceConnectorResponse, error) {
	out := new(RenameSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/RenameSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ExecuteSourceConnector(ctx context.Context, in *ExecuteSourceConnectorRequest, opts ...grpc.CallOption) (*ExecuteSourceConnectorResponse, error) {
	out := new(ExecuteSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/ExecuteSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) WatchSourceConnector(ctx context.Context, in *WatchSourceConnectorRequest, opts ...grpc.CallOption) (*WatchSourceConnectorResponse, error) {
	out := new(WatchSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/WatchSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) TestSourceConnector(ctx context.Context, in *TestSourceConnectorRequest, opts ...grpc.CallOption) (*TestSourceConnectorResponse, error) {
	out := new(TestSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/TestSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) CreateDestinationConnector(ctx context.Context, in *CreateDestinationConnectorRequest, opts ...grpc.CallOption) (*CreateDestinationConnectorResponse, error) {
	out := new(CreateDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/CreateDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ListDestinationConnectors(ctx context.Context, in *ListDestinationConnectorsRequest, opts ...grpc.CallOption) (*ListDestinationConnectorsResponse, error) {
	out := new(ListDestinationConnectorsResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/ListDestinationConnectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) GetDestinationConnector(ctx context.Context, in *GetDestinationConnectorRequest, opts ...grpc.CallOption) (*GetDestinationConnectorResponse, error) {
	out := new(GetDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/GetDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) UpdateDestinationConnector(ctx context.Context, in *UpdateDestinationConnectorRequest, opts ...grpc.CallOption) (*UpdateDestinationConnectorResponse, error) {
	out := new(UpdateDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/UpdateDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) DeleteDestinationConnector(ctx context.Context, in *DeleteDestinationConnectorRequest, opts ...grpc.CallOption) (*DeleteDestinationConnectorResponse, error) {
	out := new(DeleteDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/DeleteDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) LookUpDestinationConnector(ctx context.Context, in *LookUpDestinationConnectorRequest, opts ...grpc.CallOption) (*LookUpDestinationConnectorResponse, error) {
	out := new(LookUpDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/LookUpDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ConnectDestinationConnector(ctx context.Context, in *ConnectDestinationConnectorRequest, opts ...grpc.CallOption) (*ConnectDestinationConnectorResponse, error) {
	out := new(ConnectDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/ConnectDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) DisconnectDestinationConnector(ctx context.Context, in *DisconnectDestinationConnectorRequest, opts ...grpc.CallOption) (*DisconnectDestinationConnectorResponse, error) {
	out := new(DisconnectDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/DisconnectDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) RenameDestinationConnector(ctx context.Context, in *RenameDestinationConnectorRequest, opts ...grpc.CallOption) (*RenameDestinationConnectorResponse, error) {
	out := new(RenameDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/RenameDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ExecuteDestinationConnector(ctx context.Context, in *ExecuteDestinationConnectorRequest, opts ...grpc.CallOption) (*ExecuteDestinationConnectorResponse, error) {
	out := new(ExecuteDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/ExecuteDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) WatchDestinationConnector(ctx context.Context, in *WatchDestinationConnectorRequest, opts ...grpc.CallOption) (*WatchDestinationConnectorResponse, error) {
	out := new(WatchDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/WatchDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) TestDestinationConnector(ctx context.Context, in *TestDestinationConnectorRequest, opts ...grpc.CallOption) (*TestDestinationConnectorResponse, error) {
	out := new(TestDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorPublicService/TestDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorPublicServiceServer is the server API for ConnectorPublicService service.
// All implementations should embed UnimplementedConnectorPublicServiceServer
// for forward compatibility
type ConnectorPublicServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// ListSourceConnectorDefinitions method receives a
	// ListSourceConnectorDefinitionsRequest message and returns a
	// ListSourceConnectorDefinitionsResponse message.
	ListSourceConnectorDefinitions(context.Context, *ListSourceConnectorDefinitionsRequest) (*ListSourceConnectorDefinitionsResponse, error)
	// GetSourceConnectorDefinition method receives a
	// GetSourceConnectorDefinitionRequest message and returns a
	// GetGetSourceConnectorDefinitionResponse message.
	GetSourceConnectorDefinition(context.Context, *GetSourceConnectorDefinitionRequest) (*GetSourceConnectorDefinitionResponse, error)
	// ListDestinationConnectorDefinitions method receives a
	// ListDestinationConnectorDefinitionsRequest message and returns a
	// ListDestinationConnectorDefinitionsResponse message.
	ListDestinationConnectorDefinitions(context.Context, *ListDestinationConnectorDefinitionsRequest) (*ListDestinationConnectorDefinitionsResponse, error)
	// GetDestinationConnectorDefinition method receives a
	// GetDestinationConnectorDefinitionRequest message and returns a
	// GetGetDestinationConnectorDefinitionResponse message.
	GetDestinationConnectorDefinition(context.Context, *GetDestinationConnectorDefinitionRequest) (*GetDestinationConnectorDefinitionResponse, error)
	// CreateSourceConnector method receives a CreateSourceConnectorRequest
	// message and returns a CreateSourceConnectorResponse message.
	CreateSourceConnector(context.Context, *CreateSourceConnectorRequest) (*CreateSourceConnectorResponse, error)
	// ListSourceConnectors method receives a ListSourceConnectorsRequest message
	// and returns a ListSourceConnectorsResponse message.
	ListSourceConnectors(context.Context, *ListSourceConnectorsRequest) (*ListSourceConnectorsResponse, error)
	// GetSourceConnector method receives a GetSourceConnectorRequest message and
	// returns a GetSourceConnectorResponse message.
	GetSourceConnector(context.Context, *GetSourceConnectorRequest) (*GetSourceConnectorResponse, error)
	// UpdateSourceConnector method receives a UpdateSourceConnectorRequest
	// message and returns a UpdateSourceConnectorResponse message.
	UpdateSourceConnector(context.Context, *UpdateSourceConnectorRequest) (*UpdateSourceConnectorResponse, error)
	// DeleteSourceConnector method receives a DeleteSourceConnectorRequest
	// message and returns a DeleteSourceConnectorResponse message.
	DeleteSourceConnector(context.Context, *DeleteSourceConnectorRequest) (*DeleteSourceConnectorResponse, error)
	// LookUpSourceConnector method receives a LookUpSourceConnectorRequest
	// message and returns a LookUpSourceConnectorResponse
	LookUpSourceConnector(context.Context, *LookUpSourceConnectorRequest) (*LookUpSourceConnectorResponse, error)
	// Connect a source connector.
	// The "state" of the connector after connecting is "CONNECTED".
	// ConnectSourceConnector can be called on SourceConnector in the state
	// `DISCONNECTED`; SourceConnector in a different state (including
	// `CONNECTED`) returns an error.
	ConnectSourceConnector(context.Context, *ConnectSourceConnectorRequest) (*ConnectSourceConnectorResponse, error)
	// Disconnect a source connector.
	// The "state" of the connector after disconnecting is "DISCONNECTED".
	// DisconnectSourceConnector can be called on SourceConnector in the state
	// `CONNECTED`; SourceConnector in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectSourceConnector(context.Context, *DisconnectSourceConnectorRequest) (*DisconnectSourceConnectorResponse, error)
	// RenameSourceConnector method receives a RenameSourceConnectorRequest
	// message and returns a RenameSourceConnectorResponse message.
	RenameSourceConnector(context.Context, *RenameSourceConnectorRequest) (*RenameSourceConnectorResponse, error)
	// ExecuteSourceConnector method receives a ExecuteSourceConnectorRequest
	// message and returns a ExecuteSourceConnectorResponse message.
	ExecuteSourceConnector(context.Context, *ExecuteSourceConnectorRequest) (*ExecuteSourceConnectorResponse, error)
	// WatchSourceConnector method receives a WatchSourceConnectorRequest message
	// and returns a WatchSourceConnectorResponse
	WatchSourceConnector(context.Context, *WatchSourceConnectorRequest) (*WatchSourceConnectorResponse, error)
	// TestSourceConnector method receives a TestSourceConnectorRequest message
	// and returns a TestSourceConnectorResponse
	TestSourceConnector(context.Context, *TestSourceConnectorRequest) (*TestSourceConnectorResponse, error)
	// CreateDestinationConnector method receives a
	// CreateDestinationConnectorRequest message and returns a
	// CreateDestinationConnectorResponse message.
	CreateDestinationConnector(context.Context, *CreateDestinationConnectorRequest) (*CreateDestinationConnectorResponse, error)
	// ListDestinationConnectors method receives a ListDestinationConnectorsRequest
	// message and returns a ListDestinationConnectorsResponse message.
	ListDestinationConnectors(context.Context, *ListDestinationConnectorsRequest) (*ListDestinationConnectorsResponse, error)
	// GetDestinationConnector method receives a GetDestinationConnectorRequest
	// message and returns a GetDestinationConnectorResponse message.
	GetDestinationConnector(context.Context, *GetDestinationConnectorRequest) (*GetDestinationConnectorResponse, error)
	// UpdateDestinationConnector method receives a
	// UpdateDestinationConnectorRequest message and returns a
	// UpdateDestinationConnectorResponse message.
	UpdateDestinationConnector(context.Context, *UpdateDestinationConnectorRequest) (*UpdateDestinationConnectorResponse, error)
	// DeleteDestinationConnector method receives a
	// DeleteDestinationConnectorRequest message and returns a
	// DeleteDestinationConnectorResponse message.
	DeleteDestinationConnector(context.Context, *DeleteDestinationConnectorRequest) (*DeleteDestinationConnectorResponse, error)
	// LookUpDestinationConnector method receives a
	// LookUpDestinationConnectorRequest message and returns a
	// LookUpDestinationConnectorResponse
	LookUpDestinationConnector(context.Context, *LookUpDestinationConnectorRequest) (*LookUpDestinationConnectorResponse, error)
	// Connect a destination connector.
	// The "state" of the connector after connecting is "CONNECTED".
	// ConnectDestinationConnector can be called on DestinationConnector in the
	// state `DISCONNECTED`; DestinationConnector in a different state (including
	// `CONNECTED`) returns an error.
	ConnectDestinationConnector(context.Context, *ConnectDestinationConnectorRequest) (*ConnectDestinationConnectorResponse, error)
	// Disconnect a destination connector.
	// The "state" of the connector after disconnecting is "DISCONNECTED".
	// DisconnectDestinationConnector can be called on DestinationConnector in the
	// state `CONNECTED`; DestinationConnector in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectDestinationConnector(context.Context, *DisconnectDestinationConnectorRequest) (*DisconnectDestinationConnectorResponse, error)
	// RenameDestinationConnector method receives a
	// RenameDestinationConnectorRequest message and returns a
	// RenameDestinationConnectorResponse message.
	RenameDestinationConnector(context.Context, *RenameDestinationConnectorRequest) (*RenameDestinationConnectorResponse, error)
	// ExecuteDestinationConnector method receives a
	// ExecuteDestinationConnectorRequest message and returns a
	// ExecuteDestinationConnectorResponse message.
	ExecuteDestinationConnector(context.Context, *ExecuteDestinationConnectorRequest) (*ExecuteDestinationConnectorResponse, error)
	// WatchDestinationConnector method receives a WatchDestinationConnectorRequest message
	// and returns a WatchDestinationConnectorResponse
	WatchDestinationConnector(context.Context, *WatchDestinationConnectorRequest) (*WatchDestinationConnectorResponse, error)
	// TestDestinationConnector method receives a TestDestinationConnectorRequest message
	// and returns a TestDestinationConnectorResponse
	TestDestinationConnector(context.Context, *TestDestinationConnectorRequest) (*TestDestinationConnectorResponse, error)
}

// UnimplementedConnectorPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConnectorPublicServiceServer struct {
}

func (UnimplementedConnectorPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedConnectorPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ListSourceConnectorDefinitions(context.Context, *ListSourceConnectorDefinitionsRequest) (*ListSourceConnectorDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSourceConnectorDefinitions not implemented")
}
func (UnimplementedConnectorPublicServiceServer) GetSourceConnectorDefinition(context.Context, *GetSourceConnectorDefinitionRequest) (*GetSourceConnectorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceConnectorDefinition not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ListDestinationConnectorDefinitions(context.Context, *ListDestinationConnectorDefinitionsRequest) (*ListDestinationConnectorDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDestinationConnectorDefinitions not implemented")
}
func (UnimplementedConnectorPublicServiceServer) GetDestinationConnectorDefinition(context.Context, *GetDestinationConnectorDefinitionRequest) (*GetDestinationConnectorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDestinationConnectorDefinition not implemented")
}
func (UnimplementedConnectorPublicServiceServer) CreateSourceConnector(context.Context, *CreateSourceConnectorRequest) (*CreateSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSourceConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ListSourceConnectors(context.Context, *ListSourceConnectorsRequest) (*ListSourceConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSourceConnectors not implemented")
}
func (UnimplementedConnectorPublicServiceServer) GetSourceConnector(context.Context, *GetSourceConnectorRequest) (*GetSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) UpdateSourceConnector(context.Context, *UpdateSourceConnectorRequest) (*UpdateSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSourceConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) DeleteSourceConnector(context.Context, *DeleteSourceConnectorRequest) (*DeleteSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSourceConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) LookUpSourceConnector(context.Context, *LookUpSourceConnectorRequest) (*LookUpSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpSourceConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ConnectSourceConnector(context.Context, *ConnectSourceConnectorRequest) (*ConnectSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectSourceConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) DisconnectSourceConnector(context.Context, *DisconnectSourceConnectorRequest) (*DisconnectSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectSourceConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) RenameSourceConnector(context.Context, *RenameSourceConnectorRequest) (*RenameSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameSourceConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ExecuteSourceConnector(context.Context, *ExecuteSourceConnectorRequest) (*ExecuteSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteSourceConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) WatchSourceConnector(context.Context, *WatchSourceConnectorRequest) (*WatchSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchSourceConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) TestSourceConnector(context.Context, *TestSourceConnectorRequest) (*TestSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestSourceConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) CreateDestinationConnector(context.Context, *CreateDestinationConnectorRequest) (*CreateDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDestinationConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ListDestinationConnectors(context.Context, *ListDestinationConnectorsRequest) (*ListDestinationConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDestinationConnectors not implemented")
}
func (UnimplementedConnectorPublicServiceServer) GetDestinationConnector(context.Context, *GetDestinationConnectorRequest) (*GetDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDestinationConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) UpdateDestinationConnector(context.Context, *UpdateDestinationConnectorRequest) (*UpdateDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDestinationConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) DeleteDestinationConnector(context.Context, *DeleteDestinationConnectorRequest) (*DeleteDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDestinationConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) LookUpDestinationConnector(context.Context, *LookUpDestinationConnectorRequest) (*LookUpDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpDestinationConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ConnectDestinationConnector(context.Context, *ConnectDestinationConnectorRequest) (*ConnectDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectDestinationConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) DisconnectDestinationConnector(context.Context, *DisconnectDestinationConnectorRequest) (*DisconnectDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectDestinationConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) RenameDestinationConnector(context.Context, *RenameDestinationConnectorRequest) (*RenameDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameDestinationConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ExecuteDestinationConnector(context.Context, *ExecuteDestinationConnectorRequest) (*ExecuteDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDestinationConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) WatchDestinationConnector(context.Context, *WatchDestinationConnectorRequest) (*WatchDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchDestinationConnector not implemented")
}
func (UnimplementedConnectorPublicServiceServer) TestDestinationConnector(context.Context, *TestDestinationConnectorRequest) (*TestDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestDestinationConnector not implemented")
}

// UnsafeConnectorPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorPublicServiceServer will
// result in compilation errors.
type UnsafeConnectorPublicServiceServer interface {
	mustEmbedUnimplementedConnectorPublicServiceServer()
}

func RegisterConnectorPublicServiceServer(s grpc.ServiceRegistrar, srv ConnectorPublicServiceServer) {
	s.RegisterService(&ConnectorPublicService_ServiceDesc, srv)
}

func _ConnectorPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/Liveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/Readiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ListSourceConnectorDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSourceConnectorDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ListSourceConnectorDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/ListSourceConnectorDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ListSourceConnectorDefinitions(ctx, req.(*ListSourceConnectorDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_GetSourceConnectorDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceConnectorDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).GetSourceConnectorDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/GetSourceConnectorDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).GetSourceConnectorDefinition(ctx, req.(*GetSourceConnectorDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ListDestinationConnectorDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDestinationConnectorDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ListDestinationConnectorDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/ListDestinationConnectorDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ListDestinationConnectorDefinitions(ctx, req.(*ListDestinationConnectorDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_GetDestinationConnectorDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDestinationConnectorDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).GetDestinationConnectorDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/GetDestinationConnectorDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).GetDestinationConnectorDefinition(ctx, req.(*GetDestinationConnectorDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_CreateSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).CreateSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/CreateSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).CreateSourceConnector(ctx, req.(*CreateSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ListSourceConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSourceConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ListSourceConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/ListSourceConnectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ListSourceConnectors(ctx, req.(*ListSourceConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_GetSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).GetSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/GetSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).GetSourceConnector(ctx, req.(*GetSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_UpdateSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).UpdateSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/UpdateSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).UpdateSourceConnector(ctx, req.(*UpdateSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_DeleteSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).DeleteSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/DeleteSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).DeleteSourceConnector(ctx, req.(*DeleteSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_LookUpSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).LookUpSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/LookUpSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).LookUpSourceConnector(ctx, req.(*LookUpSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ConnectSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ConnectSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/ConnectSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ConnectSourceConnector(ctx, req.(*ConnectSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_DisconnectSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).DisconnectSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/DisconnectSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).DisconnectSourceConnector(ctx, req.(*DisconnectSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_RenameSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).RenameSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/RenameSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).RenameSourceConnector(ctx, req.(*RenameSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ExecuteSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ExecuteSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/ExecuteSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ExecuteSourceConnector(ctx, req.(*ExecuteSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_WatchSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).WatchSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/WatchSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).WatchSourceConnector(ctx, req.(*WatchSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_TestSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).TestSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/TestSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).TestSourceConnector(ctx, req.(*TestSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_CreateDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).CreateDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/CreateDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).CreateDestinationConnector(ctx, req.(*CreateDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ListDestinationConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDestinationConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ListDestinationConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/ListDestinationConnectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ListDestinationConnectors(ctx, req.(*ListDestinationConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_GetDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).GetDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/GetDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).GetDestinationConnector(ctx, req.(*GetDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_UpdateDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).UpdateDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/UpdateDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).UpdateDestinationConnector(ctx, req.(*UpdateDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_DeleteDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).DeleteDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/DeleteDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).DeleteDestinationConnector(ctx, req.(*DeleteDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_LookUpDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).LookUpDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/LookUpDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).LookUpDestinationConnector(ctx, req.(*LookUpDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ConnectDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ConnectDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/ConnectDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ConnectDestinationConnector(ctx, req.(*ConnectDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_DisconnectDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).DisconnectDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/DisconnectDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).DisconnectDestinationConnector(ctx, req.(*DisconnectDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_RenameDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).RenameDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/RenameDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).RenameDestinationConnector(ctx, req.(*RenameDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ExecuteDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ExecuteDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/ExecuteDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ExecuteDestinationConnector(ctx, req.(*ExecuteDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_WatchDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).WatchDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/WatchDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).WatchDestinationConnector(ctx, req.(*WatchDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_TestDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).TestDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorPublicService/TestDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).TestDestinationConnector(ctx, req.(*TestDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorPublicService_ServiceDesc is the grpc.ServiceDesc for ConnectorPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.connector.v1alpha.ConnectorPublicService",
	HandlerType: (*ConnectorPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _ConnectorPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _ConnectorPublicService_Readiness_Handler,
		},
		{
			MethodName: "ListSourceConnectorDefinitions",
			Handler:    _ConnectorPublicService_ListSourceConnectorDefinitions_Handler,
		},
		{
			MethodName: "GetSourceConnectorDefinition",
			Handler:    _ConnectorPublicService_GetSourceConnectorDefinition_Handler,
		},
		{
			MethodName: "ListDestinationConnectorDefinitions",
			Handler:    _ConnectorPublicService_ListDestinationConnectorDefinitions_Handler,
		},
		{
			MethodName: "GetDestinationConnectorDefinition",
			Handler:    _ConnectorPublicService_GetDestinationConnectorDefinition_Handler,
		},
		{
			MethodName: "CreateSourceConnector",
			Handler:    _ConnectorPublicService_CreateSourceConnector_Handler,
		},
		{
			MethodName: "ListSourceConnectors",
			Handler:    _ConnectorPublicService_ListSourceConnectors_Handler,
		},
		{
			MethodName: "GetSourceConnector",
			Handler:    _ConnectorPublicService_GetSourceConnector_Handler,
		},
		{
			MethodName: "UpdateSourceConnector",
			Handler:    _ConnectorPublicService_UpdateSourceConnector_Handler,
		},
		{
			MethodName: "DeleteSourceConnector",
			Handler:    _ConnectorPublicService_DeleteSourceConnector_Handler,
		},
		{
			MethodName: "LookUpSourceConnector",
			Handler:    _ConnectorPublicService_LookUpSourceConnector_Handler,
		},
		{
			MethodName: "ConnectSourceConnector",
			Handler:    _ConnectorPublicService_ConnectSourceConnector_Handler,
		},
		{
			MethodName: "DisconnectSourceConnector",
			Handler:    _ConnectorPublicService_DisconnectSourceConnector_Handler,
		},
		{
			MethodName: "RenameSourceConnector",
			Handler:    _ConnectorPublicService_RenameSourceConnector_Handler,
		},
		{
			MethodName: "ExecuteSourceConnector",
			Handler:    _ConnectorPublicService_ExecuteSourceConnector_Handler,
		},
		{
			MethodName: "WatchSourceConnector",
			Handler:    _ConnectorPublicService_WatchSourceConnector_Handler,
		},
		{
			MethodName: "TestSourceConnector",
			Handler:    _ConnectorPublicService_TestSourceConnector_Handler,
		},
		{
			MethodName: "CreateDestinationConnector",
			Handler:    _ConnectorPublicService_CreateDestinationConnector_Handler,
		},
		{
			MethodName: "ListDestinationConnectors",
			Handler:    _ConnectorPublicService_ListDestinationConnectors_Handler,
		},
		{
			MethodName: "GetDestinationConnector",
			Handler:    _ConnectorPublicService_GetDestinationConnector_Handler,
		},
		{
			MethodName: "UpdateDestinationConnector",
			Handler:    _ConnectorPublicService_UpdateDestinationConnector_Handler,
		},
		{
			MethodName: "DeleteDestinationConnector",
			Handler:    _ConnectorPublicService_DeleteDestinationConnector_Handler,
		},
		{
			MethodName: "LookUpDestinationConnector",
			Handler:    _ConnectorPublicService_LookUpDestinationConnector_Handler,
		},
		{
			MethodName: "ConnectDestinationConnector",
			Handler:    _ConnectorPublicService_ConnectDestinationConnector_Handler,
		},
		{
			MethodName: "DisconnectDestinationConnector",
			Handler:    _ConnectorPublicService_DisconnectDestinationConnector_Handler,
		},
		{
			MethodName: "RenameDestinationConnector",
			Handler:    _ConnectorPublicService_RenameDestinationConnector_Handler,
		},
		{
			MethodName: "ExecuteDestinationConnector",
			Handler:    _ConnectorPublicService_ExecuteDestinationConnector_Handler,
		},
		{
			MethodName: "WatchDestinationConnector",
			Handler:    _ConnectorPublicService_WatchDestinationConnector_Handler,
		},
		{
			MethodName: "TestDestinationConnector",
			Handler:    _ConnectorPublicService_TestDestinationConnector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vdp/connector/v1alpha/connector_public_service.proto",
}
