// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: vdp/connector/v1alpha/connector_public_service.proto

package connectorv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConnectorPublicService_Liveness_FullMethodName                        = "/vdp.connector.v1alpha.ConnectorPublicService/Liveness"
	ConnectorPublicService_Readiness_FullMethodName                       = "/vdp.connector.v1alpha.ConnectorPublicService/Readiness"
	ConnectorPublicService_ListConnectorDefinitions_FullMethodName        = "/vdp.connector.v1alpha.ConnectorPublicService/ListConnectorDefinitions"
	ConnectorPublicService_GetConnectorDefinition_FullMethodName          = "/vdp.connector.v1alpha.ConnectorPublicService/GetConnectorDefinition"
	ConnectorPublicService_ListConnectorResources_FullMethodName          = "/vdp.connector.v1alpha.ConnectorPublicService/ListConnectorResources"
	ConnectorPublicService_LookUpConnectorResource_FullMethodName         = "/vdp.connector.v1alpha.ConnectorPublicService/LookUpConnectorResource"
	ConnectorPublicService_CreateUserConnectorResource_FullMethodName     = "/vdp.connector.v1alpha.ConnectorPublicService/CreateUserConnectorResource"
	ConnectorPublicService_ListUserConnectorResources_FullMethodName      = "/vdp.connector.v1alpha.ConnectorPublicService/ListUserConnectorResources"
	ConnectorPublicService_GetUserConnectorResource_FullMethodName        = "/vdp.connector.v1alpha.ConnectorPublicService/GetUserConnectorResource"
	ConnectorPublicService_UpdateUserConnectorResource_FullMethodName     = "/vdp.connector.v1alpha.ConnectorPublicService/UpdateUserConnectorResource"
	ConnectorPublicService_DeleteUserConnectorResource_FullMethodName     = "/vdp.connector.v1alpha.ConnectorPublicService/DeleteUserConnectorResource"
	ConnectorPublicService_ConnectUserConnectorResource_FullMethodName    = "/vdp.connector.v1alpha.ConnectorPublicService/ConnectUserConnectorResource"
	ConnectorPublicService_DisconnectUserConnectorResource_FullMethodName = "/vdp.connector.v1alpha.ConnectorPublicService/DisconnectUserConnectorResource"
	ConnectorPublicService_RenameUserConnectorResource_FullMethodName     = "/vdp.connector.v1alpha.ConnectorPublicService/RenameUserConnectorResource"
	ConnectorPublicService_ExecuteUserConnectorResource_FullMethodName    = "/vdp.connector.v1alpha.ConnectorPublicService/ExecuteUserConnectorResource"
	ConnectorPublicService_WatchUserConnectorResource_FullMethodName      = "/vdp.connector.v1alpha.ConnectorPublicService/WatchUserConnectorResource"
	ConnectorPublicService_TestUserConnectorResource_FullMethodName       = "/vdp.connector.v1alpha.ConnectorPublicService/TestUserConnectorResource"
)

// ConnectorPublicServiceClient is the client API for ConnectorPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorPublicServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// ListConnectorDefinitions method receives a
	// ListConnectorDefinitionsRequest message and returns a
	// ListConnectorDefinitionsResponse message.
	ListConnectorDefinitions(ctx context.Context, in *ListConnectorDefinitionsRequest, opts ...grpc.CallOption) (*ListConnectorDefinitionsResponse, error)
	// GetConnectorDefinition method receives a
	// GetConnectorDefinitionRequest message and returns a
	// GetGetConnectorDefinitionResponse message.
	GetConnectorDefinition(ctx context.Context, in *GetConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetConnectorDefinitionResponse, error)
	// ListConnectorResources method receives a
	// ListConnectorResourcesRequest message and returns a
	// ListConnectorResourcesResponse message.
	ListConnectorResources(ctx context.Context, in *ListConnectorResourcesRequest, opts ...grpc.CallOption) (*ListConnectorResourcesResponse, error)
	// LookUpConnectorResource method receives a
	// LookUpConnectorResourceRequest message and returns a
	// LookUpConnectorResourceResponse
	LookUpConnectorResource(ctx context.Context, in *LookUpConnectorResourceRequest, opts ...grpc.CallOption) (*LookUpConnectorResourceResponse, error)
	// CreateUserConnectorResource method receives a
	// CreateUserConnectorResourceRequest message and returns a
	// CreateUserConnectorResourceResponse message.
	CreateUserConnectorResource(ctx context.Context, in *CreateUserConnectorResourceRequest, opts ...grpc.CallOption) (*CreateUserConnectorResourceResponse, error)
	// ListUserConnectorResources method receives a
	// ListUserConnectorResourcesRequest message and returns a
	// ListUserConnectorResourcesResponse message.
	ListUserConnectorResources(ctx context.Context, in *ListUserConnectorResourcesRequest, opts ...grpc.CallOption) (*ListUserConnectorResourcesResponse, error)
	// GetUserConnectorResource method receives a GetUserConnectorResourceRequest
	// message and returns a GetUserConnectorResourceResponse message.
	GetUserConnectorResource(ctx context.Context, in *GetUserConnectorResourceRequest, opts ...grpc.CallOption) (*GetUserConnectorResourceResponse, error)
	// UpdateUserConnectorResource method receives a
	// UpdateUserConnectorResourceRequest message and returns a
	// UpdateUserConnectorResourceResponse message.
	UpdateUserConnectorResource(ctx context.Context, in *UpdateUserConnectorResourceRequest, opts ...grpc.CallOption) (*UpdateUserConnectorResourceResponse, error)
	// DeleteUserConnectorResource method receives a
	// DeleteUserConnectorResourceRequest message and returns a
	// DeleteUserConnectorResourceResponse message.
	DeleteUserConnectorResource(ctx context.Context, in *DeleteUserConnectorResourceRequest, opts ...grpc.CallOption) (*DeleteUserConnectorResourceResponse, error)
	// Connect a connector resource.
	// The "state" of the connector resource after connecting is "CONNECTED".
	// ConnectUserConnectorResource can be called on ConnectorResource in the
	// state `DISCONNECTED`; ConnectorResource in a different state (including
	// `CONNECTED`) returns an error.
	ConnectUserConnectorResource(ctx context.Context, in *ConnectUserConnectorResourceRequest, opts ...grpc.CallOption) (*ConnectUserConnectorResourceResponse, error)
	// Disconnect a connectorResource.
	// The "state" of the connectorResource after disconnecting is "DISCONNECTED".
	// DisconnectUserConnectorResource can be called on ConnectorResource in the
	// state `CONNECTED`; ConnectorResource in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectUserConnectorResource(ctx context.Context, in *DisconnectUserConnectorResourceRequest, opts ...grpc.CallOption) (*DisconnectUserConnectorResourceResponse, error)
	// RenameUserConnectorResource method receives a
	// RenameUserConnectorResourceRequest message and returns a
	// RenameUserConnectorResourceResponse message.
	RenameUserConnectorResource(ctx context.Context, in *RenameUserConnectorResourceRequest, opts ...grpc.CallOption) (*RenameUserConnectorResourceResponse, error)
	// ExecuteUserConnectorResource method receives a
	// ExecuteUserConnectorResourceRequest message and returns a
	// ExecuteUserConnectorResourceResponse message.
	ExecuteUserConnectorResource(ctx context.Context, in *ExecuteUserConnectorResourceRequest, opts ...grpc.CallOption) (*ExecuteUserConnectorResourceResponse, error)
	// WatchUserConnectorResource method receives a
	// WatchUserConnectorResourceRequest message and returns a
	// WatchUserConnectorResourceResponse
	WatchUserConnectorResource(ctx context.Context, in *WatchUserConnectorResourceRequest, opts ...grpc.CallOption) (*WatchUserConnectorResourceResponse, error)
	// TestUserConnectorResource method receives a TestUserConnectorResourceRequest
	// message and returns a TestUserConnectorResourceResponse
	TestUserConnectorResource(ctx context.Context, in *TestUserConnectorResourceRequest, opts ...grpc.CallOption) (*TestUserConnectorResourceResponse, error)
}

type connectorPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorPublicServiceClient(cc grpc.ClientConnInterface) ConnectorPublicServiceClient {
	return &connectorPublicServiceClient{cc}
}

func (c *connectorPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_Liveness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_Readiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ListConnectorDefinitions(ctx context.Context, in *ListConnectorDefinitionsRequest, opts ...grpc.CallOption) (*ListConnectorDefinitionsResponse, error) {
	out := new(ListConnectorDefinitionsResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_ListConnectorDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) GetConnectorDefinition(ctx context.Context, in *GetConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetConnectorDefinitionResponse, error) {
	out := new(GetConnectorDefinitionResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_GetConnectorDefinition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ListConnectorResources(ctx context.Context, in *ListConnectorResourcesRequest, opts ...grpc.CallOption) (*ListConnectorResourcesResponse, error) {
	out := new(ListConnectorResourcesResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_ListConnectorResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) LookUpConnectorResource(ctx context.Context, in *LookUpConnectorResourceRequest, opts ...grpc.CallOption) (*LookUpConnectorResourceResponse, error) {
	out := new(LookUpConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_LookUpConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) CreateUserConnectorResource(ctx context.Context, in *CreateUserConnectorResourceRequest, opts ...grpc.CallOption) (*CreateUserConnectorResourceResponse, error) {
	out := new(CreateUserConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_CreateUserConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ListUserConnectorResources(ctx context.Context, in *ListUserConnectorResourcesRequest, opts ...grpc.CallOption) (*ListUserConnectorResourcesResponse, error) {
	out := new(ListUserConnectorResourcesResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_ListUserConnectorResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) GetUserConnectorResource(ctx context.Context, in *GetUserConnectorResourceRequest, opts ...grpc.CallOption) (*GetUserConnectorResourceResponse, error) {
	out := new(GetUserConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_GetUserConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) UpdateUserConnectorResource(ctx context.Context, in *UpdateUserConnectorResourceRequest, opts ...grpc.CallOption) (*UpdateUserConnectorResourceResponse, error) {
	out := new(UpdateUserConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_UpdateUserConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) DeleteUserConnectorResource(ctx context.Context, in *DeleteUserConnectorResourceRequest, opts ...grpc.CallOption) (*DeleteUserConnectorResourceResponse, error) {
	out := new(DeleteUserConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_DeleteUserConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ConnectUserConnectorResource(ctx context.Context, in *ConnectUserConnectorResourceRequest, opts ...grpc.CallOption) (*ConnectUserConnectorResourceResponse, error) {
	out := new(ConnectUserConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_ConnectUserConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) DisconnectUserConnectorResource(ctx context.Context, in *DisconnectUserConnectorResourceRequest, opts ...grpc.CallOption) (*DisconnectUserConnectorResourceResponse, error) {
	out := new(DisconnectUserConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_DisconnectUserConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) RenameUserConnectorResource(ctx context.Context, in *RenameUserConnectorResourceRequest, opts ...grpc.CallOption) (*RenameUserConnectorResourceResponse, error) {
	out := new(RenameUserConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_RenameUserConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) ExecuteUserConnectorResource(ctx context.Context, in *ExecuteUserConnectorResourceRequest, opts ...grpc.CallOption) (*ExecuteUserConnectorResourceResponse, error) {
	out := new(ExecuteUserConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_ExecuteUserConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) WatchUserConnectorResource(ctx context.Context, in *WatchUserConnectorResourceRequest, opts ...grpc.CallOption) (*WatchUserConnectorResourceResponse, error) {
	out := new(WatchUserConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_WatchUserConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPublicServiceClient) TestUserConnectorResource(ctx context.Context, in *TestUserConnectorResourceRequest, opts ...grpc.CallOption) (*TestUserConnectorResourceResponse, error) {
	out := new(TestUserConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPublicService_TestUserConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorPublicServiceServer is the server API for ConnectorPublicService service.
// All implementations should embed UnimplementedConnectorPublicServiceServer
// for forward compatibility
type ConnectorPublicServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// ListConnectorDefinitions method receives a
	// ListConnectorDefinitionsRequest message and returns a
	// ListConnectorDefinitionsResponse message.
	ListConnectorDefinitions(context.Context, *ListConnectorDefinitionsRequest) (*ListConnectorDefinitionsResponse, error)
	// GetConnectorDefinition method receives a
	// GetConnectorDefinitionRequest message and returns a
	// GetGetConnectorDefinitionResponse message.
	GetConnectorDefinition(context.Context, *GetConnectorDefinitionRequest) (*GetConnectorDefinitionResponse, error)
	// ListConnectorResources method receives a
	// ListConnectorResourcesRequest message and returns a
	// ListConnectorResourcesResponse message.
	ListConnectorResources(context.Context, *ListConnectorResourcesRequest) (*ListConnectorResourcesResponse, error)
	// LookUpConnectorResource method receives a
	// LookUpConnectorResourceRequest message and returns a
	// LookUpConnectorResourceResponse
	LookUpConnectorResource(context.Context, *LookUpConnectorResourceRequest) (*LookUpConnectorResourceResponse, error)
	// CreateUserConnectorResource method receives a
	// CreateUserConnectorResourceRequest message and returns a
	// CreateUserConnectorResourceResponse message.
	CreateUserConnectorResource(context.Context, *CreateUserConnectorResourceRequest) (*CreateUserConnectorResourceResponse, error)
	// ListUserConnectorResources method receives a
	// ListUserConnectorResourcesRequest message and returns a
	// ListUserConnectorResourcesResponse message.
	ListUserConnectorResources(context.Context, *ListUserConnectorResourcesRequest) (*ListUserConnectorResourcesResponse, error)
	// GetUserConnectorResource method receives a GetUserConnectorResourceRequest
	// message and returns a GetUserConnectorResourceResponse message.
	GetUserConnectorResource(context.Context, *GetUserConnectorResourceRequest) (*GetUserConnectorResourceResponse, error)
	// UpdateUserConnectorResource method receives a
	// UpdateUserConnectorResourceRequest message and returns a
	// UpdateUserConnectorResourceResponse message.
	UpdateUserConnectorResource(context.Context, *UpdateUserConnectorResourceRequest) (*UpdateUserConnectorResourceResponse, error)
	// DeleteUserConnectorResource method receives a
	// DeleteUserConnectorResourceRequest message and returns a
	// DeleteUserConnectorResourceResponse message.
	DeleteUserConnectorResource(context.Context, *DeleteUserConnectorResourceRequest) (*DeleteUserConnectorResourceResponse, error)
	// Connect a connector resource.
	// The "state" of the connector resource after connecting is "CONNECTED".
	// ConnectUserConnectorResource can be called on ConnectorResource in the
	// state `DISCONNECTED`; ConnectorResource in a different state (including
	// `CONNECTED`) returns an error.
	ConnectUserConnectorResource(context.Context, *ConnectUserConnectorResourceRequest) (*ConnectUserConnectorResourceResponse, error)
	// Disconnect a connectorResource.
	// The "state" of the connectorResource after disconnecting is "DISCONNECTED".
	// DisconnectUserConnectorResource can be called on ConnectorResource in the
	// state `CONNECTED`; ConnectorResource in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectUserConnectorResource(context.Context, *DisconnectUserConnectorResourceRequest) (*DisconnectUserConnectorResourceResponse, error)
	// RenameUserConnectorResource method receives a
	// RenameUserConnectorResourceRequest message and returns a
	// RenameUserConnectorResourceResponse message.
	RenameUserConnectorResource(context.Context, *RenameUserConnectorResourceRequest) (*RenameUserConnectorResourceResponse, error)
	// ExecuteUserConnectorResource method receives a
	// ExecuteUserConnectorResourceRequest message and returns a
	// ExecuteUserConnectorResourceResponse message.
	ExecuteUserConnectorResource(context.Context, *ExecuteUserConnectorResourceRequest) (*ExecuteUserConnectorResourceResponse, error)
	// WatchUserConnectorResource method receives a
	// WatchUserConnectorResourceRequest message and returns a
	// WatchUserConnectorResourceResponse
	WatchUserConnectorResource(context.Context, *WatchUserConnectorResourceRequest) (*WatchUserConnectorResourceResponse, error)
	// TestUserConnectorResource method receives a TestUserConnectorResourceRequest
	// message and returns a TestUserConnectorResourceResponse
	TestUserConnectorResource(context.Context, *TestUserConnectorResourceRequest) (*TestUserConnectorResourceResponse, error)
}

// UnimplementedConnectorPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConnectorPublicServiceServer struct {
}

func (UnimplementedConnectorPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedConnectorPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ListConnectorDefinitions(context.Context, *ListConnectorDefinitionsRequest) (*ListConnectorDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectorDefinitions not implemented")
}
func (UnimplementedConnectorPublicServiceServer) GetConnectorDefinition(context.Context, *GetConnectorDefinitionRequest) (*GetConnectorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectorDefinition not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ListConnectorResources(context.Context, *ListConnectorResourcesRequest) (*ListConnectorResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectorResources not implemented")
}
func (UnimplementedConnectorPublicServiceServer) LookUpConnectorResource(context.Context, *LookUpConnectorResourceRequest) (*LookUpConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) CreateUserConnectorResource(context.Context, *CreateUserConnectorResourceRequest) (*CreateUserConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ListUserConnectorResources(context.Context, *ListUserConnectorResourcesRequest) (*ListUserConnectorResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserConnectorResources not implemented")
}
func (UnimplementedConnectorPublicServiceServer) GetUserConnectorResource(context.Context, *GetUserConnectorResourceRequest) (*GetUserConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) UpdateUserConnectorResource(context.Context, *UpdateUserConnectorResourceRequest) (*UpdateUserConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) DeleteUserConnectorResource(context.Context, *DeleteUserConnectorResourceRequest) (*DeleteUserConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ConnectUserConnectorResource(context.Context, *ConnectUserConnectorResourceRequest) (*ConnectUserConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectUserConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) DisconnectUserConnectorResource(context.Context, *DisconnectUserConnectorResourceRequest) (*DisconnectUserConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectUserConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) RenameUserConnectorResource(context.Context, *RenameUserConnectorResourceRequest) (*RenameUserConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameUserConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) ExecuteUserConnectorResource(context.Context, *ExecuteUserConnectorResourceRequest) (*ExecuteUserConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteUserConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) WatchUserConnectorResource(context.Context, *WatchUserConnectorResourceRequest) (*WatchUserConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchUserConnectorResource not implemented")
}
func (UnimplementedConnectorPublicServiceServer) TestUserConnectorResource(context.Context, *TestUserConnectorResourceRequest) (*TestUserConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUserConnectorResource not implemented")
}

// UnsafeConnectorPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorPublicServiceServer will
// result in compilation errors.
type UnsafeConnectorPublicServiceServer interface {
	mustEmbedUnimplementedConnectorPublicServiceServer()
}

func RegisterConnectorPublicServiceServer(s grpc.ServiceRegistrar, srv ConnectorPublicServiceServer) {
	s.RegisterService(&ConnectorPublicService_ServiceDesc, srv)
}

func _ConnectorPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ListConnectorDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ListConnectorDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_ListConnectorDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ListConnectorDefinitions(ctx, req.(*ListConnectorDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_GetConnectorDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).GetConnectorDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_GetConnectorDefinition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).GetConnectorDefinition(ctx, req.(*GetConnectorDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ListConnectorResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ListConnectorResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_ListConnectorResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ListConnectorResources(ctx, req.(*ListConnectorResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_LookUpConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).LookUpConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_LookUpConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).LookUpConnectorResource(ctx, req.(*LookUpConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_CreateUserConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).CreateUserConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_CreateUserConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).CreateUserConnectorResource(ctx, req.(*CreateUserConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ListUserConnectorResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserConnectorResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ListUserConnectorResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_ListUserConnectorResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ListUserConnectorResources(ctx, req.(*ListUserConnectorResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_GetUserConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).GetUserConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_GetUserConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).GetUserConnectorResource(ctx, req.(*GetUserConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_UpdateUserConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).UpdateUserConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_UpdateUserConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).UpdateUserConnectorResource(ctx, req.(*UpdateUserConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_DeleteUserConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).DeleteUserConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_DeleteUserConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).DeleteUserConnectorResource(ctx, req.(*DeleteUserConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ConnectUserConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectUserConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ConnectUserConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_ConnectUserConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ConnectUserConnectorResource(ctx, req.(*ConnectUserConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_DisconnectUserConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectUserConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).DisconnectUserConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_DisconnectUserConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).DisconnectUserConnectorResource(ctx, req.(*DisconnectUserConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_RenameUserConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameUserConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).RenameUserConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_RenameUserConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).RenameUserConnectorResource(ctx, req.(*RenameUserConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_ExecuteUserConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteUserConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).ExecuteUserConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_ExecuteUserConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).ExecuteUserConnectorResource(ctx, req.(*ExecuteUserConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_WatchUserConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchUserConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).WatchUserConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_WatchUserConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).WatchUserConnectorResource(ctx, req.(*WatchUserConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPublicService_TestUserConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestUserConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPublicServiceServer).TestUserConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPublicService_TestUserConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPublicServiceServer).TestUserConnectorResource(ctx, req.(*TestUserConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorPublicService_ServiceDesc is the grpc.ServiceDesc for ConnectorPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.connector.v1alpha.ConnectorPublicService",
	HandlerType: (*ConnectorPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _ConnectorPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _ConnectorPublicService_Readiness_Handler,
		},
		{
			MethodName: "ListConnectorDefinitions",
			Handler:    _ConnectorPublicService_ListConnectorDefinitions_Handler,
		},
		{
			MethodName: "GetConnectorDefinition",
			Handler:    _ConnectorPublicService_GetConnectorDefinition_Handler,
		},
		{
			MethodName: "ListConnectorResources",
			Handler:    _ConnectorPublicService_ListConnectorResources_Handler,
		},
		{
			MethodName: "LookUpConnectorResource",
			Handler:    _ConnectorPublicService_LookUpConnectorResource_Handler,
		},
		{
			MethodName: "CreateUserConnectorResource",
			Handler:    _ConnectorPublicService_CreateUserConnectorResource_Handler,
		},
		{
			MethodName: "ListUserConnectorResources",
			Handler:    _ConnectorPublicService_ListUserConnectorResources_Handler,
		},
		{
			MethodName: "GetUserConnectorResource",
			Handler:    _ConnectorPublicService_GetUserConnectorResource_Handler,
		},
		{
			MethodName: "UpdateUserConnectorResource",
			Handler:    _ConnectorPublicService_UpdateUserConnectorResource_Handler,
		},
		{
			MethodName: "DeleteUserConnectorResource",
			Handler:    _ConnectorPublicService_DeleteUserConnectorResource_Handler,
		},
		{
			MethodName: "ConnectUserConnectorResource",
			Handler:    _ConnectorPublicService_ConnectUserConnectorResource_Handler,
		},
		{
			MethodName: "DisconnectUserConnectorResource",
			Handler:    _ConnectorPublicService_DisconnectUserConnectorResource_Handler,
		},
		{
			MethodName: "RenameUserConnectorResource",
			Handler:    _ConnectorPublicService_RenameUserConnectorResource_Handler,
		},
		{
			MethodName: "ExecuteUserConnectorResource",
			Handler:    _ConnectorPublicService_ExecuteUserConnectorResource_Handler,
		},
		{
			MethodName: "WatchUserConnectorResource",
			Handler:    _ConnectorPublicService_WatchUserConnectorResource_Handler,
		},
		{
			MethodName: "TestUserConnectorResource",
			Handler:    _ConnectorPublicService_TestUserConnectorResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vdp/connector/v1alpha/connector_public_service.proto",
}
