// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package connectorv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectorServiceClient is the client API for ConnectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// ListSourceConnectorDefinition method receives a
	// ListSourceConnectorDefinitionRequest message and returns a
	// ListSourceConnectorDefinitionResponse message.
	ListSourceConnectorDefinition(ctx context.Context, in *ListSourceConnectorDefinitionRequest, opts ...grpc.CallOption) (*ListSourceConnectorDefinitionResponse, error)
	// GetSourceConnectorDefinition method receives a
	// GetSourceConnectorDefinitionRequest message and returns a
	// GetGetSourceConnectorDefinitionResponse message.
	GetSourceConnectorDefinition(ctx context.Context, in *GetSourceConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetSourceConnectorDefinitionResponse, error)
	// ListDestinationConnectorDefinition method receives a
	// ListDestinationConnectorDefinitionRequest message and returns a
	// ListDestinationConnectorDefinitionResponse message.
	ListDestinationConnectorDefinition(ctx context.Context, in *ListDestinationConnectorDefinitionRequest, opts ...grpc.CallOption) (*ListDestinationConnectorDefinitionResponse, error)
	// GetDestinationConnectorDefinition method receives a
	// GetDestinationConnectorDefinitionRequest message and returns a
	// GetGetDestinationConnectorDefinitionResponse message.
	GetDestinationConnectorDefinition(ctx context.Context, in *GetDestinationConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetDestinationConnectorDefinitionResponse, error)
	// CreateSourceConnector method receives a CreateSourceConnectorRequest
	// message and returns a CreateSourceConnectorResponse message.
	CreateSourceConnector(ctx context.Context, in *CreateSourceConnectorRequest, opts ...grpc.CallOption) (*CreateSourceConnectorResponse, error)
	// ListSourceConnector method receives a ListSourceConnectorRequest message
	// and returns a ListSourceConnectorResponse message.
	ListSourceConnector(ctx context.Context, in *ListSourceConnectorRequest, opts ...grpc.CallOption) (*ListSourceConnectorResponse, error)
	// GetSourceConnector method receives a GetSourceConnectorRequest message and
	// returns a GetSourceConnectorResponse message.
	GetSourceConnector(ctx context.Context, in *GetSourceConnectorRequest, opts ...grpc.CallOption) (*GetSourceConnectorResponse, error)
	// UpdateSourceConnector method receives a UpdateSourceConnectorRequest
	// message and returns a UpdateSourceConnectorResponse message.
	UpdateSourceConnector(ctx context.Context, in *UpdateSourceConnectorRequest, opts ...grpc.CallOption) (*UpdateSourceConnectorResponse, error)
	// DeleteSourceConnector method receives a DeleteSourceConnectorRequest
	// message and returns a DeleteSourceConnectorResponse message.
	DeleteSourceConnector(ctx context.Context, in *DeleteSourceConnectorRequest, opts ...grpc.CallOption) (*DeleteSourceConnectorResponse, error)
	// LookUpSourceConnector method receives a LookUpSourceConnectorRequest
	// message and returns a LookUpSourceConnectorResponse
	LookUpSourceConnector(ctx context.Context, in *LookUpSourceConnectorRequest, opts ...grpc.CallOption) (*LookUpSourceConnectorResponse, error)
	// Connect a source connector.
	// The "state" of the connector after connecting is "CONNECTED".
	// ConnectSourceConnector can be called on SourceConnector in the state
	// `DISCONNECTED`; SourceConnector in a different state (including
	// `CONNECTED`) returns an error.
	ConnectSourceConnector(ctx context.Context, in *ConnectSourceConnectorRequest, opts ...grpc.CallOption) (*ConnectSourceConnectorResponse, error)
	// Disconnect a source connector.
	// The "state" of the connector after disconnecting is "DISCONNECTED".
	// DisconnectSourceConnector can be called on SourceConnector in the state
	// `CONNECTED`; SourceConnector in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectSourceConnector(ctx context.Context, in *DisconnectSourceConnectorRequest, opts ...grpc.CallOption) (*DisconnectSourceConnectorResponse, error)
	// RenameDestinationConnector method receives a RenameSourceConnectorRequest
	// message and returns a RenameSourceConnectorResponse message.
	RenameSourceConnector(ctx context.Context, in *RenameSourceConnectorRequest, opts ...grpc.CallOption) (*RenameSourceConnectorResponse, error)
	// CreateDestinationConnector method receives a
	// CreateDestinationConnectorRequest message and returns a
	// CreateDestinationConnectorResponse message.
	CreateDestinationConnector(ctx context.Context, in *CreateDestinationConnectorRequest, opts ...grpc.CallOption) (*CreateDestinationConnectorResponse, error)
	// ListDestinationConnector method receives a ListDestinationConnectorRequest
	// message and returns a ListDestinationConnectorResponse message.
	ListDestinationConnector(ctx context.Context, in *ListDestinationConnectorRequest, opts ...grpc.CallOption) (*ListDestinationConnectorResponse, error)
	// GetDestinationConnector method receives a GetDestinationConnectorRequest
	// message and returns a GetDestinationConnectorResponse message.
	GetDestinationConnector(ctx context.Context, in *GetDestinationConnectorRequest, opts ...grpc.CallOption) (*GetDestinationConnectorResponse, error)
	// UpdateDestinationConnector method receives a
	// UpdateDestinationConnectorRequest message and returns a
	// UpdateDestinationConnectorResponse message.
	UpdateDestinationConnector(ctx context.Context, in *UpdateDestinationConnectorRequest, opts ...grpc.CallOption) (*UpdateDestinationConnectorResponse, error)
	// DeleteDestinationConnector method receives a
	// DeleteDestinationConnectorRequest message and returns a
	// DeleteDestinationConnectorResponse message.
	DeleteDestinationConnector(ctx context.Context, in *DeleteDestinationConnectorRequest, opts ...grpc.CallOption) (*DeleteDestinationConnectorResponse, error)
	// LookUpDestinationConnector method receives a
	// LookUpDestinationConnectorRequest message and returns a
	// LookUpDestinationConnectorResponse
	LookUpDestinationConnector(ctx context.Context, in *LookUpDestinationConnectorRequest, opts ...grpc.CallOption) (*LookUpDestinationConnectorResponse, error)
	// Connect a destination connector.
	// The "state" of the connector after connecting is "CONNECTED".
	// ConnectDestinationConnector can be called on DestinationConnector in the
	// state `DISCONNECTED`; DestinationConnector in a different state (including
	// `CONNECTED`) returns an error.
	ConnectDestinationConnector(ctx context.Context, in *ConnectDestinationConnectorRequest, opts ...grpc.CallOption) (*ConnectDestinationConnectorResponse, error)
	// Disconnect a destination connector.
	// The "state" of the connector after disconnecting is "DISCONNECTED".
	// DisconnectDestinationConnector can be called on DestinationConnector in the
	// state `CONNECTED`; DestinationConnector in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectDestinationConnector(ctx context.Context, in *DisconnectDestinationConnectorRequest, opts ...grpc.CallOption) (*DisconnectDestinationConnectorResponse, error)
	// RenameDestinationConnector method receives a
	// RenameDestinationConnectorRequest message and returns a
	// RenameDestinationConnectorResponse message.
	RenameDestinationConnector(ctx context.Context, in *RenameDestinationConnectorRequest, opts ...grpc.CallOption) (*RenameDestinationConnectorResponse, error)
}

type connectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorServiceClient(cc grpc.ClientConnInterface) ConnectorServiceClient {
	return &connectorServiceClient{cc}
}

func (c *connectorServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/Liveness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/Readiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) ListSourceConnectorDefinition(ctx context.Context, in *ListSourceConnectorDefinitionRequest, opts ...grpc.CallOption) (*ListSourceConnectorDefinitionResponse, error) {
	out := new(ListSourceConnectorDefinitionResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/ListSourceConnectorDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) GetSourceConnectorDefinition(ctx context.Context, in *GetSourceConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetSourceConnectorDefinitionResponse, error) {
	out := new(GetSourceConnectorDefinitionResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/GetSourceConnectorDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) ListDestinationConnectorDefinition(ctx context.Context, in *ListDestinationConnectorDefinitionRequest, opts ...grpc.CallOption) (*ListDestinationConnectorDefinitionResponse, error) {
	out := new(ListDestinationConnectorDefinitionResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/ListDestinationConnectorDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) GetDestinationConnectorDefinition(ctx context.Context, in *GetDestinationConnectorDefinitionRequest, opts ...grpc.CallOption) (*GetDestinationConnectorDefinitionResponse, error) {
	out := new(GetDestinationConnectorDefinitionResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/GetDestinationConnectorDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) CreateSourceConnector(ctx context.Context, in *CreateSourceConnectorRequest, opts ...grpc.CallOption) (*CreateSourceConnectorResponse, error) {
	out := new(CreateSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/CreateSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) ListSourceConnector(ctx context.Context, in *ListSourceConnectorRequest, opts ...grpc.CallOption) (*ListSourceConnectorResponse, error) {
	out := new(ListSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/ListSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) GetSourceConnector(ctx context.Context, in *GetSourceConnectorRequest, opts ...grpc.CallOption) (*GetSourceConnectorResponse, error) {
	out := new(GetSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/GetSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) UpdateSourceConnector(ctx context.Context, in *UpdateSourceConnectorRequest, opts ...grpc.CallOption) (*UpdateSourceConnectorResponse, error) {
	out := new(UpdateSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/UpdateSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) DeleteSourceConnector(ctx context.Context, in *DeleteSourceConnectorRequest, opts ...grpc.CallOption) (*DeleteSourceConnectorResponse, error) {
	out := new(DeleteSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/DeleteSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) LookUpSourceConnector(ctx context.Context, in *LookUpSourceConnectorRequest, opts ...grpc.CallOption) (*LookUpSourceConnectorResponse, error) {
	out := new(LookUpSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/LookUpSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) ConnectSourceConnector(ctx context.Context, in *ConnectSourceConnectorRequest, opts ...grpc.CallOption) (*ConnectSourceConnectorResponse, error) {
	out := new(ConnectSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/ConnectSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) DisconnectSourceConnector(ctx context.Context, in *DisconnectSourceConnectorRequest, opts ...grpc.CallOption) (*DisconnectSourceConnectorResponse, error) {
	out := new(DisconnectSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/DisconnectSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) RenameSourceConnector(ctx context.Context, in *RenameSourceConnectorRequest, opts ...grpc.CallOption) (*RenameSourceConnectorResponse, error) {
	out := new(RenameSourceConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/RenameSourceConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) CreateDestinationConnector(ctx context.Context, in *CreateDestinationConnectorRequest, opts ...grpc.CallOption) (*CreateDestinationConnectorResponse, error) {
	out := new(CreateDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/CreateDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) ListDestinationConnector(ctx context.Context, in *ListDestinationConnectorRequest, opts ...grpc.CallOption) (*ListDestinationConnectorResponse, error) {
	out := new(ListDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/ListDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) GetDestinationConnector(ctx context.Context, in *GetDestinationConnectorRequest, opts ...grpc.CallOption) (*GetDestinationConnectorResponse, error) {
	out := new(GetDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/GetDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) UpdateDestinationConnector(ctx context.Context, in *UpdateDestinationConnectorRequest, opts ...grpc.CallOption) (*UpdateDestinationConnectorResponse, error) {
	out := new(UpdateDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/UpdateDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) DeleteDestinationConnector(ctx context.Context, in *DeleteDestinationConnectorRequest, opts ...grpc.CallOption) (*DeleteDestinationConnectorResponse, error) {
	out := new(DeleteDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/DeleteDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) LookUpDestinationConnector(ctx context.Context, in *LookUpDestinationConnectorRequest, opts ...grpc.CallOption) (*LookUpDestinationConnectorResponse, error) {
	out := new(LookUpDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/LookUpDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) ConnectDestinationConnector(ctx context.Context, in *ConnectDestinationConnectorRequest, opts ...grpc.CallOption) (*ConnectDestinationConnectorResponse, error) {
	out := new(ConnectDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/ConnectDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) DisconnectDestinationConnector(ctx context.Context, in *DisconnectDestinationConnectorRequest, opts ...grpc.CallOption) (*DisconnectDestinationConnectorResponse, error) {
	out := new(DisconnectDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/DisconnectDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) RenameDestinationConnector(ctx context.Context, in *RenameDestinationConnectorRequest, opts ...grpc.CallOption) (*RenameDestinationConnectorResponse, error) {
	out := new(RenameDestinationConnectorResponse)
	err := c.cc.Invoke(ctx, "/vdp.connector.v1alpha.ConnectorService/RenameDestinationConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorServiceServer is the server API for ConnectorService service.
// All implementations should embed UnimplementedConnectorServiceServer
// for forward compatibility
type ConnectorServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// ListSourceConnectorDefinition method receives a
	// ListSourceConnectorDefinitionRequest message and returns a
	// ListSourceConnectorDefinitionResponse message.
	ListSourceConnectorDefinition(context.Context, *ListSourceConnectorDefinitionRequest) (*ListSourceConnectorDefinitionResponse, error)
	// GetSourceConnectorDefinition method receives a
	// GetSourceConnectorDefinitionRequest message and returns a
	// GetGetSourceConnectorDefinitionResponse message.
	GetSourceConnectorDefinition(context.Context, *GetSourceConnectorDefinitionRequest) (*GetSourceConnectorDefinitionResponse, error)
	// ListDestinationConnectorDefinition method receives a
	// ListDestinationConnectorDefinitionRequest message and returns a
	// ListDestinationConnectorDefinitionResponse message.
	ListDestinationConnectorDefinition(context.Context, *ListDestinationConnectorDefinitionRequest) (*ListDestinationConnectorDefinitionResponse, error)
	// GetDestinationConnectorDefinition method receives a
	// GetDestinationConnectorDefinitionRequest message and returns a
	// GetGetDestinationConnectorDefinitionResponse message.
	GetDestinationConnectorDefinition(context.Context, *GetDestinationConnectorDefinitionRequest) (*GetDestinationConnectorDefinitionResponse, error)
	// CreateSourceConnector method receives a CreateSourceConnectorRequest
	// message and returns a CreateSourceConnectorResponse message.
	CreateSourceConnector(context.Context, *CreateSourceConnectorRequest) (*CreateSourceConnectorResponse, error)
	// ListSourceConnector method receives a ListSourceConnectorRequest message
	// and returns a ListSourceConnectorResponse message.
	ListSourceConnector(context.Context, *ListSourceConnectorRequest) (*ListSourceConnectorResponse, error)
	// GetSourceConnector method receives a GetSourceConnectorRequest message and
	// returns a GetSourceConnectorResponse message.
	GetSourceConnector(context.Context, *GetSourceConnectorRequest) (*GetSourceConnectorResponse, error)
	// UpdateSourceConnector method receives a UpdateSourceConnectorRequest
	// message and returns a UpdateSourceConnectorResponse message.
	UpdateSourceConnector(context.Context, *UpdateSourceConnectorRequest) (*UpdateSourceConnectorResponse, error)
	// DeleteSourceConnector method receives a DeleteSourceConnectorRequest
	// message and returns a DeleteSourceConnectorResponse message.
	DeleteSourceConnector(context.Context, *DeleteSourceConnectorRequest) (*DeleteSourceConnectorResponse, error)
	// LookUpSourceConnector method receives a LookUpSourceConnectorRequest
	// message and returns a LookUpSourceConnectorResponse
	LookUpSourceConnector(context.Context, *LookUpSourceConnectorRequest) (*LookUpSourceConnectorResponse, error)
	// Connect a source connector.
	// The "state" of the connector after connecting is "CONNECTED".
	// ConnectSourceConnector can be called on SourceConnector in the state
	// `DISCONNECTED`; SourceConnector in a different state (including
	// `CONNECTED`) returns an error.
	ConnectSourceConnector(context.Context, *ConnectSourceConnectorRequest) (*ConnectSourceConnectorResponse, error)
	// Disconnect a source connector.
	// The "state" of the connector after disconnecting is "DISCONNECTED".
	// DisconnectSourceConnector can be called on SourceConnector in the state
	// `CONNECTED`; SourceConnector in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectSourceConnector(context.Context, *DisconnectSourceConnectorRequest) (*DisconnectSourceConnectorResponse, error)
	// RenameDestinationConnector method receives a RenameSourceConnectorRequest
	// message and returns a RenameSourceConnectorResponse message.
	RenameSourceConnector(context.Context, *RenameSourceConnectorRequest) (*RenameSourceConnectorResponse, error)
	// CreateDestinationConnector method receives a
	// CreateDestinationConnectorRequest message and returns a
	// CreateDestinationConnectorResponse message.
	CreateDestinationConnector(context.Context, *CreateDestinationConnectorRequest) (*CreateDestinationConnectorResponse, error)
	// ListDestinationConnector method receives a ListDestinationConnectorRequest
	// message and returns a ListDestinationConnectorResponse message.
	ListDestinationConnector(context.Context, *ListDestinationConnectorRequest) (*ListDestinationConnectorResponse, error)
	// GetDestinationConnector method receives a GetDestinationConnectorRequest
	// message and returns a GetDestinationConnectorResponse message.
	GetDestinationConnector(context.Context, *GetDestinationConnectorRequest) (*GetDestinationConnectorResponse, error)
	// UpdateDestinationConnector method receives a
	// UpdateDestinationConnectorRequest message and returns a
	// UpdateDestinationConnectorResponse message.
	UpdateDestinationConnector(context.Context, *UpdateDestinationConnectorRequest) (*UpdateDestinationConnectorResponse, error)
	// DeleteDestinationConnector method receives a
	// DeleteDestinationConnectorRequest message and returns a
	// DeleteDestinationConnectorResponse message.
	DeleteDestinationConnector(context.Context, *DeleteDestinationConnectorRequest) (*DeleteDestinationConnectorResponse, error)
	// LookUpDestinationConnector method receives a
	// LookUpDestinationConnectorRequest message and returns a
	// LookUpDestinationConnectorResponse
	LookUpDestinationConnector(context.Context, *LookUpDestinationConnectorRequest) (*LookUpDestinationConnectorResponse, error)
	// Connect a destination connector.
	// The "state" of the connector after connecting is "CONNECTED".
	// ConnectDestinationConnector can be called on DestinationConnector in the
	// state `DISCONNECTED`; DestinationConnector in a different state (including
	// `CONNECTED`) returns an error.
	ConnectDestinationConnector(context.Context, *ConnectDestinationConnectorRequest) (*ConnectDestinationConnectorResponse, error)
	// Disconnect a destination connector.
	// The "state" of the connector after disconnecting is "DISCONNECTED".
	// DisconnectDestinationConnector can be called on DestinationConnector in the
	// state `CONNECTED`; DestinationConnector in a different state (including
	// `DISCONNECTED`) returns an error.
	DisconnectDestinationConnector(context.Context, *DisconnectDestinationConnectorRequest) (*DisconnectDestinationConnectorResponse, error)
	// RenameDestinationConnector method receives a
	// RenameDestinationConnectorRequest message and returns a
	// RenameDestinationConnectorResponse message.
	RenameDestinationConnector(context.Context, *RenameDestinationConnectorRequest) (*RenameDestinationConnectorResponse, error)
}

// UnimplementedConnectorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConnectorServiceServer struct {
}

func (UnimplementedConnectorServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedConnectorServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedConnectorServiceServer) ListSourceConnectorDefinition(context.Context, *ListSourceConnectorDefinitionRequest) (*ListSourceConnectorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSourceConnectorDefinition not implemented")
}
func (UnimplementedConnectorServiceServer) GetSourceConnectorDefinition(context.Context, *GetSourceConnectorDefinitionRequest) (*GetSourceConnectorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceConnectorDefinition not implemented")
}
func (UnimplementedConnectorServiceServer) ListDestinationConnectorDefinition(context.Context, *ListDestinationConnectorDefinitionRequest) (*ListDestinationConnectorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDestinationConnectorDefinition not implemented")
}
func (UnimplementedConnectorServiceServer) GetDestinationConnectorDefinition(context.Context, *GetDestinationConnectorDefinitionRequest) (*GetDestinationConnectorDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDestinationConnectorDefinition not implemented")
}
func (UnimplementedConnectorServiceServer) CreateSourceConnector(context.Context, *CreateSourceConnectorRequest) (*CreateSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSourceConnector not implemented")
}
func (UnimplementedConnectorServiceServer) ListSourceConnector(context.Context, *ListSourceConnectorRequest) (*ListSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSourceConnector not implemented")
}
func (UnimplementedConnectorServiceServer) GetSourceConnector(context.Context, *GetSourceConnectorRequest) (*GetSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceConnector not implemented")
}
func (UnimplementedConnectorServiceServer) UpdateSourceConnector(context.Context, *UpdateSourceConnectorRequest) (*UpdateSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSourceConnector not implemented")
}
func (UnimplementedConnectorServiceServer) DeleteSourceConnector(context.Context, *DeleteSourceConnectorRequest) (*DeleteSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSourceConnector not implemented")
}
func (UnimplementedConnectorServiceServer) LookUpSourceConnector(context.Context, *LookUpSourceConnectorRequest) (*LookUpSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpSourceConnector not implemented")
}
func (UnimplementedConnectorServiceServer) ConnectSourceConnector(context.Context, *ConnectSourceConnectorRequest) (*ConnectSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectSourceConnector not implemented")
}
func (UnimplementedConnectorServiceServer) DisconnectSourceConnector(context.Context, *DisconnectSourceConnectorRequest) (*DisconnectSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectSourceConnector not implemented")
}
func (UnimplementedConnectorServiceServer) RenameSourceConnector(context.Context, *RenameSourceConnectorRequest) (*RenameSourceConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameSourceConnector not implemented")
}
func (UnimplementedConnectorServiceServer) CreateDestinationConnector(context.Context, *CreateDestinationConnectorRequest) (*CreateDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDestinationConnector not implemented")
}
func (UnimplementedConnectorServiceServer) ListDestinationConnector(context.Context, *ListDestinationConnectorRequest) (*ListDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDestinationConnector not implemented")
}
func (UnimplementedConnectorServiceServer) GetDestinationConnector(context.Context, *GetDestinationConnectorRequest) (*GetDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDestinationConnector not implemented")
}
func (UnimplementedConnectorServiceServer) UpdateDestinationConnector(context.Context, *UpdateDestinationConnectorRequest) (*UpdateDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDestinationConnector not implemented")
}
func (UnimplementedConnectorServiceServer) DeleteDestinationConnector(context.Context, *DeleteDestinationConnectorRequest) (*DeleteDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDestinationConnector not implemented")
}
func (UnimplementedConnectorServiceServer) LookUpDestinationConnector(context.Context, *LookUpDestinationConnectorRequest) (*LookUpDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpDestinationConnector not implemented")
}
func (UnimplementedConnectorServiceServer) ConnectDestinationConnector(context.Context, *ConnectDestinationConnectorRequest) (*ConnectDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectDestinationConnector not implemented")
}
func (UnimplementedConnectorServiceServer) DisconnectDestinationConnector(context.Context, *DisconnectDestinationConnectorRequest) (*DisconnectDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectDestinationConnector not implemented")
}
func (UnimplementedConnectorServiceServer) RenameDestinationConnector(context.Context, *RenameDestinationConnectorRequest) (*RenameDestinationConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameDestinationConnector not implemented")
}

// UnsafeConnectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorServiceServer will
// result in compilation errors.
type UnsafeConnectorServiceServer interface {
	mustEmbedUnimplementedConnectorServiceServer()
}

func RegisterConnectorServiceServer(s grpc.ServiceRegistrar, srv ConnectorServiceServer) {
	s.RegisterService(&ConnectorService_ServiceDesc, srv)
}

func _ConnectorService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/Liveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/Readiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_ListSourceConnectorDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSourceConnectorDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).ListSourceConnectorDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/ListSourceConnectorDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).ListSourceConnectorDefinition(ctx, req.(*ListSourceConnectorDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_GetSourceConnectorDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceConnectorDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).GetSourceConnectorDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/GetSourceConnectorDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).GetSourceConnectorDefinition(ctx, req.(*GetSourceConnectorDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_ListDestinationConnectorDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDestinationConnectorDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).ListDestinationConnectorDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/ListDestinationConnectorDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).ListDestinationConnectorDefinition(ctx, req.(*ListDestinationConnectorDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_GetDestinationConnectorDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDestinationConnectorDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).GetDestinationConnectorDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/GetDestinationConnectorDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).GetDestinationConnectorDefinition(ctx, req.(*GetDestinationConnectorDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_CreateSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).CreateSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/CreateSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).CreateSourceConnector(ctx, req.(*CreateSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_ListSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).ListSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/ListSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).ListSourceConnector(ctx, req.(*ListSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_GetSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).GetSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/GetSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).GetSourceConnector(ctx, req.(*GetSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_UpdateSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).UpdateSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/UpdateSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).UpdateSourceConnector(ctx, req.(*UpdateSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_DeleteSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).DeleteSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/DeleteSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).DeleteSourceConnector(ctx, req.(*DeleteSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_LookUpSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).LookUpSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/LookUpSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).LookUpSourceConnector(ctx, req.(*LookUpSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_ConnectSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).ConnectSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/ConnectSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).ConnectSourceConnector(ctx, req.(*ConnectSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_DisconnectSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).DisconnectSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/DisconnectSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).DisconnectSourceConnector(ctx, req.(*DisconnectSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_RenameSourceConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameSourceConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).RenameSourceConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/RenameSourceConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).RenameSourceConnector(ctx, req.(*RenameSourceConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_CreateDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).CreateDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/CreateDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).CreateDestinationConnector(ctx, req.(*CreateDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_ListDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).ListDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/ListDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).ListDestinationConnector(ctx, req.(*ListDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_GetDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).GetDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/GetDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).GetDestinationConnector(ctx, req.(*GetDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_UpdateDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).UpdateDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/UpdateDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).UpdateDestinationConnector(ctx, req.(*UpdateDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_DeleteDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).DeleteDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/DeleteDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).DeleteDestinationConnector(ctx, req.(*DeleteDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_LookUpDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).LookUpDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/LookUpDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).LookUpDestinationConnector(ctx, req.(*LookUpDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_ConnectDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).ConnectDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/ConnectDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).ConnectDestinationConnector(ctx, req.(*ConnectDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_DisconnectDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).DisconnectDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/DisconnectDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).DisconnectDestinationConnector(ctx, req.(*DisconnectDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_RenameDestinationConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameDestinationConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).RenameDestinationConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.connector.v1alpha.ConnectorService/RenameDestinationConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).RenameDestinationConnector(ctx, req.(*RenameDestinationConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorService_ServiceDesc is the grpc.ServiceDesc for ConnectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.connector.v1alpha.ConnectorService",
	HandlerType: (*ConnectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _ConnectorService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _ConnectorService_Readiness_Handler,
		},
		{
			MethodName: "ListSourceConnectorDefinition",
			Handler:    _ConnectorService_ListSourceConnectorDefinition_Handler,
		},
		{
			MethodName: "GetSourceConnectorDefinition",
			Handler:    _ConnectorService_GetSourceConnectorDefinition_Handler,
		},
		{
			MethodName: "ListDestinationConnectorDefinition",
			Handler:    _ConnectorService_ListDestinationConnectorDefinition_Handler,
		},
		{
			MethodName: "GetDestinationConnectorDefinition",
			Handler:    _ConnectorService_GetDestinationConnectorDefinition_Handler,
		},
		{
			MethodName: "CreateSourceConnector",
			Handler:    _ConnectorService_CreateSourceConnector_Handler,
		},
		{
			MethodName: "ListSourceConnector",
			Handler:    _ConnectorService_ListSourceConnector_Handler,
		},
		{
			MethodName: "GetSourceConnector",
			Handler:    _ConnectorService_GetSourceConnector_Handler,
		},
		{
			MethodName: "UpdateSourceConnector",
			Handler:    _ConnectorService_UpdateSourceConnector_Handler,
		},
		{
			MethodName: "DeleteSourceConnector",
			Handler:    _ConnectorService_DeleteSourceConnector_Handler,
		},
		{
			MethodName: "LookUpSourceConnector",
			Handler:    _ConnectorService_LookUpSourceConnector_Handler,
		},
		{
			MethodName: "ConnectSourceConnector",
			Handler:    _ConnectorService_ConnectSourceConnector_Handler,
		},
		{
			MethodName: "DisconnectSourceConnector",
			Handler:    _ConnectorService_DisconnectSourceConnector_Handler,
		},
		{
			MethodName: "RenameSourceConnector",
			Handler:    _ConnectorService_RenameSourceConnector_Handler,
		},
		{
			MethodName: "CreateDestinationConnector",
			Handler:    _ConnectorService_CreateDestinationConnector_Handler,
		},
		{
			MethodName: "ListDestinationConnector",
			Handler:    _ConnectorService_ListDestinationConnector_Handler,
		},
		{
			MethodName: "GetDestinationConnector",
			Handler:    _ConnectorService_GetDestinationConnector_Handler,
		},
		{
			MethodName: "UpdateDestinationConnector",
			Handler:    _ConnectorService_UpdateDestinationConnector_Handler,
		},
		{
			MethodName: "DeleteDestinationConnector",
			Handler:    _ConnectorService_DeleteDestinationConnector_Handler,
		},
		{
			MethodName: "LookUpDestinationConnector",
			Handler:    _ConnectorService_LookUpDestinationConnector_Handler,
		},
		{
			MethodName: "ConnectDestinationConnector",
			Handler:    _ConnectorService_ConnectDestinationConnector_Handler,
		},
		{
			MethodName: "DisconnectDestinationConnector",
			Handler:    _ConnectorService_DisconnectDestinationConnector_Handler,
		},
		{
			MethodName: "RenameDestinationConnector",
			Handler:    _ConnectorService_RenameDestinationConnector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vdp/connector/v1alpha/connector_service.proto",
}
