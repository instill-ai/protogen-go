// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: vdp/connector/v1alpha/connector_private_service.proto

package connectorv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConnectorPrivateService_ListConnectorsAdmin_FullMethodName  = "/vdp.connector.v1alpha.ConnectorPrivateService/ListConnectorsAdmin"
	ConnectorPrivateService_LookUpConnectorAdmin_FullMethodName = "/vdp.connector.v1alpha.ConnectorPrivateService/LookUpConnectorAdmin"
	ConnectorPrivateService_CheckConnector_FullMethodName       = "/vdp.connector.v1alpha.ConnectorPrivateService/CheckConnector"
)

// ConnectorPrivateServiceClient is the client API for ConnectorPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorPrivateServiceClient interface {
	// ListConnectorsAdmin method receives a ListConnectorsAdminRequest
	// message and returns a ListConnectorsResponse message.
	ListConnectorsAdmin(ctx context.Context, in *ListConnectorsAdminRequest, opts ...grpc.CallOption) (*ListConnectorsAdminResponse, error)
	// LookUpConnectorAdmin method receives a
	// LookUpConnectorAdminRequest message and returns a
	// LookUpConnectorAdminResponse
	LookUpConnectorAdmin(ctx context.Context, in *LookUpConnectorAdminRequest, opts ...grpc.CallOption) (*LookUpConnectorAdminResponse, error)
	// CheckConnector method receives a CheckConnectorRequest message and returns a
	// CheckConnectorResponse
	CheckConnector(ctx context.Context, in *CheckConnectorRequest, opts ...grpc.CallOption) (*CheckConnectorResponse, error)
}

type connectorPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorPrivateServiceClient(cc grpc.ClientConnInterface) ConnectorPrivateServiceClient {
	return &connectorPrivateServiceClient{cc}
}

func (c *connectorPrivateServiceClient) ListConnectorsAdmin(ctx context.Context, in *ListConnectorsAdminRequest, opts ...grpc.CallOption) (*ListConnectorsAdminResponse, error) {
	out := new(ListConnectorsAdminResponse)
	err := c.cc.Invoke(ctx, ConnectorPrivateService_ListConnectorsAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPrivateServiceClient) LookUpConnectorAdmin(ctx context.Context, in *LookUpConnectorAdminRequest, opts ...grpc.CallOption) (*LookUpConnectorAdminResponse, error) {
	out := new(LookUpConnectorAdminResponse)
	err := c.cc.Invoke(ctx, ConnectorPrivateService_LookUpConnectorAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPrivateServiceClient) CheckConnector(ctx context.Context, in *CheckConnectorRequest, opts ...grpc.CallOption) (*CheckConnectorResponse, error) {
	out := new(CheckConnectorResponse)
	err := c.cc.Invoke(ctx, ConnectorPrivateService_CheckConnector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorPrivateServiceServer is the server API for ConnectorPrivateService service.
// All implementations should embed UnimplementedConnectorPrivateServiceServer
// for forward compatibility
type ConnectorPrivateServiceServer interface {
	// ListConnectorsAdmin method receives a ListConnectorsAdminRequest
	// message and returns a ListConnectorsResponse message.
	ListConnectorsAdmin(context.Context, *ListConnectorsAdminRequest) (*ListConnectorsAdminResponse, error)
	// LookUpConnectorAdmin method receives a
	// LookUpConnectorAdminRequest message and returns a
	// LookUpConnectorAdminResponse
	LookUpConnectorAdmin(context.Context, *LookUpConnectorAdminRequest) (*LookUpConnectorAdminResponse, error)
	// CheckConnector method receives a CheckConnectorRequest message and returns a
	// CheckConnectorResponse
	CheckConnector(context.Context, *CheckConnectorRequest) (*CheckConnectorResponse, error)
}

// UnimplementedConnectorPrivateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConnectorPrivateServiceServer struct {
}

func (UnimplementedConnectorPrivateServiceServer) ListConnectorsAdmin(context.Context, *ListConnectorsAdminRequest) (*ListConnectorsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectorsAdmin not implemented")
}
func (UnimplementedConnectorPrivateServiceServer) LookUpConnectorAdmin(context.Context, *LookUpConnectorAdminRequest) (*LookUpConnectorAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpConnectorAdmin not implemented")
}
func (UnimplementedConnectorPrivateServiceServer) CheckConnector(context.Context, *CheckConnectorRequest) (*CheckConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConnector not implemented")
}

// UnsafeConnectorPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorPrivateServiceServer will
// result in compilation errors.
type UnsafeConnectorPrivateServiceServer interface {
	mustEmbedUnimplementedConnectorPrivateServiceServer()
}

func RegisterConnectorPrivateServiceServer(s grpc.ServiceRegistrar, srv ConnectorPrivateServiceServer) {
	s.RegisterService(&ConnectorPrivateService_ServiceDesc, srv)
}

func _ConnectorPrivateService_ListConnectorsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPrivateServiceServer).ListConnectorsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPrivateService_ListConnectorsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPrivateServiceServer).ListConnectorsAdmin(ctx, req.(*ListConnectorsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPrivateService_LookUpConnectorAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpConnectorAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPrivateServiceServer).LookUpConnectorAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPrivateService_LookUpConnectorAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPrivateServiceServer).LookUpConnectorAdmin(ctx, req.(*LookUpConnectorAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPrivateService_CheckConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPrivateServiceServer).CheckConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPrivateService_CheckConnector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPrivateServiceServer).CheckConnector(ctx, req.(*CheckConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorPrivateService_ServiceDesc is the grpc.ServiceDesc for ConnectorPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.connector.v1alpha.ConnectorPrivateService",
	HandlerType: (*ConnectorPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConnectorsAdmin",
			Handler:    _ConnectorPrivateService_ListConnectorsAdmin_Handler,
		},
		{
			MethodName: "LookUpConnectorAdmin",
			Handler:    _ConnectorPrivateService_LookUpConnectorAdmin_Handler,
		},
		{
			MethodName: "CheckConnector",
			Handler:    _ConnectorPrivateService_CheckConnector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vdp/connector/v1alpha/connector_private_service.proto",
}
