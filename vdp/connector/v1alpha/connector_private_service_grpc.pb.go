// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: vdp/connector/v1alpha/connector_private_service.proto

package connectorv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConnectorPrivateService_LookUpConnectorDefinitionAdmin_FullMethodName = "/vdp.connector.v1alpha.ConnectorPrivateService/LookUpConnectorDefinitionAdmin"
	ConnectorPrivateService_ListConnectorResourcesAdmin_FullMethodName    = "/vdp.connector.v1alpha.ConnectorPrivateService/ListConnectorResourcesAdmin"
	ConnectorPrivateService_LookUpConnectorResourceAdmin_FullMethodName   = "/vdp.connector.v1alpha.ConnectorPrivateService/LookUpConnectorResourceAdmin"
	ConnectorPrivateService_CheckConnectorResource_FullMethodName         = "/vdp.connector.v1alpha.ConnectorPrivateService/CheckConnectorResource"
)

// ConnectorPrivateServiceClient is the client API for ConnectorPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorPrivateServiceClient interface {
	// LookUpConnectorDefinitionAdmin method receives a
	// LookUpConnectorDefinitionAdminRequest message and returns a
	// LookUpConnectorDefinitionAdminResponse
	LookUpConnectorDefinitionAdmin(ctx context.Context, in *LookUpConnectorDefinitionAdminRequest, opts ...grpc.CallOption) (*LookUpConnectorDefinitionAdminResponse, error)
	// ListConnectorResourcesAdmin method receives a ListConnectorResourcesAdminRequest
	// message and returns a ListConnectorResourcesResponse message.
	ListConnectorResourcesAdmin(ctx context.Context, in *ListConnectorResourcesAdminRequest, opts ...grpc.CallOption) (*ListConnectorResourcesAdminResponse, error)
	// LookUpConnectorResourceAdmin method receives a
	// LookUpConnectorResourceAdminRequest message and returns a
	// LookUpConnectorResourceAdminResponse
	LookUpConnectorResourceAdmin(ctx context.Context, in *LookUpConnectorResourceAdminRequest, opts ...grpc.CallOption) (*LookUpConnectorResourceAdminResponse, error)
	// CheckConnectorResource method receives a CheckConnectorResourceRequest message and returns a
	// CheckConnectorResourceResponse
	CheckConnectorResource(ctx context.Context, in *CheckConnectorResourceRequest, opts ...grpc.CallOption) (*CheckConnectorResourceResponse, error)
}

type connectorPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorPrivateServiceClient(cc grpc.ClientConnInterface) ConnectorPrivateServiceClient {
	return &connectorPrivateServiceClient{cc}
}

func (c *connectorPrivateServiceClient) LookUpConnectorDefinitionAdmin(ctx context.Context, in *LookUpConnectorDefinitionAdminRequest, opts ...grpc.CallOption) (*LookUpConnectorDefinitionAdminResponse, error) {
	out := new(LookUpConnectorDefinitionAdminResponse)
	err := c.cc.Invoke(ctx, ConnectorPrivateService_LookUpConnectorDefinitionAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPrivateServiceClient) ListConnectorResourcesAdmin(ctx context.Context, in *ListConnectorResourcesAdminRequest, opts ...grpc.CallOption) (*ListConnectorResourcesAdminResponse, error) {
	out := new(ListConnectorResourcesAdminResponse)
	err := c.cc.Invoke(ctx, ConnectorPrivateService_ListConnectorResourcesAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPrivateServiceClient) LookUpConnectorResourceAdmin(ctx context.Context, in *LookUpConnectorResourceAdminRequest, opts ...grpc.CallOption) (*LookUpConnectorResourceAdminResponse, error) {
	out := new(LookUpConnectorResourceAdminResponse)
	err := c.cc.Invoke(ctx, ConnectorPrivateService_LookUpConnectorResourceAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorPrivateServiceClient) CheckConnectorResource(ctx context.Context, in *CheckConnectorResourceRequest, opts ...grpc.CallOption) (*CheckConnectorResourceResponse, error) {
	out := new(CheckConnectorResourceResponse)
	err := c.cc.Invoke(ctx, ConnectorPrivateService_CheckConnectorResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorPrivateServiceServer is the server API for ConnectorPrivateService service.
// All implementations should embed UnimplementedConnectorPrivateServiceServer
// for forward compatibility
type ConnectorPrivateServiceServer interface {
	// LookUpConnectorDefinitionAdmin method receives a
	// LookUpConnectorDefinitionAdminRequest message and returns a
	// LookUpConnectorDefinitionAdminResponse
	LookUpConnectorDefinitionAdmin(context.Context, *LookUpConnectorDefinitionAdminRequest) (*LookUpConnectorDefinitionAdminResponse, error)
	// ListConnectorResourcesAdmin method receives a ListConnectorResourcesAdminRequest
	// message and returns a ListConnectorResourcesResponse message.
	ListConnectorResourcesAdmin(context.Context, *ListConnectorResourcesAdminRequest) (*ListConnectorResourcesAdminResponse, error)
	// LookUpConnectorResourceAdmin method receives a
	// LookUpConnectorResourceAdminRequest message and returns a
	// LookUpConnectorResourceAdminResponse
	LookUpConnectorResourceAdmin(context.Context, *LookUpConnectorResourceAdminRequest) (*LookUpConnectorResourceAdminResponse, error)
	// CheckConnectorResource method receives a CheckConnectorResourceRequest message and returns a
	// CheckConnectorResourceResponse
	CheckConnectorResource(context.Context, *CheckConnectorResourceRequest) (*CheckConnectorResourceResponse, error)
}

// UnimplementedConnectorPrivateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConnectorPrivateServiceServer struct {
}

func (UnimplementedConnectorPrivateServiceServer) LookUpConnectorDefinitionAdmin(context.Context, *LookUpConnectorDefinitionAdminRequest) (*LookUpConnectorDefinitionAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpConnectorDefinitionAdmin not implemented")
}
func (UnimplementedConnectorPrivateServiceServer) ListConnectorResourcesAdmin(context.Context, *ListConnectorResourcesAdminRequest) (*ListConnectorResourcesAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectorResourcesAdmin not implemented")
}
func (UnimplementedConnectorPrivateServiceServer) LookUpConnectorResourceAdmin(context.Context, *LookUpConnectorResourceAdminRequest) (*LookUpConnectorResourceAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpConnectorResourceAdmin not implemented")
}
func (UnimplementedConnectorPrivateServiceServer) CheckConnectorResource(context.Context, *CheckConnectorResourceRequest) (*CheckConnectorResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConnectorResource not implemented")
}

// UnsafeConnectorPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorPrivateServiceServer will
// result in compilation errors.
type UnsafeConnectorPrivateServiceServer interface {
	mustEmbedUnimplementedConnectorPrivateServiceServer()
}

func RegisterConnectorPrivateServiceServer(s grpc.ServiceRegistrar, srv ConnectorPrivateServiceServer) {
	s.RegisterService(&ConnectorPrivateService_ServiceDesc, srv)
}

func _ConnectorPrivateService_LookUpConnectorDefinitionAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpConnectorDefinitionAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPrivateServiceServer).LookUpConnectorDefinitionAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPrivateService_LookUpConnectorDefinitionAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPrivateServiceServer).LookUpConnectorDefinitionAdmin(ctx, req.(*LookUpConnectorDefinitionAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPrivateService_ListConnectorResourcesAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorResourcesAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPrivateServiceServer).ListConnectorResourcesAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPrivateService_ListConnectorResourcesAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPrivateServiceServer).ListConnectorResourcesAdmin(ctx, req.(*ListConnectorResourcesAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPrivateService_LookUpConnectorResourceAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpConnectorResourceAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPrivateServiceServer).LookUpConnectorResourceAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPrivateService_LookUpConnectorResourceAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPrivateServiceServer).LookUpConnectorResourceAdmin(ctx, req.(*LookUpConnectorResourceAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorPrivateService_CheckConnectorResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckConnectorResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorPrivateServiceServer).CheckConnectorResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorPrivateService_CheckConnectorResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorPrivateServiceServer).CheckConnectorResource(ctx, req.(*CheckConnectorResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorPrivateService_ServiceDesc is the grpc.ServiceDesc for ConnectorPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.connector.v1alpha.ConnectorPrivateService",
	HandlerType: (*ConnectorPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookUpConnectorDefinitionAdmin",
			Handler:    _ConnectorPrivateService_LookUpConnectorDefinitionAdmin_Handler,
		},
		{
			MethodName: "ListConnectorResourcesAdmin",
			Handler:    _ConnectorPrivateService_ListConnectorResourcesAdmin_Handler,
		},
		{
			MethodName: "LookUpConnectorResourceAdmin",
			Handler:    _ConnectorPrivateService_LookUpConnectorResourceAdmin_Handler,
		},
		{
			MethodName: "CheckConnectorResource",
			Handler:    _ConnectorPrivateService_CheckConnectorResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vdp/connector/v1alpha/connector_private_service.proto",
}
