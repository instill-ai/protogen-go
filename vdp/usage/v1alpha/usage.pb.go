// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: vdp/usage/v1alpha/usage.proto

package usagev1alpha

import (
	v1alpha "github.com/instill-ai/protogen-go/vdp/mgmt/v1alpha"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Service enumerates the services to collect data from
type SessionData_Service int32

const (
	// Service: UNSPECIFIED
	SessionData_SERVICE_UNSPECIFIED SessionData_Service = 0
	// Service: MGMT
	SessionData_SERVICE_MGMT SessionData_Service = 1
	// Service: CONNECTOR
	SessionData_SERVICE_CONNECTOR SessionData_Service = 2
	// Service: MODEL
	SessionData_SERVICE_MODEL SessionData_Service = 3
	// Service: PIPELINE
	SessionData_SERVICE_PIPELINE SessionData_Service = 4
)

// Enum value maps for SessionData_Service.
var (
	SessionData_Service_name = map[int32]string{
		0: "SERVICE_UNSPECIFIED",
		1: "SERVICE_MGMT",
		2: "SERVICE_CONNECTOR",
		3: "SERVICE_MODEL",
		4: "SERVICE_PIPELINE",
	}
	SessionData_Service_value = map[string]int32{
		"SERVICE_UNSPECIFIED": 0,
		"SERVICE_MGMT":        1,
		"SERVICE_CONNECTOR":   2,
		"SERVICE_MODEL":       3,
		"SERVICE_PIPELINE":    4,
	}
)

func (x SessionData_Service) Enum() *SessionData_Service {
	p := new(SessionData_Service)
	*p = x
	return p
}

func (x SessionData_Service) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionData_Service) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_usage_v1alpha_usage_proto_enumTypes[0].Descriptor()
}

func (SessionData_Service) Type() protoreflect.EnumType {
	return &file_vdp_usage_v1alpha_usage_proto_enumTypes[0]
}

func (x SessionData_Service) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionData_Service.Descriptor instead.
func (SessionData_Service) EnumDescriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{1, 0}
}

// Session represents a unique session whenever a new instance of VDP gets
// started. The usage server returns a token for the given pair of identifiers
// (`cluster_id` and `server_id`) that should be used as part of the challenge
// when creating a report
type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name in the format of 'sessions/uid'
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Resource UUID
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// Token to send report. The token is generated by the server and sent to the
	// client. Client needs to use the token to send report to the server.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// Session creation time
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Session update time
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{0}
}

func (x *Session) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Session) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Session) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Session) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Session) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// SessionData represents the session data collected from a session
type SessionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session UUID
	SessionUid string `protobuf:"bytes,1,opt,name=session_uid,json=sessionUid,proto3" json:"session_uid,omitempty"`
	// name of the service to collect data from
	Service SessionData_Service `protobuf:"varint,2,opt,name=service,proto3,enum=vdp.usage.v1alpha.SessionData_Service" json:"service,omitempty"`
	// Session env, e.g., 'os', 'cloud'
	Env string `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	// Version of the service
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Architecture of the system
	Arch string `protobuf:"bytes,5,opt,name=arch,proto3" json:"arch,omitempty"`
	// Operating system
	Os string `protobuf:"bytes,6,opt,name=os,proto3" json:"os,omitempty"`
	// Session service uptime
	Uptime int64 `protobuf:"varint,7,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// Report time
	ReportTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=report_time,json=reportTime,proto3" json:"report_time,omitempty"`
}

func (x *SessionData) Reset() {
	*x = SessionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionData) ProtoMessage() {}

func (x *SessionData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionData.ProtoReflect.Descriptor instead.
func (*SessionData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{1}
}

func (x *SessionData) GetSessionUid() string {
	if x != nil {
		return x.SessionUid
	}
	return ""
}

func (x *SessionData) GetService() SessionData_Service {
	if x != nil {
		return x.Service
	}
	return SessionData_SERVICE_UNSPECIFIED
}

func (x *SessionData) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *SessionData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SessionData) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *SessionData) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *SessionData) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *SessionData) GetReportTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportTime
	}
	return nil
}

// Management service usage data
type MgmtUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repeated user usage data
	User []*v1alpha.User `protobuf:"bytes,1,rep,name=user,proto3" json:"user,omitempty"`
}

func (x *MgmtUsageData) Reset() {
	*x = MgmtUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgmtUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgmtUsageData) ProtoMessage() {}

func (x *MgmtUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgmtUsageData.ProtoReflect.Descriptor instead.
func (*MgmtUsageData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{2}
}

func (x *MgmtUsageData) GetUser() []*v1alpha.User {
	if x != nil {
		return x.User
	}
	return nil
}

// Connector service usage data
type ConnectorUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Usage data of all owners in the connector service
	Data []*ConnectorUsageData_OwnerUsageData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ConnectorUsageData) Reset() {
	*x = ConnectorUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorUsageData) ProtoMessage() {}

func (x *ConnectorUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorUsageData.ProtoReflect.Descriptor instead.
func (*ConnectorUsageData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{3}
}

func (x *ConnectorUsageData) GetData() []*ConnectorUsageData_OwnerUsageData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Model service usage data
type ModelUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Usage data of all owners in the model service
	Data []*ModelUsageData_OwnerUsageData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ModelUsageData) Reset() {
	*x = ModelUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelUsageData) ProtoMessage() {}

func (x *ModelUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelUsageData.ProtoReflect.Descriptor instead.
func (*ModelUsageData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{4}
}

func (x *ModelUsageData) GetData() []*ModelUsageData_OwnerUsageData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Pipeline service usage data
type PipelineUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Usage data of all owners in the pipeline service
	Data []*PipelineUsageData_OwnerUsageData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PipelineUsageData) Reset() {
	*x = PipelineUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineUsageData) ProtoMessage() {}

func (x *PipelineUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineUsageData.ProtoReflect.Descriptor instead.
func (*PipelineUsageData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{5}
}

func (x *PipelineUsageData) GetData() []*PipelineUsageData_OwnerUsageData {
	if x != nil {
		return x.Data
	}
	return nil
}

// Report represents a report to be sent to the server that includes the usage
// data of a session
type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session token
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Proof-of-work See https://en.wikipedia.org/wiki/Proof_of_work
	Pow string `protobuf:"bytes,2,opt,name=pow,proto3" json:"pow,omitempty"`
	// Session data
	SessionData *SessionData `protobuf:"bytes,3,opt,name=session_data,json=sessionData,proto3" json:"session_data,omitempty"`
	// Service usage data
	//
	// Types that are assignable to UsageData:
	//	*Report_MgmtUsageData
	//	*Report_ConnectorUsageData
	//	*Report_ModelUsageData
	//	*Report_PipelineUsageData
	UsageData isReport_UsageData `protobuf_oneof:"usage_data"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{6}
}

func (x *Report) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Report) GetPow() string {
	if x != nil {
		return x.Pow
	}
	return ""
}

func (x *Report) GetSessionData() *SessionData {
	if x != nil {
		return x.SessionData
	}
	return nil
}

func (m *Report) GetUsageData() isReport_UsageData {
	if m != nil {
		return m.UsageData
	}
	return nil
}

func (x *Report) GetMgmtUsageData() *MgmtUsageData {
	if x, ok := x.GetUsageData().(*Report_MgmtUsageData); ok {
		return x.MgmtUsageData
	}
	return nil
}

func (x *Report) GetConnectorUsageData() *ConnectorUsageData {
	if x, ok := x.GetUsageData().(*Report_ConnectorUsageData); ok {
		return x.ConnectorUsageData
	}
	return nil
}

func (x *Report) GetModelUsageData() *ModelUsageData {
	if x, ok := x.GetUsageData().(*Report_ModelUsageData); ok {
		return x.ModelUsageData
	}
	return nil
}

func (x *Report) GetPipelineUsageData() *PipelineUsageData {
	if x, ok := x.GetUsageData().(*Report_PipelineUsageData); ok {
		return x.PipelineUsageData
	}
	return nil
}

type isReport_UsageData interface {
	isReport_UsageData()
}

type Report_MgmtUsageData struct {
	// Management service usage data
	MgmtUsageData *MgmtUsageData `protobuf:"bytes,4,opt,name=mgmt_usage_data,json=mgmtUsageData,proto3,oneof"`
}

type Report_ConnectorUsageData struct {
	// Connector service usage data
	ConnectorUsageData *ConnectorUsageData `protobuf:"bytes,5,opt,name=connector_usage_data,json=connectorUsageData,proto3,oneof"`
}

type Report_ModelUsageData struct {
	// Model service usage data
	ModelUsageData *ModelUsageData `protobuf:"bytes,6,opt,name=model_usage_data,json=modelUsageData,proto3,oneof"`
}

type Report_PipelineUsageData struct {
	// Pipeline service usage data
	PipelineUsageData *PipelineUsageData `protobuf:"bytes,7,opt,name=pipeline_usage_data,json=pipelineUsageData,proto3,oneof"`
}

func (*Report_MgmtUsageData) isReport_UsageData() {}

func (*Report_ConnectorUsageData) isReport_UsageData() {}

func (*Report_ModelUsageData) isReport_UsageData() {}

func (*Report_PipelineUsageData) isReport_UsageData() {}

// CreateSessionRequest represents a request to create a new session
type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A session resource to create
	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{7}
}

func (x *CreateSessionRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

// CreateSessionResponse represents a response for a session response
type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A session resource
	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{8}
}

func (x *CreateSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

// SendReportRequest represents a request to send a usage report
type SendReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A report resource to create
	Report *Report `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *SendReportRequest) Reset() {
	*x = SendReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendReportRequest) ProtoMessage() {}

func (x *SendReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendReportRequest.ProtoReflect.Descriptor instead.
func (*SendReportRequest) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{9}
}

func (x *SendReportRequest) GetReport() *Report {
	if x != nil {
		return x.Report
	}
	return nil
}

// SendReportResponse represents an empty response
type SendReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendReportResponse) Reset() {
	*x = SendReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendReportResponse) ProtoMessage() {}

func (x *SendReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendReportResponse.ProtoReflect.Descriptor instead.
func (*SendReportResponse) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{10}
}

// Per owner usage data in the connector service
type ConnectorUsageData_OwnerUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner UUID
	OwnerUid string `protobuf:"bytes,1,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	// Number of source connectors with 'connected' state
	SourceConnectorConnectedNum int64 `protobuf:"varint,2,opt,name=source_connector_connected_num,json=sourceConnectorConnectedNum,proto3" json:"source_connector_connected_num,omitempty"`
	// Definition IDs of the connected source connectors. Element in the list
	// should not be duplicated.
	SourceConnectorDefinitionIds []string `protobuf:"bytes,3,rep,name=source_connector_definition_ids,json=sourceConnectorDefinitionIds,proto3" json:"source_connector_definition_ids,omitempty"`
	// Number of destination connectors with 'connected' state
	DestinationConnectorConnectedNum int64 `protobuf:"varint,4,opt,name=destination_connector_connected_num,json=destinationConnectorConnectedNum,proto3" json:"destination_connector_connected_num,omitempty"`
	// Definitions of the connected destination connectors. Element in the list
	// should not be duplicated.
	DestinationConnectorDefinitions []string `protobuf:"bytes,5,rep,name=destination_connector_definitions,json=destinationConnectorDefinitions,proto3" json:"destination_connector_definitions,omitempty"`
}

func (x *ConnectorUsageData_OwnerUsageData) Reset() {
	*x = ConnectorUsageData_OwnerUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorUsageData_OwnerUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorUsageData_OwnerUsageData) ProtoMessage() {}

func (x *ConnectorUsageData_OwnerUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorUsageData_OwnerUsageData.ProtoReflect.Descriptor instead.
func (*ConnectorUsageData_OwnerUsageData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ConnectorUsageData_OwnerUsageData) GetOwnerUid() string {
	if x != nil {
		return x.OwnerUid
	}
	return ""
}

func (x *ConnectorUsageData_OwnerUsageData) GetSourceConnectorConnectedNum() int64 {
	if x != nil {
		return x.SourceConnectorConnectedNum
	}
	return 0
}

func (x *ConnectorUsageData_OwnerUsageData) GetSourceConnectorDefinitionIds() []string {
	if x != nil {
		return x.SourceConnectorDefinitionIds
	}
	return nil
}

func (x *ConnectorUsageData_OwnerUsageData) GetDestinationConnectorConnectedNum() int64 {
	if x != nil {
		return x.DestinationConnectorConnectedNum
	}
	return 0
}

func (x *ConnectorUsageData_OwnerUsageData) GetDestinationConnectorDefinitions() []string {
	if x != nil {
		return x.DestinationConnectorDefinitions
	}
	return nil
}

// Per owner usage data in the model service
type ModelUsageData_OwnerUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner UUID
	OwnerUid string `protobuf:"bytes,1,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	// Number of model instances with 'online' state
	InstanceOnlineNum int64 `protobuf:"varint,2,opt,name=instance_online_num,json=instanceOnlineNum,proto3" json:"instance_online_num,omitempty"`
	// Definition IDs of the online model instances. Element in the list
	// should not be duplicated.
	ModelDefinitionIds []string `protobuf:"bytes,3,rep,name=model_definition_ids,json=modelDefinitionIds,proto3" json:"model_definition_ids,omitempty"`
	// Number of processed images via model instance testing operations
	TestImageNum int64 `protobuf:"varint,4,opt,name=test_image_num,json=testImageNum,proto3" json:"test_image_num,omitempty"`
}

func (x *ModelUsageData_OwnerUsageData) Reset() {
	*x = ModelUsageData_OwnerUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelUsageData_OwnerUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelUsageData_OwnerUsageData) ProtoMessage() {}

func (x *ModelUsageData_OwnerUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelUsageData_OwnerUsageData.ProtoReflect.Descriptor instead.
func (*ModelUsageData_OwnerUsageData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ModelUsageData_OwnerUsageData) GetOwnerUid() string {
	if x != nil {
		return x.OwnerUid
	}
	return ""
}

func (x *ModelUsageData_OwnerUsageData) GetInstanceOnlineNum() int64 {
	if x != nil {
		return x.InstanceOnlineNum
	}
	return 0
}

func (x *ModelUsageData_OwnerUsageData) GetModelDefinitionIds() []string {
	if x != nil {
		return x.ModelDefinitionIds
	}
	return nil
}

func (x *ModelUsageData_OwnerUsageData) GetTestImageNum() int64 {
	if x != nil {
		return x.TestImageNum
	}
	return 0
}

// Per owner usage data in the pipeline service
type PipelineUsageData_OwnerUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner UUID
	OwnerUid string `protobuf:"bytes,1,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	// Number of pipelines with 'active' state
	ActiveNum int64 `protobuf:"varint,2,opt,name=active_num,json=activeNum,proto3" json:"active_num,omitempty"`
	// Number of pipelines with 'active' state and 'async' mode
	AsyncActiveNum int64 `protobuf:"varint,3,opt,name=async_active_num,json=asyncActiveNum,proto3" json:"async_active_num,omitempty"`
	// Number of pipelines with 'active' state and 'sync' mode
	SyncActiveNum int64 `protobuf:"varint,4,opt,name=sync_active_num,json=syncActiveNum,proto3" json:"sync_active_num,omitempty"`
	// Number of processed images via pipeline triggering operations
	TriggerImageNum int64 `protobuf:"varint,5,opt,name=trigger_image_num,json=triggerImageNum,proto3" json:"trigger_image_num,omitempty"`
}

func (x *PipelineUsageData_OwnerUsageData) Reset() {
	*x = PipelineUsageData_OwnerUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineUsageData_OwnerUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineUsageData_OwnerUsageData) ProtoMessage() {}

func (x *PipelineUsageData_OwnerUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineUsageData_OwnerUsageData.ProtoReflect.Descriptor instead.
func (*PipelineUsageData_OwnerUsageData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{5, 0}
}

func (x *PipelineUsageData_OwnerUsageData) GetOwnerUid() string {
	if x != nil {
		return x.OwnerUid
	}
	return ""
}

func (x *PipelineUsageData_OwnerUsageData) GetActiveNum() int64 {
	if x != nil {
		return x.ActiveNum
	}
	return 0
}

func (x *PipelineUsageData_OwnerUsageData) GetAsyncActiveNum() int64 {
	if x != nil {
		return x.AsyncActiveNum
	}
	return 0
}

func (x *PipelineUsageData_OwnerUsageData) GetSyncActiveNum() int64 {
	if x != nil {
		return x.SyncActiveNum
	}
	return 0
}

func (x *PipelineUsageData_OwnerUsageData) GetTriggerImageNum() int64 {
	if x != nil {
		return x.TriggerImageNum
	}
	return 0
}

var File_vdp_usage_v1alpha_usage_proto protoreflect.FileDescriptor

var file_vdp_usage_v1alpha_usage_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x76, 0x64, 0x70, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x76, 0x64, 0x70, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x02, 0x0a,
	0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x31, 0xea, 0x41, 0x2e, 0x0a, 0x18, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x22, 0xb3, 0x03, 0x0a, 0x0b, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64,
	0x12, 0x45, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x1d,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x13, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x47, 0x4d, 0x54, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x04,
	0x22, 0x3b, 0x0a, 0x0d, 0x4d, 0x67, 0x6d, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xce, 0x03,
	0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xed,
	0x02, 0x0a, 0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x1e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x1b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x4a, 0x0a,
	0x1f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x1c, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x23, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x20, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x4f, 0x0a,
	0x21, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x1f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa2,
	0x02, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xc9, 0x01, 0x0a, 0x0e, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x13,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x35, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4e, 0x75, 0x6d, 0x22, 0xc2, 0x02, 0x0a, 0x11, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0xe3, 0x01, 0x0a, 0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x2d, 0x0a, 0x10, 0x61,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0xde, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x15,
	0x0a, 0x03, 0x70, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x03, 0x70, 0x6f, 0x77, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x64,
	0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a,
	0x0f, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x67, 0x6d, 0x74, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x67, 0x6d, 0x74,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x13, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x11, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xcb,
	0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0a, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2d, 0x61, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x64, 0x70, 0x2f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x56, 0x55, 0x58, 0xaa, 0x02,
	0x11, 0x56, 0x64, 0x70, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0xca, 0x02, 0x11, 0x56, 0x64, 0x70, 0x5c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x1d, 0x56, 0x64, 0x70, 0x5c, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x56, 0x64, 0x70, 0x3a, 0x3a, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vdp_usage_v1alpha_usage_proto_rawDescOnce sync.Once
	file_vdp_usage_v1alpha_usage_proto_rawDescData = file_vdp_usage_v1alpha_usage_proto_rawDesc
)

func file_vdp_usage_v1alpha_usage_proto_rawDescGZIP() []byte {
	file_vdp_usage_v1alpha_usage_proto_rawDescOnce.Do(func() {
		file_vdp_usage_v1alpha_usage_proto_rawDescData = protoimpl.X.CompressGZIP(file_vdp_usage_v1alpha_usage_proto_rawDescData)
	})
	return file_vdp_usage_v1alpha_usage_proto_rawDescData
}

var file_vdp_usage_v1alpha_usage_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vdp_usage_v1alpha_usage_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_vdp_usage_v1alpha_usage_proto_goTypes = []interface{}{
	(SessionData_Service)(0),                  // 0: vdp.usage.v1alpha.SessionData.Service
	(*Session)(nil),                           // 1: vdp.usage.v1alpha.Session
	(*SessionData)(nil),                       // 2: vdp.usage.v1alpha.SessionData
	(*MgmtUsageData)(nil),                     // 3: vdp.usage.v1alpha.MgmtUsageData
	(*ConnectorUsageData)(nil),                // 4: vdp.usage.v1alpha.ConnectorUsageData
	(*ModelUsageData)(nil),                    // 5: vdp.usage.v1alpha.ModelUsageData
	(*PipelineUsageData)(nil),                 // 6: vdp.usage.v1alpha.PipelineUsageData
	(*Report)(nil),                            // 7: vdp.usage.v1alpha.Report
	(*CreateSessionRequest)(nil),              // 8: vdp.usage.v1alpha.CreateSessionRequest
	(*CreateSessionResponse)(nil),             // 9: vdp.usage.v1alpha.CreateSessionResponse
	(*SendReportRequest)(nil),                 // 10: vdp.usage.v1alpha.SendReportRequest
	(*SendReportResponse)(nil),                // 11: vdp.usage.v1alpha.SendReportResponse
	(*ConnectorUsageData_OwnerUsageData)(nil), // 12: vdp.usage.v1alpha.ConnectorUsageData.OwnerUsageData
	(*ModelUsageData_OwnerUsageData)(nil),     // 13: vdp.usage.v1alpha.ModelUsageData.OwnerUsageData
	(*PipelineUsageData_OwnerUsageData)(nil),  // 14: vdp.usage.v1alpha.PipelineUsageData.OwnerUsageData
	(*timestamppb.Timestamp)(nil),             // 15: google.protobuf.Timestamp
	(*v1alpha.User)(nil),                      // 16: vdp.mgmt.v1alpha.User
}
var file_vdp_usage_v1alpha_usage_proto_depIdxs = []int32{
	15, // 0: vdp.usage.v1alpha.Session.create_time:type_name -> google.protobuf.Timestamp
	15, // 1: vdp.usage.v1alpha.Session.update_time:type_name -> google.protobuf.Timestamp
	0,  // 2: vdp.usage.v1alpha.SessionData.service:type_name -> vdp.usage.v1alpha.SessionData.Service
	15, // 3: vdp.usage.v1alpha.SessionData.report_time:type_name -> google.protobuf.Timestamp
	16, // 4: vdp.usage.v1alpha.MgmtUsageData.user:type_name -> vdp.mgmt.v1alpha.User
	12, // 5: vdp.usage.v1alpha.ConnectorUsageData.data:type_name -> vdp.usage.v1alpha.ConnectorUsageData.OwnerUsageData
	13, // 6: vdp.usage.v1alpha.ModelUsageData.data:type_name -> vdp.usage.v1alpha.ModelUsageData.OwnerUsageData
	14, // 7: vdp.usage.v1alpha.PipelineUsageData.data:type_name -> vdp.usage.v1alpha.PipelineUsageData.OwnerUsageData
	2,  // 8: vdp.usage.v1alpha.Report.session_data:type_name -> vdp.usage.v1alpha.SessionData
	3,  // 9: vdp.usage.v1alpha.Report.mgmt_usage_data:type_name -> vdp.usage.v1alpha.MgmtUsageData
	4,  // 10: vdp.usage.v1alpha.Report.connector_usage_data:type_name -> vdp.usage.v1alpha.ConnectorUsageData
	5,  // 11: vdp.usage.v1alpha.Report.model_usage_data:type_name -> vdp.usage.v1alpha.ModelUsageData
	6,  // 12: vdp.usage.v1alpha.Report.pipeline_usage_data:type_name -> vdp.usage.v1alpha.PipelineUsageData
	1,  // 13: vdp.usage.v1alpha.CreateSessionRequest.session:type_name -> vdp.usage.v1alpha.Session
	1,  // 14: vdp.usage.v1alpha.CreateSessionResponse.session:type_name -> vdp.usage.v1alpha.Session
	7,  // 15: vdp.usage.v1alpha.SendReportRequest.report:type_name -> vdp.usage.v1alpha.Report
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_vdp_usage_v1alpha_usage_proto_init() }
func file_vdp_usage_v1alpha_usage_proto_init() {
	if File_vdp_usage_v1alpha_usage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vdp_usage_v1alpha_usage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgmtUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorUsageData_OwnerUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelUsageData_OwnerUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineUsageData_OwnerUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vdp_usage_v1alpha_usage_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Report_MgmtUsageData)(nil),
		(*Report_ConnectorUsageData)(nil),
		(*Report_ModelUsageData)(nil),
		(*Report_PipelineUsageData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vdp_usage_v1alpha_usage_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vdp_usage_v1alpha_usage_proto_goTypes,
		DependencyIndexes: file_vdp_usage_v1alpha_usage_proto_depIdxs,
		EnumInfos:         file_vdp_usage_v1alpha_usage_proto_enumTypes,
		MessageInfos:      file_vdp_usage_v1alpha_usage_proto_msgTypes,
	}.Build()
	File_vdp_usage_v1alpha_usage_proto = out.File
	file_vdp_usage_v1alpha_usage_proto_rawDesc = nil
	file_vdp_usage_v1alpha_usage_proto_goTypes = nil
	file_vdp_usage_v1alpha_usage_proto_depIdxs = nil
}
