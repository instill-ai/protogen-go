// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: vdp/usage/v1alpha/usage.proto

package usagev1alpha

import (
	v1alpha "github.com/instill-ai/protogen-go/vdp/mgmt/v1alpha"
	v1alpha1 "github.com/instill-ai/protogen-go/vdp/model/v1alpha"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Service enumerates the services to collect data from
type Session_Service int32

const (
	// Service: UNSPECIFIED
	Session_SERVICE_UNSPECIFIED Session_Service = 0
	// Service: MGMT
	Session_SERVICE_MGMT Session_Service = 1
	// Service: CONNECTOR
	Session_SERVICE_CONNECTOR Session_Service = 2
	// Service: MODEL
	Session_SERVICE_MODEL Session_Service = 3
	// Service: PIPELINE
	Session_SERVICE_PIPELINE Session_Service = 4
)

// Enum value maps for Session_Service.
var (
	Session_Service_name = map[int32]string{
		0: "SERVICE_UNSPECIFIED",
		1: "SERVICE_MGMT",
		2: "SERVICE_CONNECTOR",
		3: "SERVICE_MODEL",
		4: "SERVICE_PIPELINE",
	}
	Session_Service_value = map[string]int32{
		"SERVICE_UNSPECIFIED": 0,
		"SERVICE_MGMT":        1,
		"SERVICE_CONNECTOR":   2,
		"SERVICE_MODEL":       3,
		"SERVICE_PIPELINE":    4,
	}
)

func (x Session_Service) Enum() *Session_Service {
	p := new(Session_Service)
	*p = x
	return p
}

func (x Session_Service) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_Service) Descriptor() protoreflect.EnumDescriptor {
	return file_vdp_usage_v1alpha_usage_proto_enumTypes[0].Descriptor()
}

func (Session_Service) Type() protoreflect.EnumType {
	return &file_vdp_usage_v1alpha_usage_proto_enumTypes[0]
}

func (x Session_Service) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_Service.Descriptor instead.
func (Session_Service) EnumDescriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{0, 0}
}

// Session represents a unique session whenever a new instance of VDP service
// gets started. The usage server returns a token that should be used as part of
// the challenge when sending a report with data collected from this session
type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name in the format of 'sessions/uid'
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Resource UUID
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// name of the service to collect data from
	Service Session_Service `protobuf:"varint,3,opt,name=service,proto3,enum=vdp.usage.v1alpha.Session_Service" json:"service,omitempty"`
	// Session edition, allowed values include: 'local-ce' and 'local-ce:dev'
	Edition string `protobuf:"bytes,4,opt,name=edition,proto3" json:"edition,omitempty"`
	// Version of the service
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// Architecture of the system
	Arch string `protobuf:"bytes,6,opt,name=arch,proto3" json:"arch,omitempty"`
	// Operating system
	Os string `protobuf:"bytes,7,opt,name=os,proto3" json:"os,omitempty"`
	// Session service uptime
	Uptime int64 `protobuf:"varint,8,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// Report time
	ReportTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=report_time,json=reportTime,proto3" json:"report_time,omitempty"`
	// Token to send report. The token is generated by the server and sent to
	// the client. Client needs to use the token to send report to the server.
	Token string `protobuf:"bytes,10,opt,name=token,proto3" json:"token,omitempty"`
	// Session creation time
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Session update time
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{0}
}

func (x *Session) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Session) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Session) GetService() Session_Service {
	if x != nil {
		return x.Service
	}
	return Session_SERVICE_UNSPECIFIED
}

func (x *Session) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *Session) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Session) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Session) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Session) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *Session) GetReportTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportTime
	}
	return nil
}

func (x *Session) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Session) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Session) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// Management service usage data
type MgmtUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repeated user usage data
	Usages []*v1alpha.User `protobuf:"bytes,1,rep,name=usages,proto3" json:"usages,omitempty"`
}

func (x *MgmtUsageData) Reset() {
	*x = MgmtUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgmtUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgmtUsageData) ProtoMessage() {}

func (x *MgmtUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgmtUsageData.ProtoReflect.Descriptor instead.
func (*MgmtUsageData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{1}
}

func (x *MgmtUsageData) GetUsages() []*v1alpha.User {
	if x != nil {
		return x.Usages
	}
	return nil
}

// Connector service usage data
type ConnectorUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Usage data of all users in the connector service
	Usages []*ConnectorUsageData_UserUsageData `protobuf:"bytes,1,rep,name=usages,proto3" json:"usages,omitempty"`
}

func (x *ConnectorUsageData) Reset() {
	*x = ConnectorUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorUsageData) ProtoMessage() {}

func (x *ConnectorUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorUsageData.ProtoReflect.Descriptor instead.
func (*ConnectorUsageData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{2}
}

func (x *ConnectorUsageData) GetUsages() []*ConnectorUsageData_UserUsageData {
	if x != nil {
		return x.Usages
	}
	return nil
}

// Model service usage data
type ModelUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Usage data of all users in the model service
	Usages []*ModelUsageData_UserUsageData `protobuf:"bytes,1,rep,name=usages,proto3" json:"usages,omitempty"`
}

func (x *ModelUsageData) Reset() {
	*x = ModelUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelUsageData) ProtoMessage() {}

func (x *ModelUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelUsageData.ProtoReflect.Descriptor instead.
func (*ModelUsageData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{3}
}

func (x *ModelUsageData) GetUsages() []*ModelUsageData_UserUsageData {
	if x != nil {
		return x.Usages
	}
	return nil
}

// Pipeline service usage data
type PipelineUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Usage data of all users in the pipeline service
	Usages []*PipelineUsageData_UserUsageData `protobuf:"bytes,1,rep,name=usages,proto3" json:"usages,omitempty"`
}

func (x *PipelineUsageData) Reset() {
	*x = PipelineUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineUsageData) ProtoMessage() {}

func (x *PipelineUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineUsageData.ProtoReflect.Descriptor instead.
func (*PipelineUsageData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{4}
}

func (x *PipelineUsageData) GetUsages() []*PipelineUsageData_UserUsageData {
	if x != nil {
		return x.Usages
	}
	return nil
}

// SessionReport represents a report to be sent to the server that includes the
// usage data of a session
type SessionReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session uid
	SessionUid string `protobuf:"bytes,1,opt,name=session_uid,json=sessionUid,proto3" json:"session_uid,omitempty"`
	// Session token
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Proof-of-work See https://en.wikipedia.org/wiki/Proof_of_work
	Pow string `protobuf:"bytes,3,opt,name=pow,proto3" json:"pow,omitempty"`
	// Session
	Session *Session `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
	// Service usage data
	//
	// Types that are assignable to UsageData:
	//	*SessionReport_MgmtUsageData
	//	*SessionReport_ConnectorUsageData
	//	*SessionReport_ModelUsageData
	//	*SessionReport_PipelineUsageData
	UsageData isSessionReport_UsageData `protobuf_oneof:"usage_data"`
}

func (x *SessionReport) Reset() {
	*x = SessionReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionReport) ProtoMessage() {}

func (x *SessionReport) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionReport.ProtoReflect.Descriptor instead.
func (*SessionReport) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{5}
}

func (x *SessionReport) GetSessionUid() string {
	if x != nil {
		return x.SessionUid
	}
	return ""
}

func (x *SessionReport) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SessionReport) GetPow() string {
	if x != nil {
		return x.Pow
	}
	return ""
}

func (x *SessionReport) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (m *SessionReport) GetUsageData() isSessionReport_UsageData {
	if m != nil {
		return m.UsageData
	}
	return nil
}

func (x *SessionReport) GetMgmtUsageData() *MgmtUsageData {
	if x, ok := x.GetUsageData().(*SessionReport_MgmtUsageData); ok {
		return x.MgmtUsageData
	}
	return nil
}

func (x *SessionReport) GetConnectorUsageData() *ConnectorUsageData {
	if x, ok := x.GetUsageData().(*SessionReport_ConnectorUsageData); ok {
		return x.ConnectorUsageData
	}
	return nil
}

func (x *SessionReport) GetModelUsageData() *ModelUsageData {
	if x, ok := x.GetUsageData().(*SessionReport_ModelUsageData); ok {
		return x.ModelUsageData
	}
	return nil
}

func (x *SessionReport) GetPipelineUsageData() *PipelineUsageData {
	if x, ok := x.GetUsageData().(*SessionReport_PipelineUsageData); ok {
		return x.PipelineUsageData
	}
	return nil
}

type isSessionReport_UsageData interface {
	isSessionReport_UsageData()
}

type SessionReport_MgmtUsageData struct {
	// Management service usage data
	MgmtUsageData *MgmtUsageData `protobuf:"bytes,5,opt,name=mgmt_usage_data,json=mgmtUsageData,proto3,oneof"`
}

type SessionReport_ConnectorUsageData struct {
	// Connector service usage data
	ConnectorUsageData *ConnectorUsageData `protobuf:"bytes,6,opt,name=connector_usage_data,json=connectorUsageData,proto3,oneof"`
}

type SessionReport_ModelUsageData struct {
	// Model service usage data
	ModelUsageData *ModelUsageData `protobuf:"bytes,7,opt,name=model_usage_data,json=modelUsageData,proto3,oneof"`
}

type SessionReport_PipelineUsageData struct {
	// Pipeline service usage data
	PipelineUsageData *PipelineUsageData `protobuf:"bytes,8,opt,name=pipeline_usage_data,json=pipelineUsageData,proto3,oneof"`
}

func (*SessionReport_MgmtUsageData) isSessionReport_UsageData() {}

func (*SessionReport_ConnectorUsageData) isSessionReport_UsageData() {}

func (*SessionReport_ModelUsageData) isSessionReport_UsageData() {}

func (*SessionReport_PipelineUsageData) isSessionReport_UsageData() {}

// CreateSessionRequest represents a request to create a new session
type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A session resource to create
	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{6}
}

func (x *CreateSessionRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

// CreateSessionResponse represents a response for a session response
type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A session resource
	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{7}
}

func (x *CreateSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

// SendReportRequest represents a request to send a usage report
type SendSessionReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A report resource to create
	Report *SessionReport `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *SendSessionReportRequest) Reset() {
	*x = SendSessionReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSessionReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSessionReportRequest) ProtoMessage() {}

func (x *SendSessionReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSessionReportRequest.ProtoReflect.Descriptor instead.
func (*SendSessionReportRequest) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{8}
}

func (x *SendSessionReportRequest) GetReport() *SessionReport {
	if x != nil {
		return x.Report
	}
	return nil
}

// SendReportResponse represents an empty response
type SendSessionReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendSessionReportResponse) Reset() {
	*x = SendSessionReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSessionReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSessionReportResponse) ProtoMessage() {}

func (x *SendSessionReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSessionReportResponse.ProtoReflect.Descriptor instead.
func (*SendSessionReportResponse) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{9}
}

// Per user usage data in the connector service
type ConnectorUsageData_UserUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User UUID
	UserUid string `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	// Number of source connectors with 'connected' state
	SourceConnectorConnectedStateNum int64 `protobuf:"varint,2,opt,name=source_connector_connected_state_num,json=sourceConnectorConnectedStateNum,proto3" json:"source_connector_connected_state_num,omitempty"`
	// Number of source connectors with 'disconneceted' state
	SourceConnectorDisconnectedStateNum int64 `protobuf:"varint,3,opt,name=source_connector_disconnected_state_num,json=sourceConnectorDisconnectedStateNum,proto3" json:"source_connector_disconnected_state_num,omitempty"`
	// Definition IDs of the source connectors. Element in the list
	// should not be duplicated.
	SourceConnectorDefinitionIds []string `protobuf:"bytes,4,rep,name=source_connector_definition_ids,json=sourceConnectorDefinitionIds,proto3" json:"source_connector_definition_ids,omitempty"`
	// Number of destination connectors with 'connected' state
	DestinationConnectorConnectedStateNum int64 `protobuf:"varint,5,opt,name=destination_connector_connected_state_num,json=destinationConnectorConnectedStateNum,proto3" json:"destination_connector_connected_state_num,omitempty"`
	// Number of destination connectors with 'disconnected' state
	DestinationConnectorDisconnectedStateNum int64 `protobuf:"varint,6,opt,name=destination_connector_disconnected_state_num,json=destinationConnectorDisconnectedStateNum,proto3" json:"destination_connector_disconnected_state_num,omitempty"`
	// Definition IDs of the destination connectors. Element in the
	// list should not be duplicated.
	DestinationConnectorDefinitionIds []string `protobuf:"bytes,7,rep,name=destination_connector_definition_ids,json=destinationConnectorDefinitionIds,proto3" json:"destination_connector_definition_ids,omitempty"`
}

func (x *ConnectorUsageData_UserUsageData) Reset() {
	*x = ConnectorUsageData_UserUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorUsageData_UserUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorUsageData_UserUsageData) ProtoMessage() {}

func (x *ConnectorUsageData_UserUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorUsageData_UserUsageData.ProtoReflect.Descriptor instead.
func (*ConnectorUsageData_UserUsageData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ConnectorUsageData_UserUsageData) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *ConnectorUsageData_UserUsageData) GetSourceConnectorConnectedStateNum() int64 {
	if x != nil {
		return x.SourceConnectorConnectedStateNum
	}
	return 0
}

func (x *ConnectorUsageData_UserUsageData) GetSourceConnectorDisconnectedStateNum() int64 {
	if x != nil {
		return x.SourceConnectorDisconnectedStateNum
	}
	return 0
}

func (x *ConnectorUsageData_UserUsageData) GetSourceConnectorDefinitionIds() []string {
	if x != nil {
		return x.SourceConnectorDefinitionIds
	}
	return nil
}

func (x *ConnectorUsageData_UserUsageData) GetDestinationConnectorConnectedStateNum() int64 {
	if x != nil {
		return x.DestinationConnectorConnectedStateNum
	}
	return 0
}

func (x *ConnectorUsageData_UserUsageData) GetDestinationConnectorDisconnectedStateNum() int64 {
	if x != nil {
		return x.DestinationConnectorDisconnectedStateNum
	}
	return 0
}

func (x *ConnectorUsageData_UserUsageData) GetDestinationConnectorDefinitionIds() []string {
	if x != nil {
		return x.DestinationConnectorDefinitionIds
	}
	return nil
}

// Per user usage data in the model service
type ModelUsageData_UserUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User UUID
	UserUid string `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	// Number of models that have at least one 'online' instance
	ModelOnlineStateNum int64 `protobuf:"varint,2,opt,name=model_online_state_num,json=modelOnlineStateNum,proto3" json:"model_online_state_num,omitempty"`
	// Number of models that have no 'online' instances
	ModelOfflineStateNum int64 `protobuf:"varint,3,opt,name=model_offline_state_num,json=modelOfflineStateNum,proto3" json:"model_offline_state_num,omitempty"`
	// Number of model instances with 'online' state
	InstanceOnlineStateNum int64 `protobuf:"varint,4,opt,name=instance_online_state_num,json=instanceOnlineStateNum,proto3" json:"instance_online_state_num,omitempty"`
	// Number of model instances with 'offline' state
	InstanceOfflineStateNum int64 `protobuf:"varint,5,opt,name=instance_offline_state_num,json=instanceOfflineStateNum,proto3" json:"instance_offline_state_num,omitempty"`
	// Definition IDs of the model instances. Element in the list
	// should not be duplicated.
	ModelDefinitionIds []string `protobuf:"bytes,6,rep,name=model_definition_ids,json=modelDefinitionIds,proto3" json:"model_definition_ids,omitempty"`
	// Tasks of the model instances. Element in the list should not be
	// duplicated.
	Tasks []v1alpha1.ModelInstance_Task `protobuf:"varint,7,rep,packed,name=tasks,proto3,enum=vdp.model.v1alpha.ModelInstance_Task" json:"tasks,omitempty"`
	// Number of model instance testing operations
	TestNum int64 `protobuf:"varint,8,opt,name=test_num,json=testNum,proto3" json:"test_num,omitempty"`
}

func (x *ModelUsageData_UserUsageData) Reset() {
	*x = ModelUsageData_UserUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelUsageData_UserUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelUsageData_UserUsageData) ProtoMessage() {}

func (x *ModelUsageData_UserUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelUsageData_UserUsageData.ProtoReflect.Descriptor instead.
func (*ModelUsageData_UserUsageData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ModelUsageData_UserUsageData) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *ModelUsageData_UserUsageData) GetModelOnlineStateNum() int64 {
	if x != nil {
		return x.ModelOnlineStateNum
	}
	return 0
}

func (x *ModelUsageData_UserUsageData) GetModelOfflineStateNum() int64 {
	if x != nil {
		return x.ModelOfflineStateNum
	}
	return 0
}

func (x *ModelUsageData_UserUsageData) GetInstanceOnlineStateNum() int64 {
	if x != nil {
		return x.InstanceOnlineStateNum
	}
	return 0
}

func (x *ModelUsageData_UserUsageData) GetInstanceOfflineStateNum() int64 {
	if x != nil {
		return x.InstanceOfflineStateNum
	}
	return 0
}

func (x *ModelUsageData_UserUsageData) GetModelDefinitionIds() []string {
	if x != nil {
		return x.ModelDefinitionIds
	}
	return nil
}

func (x *ModelUsageData_UserUsageData) GetTasks() []v1alpha1.ModelInstance_Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *ModelUsageData_UserUsageData) GetTestNum() int64 {
	if x != nil {
		return x.TestNum
	}
	return 0
}

// Per user usage data in the pipeline service
type PipelineUsageData_UserUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User UUID
	UserUid string `protobuf:"bytes,1,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	// Number of pipelines with 'active' state
	PipelineActiveStateNum int64 `protobuf:"varint,2,opt,name=pipeline_active_state_num,json=pipelineActiveStateNum,proto3" json:"pipeline_active_state_num,omitempty"`
	// Number of pipelines with 'inactive' state
	PipelineInactiveStateNum int64 `protobuf:"varint,3,opt,name=pipeline_inactive_state_num,json=pipelineInactiveStateNum,proto3" json:"pipeline_inactive_state_num,omitempty"`
	// Number of pipelines with 'async' mode
	PipelineAsyncModeNum int64 `protobuf:"varint,4,opt,name=pipeline_async_mode_num,json=pipelineAsyncModeNum,proto3" json:"pipeline_async_mode_num,omitempty"`
	// Number of pipelines with 'sync' mode
	PipelineSyncModeNum int64 `protobuf:"varint,5,opt,name=pipeline_sync_mode_num,json=pipelineSyncModeNum,proto3" json:"pipeline_sync_mode_num,omitempty"`
	// Number of pipeline triggering operations
	TriggerNum int64 `protobuf:"varint,6,opt,name=trigger_num,json=triggerNum,proto3" json:"trigger_num,omitempty"`
}

func (x *PipelineUsageData_UserUsageData) Reset() {
	*x = PipelineUsageData_UserUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineUsageData_UserUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineUsageData_UserUsageData) ProtoMessage() {}

func (x *PipelineUsageData_UserUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_vdp_usage_v1alpha_usage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineUsageData_UserUsageData.ProtoReflect.Descriptor instead.
func (*PipelineUsageData_UserUsageData) Descriptor() ([]byte, []int) {
	return file_vdp_usage_v1alpha_usage_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PipelineUsageData_UserUsageData) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *PipelineUsageData_UserUsageData) GetPipelineActiveStateNum() int64 {
	if x != nil {
		return x.PipelineActiveStateNum
	}
	return 0
}

func (x *PipelineUsageData_UserUsageData) GetPipelineInactiveStateNum() int64 {
	if x != nil {
		return x.PipelineInactiveStateNum
	}
	return 0
}

func (x *PipelineUsageData_UserUsageData) GetPipelineAsyncModeNum() int64 {
	if x != nil {
		return x.PipelineAsyncModeNum
	}
	return 0
}

func (x *PipelineUsageData_UserUsageData) GetPipelineSyncModeNum() int64 {
	if x != nil {
		return x.PipelineSyncModeNum
	}
	return 0
}

func (x *PipelineUsageData_UserUsageData) GetTriggerNum() int64 {
	if x != nil {
		return x.TriggerNum
	}
	return 0
}

var File_vdp_usage_v1alpha_usage_proto protoreflect.FileDescriptor

var file_vdp_usage_v1alpha_usage_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x76, 0x64, 0x70, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x76, 0x64, 0x70, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x76, 0x64,
	0x70, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x05, 0x0a, 0x07,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x13, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x4d, 0x47, 0x4d, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x04, 0x3a, 0x31, 0xea, 0x41, 0x2e, 0x0a,
	0x18, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63,
	0x68, 0x2f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x22, 0x3f, 0x0a,
	0x0d, 0x4d, 0x67, 0x6d, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e,
	0x0a, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xa9,
	0x05, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x1a, 0xc5, 0x04, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x24, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x59, 0x0a, 0x27, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x23, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x4a, 0x0a, 0x1f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x1c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x5d, 0x0a, 0x29, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x25, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12,
	0x63, 0x0a, 0x2c, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x28, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x24, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x21, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x9c, 0x04, 0x0a, 0x0e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a,
	0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0xc0, 0x03, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x16, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x3a, 0x0a, 0x17, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x3e,
	0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x40,
	0x0a, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x35, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x22, 0xb1, 0x03, 0x0a, 0x11, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x4a, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0xcf, 0x02, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x3e, 0x0a,
	0x19, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x16, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x42, 0x0a,
	0x1b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x18, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x3a, 0x0a, 0x17, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x38, 0x0a,
	0x16, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x13, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0xfe, 0x03,
	0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x15, 0x0a, 0x03, 0x70, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x03, 0x70, 0x6f, 0x77, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0f, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76, 0x64,
	0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4d, 0x67, 0x6d, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0d, 0x6d, 0x67, 0x6d, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x59,
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76,
	0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x10, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x13, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x0c, 0x0a, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x51,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x4d, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x64,
	0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x59, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x76,
	0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x53,
	0x65, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xcb, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d,
	0x2e, 0x76, 0x64, 0x70, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x42, 0x0a, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x6c, 0x6c, 0x2d, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e,
	0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x64, 0x70, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0xa2, 0x02, 0x03, 0x56, 0x55, 0x58, 0xaa, 0x02, 0x11, 0x56, 0x64, 0x70, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x11, 0x56,
	0x64, 0x70, 0x5c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0xe2, 0x02, 0x1d, 0x56, 0x64, 0x70, 0x5c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x13, 0x56, 0x64, 0x70, 0x3a, 0x3a, 0x55, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x3a, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vdp_usage_v1alpha_usage_proto_rawDescOnce sync.Once
	file_vdp_usage_v1alpha_usage_proto_rawDescData = file_vdp_usage_v1alpha_usage_proto_rawDesc
)

func file_vdp_usage_v1alpha_usage_proto_rawDescGZIP() []byte {
	file_vdp_usage_v1alpha_usage_proto_rawDescOnce.Do(func() {
		file_vdp_usage_v1alpha_usage_proto_rawDescData = protoimpl.X.CompressGZIP(file_vdp_usage_v1alpha_usage_proto_rawDescData)
	})
	return file_vdp_usage_v1alpha_usage_proto_rawDescData
}

var file_vdp_usage_v1alpha_usage_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vdp_usage_v1alpha_usage_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_vdp_usage_v1alpha_usage_proto_goTypes = []interface{}{
	(Session_Service)(0),                     // 0: vdp.usage.v1alpha.Session.Service
	(*Session)(nil),                          // 1: vdp.usage.v1alpha.Session
	(*MgmtUsageData)(nil),                    // 2: vdp.usage.v1alpha.MgmtUsageData
	(*ConnectorUsageData)(nil),               // 3: vdp.usage.v1alpha.ConnectorUsageData
	(*ModelUsageData)(nil),                   // 4: vdp.usage.v1alpha.ModelUsageData
	(*PipelineUsageData)(nil),                // 5: vdp.usage.v1alpha.PipelineUsageData
	(*SessionReport)(nil),                    // 6: vdp.usage.v1alpha.SessionReport
	(*CreateSessionRequest)(nil),             // 7: vdp.usage.v1alpha.CreateSessionRequest
	(*CreateSessionResponse)(nil),            // 8: vdp.usage.v1alpha.CreateSessionResponse
	(*SendSessionReportRequest)(nil),         // 9: vdp.usage.v1alpha.SendSessionReportRequest
	(*SendSessionReportResponse)(nil),        // 10: vdp.usage.v1alpha.SendSessionReportResponse
	(*ConnectorUsageData_UserUsageData)(nil), // 11: vdp.usage.v1alpha.ConnectorUsageData.UserUsageData
	(*ModelUsageData_UserUsageData)(nil),     // 12: vdp.usage.v1alpha.ModelUsageData.UserUsageData
	(*PipelineUsageData_UserUsageData)(nil),  // 13: vdp.usage.v1alpha.PipelineUsageData.UserUsageData
	(*timestamppb.Timestamp)(nil),            // 14: google.protobuf.Timestamp
	(*v1alpha.User)(nil),                     // 15: vdp.mgmt.v1alpha.User
	(v1alpha1.ModelInstance_Task)(0),         // 16: vdp.model.v1alpha.ModelInstance.Task
}
var file_vdp_usage_v1alpha_usage_proto_depIdxs = []int32{
	0,  // 0: vdp.usage.v1alpha.Session.service:type_name -> vdp.usage.v1alpha.Session.Service
	14, // 1: vdp.usage.v1alpha.Session.report_time:type_name -> google.protobuf.Timestamp
	14, // 2: vdp.usage.v1alpha.Session.create_time:type_name -> google.protobuf.Timestamp
	14, // 3: vdp.usage.v1alpha.Session.update_time:type_name -> google.protobuf.Timestamp
	15, // 4: vdp.usage.v1alpha.MgmtUsageData.usages:type_name -> vdp.mgmt.v1alpha.User
	11, // 5: vdp.usage.v1alpha.ConnectorUsageData.usages:type_name -> vdp.usage.v1alpha.ConnectorUsageData.UserUsageData
	12, // 6: vdp.usage.v1alpha.ModelUsageData.usages:type_name -> vdp.usage.v1alpha.ModelUsageData.UserUsageData
	13, // 7: vdp.usage.v1alpha.PipelineUsageData.usages:type_name -> vdp.usage.v1alpha.PipelineUsageData.UserUsageData
	1,  // 8: vdp.usage.v1alpha.SessionReport.session:type_name -> vdp.usage.v1alpha.Session
	2,  // 9: vdp.usage.v1alpha.SessionReport.mgmt_usage_data:type_name -> vdp.usage.v1alpha.MgmtUsageData
	3,  // 10: vdp.usage.v1alpha.SessionReport.connector_usage_data:type_name -> vdp.usage.v1alpha.ConnectorUsageData
	4,  // 11: vdp.usage.v1alpha.SessionReport.model_usage_data:type_name -> vdp.usage.v1alpha.ModelUsageData
	5,  // 12: vdp.usage.v1alpha.SessionReport.pipeline_usage_data:type_name -> vdp.usage.v1alpha.PipelineUsageData
	1,  // 13: vdp.usage.v1alpha.CreateSessionRequest.session:type_name -> vdp.usage.v1alpha.Session
	1,  // 14: vdp.usage.v1alpha.CreateSessionResponse.session:type_name -> vdp.usage.v1alpha.Session
	6,  // 15: vdp.usage.v1alpha.SendSessionReportRequest.report:type_name -> vdp.usage.v1alpha.SessionReport
	16, // 16: vdp.usage.v1alpha.ModelUsageData.UserUsageData.tasks:type_name -> vdp.model.v1alpha.ModelInstance.Task
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_vdp_usage_v1alpha_usage_proto_init() }
func file_vdp_usage_v1alpha_usage_proto_init() {
	if File_vdp_usage_v1alpha_usage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vdp_usage_v1alpha_usage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgmtUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSessionReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSessionReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorUsageData_UserUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelUsageData_UserUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vdp_usage_v1alpha_usage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineUsageData_UserUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_vdp_usage_v1alpha_usage_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*SessionReport_MgmtUsageData)(nil),
		(*SessionReport_ConnectorUsageData)(nil),
		(*SessionReport_ModelUsageData)(nil),
		(*SessionReport_PipelineUsageData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vdp_usage_v1alpha_usage_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vdp_usage_v1alpha_usage_proto_goTypes,
		DependencyIndexes: file_vdp_usage_v1alpha_usage_proto_depIdxs,
		EnumInfos:         file_vdp_usage_v1alpha_usage_proto_enumTypes,
		MessageInfos:      file_vdp_usage_v1alpha_usage_proto_msgTypes,
	}.Build()
	File_vdp_usage_v1alpha_usage_proto = out.File
	file_vdp_usage_v1alpha_usage_proto_rawDesc = nil
	file_vdp_usage_v1alpha_usage_proto_goTypes = nil
	file_vdp_usage_v1alpha_usage_proto_depIdxs = nil
}
