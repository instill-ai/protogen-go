// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mgmtv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MgmtAdminServiceClient is the client API for MgmtAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MgmtAdminServiceClient interface {
	// ListUser method receives a ListUserRequest message and returns a
	// ListUserResponse message.
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	// CreateUser receives a CreateUserRequest message and returns a
	// aGetUserResponse
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// GetUser method receives a GetUserRequest message and returns
	// a GetUserResponse message.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// UpdateUser method receives a UpdateUserRequest message and returns
	// a UpdateUserResponse
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// DeleteUser method receives a DeleteUserRequest message and returns a
	// DeleteUserResponse
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// LookUpUser method receives a LookUpUserRequest message and returns a
	// LookUpUserResponse
	LookUpUser(ctx context.Context, in *LookUpUserRequest, opts ...grpc.CallOption) (*LookUpUserResponse, error)
}

type mgmtAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtAdminServiceClient(cc grpc.ClientConnInterface) MgmtAdminServiceClient {
	return &mgmtAdminServiceClient{cc}
}

func (c *mgmtAdminServiceClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.MgmtAdminService/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtAdminServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.MgmtAdminService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtAdminServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.MgmtAdminService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtAdminServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.MgmtAdminService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtAdminServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.MgmtAdminService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtAdminServiceClient) LookUpUser(ctx context.Context, in *LookUpUserRequest, opts ...grpc.CallOption) (*LookUpUserResponse, error) {
	out := new(LookUpUserResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.MgmtAdminService/LookUpUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtAdminServiceServer is the server API for MgmtAdminService service.
// All implementations should embed UnimplementedMgmtAdminServiceServer
// for forward compatibility
type MgmtAdminServiceServer interface {
	// ListUser method receives a ListUserRequest message and returns a
	// ListUserResponse message.
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	// CreateUser receives a CreateUserRequest message and returns a
	// aGetUserResponse
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// GetUser method receives a GetUserRequest message and returns
	// a GetUserResponse message.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// UpdateUser method receives a UpdateUserRequest message and returns
	// a UpdateUserResponse
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// DeleteUser method receives a DeleteUserRequest message and returns a
	// DeleteUserResponse
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// LookUpUser method receives a LookUpUserRequest message and returns a
	// LookUpUserResponse
	LookUpUser(context.Context, *LookUpUserRequest) (*LookUpUserResponse, error)
}

// UnimplementedMgmtAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMgmtAdminServiceServer struct {
}

func (UnimplementedMgmtAdminServiceServer) ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedMgmtAdminServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMgmtAdminServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedMgmtAdminServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedMgmtAdminServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedMgmtAdminServiceServer) LookUpUser(context.Context, *LookUpUserRequest) (*LookUpUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpUser not implemented")
}

// UnsafeMgmtAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MgmtAdminServiceServer will
// result in compilation errors.
type UnsafeMgmtAdminServiceServer interface {
	mustEmbedUnimplementedMgmtAdminServiceServer()
}

func RegisterMgmtAdminServiceServer(s grpc.ServiceRegistrar, srv MgmtAdminServiceServer) {
	s.RegisterService(&MgmtAdminService_ServiceDesc, srv)
}

func _MgmtAdminService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtAdminServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.MgmtAdminService/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtAdminServiceServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtAdminService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtAdminServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.MgmtAdminService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtAdminServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtAdminService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtAdminServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.MgmtAdminService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtAdminServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtAdminService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtAdminServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.MgmtAdminService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtAdminServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtAdminService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtAdminServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.MgmtAdminService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtAdminServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtAdminService_LookUpUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtAdminServiceServer).LookUpUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.MgmtAdminService/LookUpUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtAdminServiceServer).LookUpUser(ctx, req.(*LookUpUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MgmtAdminService_ServiceDesc is the grpc.ServiceDesc for MgmtAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MgmtAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.mgmt.v1alpha.MgmtAdminService",
	HandlerType: (*MgmtAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUser",
			Handler:    _MgmtAdminService_ListUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _MgmtAdminService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _MgmtAdminService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _MgmtAdminService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _MgmtAdminService_DeleteUser_Handler,
		},
		{
			MethodName: "LookUpUser",
			Handler:    _MgmtAdminService_LookUpUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vdp/mgmt/v1alpha/mgmt_admin_service.proto",
}
