// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mgmtv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MgmtPublicServiceClient is the client API for MgmtPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MgmtPublicServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// QueryAuthenticatedUser method receives a QueryAuthenticatedUserRequest
	// message and returns a QueryAuthenticatedUserResponse message.
	QueryAuthenticatedUser(ctx context.Context, in *QueryAuthenticatedUserRequest, opts ...grpc.CallOption) (*QueryAuthenticatedUserResponse, error)
	// PatchAuthenticatedUser method receives a PatchAuthenticatedUserRequest
	// message and returns a PatchAuthenticatedUserResponse message.
	PatchAuthenticatedUser(ctx context.Context, in *PatchAuthenticatedUserRequest, opts ...grpc.CallOption) (*PatchAuthenticatedUserResponse, error)
	// ExistUsername method receives a ExistUsernameRequest message and returns a
	// ExistUsernameResponse
	ExistUsername(ctx context.Context, in *ExistUsernameRequest, opts ...grpc.CallOption) (*ExistUsernameResponse, error)
}

type mgmtPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtPublicServiceClient(cc grpc.ClientConnInterface) MgmtPublicServiceClient {
	return &mgmtPublicServiceClient{cc}
}

func (c *mgmtPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.MgmtPublicService/Liveness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.MgmtPublicService/Readiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) QueryAuthenticatedUser(ctx context.Context, in *QueryAuthenticatedUserRequest, opts ...grpc.CallOption) (*QueryAuthenticatedUserResponse, error) {
	out := new(QueryAuthenticatedUserResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.MgmtPublicService/QueryAuthenticatedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) PatchAuthenticatedUser(ctx context.Context, in *PatchAuthenticatedUserRequest, opts ...grpc.CallOption) (*PatchAuthenticatedUserResponse, error) {
	out := new(PatchAuthenticatedUserResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.MgmtPublicService/PatchAuthenticatedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ExistUsername(ctx context.Context, in *ExistUsernameRequest, opts ...grpc.CallOption) (*ExistUsernameResponse, error) {
	out := new(ExistUsernameResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.MgmtPublicService/ExistUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtPublicServiceServer is the server API for MgmtPublicService service.
// All implementations should embed UnimplementedMgmtPublicServiceServer
// for forward compatibility
type MgmtPublicServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// QueryAuthenticatedUser method receives a QueryAuthenticatedUserRequest
	// message and returns a QueryAuthenticatedUserResponse message.
	QueryAuthenticatedUser(context.Context, *QueryAuthenticatedUserRequest) (*QueryAuthenticatedUserResponse, error)
	// PatchAuthenticatedUser method receives a PatchAuthenticatedUserRequest
	// message and returns a PatchAuthenticatedUserResponse message.
	PatchAuthenticatedUser(context.Context, *PatchAuthenticatedUserRequest) (*PatchAuthenticatedUserResponse, error)
	// ExistUsername method receives a ExistUsernameRequest message and returns a
	// ExistUsernameResponse
	ExistUsername(context.Context, *ExistUsernameRequest) (*ExistUsernameResponse, error)
}

// UnimplementedMgmtPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMgmtPublicServiceServer struct {
}

func (UnimplementedMgmtPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedMgmtPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedMgmtPublicServiceServer) QueryAuthenticatedUser(context.Context, *QueryAuthenticatedUserRequest) (*QueryAuthenticatedUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAuthenticatedUser not implemented")
}
func (UnimplementedMgmtPublicServiceServer) PatchAuthenticatedUser(context.Context, *PatchAuthenticatedUserRequest) (*PatchAuthenticatedUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAuthenticatedUser not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ExistUsername(context.Context, *ExistUsernameRequest) (*ExistUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUsername not implemented")
}

// UnsafeMgmtPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MgmtPublicServiceServer will
// result in compilation errors.
type UnsafeMgmtPublicServiceServer interface {
	mustEmbedUnimplementedMgmtPublicServiceServer()
}

func RegisterMgmtPublicServiceServer(s grpc.ServiceRegistrar, srv MgmtPublicServiceServer) {
	s.RegisterService(&MgmtPublicService_ServiceDesc, srv)
}

func _MgmtPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.MgmtPublicService/Liveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.MgmtPublicService/Readiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_QueryAuthenticatedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuthenticatedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).QueryAuthenticatedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.MgmtPublicService/QueryAuthenticatedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).QueryAuthenticatedUser(ctx, req.(*QueryAuthenticatedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_PatchAuthenticatedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAuthenticatedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).PatchAuthenticatedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.MgmtPublicService/PatchAuthenticatedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).PatchAuthenticatedUser(ctx, req.(*PatchAuthenticatedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ExistUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ExistUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.MgmtPublicService/ExistUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ExistUsername(ctx, req.(*ExistUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MgmtPublicService_ServiceDesc is the grpc.ServiceDesc for MgmtPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MgmtPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.mgmt.v1alpha.MgmtPublicService",
	HandlerType: (*MgmtPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _MgmtPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _MgmtPublicService_Readiness_Handler,
		},
		{
			MethodName: "QueryAuthenticatedUser",
			Handler:    _MgmtPublicService_QueryAuthenticatedUser_Handler,
		},
		{
			MethodName: "PatchAuthenticatedUser",
			Handler:    _MgmtPublicService_PatchAuthenticatedUser_Handler,
		},
		{
			MethodName: "ExistUsername",
			Handler:    _MgmtPublicService_ExistUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vdp/mgmt/v1alpha/mgmt_public_service.proto",
}
