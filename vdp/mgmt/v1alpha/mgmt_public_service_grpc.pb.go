// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mgmtv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserPublicServiceClient is the client API for UserPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPublicServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// GetAuthenticatedUser method receives a GetAuthenticatedUserRequest message and returns
	// a GetAuthenticatedUserResponse message.
	GetAuthenticatedUser(ctx context.Context, in *GetAuthenticatedUserRequest, opts ...grpc.CallOption) (*GetAuthenticatedUserResponse, error)
	// UpdateAuthenticatedUser method receives a UpdateAuthenticatedUserRequest message and returns
	// a UpdateAuthenticatedUserResponse message.
	UpdateAuthenticatedUser(ctx context.Context, in *UpdateAuthenticatedUserRequest, opts ...grpc.CallOption) (*UpdateAuthenticatedUserResponse, error)
	// ExistUsername method receives a ExistUsernameRequest message and returns a
	// ExistUsernameResponse
	ExistUsername(ctx context.Context, in *ExistUsernameRequest, opts ...grpc.CallOption) (*ExistUsernameResponse, error)
}

type userPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPublicServiceClient(cc grpc.ClientConnInterface) UserPublicServiceClient {
	return &userPublicServiceClient{cc}
}

func (c *userPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.UserPublicService/Liveness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.UserPublicService/Readiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPublicServiceClient) GetAuthenticatedUser(ctx context.Context, in *GetAuthenticatedUserRequest, opts ...grpc.CallOption) (*GetAuthenticatedUserResponse, error) {
	out := new(GetAuthenticatedUserResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.UserPublicService/GetAuthenticatedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPublicServiceClient) UpdateAuthenticatedUser(ctx context.Context, in *UpdateAuthenticatedUserRequest, opts ...grpc.CallOption) (*UpdateAuthenticatedUserResponse, error) {
	out := new(UpdateAuthenticatedUserResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.UserPublicService/UpdateAuthenticatedUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPublicServiceClient) ExistUsername(ctx context.Context, in *ExistUsernameRequest, opts ...grpc.CallOption) (*ExistUsernameResponse, error) {
	out := new(ExistUsernameResponse)
	err := c.cc.Invoke(ctx, "/vdp.mgmt.v1alpha.UserPublicService/ExistUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPublicServiceServer is the server API for UserPublicService service.
// All implementations should embed UnimplementedUserPublicServiceServer
// for forward compatibility
type UserPublicServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// GetAuthenticatedUser method receives a GetAuthenticatedUserRequest message and returns
	// a GetAuthenticatedUserResponse message.
	GetAuthenticatedUser(context.Context, *GetAuthenticatedUserRequest) (*GetAuthenticatedUserResponse, error)
	// UpdateAuthenticatedUser method receives a UpdateAuthenticatedUserRequest message and returns
	// a UpdateAuthenticatedUserResponse message.
	UpdateAuthenticatedUser(context.Context, *UpdateAuthenticatedUserRequest) (*UpdateAuthenticatedUserResponse, error)
	// ExistUsername method receives a ExistUsernameRequest message and returns a
	// ExistUsernameResponse
	ExistUsername(context.Context, *ExistUsernameRequest) (*ExistUsernameResponse, error)
}

// UnimplementedUserPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserPublicServiceServer struct {
}

func (UnimplementedUserPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedUserPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedUserPublicServiceServer) GetAuthenticatedUser(context.Context, *GetAuthenticatedUserRequest) (*GetAuthenticatedUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthenticatedUser not implemented")
}
func (UnimplementedUserPublicServiceServer) UpdateAuthenticatedUser(context.Context, *UpdateAuthenticatedUserRequest) (*UpdateAuthenticatedUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthenticatedUser not implemented")
}
func (UnimplementedUserPublicServiceServer) ExistUsername(context.Context, *ExistUsernameRequest) (*ExistUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUsername not implemented")
}

// UnsafeUserPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPublicServiceServer will
// result in compilation errors.
type UnsafeUserPublicServiceServer interface {
	mustEmbedUnimplementedUserPublicServiceServer()
}

func RegisterUserPublicServiceServer(s grpc.ServiceRegistrar, srv UserPublicServiceServer) {
	s.RegisterService(&UserPublicService_ServiceDesc, srv)
}

func _UserPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.UserPublicService/Liveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.UserPublicService/Readiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPublicService_GetAuthenticatedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthenticatedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPublicServiceServer).GetAuthenticatedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.UserPublicService/GetAuthenticatedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPublicServiceServer).GetAuthenticatedUser(ctx, req.(*GetAuthenticatedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPublicService_UpdateAuthenticatedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthenticatedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPublicServiceServer).UpdateAuthenticatedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.UserPublicService/UpdateAuthenticatedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPublicServiceServer).UpdateAuthenticatedUser(ctx, req.(*UpdateAuthenticatedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPublicService_ExistUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPublicServiceServer).ExistUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.mgmt.v1alpha.UserPublicService/ExistUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPublicServiceServer).ExistUsername(ctx, req.(*ExistUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPublicService_ServiceDesc is the grpc.ServiceDesc for UserPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.mgmt.v1alpha.UserPublicService",
	HandlerType: (*UserPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _UserPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _UserPublicService_Readiness_Handler,
		},
		{
			MethodName: "GetAuthenticatedUser",
			Handler:    _UserPublicService_GetAuthenticatedUser_Handler,
		},
		{
			MethodName: "UpdateAuthenticatedUser",
			Handler:    _UserPublicService_UpdateAuthenticatedUser_Handler,
		},
		{
			MethodName: "ExistUsername",
			Handler:    _UserPublicService_ExistUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vdp/mgmt/v1alpha/mgmt_public_service.proto",
}
