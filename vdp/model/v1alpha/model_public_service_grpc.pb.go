// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package modelv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelPublicServiceClient is the client API for ModelPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelPublicServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// ListModelDefinitions method receives a ListModelDefinitionsRequest message
	// and returns a ListModelDefinitionsResponse
	ListModelDefinitions(ctx context.Context, in *ListModelDefinitionsRequest, opts ...grpc.CallOption) (*ListModelDefinitionsResponse, error)
	// GetModelDefinition method receives a GetModelDefinitionRequest message and
	// returns a GetModelDefinitionResponse
	GetModelDefinition(ctx context.Context, in *GetModelDefinitionRequest, opts ...grpc.CallOption) (*GetModelDefinitionResponse, error)
	// ListModels method receives a ListModelsRequest message and returns a
	// ListModelsResponse
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	// CreateModel method receives a CreateModelRequest message and returns a
	// CreateModelResponse
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error)
	// CreateModelBinaryFileUpload method receives a
	// CreateModelBinaryFileUploadRequest message and returns a
	// CreateModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST /v1alpha/models:multipart"
	CreateModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_CreateModelBinaryFileUploadClient, error)
	// GetModel method receives a GetModelRequest message and returns a
	// GetModelResponse
	GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*GetModelResponse, error)
	// UpdateModel method receives a UpdateModelRequest message and returns a
	// UpdateModelResponse
	UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*UpdateModelResponse, error)
	// DeleteModel method receives a DeleteModelRequest message and returns a
	// DeleteModelResponse
	DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*DeleteModelResponse, error)
	// LookUpModel method receives a LookUpModelRequest message and returns a
	// LookUpModelResponse
	LookUpModel(ctx context.Context, in *LookUpModelRequest, opts ...grpc.CallOption) (*LookUpModelResponse, error)
	// RenameModel method rename a model
	RenameModel(ctx context.Context, in *RenameModelRequest, opts ...grpc.CallOption) (*RenameModelResponse, error)
	// PublishModel method receives a PublishModelRequest message and returns a
	// PublishModelResponse
	PublishModel(ctx context.Context, in *PublishModelRequest, opts ...grpc.CallOption) (*PublishModelResponse, error)
	// UnpublishModel method receives a UnpublishModelRequest message and returns
	// a UnpublishModelResponse
	UnpublishModel(ctx context.Context, in *UnpublishModelRequest, opts ...grpc.CallOption) (*UnpublishModelResponse, error)
	// ListModelInstances method receives a ListModelInstancesRequest message and
	// returns a ListModelInstancesResponse
	ListModelInstances(ctx context.Context, in *ListModelInstancesRequest, opts ...grpc.CallOption) (*ListModelInstancesResponse, error)
	// GetModelInstance method receives a GetModelInstanceRequest message and
	// returns a GetModelInstanceResponse
	GetModelInstance(ctx context.Context, in *GetModelInstanceRequest, opts ...grpc.CallOption) (*GetModelInstanceResponse, error)
	// LookUpModelInstance method receives a LookUpModelInstanceRequest message
	// and returns a
	// LookUpModelInstanceResponse
	LookUpModelInstance(ctx context.Context, in *LookUpModelInstanceRequest, opts ...grpc.CallOption) (*LookUpModelInstanceResponse, error)
	// DeployModelInstance deploy a model instance to online state
	DeployModelInstance(ctx context.Context, in *DeployModelInstanceRequest, opts ...grpc.CallOption) (*DeployModelInstanceResponse, error)
	// UndeployModelInstance undeploy a model instance to offline state
	UndeployModelInstance(ctx context.Context, in *UndeployModelInstanceRequest, opts ...grpc.CallOption) (*UndeployModelInstanceResponse, error)
	// GetModelInstanceCard method receives a GetModelInstanceCardRequest message
	// and returns a GetModelInstanceCardResponse
	GetModelInstanceCard(ctx context.Context, in *GetModelInstanceCardRequest, opts ...grpc.CallOption) (*GetModelInstanceCardResponse, error)
	// WatchModelInstance method receives a WatchModelInstanceRequest message
	// and returns a WatchModelInstanceResponse
	WatchModelInstance(ctx context.Context, in *WatchModelInstanceRequest, opts ...grpc.CallOption) (*WatchModelInstanceResponse, error)
	///////////////////////////////////////////////////////
	//
	// TriggerModelInstance method receives a TriggerModelInstanceRequest message
	// and returns a TriggerModelInstanceResponse message.
	TriggerModelInstance(ctx context.Context, in *TriggerModelInstanceRequest, opts ...grpc.CallOption) (*TriggerModelInstanceResponse, error)
	// TriggerModelInstanceBinaryFileUpload method receives a
	// TriggerModelInstanceBinaryFileUploadRequest message and returns a
	// TriggerModelInstanceBinaryFileUploadResponse message.
	//
	// Endpoint: "POST/v1alpha/{name=models/*/instances/*}/trigger-multipart"
	TriggerModelInstanceBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TriggerModelInstanceBinaryFileUploadClient, error)
	// TestModelInstance method receives a TestModelInstanceRequest message
	// and returns a TestModelInstanceResponse message.
	TestModelInstance(ctx context.Context, in *TestModelInstanceRequest, opts ...grpc.CallOption) (*TestModelInstanceResponse, error)
	// TestModelInstanceBinaryFileUpload method receives a
	// TestModelInstanceBinaryFileUploadRequest message and returns a
	// TestModelInstanceBinaryFileUploadResponse message.
	//
	// Endpoint: "POST/v1alpha/{name=models/*/instances/*}/test-multipart"
	TestModelInstanceBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TestModelInstanceBinaryFileUploadClient, error)
	// GetModelOperation method receives a
	// GetModelOperationRequest message and returns a
	// GetModelOperationResponse message.
	GetModelOperation(ctx context.Context, in *GetModelOperationRequest, opts ...grpc.CallOption) (*GetModelOperationResponse, error)
	// ListModelOperations method receives a ListModelOperationsRequest message
	// and returns a ListModelOperationsResponse
	ListModelOperations(ctx context.Context, in *ListModelOperationsRequest, opts ...grpc.CallOption) (*ListModelOperationsResponse, error)
	// CancelModelOperation method receives a CancelModelOperationRequest message
	// and returns a CancelModelOperationResponse
	CancelModelOperation(ctx context.Context, in *CancelModelOperationRequest, opts ...grpc.CallOption) (*CancelModelOperationResponse, error)
}

type modelPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelPublicServiceClient(cc grpc.ClientConnInterface) ModelPublicServiceClient {
	return &modelPublicServiceClient{cc}
}

func (c *modelPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/Liveness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/Readiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListModelDefinitions(ctx context.Context, in *ListModelDefinitionsRequest, opts ...grpc.CallOption) (*ListModelDefinitionsResponse, error) {
	out := new(ListModelDefinitionsResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/ListModelDefinitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) GetModelDefinition(ctx context.Context, in *GetModelDefinitionRequest, opts ...grpc.CallOption) (*GetModelDefinitionResponse, error) {
	out := new(GetModelDefinitionResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/GetModelDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/ListModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error) {
	out := new(CreateModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/CreateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) CreateModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_CreateModelBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelPublicService_ServiceDesc.Streams[0], "/vdp.model.v1alpha.ModelPublicService/CreateModelBinaryFileUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelPublicServiceCreateModelBinaryFileUploadClient{stream}
	return x, nil
}

type ModelPublicService_CreateModelBinaryFileUploadClient interface {
	Send(*CreateModelBinaryFileUploadRequest) error
	CloseAndRecv() (*CreateModelBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type modelPublicServiceCreateModelBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *modelPublicServiceCreateModelBinaryFileUploadClient) Send(m *CreateModelBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelPublicServiceCreateModelBinaryFileUploadClient) CloseAndRecv() (*CreateModelBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateModelBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelPublicServiceClient) GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*GetModelResponse, error) {
	out := new(GetModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*UpdateModelResponse, error) {
	out := new(UpdateModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/UpdateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*DeleteModelResponse, error) {
	out := new(DeleteModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/DeleteModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) LookUpModel(ctx context.Context, in *LookUpModelRequest, opts ...grpc.CallOption) (*LookUpModelResponse, error) {
	out := new(LookUpModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/LookUpModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) RenameModel(ctx context.Context, in *RenameModelRequest, opts ...grpc.CallOption) (*RenameModelResponse, error) {
	out := new(RenameModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/RenameModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) PublishModel(ctx context.Context, in *PublishModelRequest, opts ...grpc.CallOption) (*PublishModelResponse, error) {
	out := new(PublishModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/PublishModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) UnpublishModel(ctx context.Context, in *UnpublishModelRequest, opts ...grpc.CallOption) (*UnpublishModelResponse, error) {
	out := new(UnpublishModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/UnpublishModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListModelInstances(ctx context.Context, in *ListModelInstancesRequest, opts ...grpc.CallOption) (*ListModelInstancesResponse, error) {
	out := new(ListModelInstancesResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/ListModelInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) GetModelInstance(ctx context.Context, in *GetModelInstanceRequest, opts ...grpc.CallOption) (*GetModelInstanceResponse, error) {
	out := new(GetModelInstanceResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/GetModelInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) LookUpModelInstance(ctx context.Context, in *LookUpModelInstanceRequest, opts ...grpc.CallOption) (*LookUpModelInstanceResponse, error) {
	out := new(LookUpModelInstanceResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/LookUpModelInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) DeployModelInstance(ctx context.Context, in *DeployModelInstanceRequest, opts ...grpc.CallOption) (*DeployModelInstanceResponse, error) {
	out := new(DeployModelInstanceResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/DeployModelInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) UndeployModelInstance(ctx context.Context, in *UndeployModelInstanceRequest, opts ...grpc.CallOption) (*UndeployModelInstanceResponse, error) {
	out := new(UndeployModelInstanceResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/UndeployModelInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) GetModelInstanceCard(ctx context.Context, in *GetModelInstanceCardRequest, opts ...grpc.CallOption) (*GetModelInstanceCardResponse, error) {
	out := new(GetModelInstanceCardResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/GetModelInstanceCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) WatchModelInstance(ctx context.Context, in *WatchModelInstanceRequest, opts ...grpc.CallOption) (*WatchModelInstanceResponse, error) {
	out := new(WatchModelInstanceResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/WatchModelInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerModelInstance(ctx context.Context, in *TriggerModelInstanceRequest, opts ...grpc.CallOption) (*TriggerModelInstanceResponse, error) {
	out := new(TriggerModelInstanceResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/TriggerModelInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TriggerModelInstanceBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TriggerModelInstanceBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelPublicService_ServiceDesc.Streams[1], "/vdp.model.v1alpha.ModelPublicService/TriggerModelInstanceBinaryFileUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelPublicServiceTriggerModelInstanceBinaryFileUploadClient{stream}
	return x, nil
}

type ModelPublicService_TriggerModelInstanceBinaryFileUploadClient interface {
	Send(*TriggerModelInstanceBinaryFileUploadRequest) error
	CloseAndRecv() (*TriggerModelInstanceBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type modelPublicServiceTriggerModelInstanceBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *modelPublicServiceTriggerModelInstanceBinaryFileUploadClient) Send(m *TriggerModelInstanceBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelPublicServiceTriggerModelInstanceBinaryFileUploadClient) CloseAndRecv() (*TriggerModelInstanceBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TriggerModelInstanceBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelPublicServiceClient) TestModelInstance(ctx context.Context, in *TestModelInstanceRequest, opts ...grpc.CallOption) (*TestModelInstanceResponse, error) {
	out := new(TestModelInstanceResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/TestModelInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) TestModelInstanceBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelPublicService_TestModelInstanceBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelPublicService_ServiceDesc.Streams[2], "/vdp.model.v1alpha.ModelPublicService/TestModelInstanceBinaryFileUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelPublicServiceTestModelInstanceBinaryFileUploadClient{stream}
	return x, nil
}

type ModelPublicService_TestModelInstanceBinaryFileUploadClient interface {
	Send(*TestModelInstanceBinaryFileUploadRequest) error
	CloseAndRecv() (*TestModelInstanceBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type modelPublicServiceTestModelInstanceBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *modelPublicServiceTestModelInstanceBinaryFileUploadClient) Send(m *TestModelInstanceBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelPublicServiceTestModelInstanceBinaryFileUploadClient) CloseAndRecv() (*TestModelInstanceBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestModelInstanceBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelPublicServiceClient) GetModelOperation(ctx context.Context, in *GetModelOperationRequest, opts ...grpc.CallOption) (*GetModelOperationResponse, error) {
	out := new(GetModelOperationResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/GetModelOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) ListModelOperations(ctx context.Context, in *ListModelOperationsRequest, opts ...grpc.CallOption) (*ListModelOperationsResponse, error) {
	out := new(ListModelOperationsResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/ListModelOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelPublicServiceClient) CancelModelOperation(ctx context.Context, in *CancelModelOperationRequest, opts ...grpc.CallOption) (*CancelModelOperationResponse, error) {
	out := new(CancelModelOperationResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelPublicService/CancelModelOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelPublicServiceServer is the server API for ModelPublicService service.
// All implementations should embed UnimplementedModelPublicServiceServer
// for forward compatibility
type ModelPublicServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// ListModelDefinitions method receives a ListModelDefinitionsRequest message
	// and returns a ListModelDefinitionsResponse
	ListModelDefinitions(context.Context, *ListModelDefinitionsRequest) (*ListModelDefinitionsResponse, error)
	// GetModelDefinition method receives a GetModelDefinitionRequest message and
	// returns a GetModelDefinitionResponse
	GetModelDefinition(context.Context, *GetModelDefinitionRequest) (*GetModelDefinitionResponse, error)
	// ListModels method receives a ListModelsRequest message and returns a
	// ListModelsResponse
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	// CreateModel method receives a CreateModelRequest message and returns a
	// CreateModelResponse
	CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error)
	// CreateModelBinaryFileUpload method receives a
	// CreateModelBinaryFileUploadRequest message and returns a
	// CreateModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST /v1alpha/models:multipart"
	CreateModelBinaryFileUpload(ModelPublicService_CreateModelBinaryFileUploadServer) error
	// GetModel method receives a GetModelRequest message and returns a
	// GetModelResponse
	GetModel(context.Context, *GetModelRequest) (*GetModelResponse, error)
	// UpdateModel method receives a UpdateModelRequest message and returns a
	// UpdateModelResponse
	UpdateModel(context.Context, *UpdateModelRequest) (*UpdateModelResponse, error)
	// DeleteModel method receives a DeleteModelRequest message and returns a
	// DeleteModelResponse
	DeleteModel(context.Context, *DeleteModelRequest) (*DeleteModelResponse, error)
	// LookUpModel method receives a LookUpModelRequest message and returns a
	// LookUpModelResponse
	LookUpModel(context.Context, *LookUpModelRequest) (*LookUpModelResponse, error)
	// RenameModel method rename a model
	RenameModel(context.Context, *RenameModelRequest) (*RenameModelResponse, error)
	// PublishModel method receives a PublishModelRequest message and returns a
	// PublishModelResponse
	PublishModel(context.Context, *PublishModelRequest) (*PublishModelResponse, error)
	// UnpublishModel method receives a UnpublishModelRequest message and returns
	// a UnpublishModelResponse
	UnpublishModel(context.Context, *UnpublishModelRequest) (*UnpublishModelResponse, error)
	// ListModelInstances method receives a ListModelInstancesRequest message and
	// returns a ListModelInstancesResponse
	ListModelInstances(context.Context, *ListModelInstancesRequest) (*ListModelInstancesResponse, error)
	// GetModelInstance method receives a GetModelInstanceRequest message and
	// returns a GetModelInstanceResponse
	GetModelInstance(context.Context, *GetModelInstanceRequest) (*GetModelInstanceResponse, error)
	// LookUpModelInstance method receives a LookUpModelInstanceRequest message
	// and returns a
	// LookUpModelInstanceResponse
	LookUpModelInstance(context.Context, *LookUpModelInstanceRequest) (*LookUpModelInstanceResponse, error)
	// DeployModelInstance deploy a model instance to online state
	DeployModelInstance(context.Context, *DeployModelInstanceRequest) (*DeployModelInstanceResponse, error)
	// UndeployModelInstance undeploy a model instance to offline state
	UndeployModelInstance(context.Context, *UndeployModelInstanceRequest) (*UndeployModelInstanceResponse, error)
	// GetModelInstanceCard method receives a GetModelInstanceCardRequest message
	// and returns a GetModelInstanceCardResponse
	GetModelInstanceCard(context.Context, *GetModelInstanceCardRequest) (*GetModelInstanceCardResponse, error)
	// WatchModelInstance method receives a WatchModelInstanceRequest message
	// and returns a WatchModelInstanceResponse
	WatchModelInstance(context.Context, *WatchModelInstanceRequest) (*WatchModelInstanceResponse, error)
	///////////////////////////////////////////////////////
	//
	// TriggerModelInstance method receives a TriggerModelInstanceRequest message
	// and returns a TriggerModelInstanceResponse message.
	TriggerModelInstance(context.Context, *TriggerModelInstanceRequest) (*TriggerModelInstanceResponse, error)
	// TriggerModelInstanceBinaryFileUpload method receives a
	// TriggerModelInstanceBinaryFileUploadRequest message and returns a
	// TriggerModelInstanceBinaryFileUploadResponse message.
	//
	// Endpoint: "POST/v1alpha/{name=models/*/instances/*}/trigger-multipart"
	TriggerModelInstanceBinaryFileUpload(ModelPublicService_TriggerModelInstanceBinaryFileUploadServer) error
	// TestModelInstance method receives a TestModelInstanceRequest message
	// and returns a TestModelInstanceResponse message.
	TestModelInstance(context.Context, *TestModelInstanceRequest) (*TestModelInstanceResponse, error)
	// TestModelInstanceBinaryFileUpload method receives a
	// TestModelInstanceBinaryFileUploadRequest message and returns a
	// TestModelInstanceBinaryFileUploadResponse message.
	//
	// Endpoint: "POST/v1alpha/{name=models/*/instances/*}/test-multipart"
	TestModelInstanceBinaryFileUpload(ModelPublicService_TestModelInstanceBinaryFileUploadServer) error
	// GetModelOperation method receives a
	// GetModelOperationRequest message and returns a
	// GetModelOperationResponse message.
	GetModelOperation(context.Context, *GetModelOperationRequest) (*GetModelOperationResponse, error)
	// ListModelOperations method receives a ListModelOperationsRequest message
	// and returns a ListModelOperationsResponse
	ListModelOperations(context.Context, *ListModelOperationsRequest) (*ListModelOperationsResponse, error)
	// CancelModelOperation method receives a CancelModelOperationRequest message
	// and returns a CancelModelOperationResponse
	CancelModelOperation(context.Context, *CancelModelOperationRequest) (*CancelModelOperationResponse, error)
}

// UnimplementedModelPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedModelPublicServiceServer struct {
}

func (UnimplementedModelPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedModelPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedModelPublicServiceServer) ListModelDefinitions(context.Context, *ListModelDefinitionsRequest) (*ListModelDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelDefinitions not implemented")
}
func (UnimplementedModelPublicServiceServer) GetModelDefinition(context.Context, *GetModelDefinitionRequest) (*GetModelDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelDefinition not implemented")
}
func (UnimplementedModelPublicServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedModelPublicServiceServer) CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedModelPublicServiceServer) CreateModelBinaryFileUpload(ModelPublicService_CreateModelBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateModelBinaryFileUpload not implemented")
}
func (UnimplementedModelPublicServiceServer) GetModel(context.Context, *GetModelRequest) (*GetModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedModelPublicServiceServer) UpdateModel(context.Context, *UpdateModelRequest) (*UpdateModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedModelPublicServiceServer) DeleteModel(context.Context, *DeleteModelRequest) (*DeleteModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (UnimplementedModelPublicServiceServer) LookUpModel(context.Context, *LookUpModelRequest) (*LookUpModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpModel not implemented")
}
func (UnimplementedModelPublicServiceServer) RenameModel(context.Context, *RenameModelRequest) (*RenameModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameModel not implemented")
}
func (UnimplementedModelPublicServiceServer) PublishModel(context.Context, *PublishModelRequest) (*PublishModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishModel not implemented")
}
func (UnimplementedModelPublicServiceServer) UnpublishModel(context.Context, *UnpublishModelRequest) (*UnpublishModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishModel not implemented")
}
func (UnimplementedModelPublicServiceServer) ListModelInstances(context.Context, *ListModelInstancesRequest) (*ListModelInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelInstances not implemented")
}
func (UnimplementedModelPublicServiceServer) GetModelInstance(context.Context, *GetModelInstanceRequest) (*GetModelInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelInstance not implemented")
}
func (UnimplementedModelPublicServiceServer) LookUpModelInstance(context.Context, *LookUpModelInstanceRequest) (*LookUpModelInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpModelInstance not implemented")
}
func (UnimplementedModelPublicServiceServer) DeployModelInstance(context.Context, *DeployModelInstanceRequest) (*DeployModelInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployModelInstance not implemented")
}
func (UnimplementedModelPublicServiceServer) UndeployModelInstance(context.Context, *UndeployModelInstanceRequest) (*UndeployModelInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeployModelInstance not implemented")
}
func (UnimplementedModelPublicServiceServer) GetModelInstanceCard(context.Context, *GetModelInstanceCardRequest) (*GetModelInstanceCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelInstanceCard not implemented")
}
func (UnimplementedModelPublicServiceServer) WatchModelInstance(context.Context, *WatchModelInstanceRequest) (*WatchModelInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchModelInstance not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerModelInstance(context.Context, *TriggerModelInstanceRequest) (*TriggerModelInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerModelInstance not implemented")
}
func (UnimplementedModelPublicServiceServer) TriggerModelInstanceBinaryFileUpload(ModelPublicService_TriggerModelInstanceBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method TriggerModelInstanceBinaryFileUpload not implemented")
}
func (UnimplementedModelPublicServiceServer) TestModelInstance(context.Context, *TestModelInstanceRequest) (*TestModelInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestModelInstance not implemented")
}
func (UnimplementedModelPublicServiceServer) TestModelInstanceBinaryFileUpload(ModelPublicService_TestModelInstanceBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method TestModelInstanceBinaryFileUpload not implemented")
}
func (UnimplementedModelPublicServiceServer) GetModelOperation(context.Context, *GetModelOperationRequest) (*GetModelOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelOperation not implemented")
}
func (UnimplementedModelPublicServiceServer) ListModelOperations(context.Context, *ListModelOperationsRequest) (*ListModelOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelOperations not implemented")
}
func (UnimplementedModelPublicServiceServer) CancelModelOperation(context.Context, *CancelModelOperationRequest) (*CancelModelOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelModelOperation not implemented")
}

// UnsafeModelPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelPublicServiceServer will
// result in compilation errors.
type UnsafeModelPublicServiceServer interface {
	mustEmbedUnimplementedModelPublicServiceServer()
}

func RegisterModelPublicServiceServer(s grpc.ServiceRegistrar, srv ModelPublicServiceServer) {
	s.RegisterService(&ModelPublicService_ServiceDesc, srv)
}

func _ModelPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/Liveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/Readiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListModelDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListModelDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/ListModelDefinitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListModelDefinitions(ctx, req.(*ListModelDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_GetModelDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetModelDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/GetModelDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetModelDefinition(ctx, req.(*GetModelDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/ListModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/CreateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_CreateModelBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelPublicServiceServer).CreateModelBinaryFileUpload(&modelPublicServiceCreateModelBinaryFileUploadServer{stream})
}

type ModelPublicService_CreateModelBinaryFileUploadServer interface {
	SendAndClose(*CreateModelBinaryFileUploadResponse) error
	Recv() (*CreateModelBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type modelPublicServiceCreateModelBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *modelPublicServiceCreateModelBinaryFileUploadServer) SendAndClose(m *CreateModelBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelPublicServiceCreateModelBinaryFileUploadServer) Recv() (*CreateModelBinaryFileUploadRequest, error) {
	m := new(CreateModelBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelPublicService_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/UpdateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).UpdateModel(ctx, req.(*UpdateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/DeleteModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).DeleteModel(ctx, req.(*DeleteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_LookUpModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).LookUpModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/LookUpModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).LookUpModel(ctx, req.(*LookUpModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_RenameModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).RenameModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/RenameModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).RenameModel(ctx, req.(*RenameModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_PublishModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).PublishModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/PublishModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).PublishModel(ctx, req.(*PublishModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_UnpublishModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).UnpublishModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/UnpublishModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).UnpublishModel(ctx, req.(*UnpublishModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListModelInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListModelInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/ListModelInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListModelInstances(ctx, req.(*ListModelInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_GetModelInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetModelInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/GetModelInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetModelInstance(ctx, req.(*GetModelInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_LookUpModelInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpModelInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).LookUpModelInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/LookUpModelInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).LookUpModelInstance(ctx, req.(*LookUpModelInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_DeployModelInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployModelInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).DeployModelInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/DeployModelInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).DeployModelInstance(ctx, req.(*DeployModelInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_UndeployModelInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployModelInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).UndeployModelInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/UndeployModelInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).UndeployModelInstance(ctx, req.(*UndeployModelInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_GetModelInstanceCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelInstanceCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetModelInstanceCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/GetModelInstanceCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetModelInstanceCard(ctx, req.(*GetModelInstanceCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_WatchModelInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchModelInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).WatchModelInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/WatchModelInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).WatchModelInstance(ctx, req.(*WatchModelInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerModelInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerModelInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).TriggerModelInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/TriggerModelInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).TriggerModelInstance(ctx, req.(*TriggerModelInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TriggerModelInstanceBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelPublicServiceServer).TriggerModelInstanceBinaryFileUpload(&modelPublicServiceTriggerModelInstanceBinaryFileUploadServer{stream})
}

type ModelPublicService_TriggerModelInstanceBinaryFileUploadServer interface {
	SendAndClose(*TriggerModelInstanceBinaryFileUploadResponse) error
	Recv() (*TriggerModelInstanceBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type modelPublicServiceTriggerModelInstanceBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *modelPublicServiceTriggerModelInstanceBinaryFileUploadServer) SendAndClose(m *TriggerModelInstanceBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelPublicServiceTriggerModelInstanceBinaryFileUploadServer) Recv() (*TriggerModelInstanceBinaryFileUploadRequest, error) {
	m := new(TriggerModelInstanceBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelPublicService_TestModelInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestModelInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).TestModelInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/TestModelInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).TestModelInstance(ctx, req.(*TestModelInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_TestModelInstanceBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelPublicServiceServer).TestModelInstanceBinaryFileUpload(&modelPublicServiceTestModelInstanceBinaryFileUploadServer{stream})
}

type ModelPublicService_TestModelInstanceBinaryFileUploadServer interface {
	SendAndClose(*TestModelInstanceBinaryFileUploadResponse) error
	Recv() (*TestModelInstanceBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type modelPublicServiceTestModelInstanceBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *modelPublicServiceTestModelInstanceBinaryFileUploadServer) SendAndClose(m *TestModelInstanceBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelPublicServiceTestModelInstanceBinaryFileUploadServer) Recv() (*TestModelInstanceBinaryFileUploadRequest, error) {
	m := new(TestModelInstanceBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelPublicService_GetModelOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).GetModelOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/GetModelOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).GetModelOperation(ctx, req.(*GetModelOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_ListModelOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).ListModelOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/ListModelOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).ListModelOperations(ctx, req.(*ListModelOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelPublicService_CancelModelOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelModelOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelPublicServiceServer).CancelModelOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelPublicService/CancelModelOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelPublicServiceServer).CancelModelOperation(ctx, req.(*CancelModelOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelPublicService_ServiceDesc is the grpc.ServiceDesc for ModelPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.model.v1alpha.ModelPublicService",
	HandlerType: (*ModelPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _ModelPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _ModelPublicService_Readiness_Handler,
		},
		{
			MethodName: "ListModelDefinitions",
			Handler:    _ModelPublicService_ListModelDefinitions_Handler,
		},
		{
			MethodName: "GetModelDefinition",
			Handler:    _ModelPublicService_GetModelDefinition_Handler,
		},
		{
			MethodName: "ListModels",
			Handler:    _ModelPublicService_ListModels_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _ModelPublicService_CreateModel_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _ModelPublicService_GetModel_Handler,
		},
		{
			MethodName: "UpdateModel",
			Handler:    _ModelPublicService_UpdateModel_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _ModelPublicService_DeleteModel_Handler,
		},
		{
			MethodName: "LookUpModel",
			Handler:    _ModelPublicService_LookUpModel_Handler,
		},
		{
			MethodName: "RenameModel",
			Handler:    _ModelPublicService_RenameModel_Handler,
		},
		{
			MethodName: "PublishModel",
			Handler:    _ModelPublicService_PublishModel_Handler,
		},
		{
			MethodName: "UnpublishModel",
			Handler:    _ModelPublicService_UnpublishModel_Handler,
		},
		{
			MethodName: "ListModelInstances",
			Handler:    _ModelPublicService_ListModelInstances_Handler,
		},
		{
			MethodName: "GetModelInstance",
			Handler:    _ModelPublicService_GetModelInstance_Handler,
		},
		{
			MethodName: "LookUpModelInstance",
			Handler:    _ModelPublicService_LookUpModelInstance_Handler,
		},
		{
			MethodName: "DeployModelInstance",
			Handler:    _ModelPublicService_DeployModelInstance_Handler,
		},
		{
			MethodName: "UndeployModelInstance",
			Handler:    _ModelPublicService_UndeployModelInstance_Handler,
		},
		{
			MethodName: "GetModelInstanceCard",
			Handler:    _ModelPublicService_GetModelInstanceCard_Handler,
		},
		{
			MethodName: "WatchModelInstance",
			Handler:    _ModelPublicService_WatchModelInstance_Handler,
		},
		{
			MethodName: "TriggerModelInstance",
			Handler:    _ModelPublicService_TriggerModelInstance_Handler,
		},
		{
			MethodName: "TestModelInstance",
			Handler:    _ModelPublicService_TestModelInstance_Handler,
		},
		{
			MethodName: "GetModelOperation",
			Handler:    _ModelPublicService_GetModelOperation_Handler,
		},
		{
			MethodName: "ListModelOperations",
			Handler:    _ModelPublicService_ListModelOperations_Handler,
		},
		{
			MethodName: "CancelModelOperation",
			Handler:    _ModelPublicService_CancelModelOperation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateModelBinaryFileUpload",
			Handler:       _ModelPublicService_CreateModelBinaryFileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TriggerModelInstanceBinaryFileUpload",
			Handler:       _ModelPublicService_TriggerModelInstanceBinaryFileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TestModelInstanceBinaryFileUpload",
			Handler:       _ModelPublicService_TestModelInstanceBinaryFileUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "vdp/model/v1alpha/model_public_service.proto",
}
