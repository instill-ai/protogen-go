// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package modelv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModelServiceClient is the client API for ModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// ListModelDefinition method receives a ListModelDefinitionRequest message
	// and returns a ListModelDefinitionResponse
	ListModelDefinition(ctx context.Context, in *ListModelDefinitionRequest, opts ...grpc.CallOption) (*ListModelDefinitionResponse, error)
	// GetModelDefinition method receives a GetModelDefinitionRequest message and
	// returns a GetModelDefinitionResponse
	GetModelDefinition(ctx context.Context, in *GetModelDefinitionRequest, opts ...grpc.CallOption) (*GetModelDefinitionResponse, error)
	// ListModel method receives a ListModelRequest message and returns a
	// ListModelResponse
	ListModel(ctx context.Context, in *ListModelRequest, opts ...grpc.CallOption) (*ListModelResponse, error)
	// CreateModel method receives a CreateModelRequest message and returns a
	// CreateModelResponse
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error)
	// CreateModelBinaryFileUpload method receives a
	// CreateModelBinaryFileUploadRequest message and returns a
	// CreateModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST /v1alpha/models:multipart"
	CreateModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelService_CreateModelBinaryFileUploadClient, error)
	// GetModel method receives a GetModelRequest message and returns a
	// GetModelResponse
	GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*GetModelResponse, error)
	// UpdateModel method receives a UpdateModelRequest message and returns a
	// UpdateModelResponse
	UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*UpdateModelResponse, error)
	// DeleteModel method receives a DeleteModelRequest message and returns a
	// DeleteModelResponse
	DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*DeleteModelResponse, error)
	// LookUpModel method receives a LookUpModelRequest message and returns a
	// LookUpModelResponse
	LookUpModel(ctx context.Context, in *LookUpModelRequest, opts ...grpc.CallOption) (*LookUpModelResponse, error)
	// RenameModel method rename a model
	RenameModel(ctx context.Context, in *RenameModelRequest, opts ...grpc.CallOption) (*RenameModelResponse, error)
	// PublishModel method receives a PublishModelRequest message and returns a
	// PublishModelResponse
	PublishModel(ctx context.Context, in *PublishModelRequest, opts ...grpc.CallOption) (*PublishModelResponse, error)
	// UnpublishModel method receives a UnpublishModelRequest message and returns
	// a UnpublishModelResponse
	UnpublishModel(ctx context.Context, in *UnpublishModelRequest, opts ...grpc.CallOption) (*UnpublishModelResponse, error)
	// ListModelInstance method receives a ListModelInstanceRequest message and
	// returns a ListModelInstanceResponse
	ListModelInstance(ctx context.Context, in *ListModelInstanceRequest, opts ...grpc.CallOption) (*ListModelInstanceResponse, error)
	// GetModelInstance method receives a GetModelInstanceRequest message and
	// returns a GetModelInstanceResponse
	GetModelInstance(ctx context.Context, in *GetModelInstanceRequest, opts ...grpc.CallOption) (*GetModelInstanceResponse, error)
	// LookUpModelInstance method receives a LookUpModelInstanceRequest message
	// and returns a
	// LookUpModelInstanceResponse
	LookUpModelInstance(ctx context.Context, in *LookUpModelInstanceRequest, opts ...grpc.CallOption) (*LookUpModelInstanceResponse, error)
	// DeployModelInstance deploy a model instance to online state
	// TODO: should use [Long-running operations](https://google.aip.dev/151)
	DeployModelInstance(ctx context.Context, in *DeployModelInstanceRequest, opts ...grpc.CallOption) (*DeployModelInstanceResponse, error)
	// UndeployModelInstance undeploy a model instance to offline state
	// TODO: should use [Long-running operations](https://google.aip.dev/151)
	UndeployModelInstance(ctx context.Context, in *UndeployModelInstanceRequest, opts ...grpc.CallOption) (*UndeployModelInstanceResponse, error)
	// GetModelInstanceCard method receives a GetModelInstanceCardRequest message
	// and returns a GetModelInstanceCardResponse
	GetModelInstanceCard(ctx context.Context, in *GetModelInstanceCardRequest, opts ...grpc.CallOption) (*GetModelInstanceCardResponse, error)
	///////////////////////////////////////////////////////
	//
	// TriggerModelInstance method receives a TriggerModelInstanceRequest message
	// and returns a TriggerModelInstanceResponse message.
	TriggerModelInstance(ctx context.Context, in *TriggerModelInstanceRequest, opts ...grpc.CallOption) (*TriggerModelInstanceResponse, error)
	// TriggerModelInstanceBinaryFileUpload method receives a
	// TriggerModelInstanceBinaryFileUploadRequest message and returns a
	// TriggerModelInstanceBinaryFileUploadResponse message.
	//
	// Endpoint: "POST/v1alpha/{name=models/*/instances/*}:trigger-multipart"
	TriggerModelInstanceBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelService_TriggerModelInstanceBinaryFileUploadClient, error)
}

type modelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelServiceClient(cc grpc.ClientConnInterface) ModelServiceClient {
	return &modelServiceClient{cc}
}

func (c *modelServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/Liveness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/Readiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) ListModelDefinition(ctx context.Context, in *ListModelDefinitionRequest, opts ...grpc.CallOption) (*ListModelDefinitionResponse, error) {
	out := new(ListModelDefinitionResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/ListModelDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModelDefinition(ctx context.Context, in *GetModelDefinitionRequest, opts ...grpc.CallOption) (*GetModelDefinitionResponse, error) {
	out := new(GetModelDefinitionResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/GetModelDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) ListModel(ctx context.Context, in *ListModelRequest, opts ...grpc.CallOption) (*ListModelResponse, error) {
	out := new(ListModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/ListModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error) {
	out := new(CreateModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/CreateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) CreateModelBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelService_CreateModelBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelService_ServiceDesc.Streams[0], "/vdp.model.v1alpha.ModelService/CreateModelBinaryFileUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelServiceCreateModelBinaryFileUploadClient{stream}
	return x, nil
}

type ModelService_CreateModelBinaryFileUploadClient interface {
	Send(*CreateModelBinaryFileUploadRequest) error
	CloseAndRecv() (*CreateModelBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type modelServiceCreateModelBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *modelServiceCreateModelBinaryFileUploadClient) Send(m *CreateModelBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelServiceCreateModelBinaryFileUploadClient) CloseAndRecv() (*CreateModelBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateModelBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *modelServiceClient) GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*GetModelResponse, error) {
	out := new(GetModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*UpdateModelResponse, error) {
	out := new(UpdateModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/UpdateModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*DeleteModelResponse, error) {
	out := new(DeleteModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/DeleteModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) LookUpModel(ctx context.Context, in *LookUpModelRequest, opts ...grpc.CallOption) (*LookUpModelResponse, error) {
	out := new(LookUpModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/LookUpModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) RenameModel(ctx context.Context, in *RenameModelRequest, opts ...grpc.CallOption) (*RenameModelResponse, error) {
	out := new(RenameModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/RenameModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) PublishModel(ctx context.Context, in *PublishModelRequest, opts ...grpc.CallOption) (*PublishModelResponse, error) {
	out := new(PublishModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/PublishModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UnpublishModel(ctx context.Context, in *UnpublishModelRequest, opts ...grpc.CallOption) (*UnpublishModelResponse, error) {
	out := new(UnpublishModelResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/UnpublishModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) ListModelInstance(ctx context.Context, in *ListModelInstanceRequest, opts ...grpc.CallOption) (*ListModelInstanceResponse, error) {
	out := new(ListModelInstanceResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/ListModelInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModelInstance(ctx context.Context, in *GetModelInstanceRequest, opts ...grpc.CallOption) (*GetModelInstanceResponse, error) {
	out := new(GetModelInstanceResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/GetModelInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) LookUpModelInstance(ctx context.Context, in *LookUpModelInstanceRequest, opts ...grpc.CallOption) (*LookUpModelInstanceResponse, error) {
	out := new(LookUpModelInstanceResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/LookUpModelInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) DeployModelInstance(ctx context.Context, in *DeployModelInstanceRequest, opts ...grpc.CallOption) (*DeployModelInstanceResponse, error) {
	out := new(DeployModelInstanceResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/DeployModelInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) UndeployModelInstance(ctx context.Context, in *UndeployModelInstanceRequest, opts ...grpc.CallOption) (*UndeployModelInstanceResponse, error) {
	out := new(UndeployModelInstanceResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/UndeployModelInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModelInstanceCard(ctx context.Context, in *GetModelInstanceCardRequest, opts ...grpc.CallOption) (*GetModelInstanceCardResponse, error) {
	out := new(GetModelInstanceCardResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/GetModelInstanceCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) TriggerModelInstance(ctx context.Context, in *TriggerModelInstanceRequest, opts ...grpc.CallOption) (*TriggerModelInstanceResponse, error) {
	out := new(TriggerModelInstanceResponse)
	err := c.cc.Invoke(ctx, "/vdp.model.v1alpha.ModelService/TriggerModelInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) TriggerModelInstanceBinaryFileUpload(ctx context.Context, opts ...grpc.CallOption) (ModelService_TriggerModelInstanceBinaryFileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ModelService_ServiceDesc.Streams[1], "/vdp.model.v1alpha.ModelService/TriggerModelInstanceBinaryFileUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &modelServiceTriggerModelInstanceBinaryFileUploadClient{stream}
	return x, nil
}

type ModelService_TriggerModelInstanceBinaryFileUploadClient interface {
	Send(*TriggerModelInstanceBinaryFileUploadRequest) error
	CloseAndRecv() (*TriggerModelInstanceBinaryFileUploadResponse, error)
	grpc.ClientStream
}

type modelServiceTriggerModelInstanceBinaryFileUploadClient struct {
	grpc.ClientStream
}

func (x *modelServiceTriggerModelInstanceBinaryFileUploadClient) Send(m *TriggerModelInstanceBinaryFileUploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *modelServiceTriggerModelInstanceBinaryFileUploadClient) CloseAndRecv() (*TriggerModelInstanceBinaryFileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TriggerModelInstanceBinaryFileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModelServiceServer is the server API for ModelService service.
// All implementations should embed UnimplementedModelServiceServer
// for forward compatibility
type ModelServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// ListModelDefinition method receives a ListModelDefinitionRequest message
	// and returns a ListModelDefinitionResponse
	ListModelDefinition(context.Context, *ListModelDefinitionRequest) (*ListModelDefinitionResponse, error)
	// GetModelDefinition method receives a GetModelDefinitionRequest message and
	// returns a GetModelDefinitionResponse
	GetModelDefinition(context.Context, *GetModelDefinitionRequest) (*GetModelDefinitionResponse, error)
	// ListModel method receives a ListModelRequest message and returns a
	// ListModelResponse
	ListModel(context.Context, *ListModelRequest) (*ListModelResponse, error)
	// CreateModel method receives a CreateModelRequest message and returns a
	// CreateModelResponse
	CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error)
	// CreateModelBinaryFileUpload method receives a
	// CreateModelBinaryFileUploadRequest message and returns a
	// CreateModelBinaryFileUploadResponse message.
	//
	// Endpoint: "POST /v1alpha/models:multipart"
	CreateModelBinaryFileUpload(ModelService_CreateModelBinaryFileUploadServer) error
	// GetModel method receives a GetModelRequest message and returns a
	// GetModelResponse
	GetModel(context.Context, *GetModelRequest) (*GetModelResponse, error)
	// UpdateModel method receives a UpdateModelRequest message and returns a
	// UpdateModelResponse
	UpdateModel(context.Context, *UpdateModelRequest) (*UpdateModelResponse, error)
	// DeleteModel method receives a DeleteModelRequest message and returns a
	// DeleteModelResponse
	DeleteModel(context.Context, *DeleteModelRequest) (*DeleteModelResponse, error)
	// LookUpModel method receives a LookUpModelRequest message and returns a
	// LookUpModelResponse
	LookUpModel(context.Context, *LookUpModelRequest) (*LookUpModelResponse, error)
	// RenameModel method rename a model
	RenameModel(context.Context, *RenameModelRequest) (*RenameModelResponse, error)
	// PublishModel method receives a PublishModelRequest message and returns a
	// PublishModelResponse
	PublishModel(context.Context, *PublishModelRequest) (*PublishModelResponse, error)
	// UnpublishModel method receives a UnpublishModelRequest message and returns
	// a UnpublishModelResponse
	UnpublishModel(context.Context, *UnpublishModelRequest) (*UnpublishModelResponse, error)
	// ListModelInstance method receives a ListModelInstanceRequest message and
	// returns a ListModelInstanceResponse
	ListModelInstance(context.Context, *ListModelInstanceRequest) (*ListModelInstanceResponse, error)
	// GetModelInstance method receives a GetModelInstanceRequest message and
	// returns a GetModelInstanceResponse
	GetModelInstance(context.Context, *GetModelInstanceRequest) (*GetModelInstanceResponse, error)
	// LookUpModelInstance method receives a LookUpModelInstanceRequest message
	// and returns a
	// LookUpModelInstanceResponse
	LookUpModelInstance(context.Context, *LookUpModelInstanceRequest) (*LookUpModelInstanceResponse, error)
	// DeployModelInstance deploy a model instance to online state
	// TODO: should use [Long-running operations](https://google.aip.dev/151)
	DeployModelInstance(context.Context, *DeployModelInstanceRequest) (*DeployModelInstanceResponse, error)
	// UndeployModelInstance undeploy a model instance to offline state
	// TODO: should use [Long-running operations](https://google.aip.dev/151)
	UndeployModelInstance(context.Context, *UndeployModelInstanceRequest) (*UndeployModelInstanceResponse, error)
	// GetModelInstanceCard method receives a GetModelInstanceCardRequest message
	// and returns a GetModelInstanceCardResponse
	GetModelInstanceCard(context.Context, *GetModelInstanceCardRequest) (*GetModelInstanceCardResponse, error)
	///////////////////////////////////////////////////////
	//
	// TriggerModelInstance method receives a TriggerModelInstanceRequest message
	// and returns a TriggerModelInstanceResponse message.
	TriggerModelInstance(context.Context, *TriggerModelInstanceRequest) (*TriggerModelInstanceResponse, error)
	// TriggerModelInstanceBinaryFileUpload method receives a
	// TriggerModelInstanceBinaryFileUploadRequest message and returns a
	// TriggerModelInstanceBinaryFileUploadResponse message.
	//
	// Endpoint: "POST/v1alpha/{name=models/*/instances/*}:trigger-multipart"
	TriggerModelInstanceBinaryFileUpload(ModelService_TriggerModelInstanceBinaryFileUploadServer) error
}

// UnimplementedModelServiceServer should be embedded to have forward compatible implementations.
type UnimplementedModelServiceServer struct {
}

func (UnimplementedModelServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedModelServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedModelServiceServer) ListModelDefinition(context.Context, *ListModelDefinitionRequest) (*ListModelDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelDefinition not implemented")
}
func (UnimplementedModelServiceServer) GetModelDefinition(context.Context, *GetModelDefinitionRequest) (*GetModelDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelDefinition not implemented")
}
func (UnimplementedModelServiceServer) ListModel(context.Context, *ListModelRequest) (*ListModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModel not implemented")
}
func (UnimplementedModelServiceServer) CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedModelServiceServer) CreateModelBinaryFileUpload(ModelService_CreateModelBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateModelBinaryFileUpload not implemented")
}
func (UnimplementedModelServiceServer) GetModel(context.Context, *GetModelRequest) (*GetModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedModelServiceServer) UpdateModel(context.Context, *UpdateModelRequest) (*UpdateModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedModelServiceServer) DeleteModel(context.Context, *DeleteModelRequest) (*DeleteModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (UnimplementedModelServiceServer) LookUpModel(context.Context, *LookUpModelRequest) (*LookUpModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpModel not implemented")
}
func (UnimplementedModelServiceServer) RenameModel(context.Context, *RenameModelRequest) (*RenameModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameModel not implemented")
}
func (UnimplementedModelServiceServer) PublishModel(context.Context, *PublishModelRequest) (*PublishModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishModel not implemented")
}
func (UnimplementedModelServiceServer) UnpublishModel(context.Context, *UnpublishModelRequest) (*UnpublishModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishModel not implemented")
}
func (UnimplementedModelServiceServer) ListModelInstance(context.Context, *ListModelInstanceRequest) (*ListModelInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelInstance not implemented")
}
func (UnimplementedModelServiceServer) GetModelInstance(context.Context, *GetModelInstanceRequest) (*GetModelInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelInstance not implemented")
}
func (UnimplementedModelServiceServer) LookUpModelInstance(context.Context, *LookUpModelInstanceRequest) (*LookUpModelInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookUpModelInstance not implemented")
}
func (UnimplementedModelServiceServer) DeployModelInstance(context.Context, *DeployModelInstanceRequest) (*DeployModelInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployModelInstance not implemented")
}
func (UnimplementedModelServiceServer) UndeployModelInstance(context.Context, *UndeployModelInstanceRequest) (*UndeployModelInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeployModelInstance not implemented")
}
func (UnimplementedModelServiceServer) GetModelInstanceCard(context.Context, *GetModelInstanceCardRequest) (*GetModelInstanceCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelInstanceCard not implemented")
}
func (UnimplementedModelServiceServer) TriggerModelInstance(context.Context, *TriggerModelInstanceRequest) (*TriggerModelInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerModelInstance not implemented")
}
func (UnimplementedModelServiceServer) TriggerModelInstanceBinaryFileUpload(ModelService_TriggerModelInstanceBinaryFileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method TriggerModelInstanceBinaryFileUpload not implemented")
}

// UnsafeModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelServiceServer will
// result in compilation errors.
type UnsafeModelServiceServer interface {
	mustEmbedUnimplementedModelServiceServer()
}

func RegisterModelServiceServer(s grpc.ServiceRegistrar, srv ModelServiceServer) {
	s.RegisterService(&ModelService_ServiceDesc, srv)
}

func _ModelService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/Liveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/Readiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_ListModelDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).ListModelDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/ListModelDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).ListModelDefinition(ctx, req.(*ListModelDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModelDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModelDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/GetModelDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModelDefinition(ctx, req.(*GetModelDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_ListModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).ListModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/ListModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).ListModel(ctx, req.(*ListModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/CreateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_CreateModelBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelServiceServer).CreateModelBinaryFileUpload(&modelServiceCreateModelBinaryFileUploadServer{stream})
}

type ModelService_CreateModelBinaryFileUploadServer interface {
	SendAndClose(*CreateModelBinaryFileUploadResponse) error
	Recv() (*CreateModelBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type modelServiceCreateModelBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *modelServiceCreateModelBinaryFileUploadServer) SendAndClose(m *CreateModelBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelServiceCreateModelBinaryFileUploadServer) Recv() (*CreateModelBinaryFileUploadRequest, error) {
	m := new(CreateModelBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ModelService_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/UpdateModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UpdateModel(ctx, req.(*UpdateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/DeleteModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeleteModel(ctx, req.(*DeleteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_LookUpModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).LookUpModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/LookUpModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).LookUpModel(ctx, req.(*LookUpModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_RenameModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).RenameModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/RenameModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).RenameModel(ctx, req.(*RenameModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_PublishModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).PublishModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/PublishModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).PublishModel(ctx, req.(*PublishModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UnpublishModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UnpublishModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/UnpublishModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UnpublishModel(ctx, req.(*UnpublishModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_ListModelInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).ListModelInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/ListModelInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).ListModelInstance(ctx, req.(*ListModelInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModelInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModelInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/GetModelInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModelInstance(ctx, req.(*GetModelInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_LookUpModelInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookUpModelInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).LookUpModelInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/LookUpModelInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).LookUpModelInstance(ctx, req.(*LookUpModelInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_DeployModelInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployModelInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).DeployModelInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/DeployModelInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).DeployModelInstance(ctx, req.(*DeployModelInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_UndeployModelInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployModelInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).UndeployModelInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/UndeployModelInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).UndeployModelInstance(ctx, req.(*UndeployModelInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModelInstanceCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelInstanceCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModelInstanceCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/GetModelInstanceCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModelInstanceCard(ctx, req.(*GetModelInstanceCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_TriggerModelInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerModelInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).TriggerModelInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vdp.model.v1alpha.ModelService/TriggerModelInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).TriggerModelInstance(ctx, req.(*TriggerModelInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_TriggerModelInstanceBinaryFileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelServiceServer).TriggerModelInstanceBinaryFileUpload(&modelServiceTriggerModelInstanceBinaryFileUploadServer{stream})
}

type ModelService_TriggerModelInstanceBinaryFileUploadServer interface {
	SendAndClose(*TriggerModelInstanceBinaryFileUploadResponse) error
	Recv() (*TriggerModelInstanceBinaryFileUploadRequest, error)
	grpc.ServerStream
}

type modelServiceTriggerModelInstanceBinaryFileUploadServer struct {
	grpc.ServerStream
}

func (x *modelServiceTriggerModelInstanceBinaryFileUploadServer) SendAndClose(m *TriggerModelInstanceBinaryFileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *modelServiceTriggerModelInstanceBinaryFileUploadServer) Recv() (*TriggerModelInstanceBinaryFileUploadRequest, error) {
	m := new(TriggerModelInstanceBinaryFileUploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ModelService_ServiceDesc is the grpc.ServiceDesc for ModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vdp.model.v1alpha.ModelService",
	HandlerType: (*ModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _ModelService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _ModelService_Readiness_Handler,
		},
		{
			MethodName: "ListModelDefinition",
			Handler:    _ModelService_ListModelDefinition_Handler,
		},
		{
			MethodName: "GetModelDefinition",
			Handler:    _ModelService_GetModelDefinition_Handler,
		},
		{
			MethodName: "ListModel",
			Handler:    _ModelService_ListModel_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _ModelService_CreateModel_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _ModelService_GetModel_Handler,
		},
		{
			MethodName: "UpdateModel",
			Handler:    _ModelService_UpdateModel_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _ModelService_DeleteModel_Handler,
		},
		{
			MethodName: "LookUpModel",
			Handler:    _ModelService_LookUpModel_Handler,
		},
		{
			MethodName: "RenameModel",
			Handler:    _ModelService_RenameModel_Handler,
		},
		{
			MethodName: "PublishModel",
			Handler:    _ModelService_PublishModel_Handler,
		},
		{
			MethodName: "UnpublishModel",
			Handler:    _ModelService_UnpublishModel_Handler,
		},
		{
			MethodName: "ListModelInstance",
			Handler:    _ModelService_ListModelInstance_Handler,
		},
		{
			MethodName: "GetModelInstance",
			Handler:    _ModelService_GetModelInstance_Handler,
		},
		{
			MethodName: "LookUpModelInstance",
			Handler:    _ModelService_LookUpModelInstance_Handler,
		},
		{
			MethodName: "DeployModelInstance",
			Handler:    _ModelService_DeployModelInstance_Handler,
		},
		{
			MethodName: "UndeployModelInstance",
			Handler:    _ModelService_UndeployModelInstance_Handler,
		},
		{
			MethodName: "GetModelInstanceCard",
			Handler:    _ModelService_GetModelInstanceCard_Handler,
		},
		{
			MethodName: "TriggerModelInstance",
			Handler:    _ModelService_TriggerModelInstance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateModelBinaryFileUpload",
			Handler:       _ModelService_CreateModelBinaryFileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TriggerModelInstanceBinaryFileUpload",
			Handler:       _ModelService_TriggerModelInstanceBinaryFileUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "vdp/model/v1alpha/model_service.proto",
}
