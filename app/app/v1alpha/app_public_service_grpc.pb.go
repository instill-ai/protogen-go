// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app/app/v1alpha/app_public_service.proto

package appv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppPublicService_Liveness_FullMethodName                      = "/app.app.v1alpha.AppPublicService/Liveness"
	AppPublicService_Readiness_FullMethodName                     = "/app.app.v1alpha.AppPublicService/Readiness"
	AppPublicService_CreateApp_FullMethodName                     = "/app.app.v1alpha.AppPublicService/CreateApp"
	AppPublicService_ListApps_FullMethodName                      = "/app.app.v1alpha.AppPublicService/ListApps"
	AppPublicService_UpdateApp_FullMethodName                     = "/app.app.v1alpha.AppPublicService/UpdateApp"
	AppPublicService_DeleteApp_FullMethodName                     = "/app.app.v1alpha.AppPublicService/DeleteApp"
	AppPublicService_CreateConversation_FullMethodName            = "/app.app.v1alpha.AppPublicService/CreateConversation"
	AppPublicService_ListConversations_FullMethodName             = "/app.app.v1alpha.AppPublicService/ListConversations"
	AppPublicService_UpdateConversation_FullMethodName            = "/app.app.v1alpha.AppPublicService/UpdateConversation"
	AppPublicService_DeleteConversation_FullMethodName            = "/app.app.v1alpha.AppPublicService/DeleteConversation"
	AppPublicService_CreateAgent_FullMethodName                   = "/app.app.v1alpha.AppPublicService/CreateAgent"
	AppPublicService_ListAgents_FullMethodName                    = "/app.app.v1alpha.AppPublicService/ListAgents"
	AppPublicService_UpdateAgent_FullMethodName                   = "/app.app.v1alpha.AppPublicService/UpdateAgent"
	AppPublicService_DeleteAgent_FullMethodName                   = "/app.app.v1alpha.AppPublicService/DeleteAgent"
	AppPublicService_CreateChat_FullMethodName                    = "/app.app.v1alpha.AppPublicService/CreateChat"
	AppPublicService_ListChats_FullMethodName                     = "/app.app.v1alpha.AppPublicService/ListChats"
	AppPublicService_UpdateChat_FullMethodName                    = "/app.app.v1alpha.AppPublicService/UpdateChat"
	AppPublicService_DeleteChat_FullMethodName                    = "/app.app.v1alpha.AppPublicService/DeleteChat"
	AppPublicService_CreateMessage_FullMethodName                 = "/app.app.v1alpha.AppPublicService/CreateMessage"
	AppPublicService_ListMessages_FullMethodName                  = "/app.app.v1alpha.AppPublicService/ListMessages"
	AppPublicService_UpdateMessage_FullMethodName                 = "/app.app.v1alpha.AppPublicService/UpdateMessage"
	AppPublicService_DeleteMessage_FullMethodName                 = "/app.app.v1alpha.AppPublicService/DeleteMessage"
	AppPublicService_GetPlaygroundConversation_FullMethodName     = "/app.app.v1alpha.AppPublicService/GetPlaygroundConversation"
	AppPublicService_ListTools_FullMethodName                     = "/app.app.v1alpha.AppPublicService/ListTools"
	AppPublicService_ListChatMessages_FullMethodName              = "/app.app.v1alpha.AppPublicService/ListChatMessages"
	AppPublicService_RestartPlaygroundConversation_FullMethodName = "/app.app.v1alpha.AppPublicService/RestartPlaygroundConversation"
	AppPublicService_Chat_FullMethodName                          = "/app.app.v1alpha.AppPublicService/Chat"
	AppPublicService_ListTables_FullMethodName                    = "/app.app.v1alpha.AppPublicService/ListTables"
	AppPublicService_CreateTable_FullMethodName                   = "/app.app.v1alpha.AppPublicService/CreateTable"
	AppPublicService_GetTable_FullMethodName                      = "/app.app.v1alpha.AppPublicService/GetTable"
	AppPublicService_UpdateTable_FullMethodName                   = "/app.app.v1alpha.AppPublicService/UpdateTable"
	AppPublicService_DeleteTable_FullMethodName                   = "/app.app.v1alpha.AppPublicService/DeleteTable"
	AppPublicService_GetColumnDefinitions_FullMethodName          = "/app.app.v1alpha.AppPublicService/GetColumnDefinitions"
	AppPublicService_UpdateColumnDefinitions_FullMethodName       = "/app.app.v1alpha.AppPublicService/UpdateColumnDefinitions"
	AppPublicService_ListRows_FullMethodName                      = "/app.app.v1alpha.AppPublicService/ListRows"
	AppPublicService_InsertRow_FullMethodName                     = "/app.app.v1alpha.AppPublicService/InsertRow"
	AppPublicService_UpdateRow_FullMethodName                     = "/app.app.v1alpha.AppPublicService/UpdateRow"
	AppPublicService_UpdateRows_FullMethodName                    = "/app.app.v1alpha.AppPublicService/UpdateRows"
	AppPublicService_DeleteRow_FullMethodName                     = "/app.app.v1alpha.AppPublicService/DeleteRow"
	AppPublicService_DeleteRows_FullMethodName                    = "/app.app.v1alpha.AppPublicService/DeleteRows"
	AppPublicService_MoveRows_FullMethodName                      = "/app.app.v1alpha.AppPublicService/MoveRows"
	AppPublicService_Export_FullMethodName                        = "/app.app.v1alpha.AppPublicService/Export"
)

// AppPublicServiceClient is the client API for AppPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppPublicServiceClient interface {
	// Check if the app server is alive
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Check if the app server is ready
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// Create an app
	//
	// Creates an app.
	CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error)
	// List all apps info
	//
	// Returns a paginated list of apps.
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error)
	// Update an app's information
	//
	// Updates the information of an app.
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error)
	// Delete an app
	//
	// Deletes an app.
	DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*DeleteAppResponse, error)
	// Create a conversation
	//
	// Creates a conversation.
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error)
	// List conversations
	//
	// Returns a paginated list of conversations.
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error)
	// Update a conversation
	//
	// Updates a conversation.
	UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationResponse, error)
	// Delete a conversation
	//
	// Deletes a conversation.
	DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationResponse, error)
	// Create an agent
	//
	// Creates an agent.
	CreateAgent(ctx context.Context, in *CreateAgentRequest, opts ...grpc.CallOption) (*CreateAgentResponse, error)
	// List all agents info
	//
	// Returns a paginated list of agents.
	ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error)
	// Update an agent
	//
	// Updates the information of an agent.
	UpdateAgent(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*UpdateAgentResponse, error)
	// Delete an agent
	//
	// Deletes an agent.
	DeleteAgent(ctx context.Context, in *DeleteAgentRequest, opts ...grpc.CallOption) (*DeleteAgentResponse, error)
	// Create a chat
	//
	// Creates a chat.
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error)
	// List chats
	//
	// Returns a list of chats.
	ListChats(ctx context.Context, in *ListChatsRequest, opts ...grpc.CallOption) (*ListChatsResponse, error)
	// Update a chat
	//
	// Updates a chat.
	UpdateChat(ctx context.Context, in *UpdateChatRequest, opts ...grpc.CallOption) (*UpdateChatResponse, error)
	// Delete a chat
	//
	// Deletes a chat.
	DeleteChat(ctx context.Context, in *DeleteChatRequest, opts ...grpc.CallOption) (*DeleteChatResponse, error)
	// Create a message
	//
	// Creates a message.
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error)
	// List messages
	//
	// Returns a paginated list of messages.
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	// Update a message
	//
	// Updates a message.
	UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error)
	// Delete a message
	//
	// Deletes a message.
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	// Get Playground Conversation
	//
	// Returns the latest conversation for the authenticated user (e.g., logged-in user or API key user).
	GetPlaygroundConversation(ctx context.Context, in *GetPlaygroundConversationRequest, opts ...grpc.CallOption) (*GetPlaygroundConversationResponse, error)
	// List all tools
	//
	// Returns a list of tools.
	ListTools(ctx context.Context, in *ListToolsRequest, opts ...grpc.CallOption) (*ListToolsResponse, error)
	// List chat messages
	//
	// Returns a paginated list of messages.
	ListChatMessages(ctx context.Context, in *ListChatMessagesRequest, opts ...grpc.CallOption) (*ListChatMessagesResponse, error)
	// Restart Playground Conversation
	//
	// Creates a new conversation using the authenticated user's UID as creator and
	// auto-generates a new conversation ID on behalf of the authenticated user.
	RestartPlaygroundConversation(ctx context.Context, in *RestartPlaygroundConversationRequest, opts ...grpc.CallOption) (*RestartPlaygroundConversationResponse, error)
	// Chat
	//
	// Chat sends a message asynchronously and streams back the response.
	// This method is intended for real-time conversation with a chatbot
	// and the response needs to be processed incrementally.
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	// List tables
	//
	// Returns a paginated list of tables.
	ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error)
	// Create a table
	//
	// Creates a table.
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	// Get table
	//
	// Gets a table.
	GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error)
	// Update table
	//
	// Updates a table.
	UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*UpdateTableResponse, error)
	// Delete table
	//
	// Deletes a table.
	DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error)
	// Get column definitions
	//
	// Gets column definitions for a table.
	GetColumnDefinitions(ctx context.Context, in *GetColumnDefinitionsRequest, opts ...grpc.CallOption) (*GetColumnDefinitionsResponse, error)
	// Update column definitions
	//
	// Updates column definitions for a table.
	UpdateColumnDefinitions(ctx context.Context, in *UpdateColumnDefinitionsRequest, opts ...grpc.CallOption) (*UpdateColumnDefinitionsResponse, error)
	// List rows
	//
	// Returns list of rows.
	ListRows(ctx context.Context, in *ListRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error)
	// Insert row
	//
	// Inserts a row into a table.
	InsertRow(ctx context.Context, in *InsertRowRequest, opts ...grpc.CallOption) (*InsertRowResponse, error)
	// Update row
	//
	// Updates a row in a table.
	UpdateRow(ctx context.Context, in *UpdateRowRequest, opts ...grpc.CallOption) (*UpdateRowResponse, error)
	// Update rows
	//
	// Updates multiple rows in a table.
	UpdateRows(ctx context.Context, in *UpdateRowsRequest, opts ...grpc.CallOption) (*UpdateRowsResponse, error)
	// Delete row
	//
	// Deletes a row from a table.
	DeleteRow(ctx context.Context, in *DeleteRowRequest, opts ...grpc.CallOption) (*DeleteRowResponse, error)
	// Delete rows
	//
	// Deletes multiple rows from a table.
	DeleteRows(ctx context.Context, in *DeleteRowsRequest, opts ...grpc.CallOption) (*DeleteRowsResponse, error)
	// Move row
	//
	// Moves a row to a new position in a table.
	MoveRows(ctx context.Context, in *MoveRowsRequest, opts ...grpc.CallOption) (*MoveRowsResponse, error)
	// Export table
	//
	// Exports table data.
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
}

type appPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppPublicServiceClient(cc grpc.ClientConnInterface) AppPublicServiceClient {
	return &appPublicServiceClient{cc}
}

func (c *appPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, AppPublicService_Liveness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, AppPublicService_Readiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, AppPublicService_CreateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error) {
	out := new(ListAppsResponse)
	err := c.cc.Invoke(ctx, AppPublicService_ListApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error) {
	out := new(UpdateAppResponse)
	err := c.cc.Invoke(ctx, AppPublicService_UpdateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*DeleteAppResponse, error) {
	out := new(DeleteAppResponse)
	err := c.cc.Invoke(ctx, AppPublicService_DeleteApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error) {
	out := new(CreateConversationResponse)
	err := c.cc.Invoke(ctx, AppPublicService_CreateConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error) {
	out := new(ListConversationsResponse)
	err := c.cc.Invoke(ctx, AppPublicService_ListConversations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationResponse, error) {
	out := new(UpdateConversationResponse)
	err := c.cc.Invoke(ctx, AppPublicService_UpdateConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationResponse, error) {
	out := new(DeleteConversationResponse)
	err := c.cc.Invoke(ctx, AppPublicService_DeleteConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) CreateAgent(ctx context.Context, in *CreateAgentRequest, opts ...grpc.CallOption) (*CreateAgentResponse, error) {
	out := new(CreateAgentResponse)
	err := c.cc.Invoke(ctx, AppPublicService_CreateAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error) {
	out := new(ListAgentsResponse)
	err := c.cc.Invoke(ctx, AppPublicService_ListAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) UpdateAgent(ctx context.Context, in *UpdateAgentRequest, opts ...grpc.CallOption) (*UpdateAgentResponse, error) {
	out := new(UpdateAgentResponse)
	err := c.cc.Invoke(ctx, AppPublicService_UpdateAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) DeleteAgent(ctx context.Context, in *DeleteAgentRequest, opts ...grpc.CallOption) (*DeleteAgentResponse, error) {
	out := new(DeleteAgentResponse)
	err := c.cc.Invoke(ctx, AppPublicService_DeleteAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatResponse, error) {
	out := new(CreateChatResponse)
	err := c.cc.Invoke(ctx, AppPublicService_CreateChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) ListChats(ctx context.Context, in *ListChatsRequest, opts ...grpc.CallOption) (*ListChatsResponse, error) {
	out := new(ListChatsResponse)
	err := c.cc.Invoke(ctx, AppPublicService_ListChats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) UpdateChat(ctx context.Context, in *UpdateChatRequest, opts ...grpc.CallOption) (*UpdateChatResponse, error) {
	out := new(UpdateChatResponse)
	err := c.cc.Invoke(ctx, AppPublicService_UpdateChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) DeleteChat(ctx context.Context, in *DeleteChatRequest, opts ...grpc.CallOption) (*DeleteChatResponse, error) {
	out := new(DeleteChatResponse)
	err := c.cc.Invoke(ctx, AppPublicService_DeleteChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error) {
	out := new(CreateMessageResponse)
	err := c.cc.Invoke(ctx, AppPublicService_CreateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, AppPublicService_ListMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error) {
	out := new(UpdateMessageResponse)
	err := c.cc.Invoke(ctx, AppPublicService_UpdateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, AppPublicService_DeleteMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) GetPlaygroundConversation(ctx context.Context, in *GetPlaygroundConversationRequest, opts ...grpc.CallOption) (*GetPlaygroundConversationResponse, error) {
	out := new(GetPlaygroundConversationResponse)
	err := c.cc.Invoke(ctx, AppPublicService_GetPlaygroundConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) ListTools(ctx context.Context, in *ListToolsRequest, opts ...grpc.CallOption) (*ListToolsResponse, error) {
	out := new(ListToolsResponse)
	err := c.cc.Invoke(ctx, AppPublicService_ListTools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) ListChatMessages(ctx context.Context, in *ListChatMessagesRequest, opts ...grpc.CallOption) (*ListChatMessagesResponse, error) {
	out := new(ListChatMessagesResponse)
	err := c.cc.Invoke(ctx, AppPublicService_ListChatMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) RestartPlaygroundConversation(ctx context.Context, in *RestartPlaygroundConversationRequest, opts ...grpc.CallOption) (*RestartPlaygroundConversationResponse, error) {
	out := new(RestartPlaygroundConversationResponse)
	err := c.cc.Invoke(ctx, AppPublicService_RestartPlaygroundConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, AppPublicService_Chat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) ListTables(ctx context.Context, in *ListTablesRequest, opts ...grpc.CallOption) (*ListTablesResponse, error) {
	out := new(ListTablesResponse)
	err := c.cc.Invoke(ctx, AppPublicService_ListTables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, AppPublicService_CreateTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) GetTable(ctx context.Context, in *GetTableRequest, opts ...grpc.CallOption) (*GetTableResponse, error) {
	out := new(GetTableResponse)
	err := c.cc.Invoke(ctx, AppPublicService_GetTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*UpdateTableResponse, error) {
	out := new(UpdateTableResponse)
	err := c.cc.Invoke(ctx, AppPublicService_UpdateTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error) {
	out := new(DeleteTableResponse)
	err := c.cc.Invoke(ctx, AppPublicService_DeleteTable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) GetColumnDefinitions(ctx context.Context, in *GetColumnDefinitionsRequest, opts ...grpc.CallOption) (*GetColumnDefinitionsResponse, error) {
	out := new(GetColumnDefinitionsResponse)
	err := c.cc.Invoke(ctx, AppPublicService_GetColumnDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) UpdateColumnDefinitions(ctx context.Context, in *UpdateColumnDefinitionsRequest, opts ...grpc.CallOption) (*UpdateColumnDefinitionsResponse, error) {
	out := new(UpdateColumnDefinitionsResponse)
	err := c.cc.Invoke(ctx, AppPublicService_UpdateColumnDefinitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) ListRows(ctx context.Context, in *ListRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error) {
	out := new(ListRowsResponse)
	err := c.cc.Invoke(ctx, AppPublicService_ListRows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) InsertRow(ctx context.Context, in *InsertRowRequest, opts ...grpc.CallOption) (*InsertRowResponse, error) {
	out := new(InsertRowResponse)
	err := c.cc.Invoke(ctx, AppPublicService_InsertRow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) UpdateRow(ctx context.Context, in *UpdateRowRequest, opts ...grpc.CallOption) (*UpdateRowResponse, error) {
	out := new(UpdateRowResponse)
	err := c.cc.Invoke(ctx, AppPublicService_UpdateRow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) UpdateRows(ctx context.Context, in *UpdateRowsRequest, opts ...grpc.CallOption) (*UpdateRowsResponse, error) {
	out := new(UpdateRowsResponse)
	err := c.cc.Invoke(ctx, AppPublicService_UpdateRows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) DeleteRow(ctx context.Context, in *DeleteRowRequest, opts ...grpc.CallOption) (*DeleteRowResponse, error) {
	out := new(DeleteRowResponse)
	err := c.cc.Invoke(ctx, AppPublicService_DeleteRow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) DeleteRows(ctx context.Context, in *DeleteRowsRequest, opts ...grpc.CallOption) (*DeleteRowsResponse, error) {
	out := new(DeleteRowsResponse)
	err := c.cc.Invoke(ctx, AppPublicService_DeleteRows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) MoveRows(ctx context.Context, in *MoveRowsRequest, opts ...grpc.CallOption) (*MoveRowsResponse, error) {
	out := new(MoveRowsResponse)
	err := c.cc.Invoke(ctx, AppPublicService_MoveRows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, AppPublicService_Export_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppPublicServiceServer is the server API for AppPublicService service.
// All implementations should embed UnimplementedAppPublicServiceServer
// for forward compatibility
type AppPublicServiceServer interface {
	// Check if the app server is alive
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Check if the app server is ready
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// Create an app
	//
	// Creates an app.
	CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error)
	// List all apps info
	//
	// Returns a paginated list of apps.
	ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error)
	// Update an app's information
	//
	// Updates the information of an app.
	UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error)
	// Delete an app
	//
	// Deletes an app.
	DeleteApp(context.Context, *DeleteAppRequest) (*DeleteAppResponse, error)
	// Create a conversation
	//
	// Creates a conversation.
	CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error)
	// List conversations
	//
	// Returns a paginated list of conversations.
	ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error)
	// Update a conversation
	//
	// Updates a conversation.
	UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationResponse, error)
	// Delete a conversation
	//
	// Deletes a conversation.
	DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationResponse, error)
	// Create an agent
	//
	// Creates an agent.
	CreateAgent(context.Context, *CreateAgentRequest) (*CreateAgentResponse, error)
	// List all agents info
	//
	// Returns a paginated list of agents.
	ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error)
	// Update an agent
	//
	// Updates the information of an agent.
	UpdateAgent(context.Context, *UpdateAgentRequest) (*UpdateAgentResponse, error)
	// Delete an agent
	//
	// Deletes an agent.
	DeleteAgent(context.Context, *DeleteAgentRequest) (*DeleteAgentResponse, error)
	// Create a chat
	//
	// Creates a chat.
	CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error)
	// List chats
	//
	// Returns a list of chats.
	ListChats(context.Context, *ListChatsRequest) (*ListChatsResponse, error)
	// Update a chat
	//
	// Updates a chat.
	UpdateChat(context.Context, *UpdateChatRequest) (*UpdateChatResponse, error)
	// Delete a chat
	//
	// Deletes a chat.
	DeleteChat(context.Context, *DeleteChatRequest) (*DeleteChatResponse, error)
	// Create a message
	//
	// Creates a message.
	CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error)
	// List messages
	//
	// Returns a paginated list of messages.
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	// Update a message
	//
	// Updates a message.
	UpdateMessage(context.Context, *UpdateMessageRequest) (*UpdateMessageResponse, error)
	// Delete a message
	//
	// Deletes a message.
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	// Get Playground Conversation
	//
	// Returns the latest conversation for the authenticated user (e.g., logged-in user or API key user).
	GetPlaygroundConversation(context.Context, *GetPlaygroundConversationRequest) (*GetPlaygroundConversationResponse, error)
	// List all tools
	//
	// Returns a list of tools.
	ListTools(context.Context, *ListToolsRequest) (*ListToolsResponse, error)
	// List chat messages
	//
	// Returns a paginated list of messages.
	ListChatMessages(context.Context, *ListChatMessagesRequest) (*ListChatMessagesResponse, error)
	// Restart Playground Conversation
	//
	// Creates a new conversation using the authenticated user's UID as creator and
	// auto-generates a new conversation ID on behalf of the authenticated user.
	RestartPlaygroundConversation(context.Context, *RestartPlaygroundConversationRequest) (*RestartPlaygroundConversationResponse, error)
	// Chat
	//
	// Chat sends a message asynchronously and streams back the response.
	// This method is intended for real-time conversation with a chatbot
	// and the response needs to be processed incrementally.
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	// List tables
	//
	// Returns a paginated list of tables.
	ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error)
	// Create a table
	//
	// Creates a table.
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	// Get table
	//
	// Gets a table.
	GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error)
	// Update table
	//
	// Updates a table.
	UpdateTable(context.Context, *UpdateTableRequest) (*UpdateTableResponse, error)
	// Delete table
	//
	// Deletes a table.
	DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error)
	// Get column definitions
	//
	// Gets column definitions for a table.
	GetColumnDefinitions(context.Context, *GetColumnDefinitionsRequest) (*GetColumnDefinitionsResponse, error)
	// Update column definitions
	//
	// Updates column definitions for a table.
	UpdateColumnDefinitions(context.Context, *UpdateColumnDefinitionsRequest) (*UpdateColumnDefinitionsResponse, error)
	// List rows
	//
	// Returns list of rows.
	ListRows(context.Context, *ListRowsRequest) (*ListRowsResponse, error)
	// Insert row
	//
	// Inserts a row into a table.
	InsertRow(context.Context, *InsertRowRequest) (*InsertRowResponse, error)
	// Update row
	//
	// Updates a row in a table.
	UpdateRow(context.Context, *UpdateRowRequest) (*UpdateRowResponse, error)
	// Update rows
	//
	// Updates multiple rows in a table.
	UpdateRows(context.Context, *UpdateRowsRequest) (*UpdateRowsResponse, error)
	// Delete row
	//
	// Deletes a row from a table.
	DeleteRow(context.Context, *DeleteRowRequest) (*DeleteRowResponse, error)
	// Delete rows
	//
	// Deletes multiple rows from a table.
	DeleteRows(context.Context, *DeleteRowsRequest) (*DeleteRowsResponse, error)
	// Move row
	//
	// Moves a row to a new position in a table.
	MoveRows(context.Context, *MoveRowsRequest) (*MoveRowsResponse, error)
	// Export table
	//
	// Exports table data.
	Export(context.Context, *ExportRequest) (*ExportResponse, error)
}

// UnimplementedAppPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAppPublicServiceServer struct {
}

func (UnimplementedAppPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedAppPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedAppPublicServiceServer) CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedAppPublicServiceServer) ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedAppPublicServiceServer) UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedAppPublicServiceServer) DeleteApp(context.Context, *DeleteAppRequest) (*DeleteAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedAppPublicServiceServer) CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedAppPublicServiceServer) ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (UnimplementedAppPublicServiceServer) UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversation not implemented")
}
func (UnimplementedAppPublicServiceServer) DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConversation not implemented")
}
func (UnimplementedAppPublicServiceServer) CreateAgent(context.Context, *CreateAgentRequest) (*CreateAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgent not implemented")
}
func (UnimplementedAppPublicServiceServer) ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedAppPublicServiceServer) UpdateAgent(context.Context, *UpdateAgentRequest) (*UpdateAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgent not implemented")
}
func (UnimplementedAppPublicServiceServer) DeleteAgent(context.Context, *DeleteAgentRequest) (*DeleteAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgent not implemented")
}
func (UnimplementedAppPublicServiceServer) CreateChat(context.Context, *CreateChatRequest) (*CreateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedAppPublicServiceServer) ListChats(context.Context, *ListChatsRequest) (*ListChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChats not implemented")
}
func (UnimplementedAppPublicServiceServer) UpdateChat(context.Context, *UpdateChatRequest) (*UpdateChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChat not implemented")
}
func (UnimplementedAppPublicServiceServer) DeleteChat(context.Context, *DeleteChatRequest) (*DeleteChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChat not implemented")
}
func (UnimplementedAppPublicServiceServer) CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedAppPublicServiceServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedAppPublicServiceServer) UpdateMessage(context.Context, *UpdateMessageRequest) (*UpdateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (UnimplementedAppPublicServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedAppPublicServiceServer) GetPlaygroundConversation(context.Context, *GetPlaygroundConversationRequest) (*GetPlaygroundConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaygroundConversation not implemented")
}
func (UnimplementedAppPublicServiceServer) ListTools(context.Context, *ListToolsRequest) (*ListToolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTools not implemented")
}
func (UnimplementedAppPublicServiceServer) ListChatMessages(context.Context, *ListChatMessagesRequest) (*ListChatMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChatMessages not implemented")
}
func (UnimplementedAppPublicServiceServer) RestartPlaygroundConversation(context.Context, *RestartPlaygroundConversationRequest) (*RestartPlaygroundConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartPlaygroundConversation not implemented")
}
func (UnimplementedAppPublicServiceServer) Chat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedAppPublicServiceServer) ListTables(context.Context, *ListTablesRequest) (*ListTablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (UnimplementedAppPublicServiceServer) CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedAppPublicServiceServer) GetTable(context.Context, *GetTableRequest) (*GetTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTable not implemented")
}
func (UnimplementedAppPublicServiceServer) UpdateTable(context.Context, *UpdateTableRequest) (*UpdateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTable not implemented")
}
func (UnimplementedAppPublicServiceServer) DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedAppPublicServiceServer) GetColumnDefinitions(context.Context, *GetColumnDefinitionsRequest) (*GetColumnDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColumnDefinitions not implemented")
}
func (UnimplementedAppPublicServiceServer) UpdateColumnDefinitions(context.Context, *UpdateColumnDefinitionsRequest) (*UpdateColumnDefinitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateColumnDefinitions not implemented")
}
func (UnimplementedAppPublicServiceServer) ListRows(context.Context, *ListRowsRequest) (*ListRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRows not implemented")
}
func (UnimplementedAppPublicServiceServer) InsertRow(context.Context, *InsertRowRequest) (*InsertRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertRow not implemented")
}
func (UnimplementedAppPublicServiceServer) UpdateRow(context.Context, *UpdateRowRequest) (*UpdateRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRow not implemented")
}
func (UnimplementedAppPublicServiceServer) UpdateRows(context.Context, *UpdateRowsRequest) (*UpdateRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRows not implemented")
}
func (UnimplementedAppPublicServiceServer) DeleteRow(context.Context, *DeleteRowRequest) (*DeleteRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRow not implemented")
}
func (UnimplementedAppPublicServiceServer) DeleteRows(context.Context, *DeleteRowsRequest) (*DeleteRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRows not implemented")
}
func (UnimplementedAppPublicServiceServer) MoveRows(context.Context, *MoveRowsRequest) (*MoveRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveRows not implemented")
}
func (UnimplementedAppPublicServiceServer) Export(context.Context, *ExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}

// UnsafeAppPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppPublicServiceServer will
// result in compilation errors.
type UnsafeAppPublicServiceServer interface {
	mustEmbedUnimplementedAppPublicServiceServer()
}

func RegisterAppPublicServiceServer(s grpc.ServiceRegistrar, srv AppPublicServiceServer) {
	s.RegisterService(&AppPublicService_ServiceDesc, srv)
}

func _AppPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).CreateApp(ctx, req.(*CreateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_ListApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).UpdateApp(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).DeleteApp(ctx, req.(*DeleteAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_CreateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).CreateConversation(ctx, req.(*CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_ListConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).ListConversations(ctx, req.(*ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_UpdateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).UpdateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_UpdateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).UpdateConversation(ctx, req.(*UpdateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_DeleteConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).DeleteConversation(ctx, req.(*DeleteConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_CreateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).CreateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_CreateAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).CreateAgent(ctx, req.(*CreateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_ListAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).ListAgents(ctx, req.(*ListAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_UpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).UpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_UpdateAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).UpdateAgent(ctx, req.(*UpdateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_DeleteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).DeleteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_DeleteAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).DeleteAgent(ctx, req.(*DeleteAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_CreateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_ListChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).ListChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_ListChats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).ListChats(ctx, req.(*ListChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_UpdateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).UpdateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_UpdateChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).UpdateChat(ctx, req.(*UpdateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_DeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).DeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_DeleteChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).DeleteChat(ctx, req.(*DeleteChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_UpdateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).UpdateMessage(ctx, req.(*UpdateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_GetPlaygroundConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaygroundConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).GetPlaygroundConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_GetPlaygroundConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).GetPlaygroundConversation(ctx, req.(*GetPlaygroundConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_ListTools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListToolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).ListTools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_ListTools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).ListTools(ctx, req.(*ListToolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_ListChatMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).ListChatMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_ListChatMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).ListChatMessages(ctx, req.(*ListChatMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_RestartPlaygroundConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartPlaygroundConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).RestartPlaygroundConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_RestartPlaygroundConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).RestartPlaygroundConversation(ctx, req.(*RestartPlaygroundConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_ListTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).ListTables(ctx, req.(*ListTablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_CreateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_GetTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).GetTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_GetTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).GetTable(ctx, req.(*GetTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_UpdateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).UpdateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_UpdateTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).UpdateTable(ctx, req.(*UpdateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_DeleteTable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).DeleteTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_GetColumnDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColumnDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).GetColumnDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_GetColumnDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).GetColumnDefinitions(ctx, req.(*GetColumnDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_UpdateColumnDefinitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateColumnDefinitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).UpdateColumnDefinitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_UpdateColumnDefinitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).UpdateColumnDefinitions(ctx, req.(*UpdateColumnDefinitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_ListRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).ListRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_ListRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).ListRows(ctx, req.(*ListRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_InsertRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).InsertRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_InsertRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).InsertRow(ctx, req.(*InsertRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_UpdateRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).UpdateRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_UpdateRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).UpdateRow(ctx, req.(*UpdateRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_UpdateRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).UpdateRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_UpdateRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).UpdateRows(ctx, req.(*UpdateRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_DeleteRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).DeleteRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_DeleteRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).DeleteRow(ctx, req.(*DeleteRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_DeleteRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).DeleteRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_DeleteRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).DeleteRows(ctx, req.(*DeleteRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_MoveRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).MoveRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_MoveRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).MoveRows(ctx, req.(*MoveRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_Export_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).Export(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppPublicService_ServiceDesc is the grpc.ServiceDesc for AppPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.app.v1alpha.AppPublicService",
	HandlerType: (*AppPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _AppPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _AppPublicService_Readiness_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _AppPublicService_CreateApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _AppPublicService_ListApps_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _AppPublicService_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AppPublicService_DeleteApp_Handler,
		},
		{
			MethodName: "CreateConversation",
			Handler:    _AppPublicService_CreateConversation_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _AppPublicService_ListConversations_Handler,
		},
		{
			MethodName: "UpdateConversation",
			Handler:    _AppPublicService_UpdateConversation_Handler,
		},
		{
			MethodName: "DeleteConversation",
			Handler:    _AppPublicService_DeleteConversation_Handler,
		},
		{
			MethodName: "CreateAgent",
			Handler:    _AppPublicService_CreateAgent_Handler,
		},
		{
			MethodName: "ListAgents",
			Handler:    _AppPublicService_ListAgents_Handler,
		},
		{
			MethodName: "UpdateAgent",
			Handler:    _AppPublicService_UpdateAgent_Handler,
		},
		{
			MethodName: "DeleteAgent",
			Handler:    _AppPublicService_DeleteAgent_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _AppPublicService_CreateChat_Handler,
		},
		{
			MethodName: "ListChats",
			Handler:    _AppPublicService_ListChats_Handler,
		},
		{
			MethodName: "UpdateChat",
			Handler:    _AppPublicService_UpdateChat_Handler,
		},
		{
			MethodName: "DeleteChat",
			Handler:    _AppPublicService_DeleteChat_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _AppPublicService_CreateMessage_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _AppPublicService_ListMessages_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _AppPublicService_UpdateMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _AppPublicService_DeleteMessage_Handler,
		},
		{
			MethodName: "GetPlaygroundConversation",
			Handler:    _AppPublicService_GetPlaygroundConversation_Handler,
		},
		{
			MethodName: "ListTools",
			Handler:    _AppPublicService_ListTools_Handler,
		},
		{
			MethodName: "ListChatMessages",
			Handler:    _AppPublicService_ListChatMessages_Handler,
		},
		{
			MethodName: "RestartPlaygroundConversation",
			Handler:    _AppPublicService_RestartPlaygroundConversation_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _AppPublicService_Chat_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _AppPublicService_ListTables_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _AppPublicService_CreateTable_Handler,
		},
		{
			MethodName: "GetTable",
			Handler:    _AppPublicService_GetTable_Handler,
		},
		{
			MethodName: "UpdateTable",
			Handler:    _AppPublicService_UpdateTable_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _AppPublicService_DeleteTable_Handler,
		},
		{
			MethodName: "GetColumnDefinitions",
			Handler:    _AppPublicService_GetColumnDefinitions_Handler,
		},
		{
			MethodName: "UpdateColumnDefinitions",
			Handler:    _AppPublicService_UpdateColumnDefinitions_Handler,
		},
		{
			MethodName: "ListRows",
			Handler:    _AppPublicService_ListRows_Handler,
		},
		{
			MethodName: "InsertRow",
			Handler:    _AppPublicService_InsertRow_Handler,
		},
		{
			MethodName: "UpdateRow",
			Handler:    _AppPublicService_UpdateRow_Handler,
		},
		{
			MethodName: "UpdateRows",
			Handler:    _AppPublicService_UpdateRows_Handler,
		},
		{
			MethodName: "DeleteRow",
			Handler:    _AppPublicService_DeleteRow_Handler,
		},
		{
			MethodName: "DeleteRows",
			Handler:    _AppPublicService_DeleteRows_Handler,
		},
		{
			MethodName: "MoveRows",
			Handler:    _AppPublicService_MoveRows_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _AppPublicService_Export_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/app/v1alpha/app_public_service.proto",
}
