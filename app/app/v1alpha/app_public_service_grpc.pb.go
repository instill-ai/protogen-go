// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: app/app/v1alpha/app_public_service.proto

package appv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppPublicService_Liveness_FullMethodName                       = "/app.app.v1alpha.AppPublicService/Liveness"
	AppPublicService_Readiness_FullMethodName                      = "/app.app.v1alpha.AppPublicService/Readiness"
	AppPublicService_CreateApp_FullMethodName                      = "/app.app.v1alpha.AppPublicService/CreateApp"
	AppPublicService_ListApps_FullMethodName                       = "/app.app.v1alpha.AppPublicService/ListApps"
	AppPublicService_UpdateApp_FullMethodName                      = "/app.app.v1alpha.AppPublicService/UpdateApp"
	AppPublicService_DeleteApp_FullMethodName                      = "/app.app.v1alpha.AppPublicService/DeleteApp"
	AppPublicService_CreateConversation_FullMethodName             = "/app.app.v1alpha.AppPublicService/CreateConversation"
	AppPublicService_ListConversations_FullMethodName              = "/app.app.v1alpha.AppPublicService/ListConversations"
	AppPublicService_UpdateConversation_FullMethodName             = "/app.app.v1alpha.AppPublicService/UpdateConversation"
	AppPublicService_DeleteConversation_FullMethodName             = "/app.app.v1alpha.AppPublicService/DeleteConversation"
	AppPublicService_CreateMessage_FullMethodName                  = "/app.app.v1alpha.AppPublicService/CreateMessage"
	AppPublicService_ListMessages_FullMethodName                   = "/app.app.v1alpha.AppPublicService/ListMessages"
	AppPublicService_UpdateMessage_FullMethodName                  = "/app.app.v1alpha.AppPublicService/UpdateMessage"
	AppPublicService_DeleteMessage_FullMethodName                  = "/app.app.v1alpha.AppPublicService/DeleteMessage"
	AppPublicService_UpdateAIAssistantAppPlayground_FullMethodName = "/app.app.v1alpha.AppPublicService/UpdateAIAssistantAppPlayground"
	AppPublicService_GetPlaygroundConversation_FullMethodName      = "/app.app.v1alpha.AppPublicService/GetPlaygroundConversation"
	AppPublicService_RestartPlaygroundConversation_FullMethodName  = "/app.app.v1alpha.AppPublicService/RestartPlaygroundConversation"
	AppPublicService_Chat_FullMethodName                           = "/app.app.v1alpha.AppPublicService/Chat"
)

// AppPublicServiceClient is the client API for AppPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppPublicServiceClient interface {
	// Check if the app server is alive
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Check if the app server is ready
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// Create a app
	CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error)
	// List all apps info
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error)
	// Update a app info
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error)
	// Delete a app
	DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*DeleteAppResponse, error)
	// Create a Conversation
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error)
	// List conversations
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error)
	// Update a conversation
	UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationResponse, error)
	// Delete a conversation
	DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationResponse, error)
	// Create a message
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error)
	// List messages
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	// Update a message
	UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error)
	// Delete a message
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	// Update AI assistant app playground
	UpdateAIAssistantAppPlayground(ctx context.Context, in *UpdateAIAssistantAppPlaygroundRequest, opts ...grpc.CallOption) (*UpdateAIAssistantAppPlaygroundResponse, error)
	// Get Playground Conversation
	//
	// get the latest conversation of auth user(e.g. login user and api key user)
	GetPlaygroundConversation(ctx context.Context, in *GetPlaygroundConversationRequest, opts ...grpc.CallOption) (*GetPlaygroundConversationResponse, error)
	// Restart Playground Conversation
	//
	// create a new conversation and use the auth user uid as creator uid and auto
	// generate a new conversation id on the behalf of auth user.
	RestartPlaygroundConversation(ctx context.Context, in *RestartPlaygroundConversationRequest, opts ...grpc.CallOption) (*RestartPlaygroundConversationResponse, error)
	// Chat
	//
	// Chat sends a message asynchronously and streams back the response.
	// This method is intended for real-time conversation with a chatbot
	// and the response needs to be processed incrementally.
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (AppPublicService_ChatClient, error)
}

type appPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppPublicServiceClient(cc grpc.ClientConnInterface) AppPublicServiceClient {
	return &appPublicServiceClient{cc}
}

func (c *appPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, AppPublicService_Liveness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, AppPublicService_Readiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, AppPublicService_CreateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error) {
	out := new(ListAppsResponse)
	err := c.cc.Invoke(ctx, AppPublicService_ListApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error) {
	out := new(UpdateAppResponse)
	err := c.cc.Invoke(ctx, AppPublicService_UpdateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*DeleteAppResponse, error) {
	out := new(DeleteAppResponse)
	err := c.cc.Invoke(ctx, AppPublicService_DeleteApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error) {
	out := new(CreateConversationResponse)
	err := c.cc.Invoke(ctx, AppPublicService_CreateConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error) {
	out := new(ListConversationsResponse)
	err := c.cc.Invoke(ctx, AppPublicService_ListConversations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationResponse, error) {
	out := new(UpdateConversationResponse)
	err := c.cc.Invoke(ctx, AppPublicService_UpdateConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationResponse, error) {
	out := new(DeleteConversationResponse)
	err := c.cc.Invoke(ctx, AppPublicService_DeleteConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error) {
	out := new(CreateMessageResponse)
	err := c.cc.Invoke(ctx, AppPublicService_CreateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, AppPublicService_ListMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error) {
	out := new(UpdateMessageResponse)
	err := c.cc.Invoke(ctx, AppPublicService_UpdateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, AppPublicService_DeleteMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) UpdateAIAssistantAppPlayground(ctx context.Context, in *UpdateAIAssistantAppPlaygroundRequest, opts ...grpc.CallOption) (*UpdateAIAssistantAppPlaygroundResponse, error) {
	out := new(UpdateAIAssistantAppPlaygroundResponse)
	err := c.cc.Invoke(ctx, AppPublicService_UpdateAIAssistantAppPlayground_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) GetPlaygroundConversation(ctx context.Context, in *GetPlaygroundConversationRequest, opts ...grpc.CallOption) (*GetPlaygroundConversationResponse, error) {
	out := new(GetPlaygroundConversationResponse)
	err := c.cc.Invoke(ctx, AppPublicService_GetPlaygroundConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) RestartPlaygroundConversation(ctx context.Context, in *RestartPlaygroundConversationRequest, opts ...grpc.CallOption) (*RestartPlaygroundConversationResponse, error) {
	out := new(RestartPlaygroundConversationResponse)
	err := c.cc.Invoke(ctx, AppPublicService_RestartPlaygroundConversation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appPublicServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (AppPublicService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &AppPublicService_ServiceDesc.Streams[0], AppPublicService_Chat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &appPublicServiceChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AppPublicService_ChatClient interface {
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type appPublicServiceChatClient struct {
	grpc.ClientStream
}

func (x *appPublicServiceChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AppPublicServiceServer is the server API for AppPublicService service.
// All implementations should embed UnimplementedAppPublicServiceServer
// for forward compatibility
type AppPublicServiceServer interface {
	// Check if the app server is alive
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Check if the app server is ready
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// Create a app
	CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error)
	// List all apps info
	ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error)
	// Update a app info
	UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error)
	// Delete a app
	DeleteApp(context.Context, *DeleteAppRequest) (*DeleteAppResponse, error)
	// Create a Conversation
	CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error)
	// List conversations
	ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error)
	// Update a conversation
	UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationResponse, error)
	// Delete a conversation
	DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationResponse, error)
	// Create a message
	CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error)
	// List messages
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	// Update a message
	UpdateMessage(context.Context, *UpdateMessageRequest) (*UpdateMessageResponse, error)
	// Delete a message
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	// Update AI assistant app playground
	UpdateAIAssistantAppPlayground(context.Context, *UpdateAIAssistantAppPlaygroundRequest) (*UpdateAIAssistantAppPlaygroundResponse, error)
	// Get Playground Conversation
	//
	// get the latest conversation of auth user(e.g. login user and api key user)
	GetPlaygroundConversation(context.Context, *GetPlaygroundConversationRequest) (*GetPlaygroundConversationResponse, error)
	// Restart Playground Conversation
	//
	// create a new conversation and use the auth user uid as creator uid and auto
	// generate a new conversation id on the behalf of auth user.
	RestartPlaygroundConversation(context.Context, *RestartPlaygroundConversationRequest) (*RestartPlaygroundConversationResponse, error)
	// Chat
	//
	// Chat sends a message asynchronously and streams back the response.
	// This method is intended for real-time conversation with a chatbot
	// and the response needs to be processed incrementally.
	Chat(*ChatRequest, AppPublicService_ChatServer) error
}

// UnimplementedAppPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAppPublicServiceServer struct {
}

func (UnimplementedAppPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedAppPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedAppPublicServiceServer) CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedAppPublicServiceServer) ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedAppPublicServiceServer) UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedAppPublicServiceServer) DeleteApp(context.Context, *DeleteAppRequest) (*DeleteAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedAppPublicServiceServer) CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedAppPublicServiceServer) ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (UnimplementedAppPublicServiceServer) UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversation not implemented")
}
func (UnimplementedAppPublicServiceServer) DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConversation not implemented")
}
func (UnimplementedAppPublicServiceServer) CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedAppPublicServiceServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedAppPublicServiceServer) UpdateMessage(context.Context, *UpdateMessageRequest) (*UpdateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (UnimplementedAppPublicServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedAppPublicServiceServer) UpdateAIAssistantAppPlayground(context.Context, *UpdateAIAssistantAppPlaygroundRequest) (*UpdateAIAssistantAppPlaygroundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAIAssistantAppPlayground not implemented")
}
func (UnimplementedAppPublicServiceServer) GetPlaygroundConversation(context.Context, *GetPlaygroundConversationRequest) (*GetPlaygroundConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaygroundConversation not implemented")
}
func (UnimplementedAppPublicServiceServer) RestartPlaygroundConversation(context.Context, *RestartPlaygroundConversationRequest) (*RestartPlaygroundConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartPlaygroundConversation not implemented")
}
func (UnimplementedAppPublicServiceServer) Chat(*ChatRequest, AppPublicService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

// UnsafeAppPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppPublicServiceServer will
// result in compilation errors.
type UnsafeAppPublicServiceServer interface {
	mustEmbedUnimplementedAppPublicServiceServer()
}

func RegisterAppPublicServiceServer(s grpc.ServiceRegistrar, srv AppPublicServiceServer) {
	s.RegisterService(&AppPublicService_ServiceDesc, srv)
}

func _AppPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).CreateApp(ctx, req.(*CreateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_ListApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).UpdateApp(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).DeleteApp(ctx, req.(*DeleteAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_CreateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).CreateConversation(ctx, req.(*CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_ListConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).ListConversations(ctx, req.(*ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_UpdateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).UpdateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_UpdateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).UpdateConversation(ctx, req.(*UpdateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_DeleteConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).DeleteConversation(ctx, req.(*DeleteConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_UpdateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).UpdateMessage(ctx, req.(*UpdateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_UpdateAIAssistantAppPlayground_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAIAssistantAppPlaygroundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).UpdateAIAssistantAppPlayground(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_UpdateAIAssistantAppPlayground_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).UpdateAIAssistantAppPlayground(ctx, req.(*UpdateAIAssistantAppPlaygroundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_GetPlaygroundConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaygroundConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).GetPlaygroundConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_GetPlaygroundConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).GetPlaygroundConversation(ctx, req.(*GetPlaygroundConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_RestartPlaygroundConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartPlaygroundConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppPublicServiceServer).RestartPlaygroundConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppPublicService_RestartPlaygroundConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppPublicServiceServer).RestartPlaygroundConversation(ctx, req.(*RestartPlaygroundConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppPublicService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppPublicServiceServer).Chat(m, &appPublicServiceChatServer{stream})
}

type AppPublicService_ChatServer interface {
	Send(*ChatResponse) error
	grpc.ServerStream
}

type appPublicServiceChatServer struct {
	grpc.ServerStream
}

func (x *appPublicServiceChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AppPublicService_ServiceDesc is the grpc.ServiceDesc for AppPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.app.v1alpha.AppPublicService",
	HandlerType: (*AppPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _AppPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _AppPublicService_Readiness_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _AppPublicService_CreateApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _AppPublicService_ListApps_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _AppPublicService_UpdateApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AppPublicService_DeleteApp_Handler,
		},
		{
			MethodName: "CreateConversation",
			Handler:    _AppPublicService_CreateConversation_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _AppPublicService_ListConversations_Handler,
		},
		{
			MethodName: "UpdateConversation",
			Handler:    _AppPublicService_UpdateConversation_Handler,
		},
		{
			MethodName: "DeleteConversation",
			Handler:    _AppPublicService_DeleteConversation_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _AppPublicService_CreateMessage_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _AppPublicService_ListMessages_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _AppPublicService_UpdateMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _AppPublicService_DeleteMessage_Handler,
		},
		{
			MethodName: "UpdateAIAssistantAppPlayground",
			Handler:    _AppPublicService_UpdateAIAssistantAppPlayground_Handler,
		},
		{
			MethodName: "GetPlaygroundConversation",
			Handler:    _AppPublicService_GetPlaygroundConversation_Handler,
		},
		{
			MethodName: "RestartPlaygroundConversation",
			Handler:    _AppPublicService_RestartPlaygroundConversation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _AppPublicService_Chat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/app/v1alpha/app_public_service.proto",
}
