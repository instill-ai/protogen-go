// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: core/usage/v1beta/usage.proto

package usagev1beta

import (
	v1beta "github.com/instill-ai/protogen-go/common/healthcheck/v1beta"
	v1alpha "github.com/instill-ai/protogen-go/common/task/v1alpha"
	v1beta1 "github.com/instill-ai/protogen-go/core/mgmt/v1beta"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Service enumerates the services to collect data from
type Session_Service int32

const (
	// Service: UNSPECIFIED
	Session_SERVICE_UNSPECIFIED Session_Service = 0
	// Service: MGMT
	Session_SERVICE_MGMT Session_Service = 1
	// Service: CONNECTOR
	Session_SERVICE_CONNECTOR Session_Service = 2
	// Service: MODEL
	Session_SERVICE_MODEL Session_Service = 3
	// Service: PIPELINE
	Session_SERVICE_PIPELINE Session_Service = 4
	// Service: ARTIFACT
	Session_SERVICE_ARTIFACT Session_Service = 5
)

// Enum value maps for Session_Service.
var (
	Session_Service_name = map[int32]string{
		0: "SERVICE_UNSPECIFIED",
		1: "SERVICE_MGMT",
		2: "SERVICE_CONNECTOR",
		3: "SERVICE_MODEL",
		4: "SERVICE_PIPELINE",
		5: "SERVICE_ARTIFACT",
	}
	Session_Service_value = map[string]int32{
		"SERVICE_UNSPECIFIED": 0,
		"SERVICE_MGMT":        1,
		"SERVICE_CONNECTOR":   2,
		"SERVICE_MODEL":       3,
		"SERVICE_PIPELINE":    4,
		"SERVICE_ARTIFACT":    5,
	}
)

func (x Session_Service) Enum() *Session_Service {
	p := new(Session_Service)
	*p = x
	return p
}

func (x Session_Service) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_Service) Descriptor() protoreflect.EnumDescriptor {
	return file_core_usage_v1beta_usage_proto_enumTypes[0].Descriptor()
}

func (Session_Service) Type() protoreflect.EnumType {
	return &file_core_usage_v1beta_usage_proto_enumTypes[0]
}

func (x Session_Service) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_Service.Descriptor instead.
func (Session_Service) EnumDescriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{4, 0}
}

// LivenessRequest represents a request to check a service liveness status
type LivenessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckRequest message
	HealthCheckRequest *v1beta.HealthCheckRequest `protobuf:"bytes,1,opt,name=health_check_request,json=healthCheckRequest,proto3,oneof" json:"health_check_request,omitempty"`
}

func (x *LivenessRequest) Reset() {
	*x = LivenessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessRequest) ProtoMessage() {}

func (x *LivenessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessRequest.ProtoReflect.Descriptor instead.
func (*LivenessRequest) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{0}
}

func (x *LivenessRequest) GetHealthCheckRequest() *v1beta.HealthCheckRequest {
	if x != nil {
		return x.HealthCheckRequest
	}
	return nil
}

// LivenessResponse represents a response for a service liveness status
type LivenessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckResponse message
	HealthCheckResponse *v1beta.HealthCheckResponse `protobuf:"bytes,1,opt,name=health_check_response,json=healthCheckResponse,proto3" json:"health_check_response,omitempty"`
}

func (x *LivenessResponse) Reset() {
	*x = LivenessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessResponse) ProtoMessage() {}

func (x *LivenessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessResponse.ProtoReflect.Descriptor instead.
func (*LivenessResponse) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{1}
}

func (x *LivenessResponse) GetHealthCheckResponse() *v1beta.HealthCheckResponse {
	if x != nil {
		return x.HealthCheckResponse
	}
	return nil
}

// ReadinessRequest represents a request to check a service readiness status
type ReadinessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckRequest message
	HealthCheckRequest *v1beta.HealthCheckRequest `protobuf:"bytes,1,opt,name=health_check_request,json=healthCheckRequest,proto3,oneof" json:"health_check_request,omitempty"`
}

func (x *ReadinessRequest) Reset() {
	*x = ReadinessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadinessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadinessRequest) ProtoMessage() {}

func (x *ReadinessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadinessRequest.ProtoReflect.Descriptor instead.
func (*ReadinessRequest) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{2}
}

func (x *ReadinessRequest) GetHealthCheckRequest() *v1beta.HealthCheckRequest {
	if x != nil {
		return x.HealthCheckRequest
	}
	return nil
}

// ReadinessResponse represents a response for a service readiness status
type ReadinessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HealthCheckResponse message
	HealthCheckResponse *v1beta.HealthCheckResponse `protobuf:"bytes,1,opt,name=health_check_response,json=healthCheckResponse,proto3" json:"health_check_response,omitempty"`
}

func (x *ReadinessResponse) Reset() {
	*x = ReadinessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadinessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadinessResponse) ProtoMessage() {}

func (x *ReadinessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadinessResponse.ProtoReflect.Descriptor instead.
func (*ReadinessResponse) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{3}
}

func (x *ReadinessResponse) GetHealthCheckResponse() *v1beta.HealthCheckResponse {
	if x != nil {
		return x.HealthCheckResponse
	}
	return nil
}

// Session represents a unique session whenever a new instance of VDP service
// gets started. The usage server returns a token that should be used as part of
// the challenge when sending a report with data collected from this session
type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource name in the format of 'sessions/uid'
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Resource UUID
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	// name of the service to collect data from
	Service Session_Service `protobuf:"varint,3,opt,name=service,proto3,enum=core.usage.v1beta.Session_Service" json:"service,omitempty"`
	// Session edition, allowed values include: 'local-ce' and 'local-ce:dev'
	Edition string `protobuf:"bytes,4,opt,name=edition,proto3" json:"edition,omitempty"`
	// Version of the service
	Version string `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	// Architecture of the system
	Arch string `protobuf:"bytes,6,opt,name=arch,proto3" json:"arch,omitempty"`
	// Operating system
	Os string `protobuf:"bytes,7,opt,name=os,proto3" json:"os,omitempty"`
	// Session service uptime
	Uptime int64 `protobuf:"varint,8,opt,name=uptime,proto3" json:"uptime,omitempty"`
	// Report time
	ReportTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=report_time,json=reportTime,proto3" json:"report_time,omitempty"`
	// Token to send report. The token is generated by the server and sent to
	// the client. Client needs to use the token to send report to the server.
	Token string `protobuf:"bytes,10,opt,name=token,proto3" json:"token,omitempty"`
	// Session creation time
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Session update time
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// Owner UUID of the instance, can also be considered as instance UUID
	OwnerUid string `protobuf:"bytes,13,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{4}
}

func (x *Session) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Session) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Session) GetService() Session_Service {
	if x != nil {
		return x.Service
	}
	return Session_SERVICE_UNSPECIFIED
}

func (x *Session) GetEdition() string {
	if x != nil {
		return x.Edition
	}
	return ""
}

func (x *Session) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Session) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Session) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Session) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *Session) GetReportTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportTime
	}
	return nil
}

func (x *Session) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Session) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Session) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Session) GetOwnerUid() string {
	if x != nil {
		return x.OwnerUid
	}
	return ""
}

// Management service usage data
type MgmtUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repeated user usage data
	UserUsages []*v1beta1.AuthenticatedUser `protobuf:"bytes,1,rep,name=user_usages,json=userUsages,proto3" json:"user_usages,omitempty"`
	// Repeated org usage data
	OrgUsages []*v1beta1.Organization `protobuf:"bytes,2,rep,name=org_usages,json=orgUsages,proto3" json:"org_usages,omitempty"`
}

func (x *MgmtUsageData) Reset() {
	*x = MgmtUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MgmtUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MgmtUsageData) ProtoMessage() {}

func (x *MgmtUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MgmtUsageData.ProtoReflect.Descriptor instead.
func (*MgmtUsageData) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{5}
}

func (x *MgmtUsageData) GetUserUsages() []*v1beta1.AuthenticatedUser {
	if x != nil {
		return x.UserUsages
	}
	return nil
}

func (x *MgmtUsageData) GetOrgUsages() []*v1beta1.Organization {
	if x != nil {
		return x.OrgUsages
	}
	return nil
}

// Connector service usage data
type ConnectorUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Usage data of all users in the connector service
	Usages []*ConnectorUsageData_UserUsageData `protobuf:"bytes,1,rep,name=usages,proto3" json:"usages,omitempty"`
}

func (x *ConnectorUsageData) Reset() {
	*x = ConnectorUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorUsageData) ProtoMessage() {}

func (x *ConnectorUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorUsageData.ProtoReflect.Descriptor instead.
func (*ConnectorUsageData) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{6}
}

func (x *ConnectorUsageData) GetUsages() []*ConnectorUsageData_UserUsageData {
	if x != nil {
		return x.Usages
	}
	return nil
}

// Model service usage data
type ModelUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Usage data of all users in the model service
	Usages []*ModelUsageData_UserUsageData `protobuf:"bytes,1,rep,name=usages,proto3" json:"usages,omitempty"`
}

func (x *ModelUsageData) Reset() {
	*x = ModelUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelUsageData) ProtoMessage() {}

func (x *ModelUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelUsageData.ProtoReflect.Descriptor instead.
func (*ModelUsageData) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{7}
}

func (x *ModelUsageData) GetUsages() []*ModelUsageData_UserUsageData {
	if x != nil {
		return x.Usages
	}
	return nil
}

// Pipeline service usage data
type PipelineUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Usage data of all users in the pipeline service
	Usages []*PipelineUsageData_UserUsageData `protobuf:"bytes,1,rep,name=usages,proto3" json:"usages,omitempty"`
}

func (x *PipelineUsageData) Reset() {
	*x = PipelineUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineUsageData) ProtoMessage() {}

func (x *PipelineUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineUsageData.ProtoReflect.Descriptor instead.
func (*PipelineUsageData) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{8}
}

func (x *PipelineUsageData) GetUsages() []*PipelineUsageData_UserUsageData {
	if x != nil {
		return x.Usages
	}
	return nil
}

// Artifact service usage data
type ArtifactUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Usage data of all users in the artifact service
	Usages []*ArtifactUsageData_UserUsageData `protobuf:"bytes,1,rep,name=usages,proto3" json:"usages,omitempty"`
}

func (x *ArtifactUsageData) Reset() {
	*x = ArtifactUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactUsageData) ProtoMessage() {}

func (x *ArtifactUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactUsageData.ProtoReflect.Descriptor instead.
func (*ArtifactUsageData) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{9}
}

func (x *ArtifactUsageData) GetUsages() []*ArtifactUsageData_UserUsageData {
	if x != nil {
		return x.Usages
	}
	return nil
}

// SessionReport represents a report to be sent to the server that includes the
// usage data of a session
type SessionReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Session uid
	SessionUid string `protobuf:"bytes,1,opt,name=session_uid,json=sessionUid,proto3" json:"session_uid,omitempty"`
	// Session token
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// Proof-of-work See https://en.wikipedia.org/wiki/Proof_of_work
	Pow string `protobuf:"bytes,3,opt,name=pow,proto3" json:"pow,omitempty"`
	// Session
	Session *Session `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
	// Service usage data
	//
	// Types that are assignable to UsageData:
	//
	//	*SessionReport_MgmtUsageData
	//	*SessionReport_ConnectorUsageData
	//	*SessionReport_ModelUsageData
	//	*SessionReport_PipelineUsageData
	//	*SessionReport_ArtifactUsageData
	UsageData isSessionReport_UsageData `protobuf_oneof:"usage_data"`
}

func (x *SessionReport) Reset() {
	*x = SessionReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionReport) ProtoMessage() {}

func (x *SessionReport) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionReport.ProtoReflect.Descriptor instead.
func (*SessionReport) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{10}
}

func (x *SessionReport) GetSessionUid() string {
	if x != nil {
		return x.SessionUid
	}
	return ""
}

func (x *SessionReport) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *SessionReport) GetPow() string {
	if x != nil {
		return x.Pow
	}
	return ""
}

func (x *SessionReport) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (m *SessionReport) GetUsageData() isSessionReport_UsageData {
	if m != nil {
		return m.UsageData
	}
	return nil
}

func (x *SessionReport) GetMgmtUsageData() *MgmtUsageData {
	if x, ok := x.GetUsageData().(*SessionReport_MgmtUsageData); ok {
		return x.MgmtUsageData
	}
	return nil
}

func (x *SessionReport) GetConnectorUsageData() *ConnectorUsageData {
	if x, ok := x.GetUsageData().(*SessionReport_ConnectorUsageData); ok {
		return x.ConnectorUsageData
	}
	return nil
}

func (x *SessionReport) GetModelUsageData() *ModelUsageData {
	if x, ok := x.GetUsageData().(*SessionReport_ModelUsageData); ok {
		return x.ModelUsageData
	}
	return nil
}

func (x *SessionReport) GetPipelineUsageData() *PipelineUsageData {
	if x, ok := x.GetUsageData().(*SessionReport_PipelineUsageData); ok {
		return x.PipelineUsageData
	}
	return nil
}

func (x *SessionReport) GetArtifactUsageData() *ArtifactUsageData {
	if x, ok := x.GetUsageData().(*SessionReport_ArtifactUsageData); ok {
		return x.ArtifactUsageData
	}
	return nil
}

type isSessionReport_UsageData interface {
	isSessionReport_UsageData()
}

type SessionReport_MgmtUsageData struct {
	// Management service usage data
	MgmtUsageData *MgmtUsageData `protobuf:"bytes,5,opt,name=mgmt_usage_data,json=mgmtUsageData,proto3,oneof"`
}

type SessionReport_ConnectorUsageData struct {
	// Connector service usage data
	ConnectorUsageData *ConnectorUsageData `protobuf:"bytes,6,opt,name=connector_usage_data,json=connectorUsageData,proto3,oneof"`
}

type SessionReport_ModelUsageData struct {
	// Model service usage data
	ModelUsageData *ModelUsageData `protobuf:"bytes,7,opt,name=model_usage_data,json=modelUsageData,proto3,oneof"`
}

type SessionReport_PipelineUsageData struct {
	// Pipeline service usage data
	PipelineUsageData *PipelineUsageData `protobuf:"bytes,8,opt,name=pipeline_usage_data,json=pipelineUsageData,proto3,oneof"`
}

type SessionReport_ArtifactUsageData struct {
	// Artifact service usage data
	ArtifactUsageData *ArtifactUsageData `protobuf:"bytes,9,opt,name=artifact_usage_data,json=artifactUsageData,proto3,oneof"`
}

func (*SessionReport_MgmtUsageData) isSessionReport_UsageData() {}

func (*SessionReport_ConnectorUsageData) isSessionReport_UsageData() {}

func (*SessionReport_ModelUsageData) isSessionReport_UsageData() {}

func (*SessionReport_PipelineUsageData) isSessionReport_UsageData() {}

func (*SessionReport_ArtifactUsageData) isSessionReport_UsageData() {}

// CreateSessionRequest represents a request to create a new session
type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A session resource to create
	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{11}
}

func (x *CreateSessionRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

// CreateSessionResponse represents a response for a session response
type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A session resource
	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{12}
}

func (x *CreateSessionResponse) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

// SendReportRequest represents a request to send a usage report
type SendSessionReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A report resource to create
	Report *SessionReport `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
}

func (x *SendSessionReportRequest) Reset() {
	*x = SendSessionReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSessionReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSessionReportRequest) ProtoMessage() {}

func (x *SendSessionReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSessionReportRequest.ProtoReflect.Descriptor instead.
func (*SendSessionReportRequest) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{13}
}

func (x *SendSessionReportRequest) GetReport() *SessionReport {
	if x != nil {
		return x.Report
	}
	return nil
}

// SendReportResponse represents an empty response
type SendSessionReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendSessionReportResponse) Reset() {
	*x = SendSessionReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSessionReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSessionReportResponse) ProtoMessage() {}

func (x *SendSessionReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSessionReportResponse.ProtoReflect.Descriptor instead.
func (*SendSessionReportResponse) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{14}
}

// Per user usage data in the connector service
type ConnectorUsageData_UserUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner UUID
	OwnerUid string `protobuf:"bytes,1,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	// Execution data for each user
	ConnectorExecuteData []*ConnectorUsageData_UserUsageData_ConnectorExecuteData `protobuf:"bytes,2,rep,name=connector_execute_data,json=connectorExecuteData,proto3" json:"connector_execute_data,omitempty"`
	// Owner type
	OwnerType v1beta1.OwnerType `protobuf:"varint,3,opt,name=owner_type,json=ownerType,proto3,enum=core.mgmt.v1beta.OwnerType" json:"owner_type,omitempty"`
}

func (x *ConnectorUsageData_UserUsageData) Reset() {
	*x = ConnectorUsageData_UserUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorUsageData_UserUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorUsageData_UserUsageData) ProtoMessage() {}

func (x *ConnectorUsageData_UserUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorUsageData_UserUsageData.ProtoReflect.Descriptor instead.
func (*ConnectorUsageData_UserUsageData) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ConnectorUsageData_UserUsageData) GetOwnerUid() string {
	if x != nil {
		return x.OwnerUid
	}
	return ""
}

func (x *ConnectorUsageData_UserUsageData) GetConnectorExecuteData() []*ConnectorUsageData_UserUsageData_ConnectorExecuteData {
	if x != nil {
		return x.ConnectorExecuteData
	}
	return nil
}

func (x *ConnectorUsageData_UserUsageData) GetOwnerType() v1beta1.OwnerType {
	if x != nil {
		return x.OwnerType
	}
	return v1beta1.OwnerType(0)
}

// Per execute usage metadata
type ConnectorUsageData_UserUsageData_ConnectorExecuteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UID for the executed connector
	ConnectorUid string `protobuf:"bytes,1,opt,name=connector_uid,json=connectorUid,proto3" json:"connector_uid,omitempty"`
	// UID for the execute log
	ExecuteUid string `protobuf:"bytes,2,opt,name=execute_uid,json=executeUid,proto3" json:"execute_uid,omitempty"`
	// Timestamp for the execution
	ExecuteTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=execute_time,json=executeTime,proto3" json:"execute_time,omitempty"`
	// Definition UID of the connector
	ConnectorDefinitionUid string `protobuf:"bytes,4,opt,name=connector_definition_uid,json=connectorDefinitionUid,proto3" json:"connector_definition_uid,omitempty"`
	// Final status of the execution
	Status v1beta1.Status `protobuf:"varint,5,opt,name=status,proto3,enum=core.mgmt.v1beta.Status" json:"status,omitempty"`
	// UUID of the user who execute the connector
	UserUid string `protobuf:"bytes,8,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	// Type of the user who execute the connector
	UserType v1beta1.OwnerType `protobuf:"varint,9,opt,name=user_type,json=userType,proto3,enum=core.mgmt.v1beta.OwnerType" json:"user_type,omitempty"`
}

func (x *ConnectorUsageData_UserUsageData_ConnectorExecuteData) Reset() {
	*x = ConnectorUsageData_UserUsageData_ConnectorExecuteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorUsageData_UserUsageData_ConnectorExecuteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorUsageData_UserUsageData_ConnectorExecuteData) ProtoMessage() {}

func (x *ConnectorUsageData_UserUsageData_ConnectorExecuteData) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorUsageData_UserUsageData_ConnectorExecuteData.ProtoReflect.Descriptor instead.
func (*ConnectorUsageData_UserUsageData_ConnectorExecuteData) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *ConnectorUsageData_UserUsageData_ConnectorExecuteData) GetConnectorUid() string {
	if x != nil {
		return x.ConnectorUid
	}
	return ""
}

func (x *ConnectorUsageData_UserUsageData_ConnectorExecuteData) GetExecuteUid() string {
	if x != nil {
		return x.ExecuteUid
	}
	return ""
}

func (x *ConnectorUsageData_UserUsageData_ConnectorExecuteData) GetExecuteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecuteTime
	}
	return nil
}

func (x *ConnectorUsageData_UserUsageData_ConnectorExecuteData) GetConnectorDefinitionUid() string {
	if x != nil {
		return x.ConnectorDefinitionUid
	}
	return ""
}

func (x *ConnectorUsageData_UserUsageData_ConnectorExecuteData) GetStatus() v1beta1.Status {
	if x != nil {
		return x.Status
	}
	return v1beta1.Status(0)
}

func (x *ConnectorUsageData_UserUsageData_ConnectorExecuteData) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *ConnectorUsageData_UserUsageData_ConnectorExecuteData) GetUserType() v1beta1.OwnerType {
	if x != nil {
		return x.UserType
	}
	return v1beta1.OwnerType(0)
}

// Per user usage data in the model service
type ModelUsageData_UserUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner UUID
	OwnerUid string `protobuf:"bytes,1,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	// Trigger data for each user
	ModelTriggerData []*ModelUsageData_UserUsageData_ModelTriggerData `protobuf:"bytes,2,rep,name=model_trigger_data,json=modelTriggerData,proto3" json:"model_trigger_data,omitempty"`
	// Owner type
	OwnerType v1beta1.OwnerType `protobuf:"varint,3,opt,name=owner_type,json=ownerType,proto3,enum=core.mgmt.v1beta.OwnerType" json:"owner_type,omitempty"`
}

func (x *ModelUsageData_UserUsageData) Reset() {
	*x = ModelUsageData_UserUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelUsageData_UserUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelUsageData_UserUsageData) ProtoMessage() {}

func (x *ModelUsageData_UserUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelUsageData_UserUsageData.ProtoReflect.Descriptor instead.
func (*ModelUsageData_UserUsageData) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ModelUsageData_UserUsageData) GetOwnerUid() string {
	if x != nil {
		return x.OwnerUid
	}
	return ""
}

func (x *ModelUsageData_UserUsageData) GetModelTriggerData() []*ModelUsageData_UserUsageData_ModelTriggerData {
	if x != nil {
		return x.ModelTriggerData
	}
	return nil
}

func (x *ModelUsageData_UserUsageData) GetOwnerType() v1beta1.OwnerType {
	if x != nil {
		return x.OwnerType
	}
	return v1beta1.OwnerType(0)
}

// Per trigger usage metadata
type ModelUsageData_UserUsageData_ModelTriggerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UID for the trigged model
	ModelUid string `protobuf:"bytes,1,opt,name=model_uid,json=modelUid,proto3" json:"model_uid,omitempty"`
	// UID for the trigger log
	TriggerUid string `protobuf:"bytes,2,opt,name=trigger_uid,json=triggerUid,proto3" json:"trigger_uid,omitempty"`
	// Timestamp for the trigger
	TriggerTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=trigger_time,json=triggerTime,proto3" json:"trigger_time,omitempty"`
	// Definition UID of the model
	ModelDefinitionUid string `protobuf:"bytes,4,opt,name=model_definition_uid,json=modelDefinitionUid,proto3" json:"model_definition_uid,omitempty"`
	// Task of the model
	ModelTask v1alpha.Task `protobuf:"varint,5,opt,name=model_task,json=modelTask,proto3,enum=common.task.v1alpha.Task" json:"model_task,omitempty"`
	// Final status of the execution
	Status v1beta1.Status `protobuf:"varint,6,opt,name=status,proto3,enum=core.mgmt.v1beta.Status" json:"status,omitempty"`
	// UUID of the user who trigger the model
	UserUid string `protobuf:"bytes,7,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	// Type of the user who trigger the model
	UserType v1beta1.OwnerType `protobuf:"varint,8,opt,name=user_type,json=userType,proto3,enum=core.mgmt.v1beta.OwnerType" json:"user_type,omitempty"`
}

func (x *ModelUsageData_UserUsageData_ModelTriggerData) Reset() {
	*x = ModelUsageData_UserUsageData_ModelTriggerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelUsageData_UserUsageData_ModelTriggerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelUsageData_UserUsageData_ModelTriggerData) ProtoMessage() {}

func (x *ModelUsageData_UserUsageData_ModelTriggerData) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelUsageData_UserUsageData_ModelTriggerData.ProtoReflect.Descriptor instead.
func (*ModelUsageData_UserUsageData_ModelTriggerData) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{7, 0, 0}
}

func (x *ModelUsageData_UserUsageData_ModelTriggerData) GetModelUid() string {
	if x != nil {
		return x.ModelUid
	}
	return ""
}

func (x *ModelUsageData_UserUsageData_ModelTriggerData) GetTriggerUid() string {
	if x != nil {
		return x.TriggerUid
	}
	return ""
}

func (x *ModelUsageData_UserUsageData_ModelTriggerData) GetTriggerTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TriggerTime
	}
	return nil
}

func (x *ModelUsageData_UserUsageData_ModelTriggerData) GetModelDefinitionUid() string {
	if x != nil {
		return x.ModelDefinitionUid
	}
	return ""
}

func (x *ModelUsageData_UserUsageData_ModelTriggerData) GetModelTask() v1alpha.Task {
	if x != nil {
		return x.ModelTask
	}
	return v1alpha.Task(0)
}

func (x *ModelUsageData_UserUsageData_ModelTriggerData) GetStatus() v1beta1.Status {
	if x != nil {
		return x.Status
	}
	return v1beta1.Status(0)
}

func (x *ModelUsageData_UserUsageData_ModelTriggerData) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *ModelUsageData_UserUsageData_ModelTriggerData) GetUserType() v1beta1.OwnerType {
	if x != nil {
		return x.UserType
	}
	return v1beta1.OwnerType(0)
}

// Per user usage data in the pipeline service
type PipelineUsageData_UserUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner UUID
	OwnerUid string `protobuf:"bytes,1,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	// Trigger data for each user
	PipelineTriggerData []*PipelineUsageData_UserUsageData_PipelineTriggerData `protobuf:"bytes,2,rep,name=pipeline_trigger_data,json=pipelineTriggerData,proto3" json:"pipeline_trigger_data,omitempty"`
	// Owner type
	OwnerType v1beta1.OwnerType `protobuf:"varint,3,opt,name=owner_type,json=ownerType,proto3,enum=core.mgmt.v1beta.OwnerType" json:"owner_type,omitempty"`
}

func (x *PipelineUsageData_UserUsageData) Reset() {
	*x = PipelineUsageData_UserUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineUsageData_UserUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineUsageData_UserUsageData) ProtoMessage() {}

func (x *PipelineUsageData_UserUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineUsageData_UserUsageData.ProtoReflect.Descriptor instead.
func (*PipelineUsageData_UserUsageData) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{8, 0}
}

func (x *PipelineUsageData_UserUsageData) GetOwnerUid() string {
	if x != nil {
		return x.OwnerUid
	}
	return ""
}

func (x *PipelineUsageData_UserUsageData) GetPipelineTriggerData() []*PipelineUsageData_UserUsageData_PipelineTriggerData {
	if x != nil {
		return x.PipelineTriggerData
	}
	return nil
}

func (x *PipelineUsageData_UserUsageData) GetOwnerType() v1beta1.OwnerType {
	if x != nil {
		return x.OwnerType
	}
	return v1beta1.OwnerType(0)
}

// Per trigger usage metadata
type PipelineUsageData_UserUsageData_PipelineTriggerData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UID for the triggered pipeline
	PipelineUid string `protobuf:"bytes,1,opt,name=pipeline_uid,json=pipelineUid,proto3" json:"pipeline_uid,omitempty"`
	// UID for the trigger log
	TriggerUid string `protobuf:"bytes,2,opt,name=trigger_uid,json=triggerUid,proto3" json:"trigger_uid,omitempty"`
	// Timestamp for the trigger
	TriggerTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=trigger_time,json=triggerTime,proto3" json:"trigger_time,omitempty"`
	// Trigger mode
	TriggerMode v1beta1.Mode `protobuf:"varint,4,opt,name=trigger_mode,json=triggerMode,proto3,enum=core.mgmt.v1beta.Mode" json:"trigger_mode,omitempty"`
	// Final status of the execution
	Status v1beta1.Status `protobuf:"varint,5,opt,name=status,proto3,enum=core.mgmt.v1beta.Status" json:"status,omitempty"`
	// Version for the triggered release pipeline, empty string if not release
	PipelineReleaseId string `protobuf:"bytes,6,opt,name=pipeline_release_id,json=pipelineReleaseId,proto3" json:"pipeline_release_id,omitempty"`
	// UID for the triggered release pipeline, empty string if not release
	PipelineReleaseUid string `protobuf:"bytes,7,opt,name=pipeline_release_uid,json=pipelineReleaseUid,proto3" json:"pipeline_release_uid,omitempty"`
	// UUID of the user who trigger the pipeline
	UserUid string `protobuf:"bytes,8,opt,name=user_uid,json=userUid,proto3" json:"user_uid,omitempty"`
	// Type of the user who trigger the pipeline
	UserType v1beta1.OwnerType `protobuf:"varint,9,opt,name=user_type,json=userType,proto3,enum=core.mgmt.v1beta.OwnerType" json:"user_type,omitempty"`
	// ID for the triggered pipeline
	PipelineId string `protobuf:"bytes,10,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
}

func (x *PipelineUsageData_UserUsageData_PipelineTriggerData) Reset() {
	*x = PipelineUsageData_UserUsageData_PipelineTriggerData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineUsageData_UserUsageData_PipelineTriggerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineUsageData_UserUsageData_PipelineTriggerData) ProtoMessage() {}

func (x *PipelineUsageData_UserUsageData_PipelineTriggerData) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineUsageData_UserUsageData_PipelineTriggerData.ProtoReflect.Descriptor instead.
func (*PipelineUsageData_UserUsageData_PipelineTriggerData) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{8, 0, 0}
}

func (x *PipelineUsageData_UserUsageData_PipelineTriggerData) GetPipelineUid() string {
	if x != nil {
		return x.PipelineUid
	}
	return ""
}

func (x *PipelineUsageData_UserUsageData_PipelineTriggerData) GetTriggerUid() string {
	if x != nil {
		return x.TriggerUid
	}
	return ""
}

func (x *PipelineUsageData_UserUsageData_PipelineTriggerData) GetTriggerTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TriggerTime
	}
	return nil
}

func (x *PipelineUsageData_UserUsageData_PipelineTriggerData) GetTriggerMode() v1beta1.Mode {
	if x != nil {
		return x.TriggerMode
	}
	return v1beta1.Mode(0)
}

func (x *PipelineUsageData_UserUsageData_PipelineTriggerData) GetStatus() v1beta1.Status {
	if x != nil {
		return x.Status
	}
	return v1beta1.Status(0)
}

func (x *PipelineUsageData_UserUsageData_PipelineTriggerData) GetPipelineReleaseId() string {
	if x != nil {
		return x.PipelineReleaseId
	}
	return ""
}

func (x *PipelineUsageData_UserUsageData_PipelineTriggerData) GetPipelineReleaseUid() string {
	if x != nil {
		return x.PipelineReleaseUid
	}
	return ""
}

func (x *PipelineUsageData_UserUsageData_PipelineTriggerData) GetUserUid() string {
	if x != nil {
		return x.UserUid
	}
	return ""
}

func (x *PipelineUsageData_UserUsageData_PipelineTriggerData) GetUserType() v1beta1.OwnerType {
	if x != nil {
		return x.UserType
	}
	return v1beta1.OwnerType(0)
}

func (x *PipelineUsageData_UserUsageData_PipelineTriggerData) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

// Per user usage data in the artifact service
type ArtifactUsageData_UserUsageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Owner UUID
	OwnerUid string `protobuf:"bytes,1,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	// Owner type
	OwnerType v1beta1.OwnerType `protobuf:"varint,2,opt,name=owner_type,json=ownerType,proto3,enum=core.mgmt.v1beta.OwnerType" json:"owner_type,omitempty"`
}

func (x *ArtifactUsageData_UserUsageData) Reset() {
	*x = ArtifactUsageData_UserUsageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_usage_v1beta_usage_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArtifactUsageData_UserUsageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactUsageData_UserUsageData) ProtoMessage() {}

func (x *ArtifactUsageData_UserUsageData) ProtoReflect() protoreflect.Message {
	mi := &file_core_usage_v1beta_usage_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactUsageData_UserUsageData.ProtoReflect.Descriptor instead.
func (*ArtifactUsageData_UserUsageData) Descriptor() ([]byte, []int) {
	return file_core_usage_v1beta_usage_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ArtifactUsageData_UserUsageData) GetOwnerUid() string {
	if x != nil {
		return x.OwnerUid
	}
	return ""
}

func (x *ArtifactUsageData_UserUsageData) GetOwnerType() v1beta1.OwnerType {
	if x != nil {
		return x.OwnerType
	}
	return v1beta1.OwnerType(0)
}

var File_core_usage_v1beta_usage_proto protoreflect.FileDescriptor

var file_core_usage_v1beta_usage_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x1a, 0x2b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x14,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00,
	0x52, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x76, 0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a,
	0x14, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48,
	0x00, 0x52, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x77, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc8, 0x05, 0x0a, 0x07, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x13, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x47, 0x4d, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54,
	0x10, 0x05, 0x3a, 0x31, 0xea, 0x41, 0x2e, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x22, 0x94, 0x01, 0x0a, 0x0d, 0x4d, 0x67, 0x6d, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x0a, 0x6f, 0x72, 0x67, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xde, 0x05, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x1a, 0xfa, 0x04, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0a, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xff, 0x02, 0x0a, 0x14,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x55, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x3d,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf0, 0x05,
	0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x47, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x94, 0x05, 0x0a, 0x0d, 0x55, 0x73,
	0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x73, 0x0a,
	0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0xaa, 0x03, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x55, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x12, 0x42, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xe7, 0x06, 0x0a, 0x11, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x1a, 0x85, 0x06, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x7f, 0x0a, 0x15, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x13, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x8f, 0x04, 0x0a, 0x13, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x26, 0x0a, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x42,
	0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x35,
	0x0a, 0x14, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xd3, 0x01, 0x0a, 0x11, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4a, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x72, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x3f, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xd6, 0x04, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x70, 0x6f, 0x77, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0f, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x4d, 0x67, 0x6d, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0d, 0x6d, 0x67, 0x6d, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x59, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x10,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x13, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x11, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x18, 0x53,
	0x65, 0x6e, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0xca, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x42, 0x0a, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2d,
	0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x3b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0xa2, 0x02, 0x03, 0x43,
	0x55, 0x58, 0xaa, 0x02, 0x11, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0xca, 0x02, 0x11, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0xe2, 0x02, 0x1d, 0x43, 0x6f, 0x72,
	0x65, 0x5c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x43, 0x6f, 0x72,
	0x65, 0x3a, 0x3a, 0x55, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_usage_v1beta_usage_proto_rawDescOnce sync.Once
	file_core_usage_v1beta_usage_proto_rawDescData = file_core_usage_v1beta_usage_proto_rawDesc
)

func file_core_usage_v1beta_usage_proto_rawDescGZIP() []byte {
	file_core_usage_v1beta_usage_proto_rawDescOnce.Do(func() {
		file_core_usage_v1beta_usage_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_usage_v1beta_usage_proto_rawDescData)
	})
	return file_core_usage_v1beta_usage_proto_rawDescData
}

var file_core_usage_v1beta_usage_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_core_usage_v1beta_usage_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_core_usage_v1beta_usage_proto_goTypes = []interface{}{
	(Session_Service)(0),                                          // 0: core.usage.v1beta.Session.Service
	(*LivenessRequest)(nil),                                       // 1: core.usage.v1beta.LivenessRequest
	(*LivenessResponse)(nil),                                      // 2: core.usage.v1beta.LivenessResponse
	(*ReadinessRequest)(nil),                                      // 3: core.usage.v1beta.ReadinessRequest
	(*ReadinessResponse)(nil),                                     // 4: core.usage.v1beta.ReadinessResponse
	(*Session)(nil),                                               // 5: core.usage.v1beta.Session
	(*MgmtUsageData)(nil),                                         // 6: core.usage.v1beta.MgmtUsageData
	(*ConnectorUsageData)(nil),                                    // 7: core.usage.v1beta.ConnectorUsageData
	(*ModelUsageData)(nil),                                        // 8: core.usage.v1beta.ModelUsageData
	(*PipelineUsageData)(nil),                                     // 9: core.usage.v1beta.PipelineUsageData
	(*ArtifactUsageData)(nil),                                     // 10: core.usage.v1beta.ArtifactUsageData
	(*SessionReport)(nil),                                         // 11: core.usage.v1beta.SessionReport
	(*CreateSessionRequest)(nil),                                  // 12: core.usage.v1beta.CreateSessionRequest
	(*CreateSessionResponse)(nil),                                 // 13: core.usage.v1beta.CreateSessionResponse
	(*SendSessionReportRequest)(nil),                              // 14: core.usage.v1beta.SendSessionReportRequest
	(*SendSessionReportResponse)(nil),                             // 15: core.usage.v1beta.SendSessionReportResponse
	(*ConnectorUsageData_UserUsageData)(nil),                      // 16: core.usage.v1beta.ConnectorUsageData.UserUsageData
	(*ConnectorUsageData_UserUsageData_ConnectorExecuteData)(nil), // 17: core.usage.v1beta.ConnectorUsageData.UserUsageData.ConnectorExecuteData
	(*ModelUsageData_UserUsageData)(nil),                          // 18: core.usage.v1beta.ModelUsageData.UserUsageData
	(*ModelUsageData_UserUsageData_ModelTriggerData)(nil),         // 19: core.usage.v1beta.ModelUsageData.UserUsageData.ModelTriggerData
	(*PipelineUsageData_UserUsageData)(nil),                       // 20: core.usage.v1beta.PipelineUsageData.UserUsageData
	(*PipelineUsageData_UserUsageData_PipelineTriggerData)(nil),   // 21: core.usage.v1beta.PipelineUsageData.UserUsageData.PipelineTriggerData
	(*ArtifactUsageData_UserUsageData)(nil),                       // 22: core.usage.v1beta.ArtifactUsageData.UserUsageData
	(*v1beta.HealthCheckRequest)(nil),                             // 23: common.healthcheck.v1beta.HealthCheckRequest
	(*v1beta.HealthCheckResponse)(nil),                            // 24: common.healthcheck.v1beta.HealthCheckResponse
	(*timestamppb.Timestamp)(nil),                                 // 25: google.protobuf.Timestamp
	(*v1beta1.AuthenticatedUser)(nil),                             // 26: core.mgmt.v1beta.AuthenticatedUser
	(*v1beta1.Organization)(nil),                                  // 27: core.mgmt.v1beta.Organization
	(v1beta1.OwnerType)(0),                                        // 28: core.mgmt.v1beta.OwnerType
	(v1beta1.Status)(0),                                           // 29: core.mgmt.v1beta.Status
	(v1alpha.Task)(0),                                             // 30: common.task.v1alpha.Task
	(v1beta1.Mode)(0),                                             // 31: core.mgmt.v1beta.Mode
}
var file_core_usage_v1beta_usage_proto_depIdxs = []int32{
	23, // 0: core.usage.v1beta.LivenessRequest.health_check_request:type_name -> common.healthcheck.v1beta.HealthCheckRequest
	24, // 1: core.usage.v1beta.LivenessResponse.health_check_response:type_name -> common.healthcheck.v1beta.HealthCheckResponse
	23, // 2: core.usage.v1beta.ReadinessRequest.health_check_request:type_name -> common.healthcheck.v1beta.HealthCheckRequest
	24, // 3: core.usage.v1beta.ReadinessResponse.health_check_response:type_name -> common.healthcheck.v1beta.HealthCheckResponse
	0,  // 4: core.usage.v1beta.Session.service:type_name -> core.usage.v1beta.Session.Service
	25, // 5: core.usage.v1beta.Session.report_time:type_name -> google.protobuf.Timestamp
	25, // 6: core.usage.v1beta.Session.create_time:type_name -> google.protobuf.Timestamp
	25, // 7: core.usage.v1beta.Session.update_time:type_name -> google.protobuf.Timestamp
	26, // 8: core.usage.v1beta.MgmtUsageData.user_usages:type_name -> core.mgmt.v1beta.AuthenticatedUser
	27, // 9: core.usage.v1beta.MgmtUsageData.org_usages:type_name -> core.mgmt.v1beta.Organization
	16, // 10: core.usage.v1beta.ConnectorUsageData.usages:type_name -> core.usage.v1beta.ConnectorUsageData.UserUsageData
	18, // 11: core.usage.v1beta.ModelUsageData.usages:type_name -> core.usage.v1beta.ModelUsageData.UserUsageData
	20, // 12: core.usage.v1beta.PipelineUsageData.usages:type_name -> core.usage.v1beta.PipelineUsageData.UserUsageData
	22, // 13: core.usage.v1beta.ArtifactUsageData.usages:type_name -> core.usage.v1beta.ArtifactUsageData.UserUsageData
	5,  // 14: core.usage.v1beta.SessionReport.session:type_name -> core.usage.v1beta.Session
	6,  // 15: core.usage.v1beta.SessionReport.mgmt_usage_data:type_name -> core.usage.v1beta.MgmtUsageData
	7,  // 16: core.usage.v1beta.SessionReport.connector_usage_data:type_name -> core.usage.v1beta.ConnectorUsageData
	8,  // 17: core.usage.v1beta.SessionReport.model_usage_data:type_name -> core.usage.v1beta.ModelUsageData
	9,  // 18: core.usage.v1beta.SessionReport.pipeline_usage_data:type_name -> core.usage.v1beta.PipelineUsageData
	10, // 19: core.usage.v1beta.SessionReport.artifact_usage_data:type_name -> core.usage.v1beta.ArtifactUsageData
	5,  // 20: core.usage.v1beta.CreateSessionRequest.session:type_name -> core.usage.v1beta.Session
	5,  // 21: core.usage.v1beta.CreateSessionResponse.session:type_name -> core.usage.v1beta.Session
	11, // 22: core.usage.v1beta.SendSessionReportRequest.report:type_name -> core.usage.v1beta.SessionReport
	17, // 23: core.usage.v1beta.ConnectorUsageData.UserUsageData.connector_execute_data:type_name -> core.usage.v1beta.ConnectorUsageData.UserUsageData.ConnectorExecuteData
	28, // 24: core.usage.v1beta.ConnectorUsageData.UserUsageData.owner_type:type_name -> core.mgmt.v1beta.OwnerType
	25, // 25: core.usage.v1beta.ConnectorUsageData.UserUsageData.ConnectorExecuteData.execute_time:type_name -> google.protobuf.Timestamp
	29, // 26: core.usage.v1beta.ConnectorUsageData.UserUsageData.ConnectorExecuteData.status:type_name -> core.mgmt.v1beta.Status
	28, // 27: core.usage.v1beta.ConnectorUsageData.UserUsageData.ConnectorExecuteData.user_type:type_name -> core.mgmt.v1beta.OwnerType
	19, // 28: core.usage.v1beta.ModelUsageData.UserUsageData.model_trigger_data:type_name -> core.usage.v1beta.ModelUsageData.UserUsageData.ModelTriggerData
	28, // 29: core.usage.v1beta.ModelUsageData.UserUsageData.owner_type:type_name -> core.mgmt.v1beta.OwnerType
	25, // 30: core.usage.v1beta.ModelUsageData.UserUsageData.ModelTriggerData.trigger_time:type_name -> google.protobuf.Timestamp
	30, // 31: core.usage.v1beta.ModelUsageData.UserUsageData.ModelTriggerData.model_task:type_name -> common.task.v1alpha.Task
	29, // 32: core.usage.v1beta.ModelUsageData.UserUsageData.ModelTriggerData.status:type_name -> core.mgmt.v1beta.Status
	28, // 33: core.usage.v1beta.ModelUsageData.UserUsageData.ModelTriggerData.user_type:type_name -> core.mgmt.v1beta.OwnerType
	21, // 34: core.usage.v1beta.PipelineUsageData.UserUsageData.pipeline_trigger_data:type_name -> core.usage.v1beta.PipelineUsageData.UserUsageData.PipelineTriggerData
	28, // 35: core.usage.v1beta.PipelineUsageData.UserUsageData.owner_type:type_name -> core.mgmt.v1beta.OwnerType
	25, // 36: core.usage.v1beta.PipelineUsageData.UserUsageData.PipelineTriggerData.trigger_time:type_name -> google.protobuf.Timestamp
	31, // 37: core.usage.v1beta.PipelineUsageData.UserUsageData.PipelineTriggerData.trigger_mode:type_name -> core.mgmt.v1beta.Mode
	29, // 38: core.usage.v1beta.PipelineUsageData.UserUsageData.PipelineTriggerData.status:type_name -> core.mgmt.v1beta.Status
	28, // 39: core.usage.v1beta.PipelineUsageData.UserUsageData.PipelineTriggerData.user_type:type_name -> core.mgmt.v1beta.OwnerType
	28, // 40: core.usage.v1beta.ArtifactUsageData.UserUsageData.owner_type:type_name -> core.mgmt.v1beta.OwnerType
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_core_usage_v1beta_usage_proto_init() }
func file_core_usage_v1beta_usage_proto_init() {
	if File_core_usage_v1beta_usage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_core_usage_v1beta_usage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadinessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadinessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MgmtUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSessionReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSessionReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorUsageData_UserUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorUsageData_UserUsageData_ConnectorExecuteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelUsageData_UserUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelUsageData_UserUsageData_ModelTriggerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineUsageData_UserUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineUsageData_UserUsageData_PipelineTriggerData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_usage_v1beta_usage_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArtifactUsageData_UserUsageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_core_usage_v1beta_usage_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_core_usage_v1beta_usage_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_core_usage_v1beta_usage_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SessionReport_MgmtUsageData)(nil),
		(*SessionReport_ConnectorUsageData)(nil),
		(*SessionReport_ModelUsageData)(nil),
		(*SessionReport_PipelineUsageData)(nil),
		(*SessionReport_ArtifactUsageData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_usage_v1beta_usage_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_core_usage_v1beta_usage_proto_goTypes,
		DependencyIndexes: file_core_usage_v1beta_usage_proto_depIdxs,
		EnumInfos:         file_core_usage_v1beta_usage_proto_enumTypes,
		MessageInfos:      file_core_usage_v1beta_usage_proto_msgTypes,
	}.Build()
	File_core_usage_v1beta_usage_proto = out.File
	file_core_usage_v1beta_usage_proto_rawDesc = nil
	file_core_usage_v1beta_usage_proto_goTypes = nil
	file_core_usage_v1beta_usage_proto_depIdxs = nil
}
