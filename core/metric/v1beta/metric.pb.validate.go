// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/metric/v1beta/metric.proto

package metricv1beta

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReportPipelineTriggerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportPipelineTriggerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportPipelineTriggerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportPipelineTriggerRequestMultiError, or nil if none found.
func (m *ReportPipelineTriggerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportPipelineTriggerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportPipelineTriggerRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportPipelineTriggerRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportPipelineTriggerRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportPipelineTriggerRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportPipelineTriggerRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportPipelineTriggerRequestValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUsageRecord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportPipelineTriggerRequestValidationError{
					field:  "UsageRecord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportPipelineTriggerRequestValidationError{
					field:  "UsageRecord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsageRecord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportPipelineTriggerRequestValidationError{
				field:  "UsageRecord",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportPipelineTriggerRequestMultiError(errors)
	}

	return nil
}

// ReportPipelineTriggerRequestMultiError is an error wrapping multiple
// validation errors returned by ReportPipelineTriggerRequest.ValidateAll() if
// the designated constraints aren't met.
type ReportPipelineTriggerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportPipelineTriggerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportPipelineTriggerRequestMultiError) AllErrors() []error { return m }

// ReportPipelineTriggerRequestValidationError is the validation error returned
// by ReportPipelineTriggerRequest.Validate if the designated constraints
// aren't met.
type ReportPipelineTriggerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportPipelineTriggerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportPipelineTriggerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportPipelineTriggerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportPipelineTriggerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportPipelineTriggerRequestValidationError) ErrorName() string {
	return "ReportPipelineTriggerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportPipelineTriggerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportPipelineTriggerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportPipelineTriggerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportPipelineTriggerRequestValidationError{}

// Validate checks the field values on ReportPipelineTriggerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportPipelineTriggerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportPipelineTriggerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReportPipelineTriggerResponseMultiError, or nil if none found.
func (m *ReportPipelineTriggerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportPipelineTriggerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNull()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportPipelineTriggerResponseValidationError{
					field:  "Null",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportPipelineTriggerResponseValidationError{
					field:  "Null",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNull()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportPipelineTriggerResponseValidationError{
				field:  "Null",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportPipelineTriggerResponseMultiError(errors)
	}

	return nil
}

// ReportPipelineTriggerResponseMultiError is an error wrapping multiple
// validation errors returned by ReportPipelineTriggerResponse.ValidateAll()
// if the designated constraints aren't met.
type ReportPipelineTriggerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportPipelineTriggerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportPipelineTriggerResponseMultiError) AllErrors() []error { return m }

// ReportPipelineTriggerResponseValidationError is the validation error
// returned by ReportPipelineTriggerResponse.Validate if the designated
// constraints aren't met.
type ReportPipelineTriggerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportPipelineTriggerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportPipelineTriggerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportPipelineTriggerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportPipelineTriggerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportPipelineTriggerResponseValidationError) ErrorName() string {
	return "ReportPipelineTriggerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportPipelineTriggerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportPipelineTriggerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportPipelineTriggerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportPipelineTriggerResponseValidationError{}

// Validate checks the field values on ReportPipelineTriggersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportPipelineTriggersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportPipelineTriggersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReportPipelineTriggersRequestMultiError, or nil if none found.
func (m *ReportPipelineTriggersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportPipelineTriggersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipelineTriggerRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportPipelineTriggersRequestValidationError{
						field:  fmt.Sprintf("PipelineTriggerRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportPipelineTriggersRequestValidationError{
						field:  fmt.Sprintf("PipelineTriggerRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportPipelineTriggersRequestValidationError{
					field:  fmt.Sprintf("PipelineTriggerRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReportPipelineTriggersRequestMultiError(errors)
	}

	return nil
}

// ReportPipelineTriggersRequestMultiError is an error wrapping multiple
// validation errors returned by ReportPipelineTriggersRequest.ValidateAll()
// if the designated constraints aren't met.
type ReportPipelineTriggersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportPipelineTriggersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportPipelineTriggersRequestMultiError) AllErrors() []error { return m }

// ReportPipelineTriggersRequestValidationError is the validation error
// returned by ReportPipelineTriggersRequest.Validate if the designated
// constraints aren't met.
type ReportPipelineTriggersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportPipelineTriggersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportPipelineTriggersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportPipelineTriggersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportPipelineTriggersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportPipelineTriggersRequestValidationError) ErrorName() string {
	return "ReportPipelineTriggersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportPipelineTriggersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportPipelineTriggersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportPipelineTriggersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportPipelineTriggersRequestValidationError{}

// Validate checks the field values on ReportPipelineTriggersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportPipelineTriggersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportPipelineTriggersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReportPipelineTriggersResponseMultiError, or nil if none found.
func (m *ReportPipelineTriggersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportPipelineTriggersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNull()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportPipelineTriggersResponseValidationError{
					field:  "Null",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportPipelineTriggersResponseValidationError{
					field:  "Null",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNull()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportPipelineTriggersResponseValidationError{
				field:  "Null",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportPipelineTriggersResponseMultiError(errors)
	}

	return nil
}

// ReportPipelineTriggersResponseMultiError is an error wrapping multiple
// validation errors returned by ReportPipelineTriggersResponse.ValidateAll()
// if the designated constraints aren't met.
type ReportPipelineTriggersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportPipelineTriggersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportPipelineTriggersResponseMultiError) AllErrors() []error { return m }

// ReportPipelineTriggersResponseValidationError is the validation error
// returned by ReportPipelineTriggersResponse.Validate if the designated
// constraints aren't met.
type ReportPipelineTriggersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportPipelineTriggersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportPipelineTriggersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportPipelineTriggersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportPipelineTriggersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportPipelineTriggersResponseValidationError) ErrorName() string {
	return "ReportPipelineTriggersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportPipelineTriggersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportPipelineTriggersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportPipelineTriggersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportPipelineTriggersResponseValidationError{}

// Validate checks the field values on ReportModelOnlineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportModelOnlineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportModelOnlineRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportModelOnlineRequestMultiError, or nil if none found.
func (m *ReportModelOnlineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportModelOnlineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportModelOnlineRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportModelOnlineRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportModelOnlineRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportModelOnlineRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportModelOnlineRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportModelOnlineRequestValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCumUsageRecord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportModelOnlineRequestValidationError{
					field:  "CumUsageRecord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportModelOnlineRequestValidationError{
					field:  "CumUsageRecord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCumUsageRecord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportModelOnlineRequestValidationError{
				field:  "CumUsageRecord",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportModelOnlineRequestMultiError(errors)
	}

	return nil
}

// ReportModelOnlineRequestMultiError is an error wrapping multiple validation
// errors returned by ReportModelOnlineRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportModelOnlineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportModelOnlineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportModelOnlineRequestMultiError) AllErrors() []error { return m }

// ReportModelOnlineRequestValidationError is the validation error returned by
// ReportModelOnlineRequest.Validate if the designated constraints aren't met.
type ReportModelOnlineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportModelOnlineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportModelOnlineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportModelOnlineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportModelOnlineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportModelOnlineRequestValidationError) ErrorName() string {
	return "ReportModelOnlineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportModelOnlineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportModelOnlineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportModelOnlineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportModelOnlineRequestValidationError{}

// Validate checks the field values on ReportModelOnlineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportModelOnlineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportModelOnlineResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportModelOnlineResponseMultiError, or nil if none found.
func (m *ReportModelOnlineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportModelOnlineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNull()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportModelOnlineResponseValidationError{
					field:  "Null",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportModelOnlineResponseValidationError{
					field:  "Null",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNull()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportModelOnlineResponseValidationError{
				field:  "Null",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportModelOnlineResponseMultiError(errors)
	}

	return nil
}

// ReportModelOnlineResponseMultiError is an error wrapping multiple validation
// errors returned by ReportModelOnlineResponse.ValidateAll() if the
// designated constraints aren't met.
type ReportModelOnlineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportModelOnlineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportModelOnlineResponseMultiError) AllErrors() []error { return m }

// ReportModelOnlineResponseValidationError is the validation error returned by
// ReportModelOnlineResponse.Validate if the designated constraints aren't met.
type ReportModelOnlineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportModelOnlineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportModelOnlineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportModelOnlineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportModelOnlineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportModelOnlineResponseValidationError) ErrorName() string {
	return "ReportModelOnlineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportModelOnlineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportModelOnlineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportModelOnlineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportModelOnlineResponseValidationError{}

// Validate checks the field values on ReportModelOnlinesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportModelOnlinesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportModelOnlinesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportModelOnlinesRequestMultiError, or nil if none found.
func (m *ReportModelOnlinesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportModelOnlinesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModelOnlineRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportModelOnlinesRequestValidationError{
						field:  fmt.Sprintf("ModelOnlineRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportModelOnlinesRequestValidationError{
						field:  fmt.Sprintf("ModelOnlineRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportModelOnlinesRequestValidationError{
					field:  fmt.Sprintf("ModelOnlineRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReportModelOnlinesRequestMultiError(errors)
	}

	return nil
}

// ReportModelOnlinesRequestMultiError is an error wrapping multiple validation
// errors returned by ReportModelOnlinesRequest.ValidateAll() if the
// designated constraints aren't met.
type ReportModelOnlinesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportModelOnlinesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportModelOnlinesRequestMultiError) AllErrors() []error { return m }

// ReportModelOnlinesRequestValidationError is the validation error returned by
// ReportModelOnlinesRequest.Validate if the designated constraints aren't met.
type ReportModelOnlinesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportModelOnlinesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportModelOnlinesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportModelOnlinesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportModelOnlinesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportModelOnlinesRequestValidationError) ErrorName() string {
	return "ReportModelOnlinesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportModelOnlinesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportModelOnlinesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportModelOnlinesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportModelOnlinesRequestValidationError{}

// Validate checks the field values on ReportModelOnlinesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportModelOnlinesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportModelOnlinesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportModelOnlinesResponseMultiError, or nil if none found.
func (m *ReportModelOnlinesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportModelOnlinesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNull()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportModelOnlinesResponseValidationError{
					field:  "Null",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportModelOnlinesResponseValidationError{
					field:  "Null",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNull()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportModelOnlinesResponseValidationError{
				field:  "Null",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportModelOnlinesResponseMultiError(errors)
	}

	return nil
}

// ReportModelOnlinesResponseMultiError is an error wrapping multiple
// validation errors returned by ReportModelOnlinesResponse.ValidateAll() if
// the designated constraints aren't met.
type ReportModelOnlinesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportModelOnlinesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportModelOnlinesResponseMultiError) AllErrors() []error { return m }

// ReportModelOnlinesResponseValidationError is the validation error returned
// by ReportModelOnlinesResponse.Validate if the designated constraints aren't met.
type ReportModelOnlinesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportModelOnlinesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportModelOnlinesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportModelOnlinesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportModelOnlinesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportModelOnlinesResponseValidationError) ErrorName() string {
	return "ReportModelOnlinesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportModelOnlinesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportModelOnlinesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportModelOnlinesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportModelOnlinesResponseValidationError{}

// Validate checks the field values on GetPipelinesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPipelinesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPipelinesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPipelinesRequestMultiError, or nil if none found.
func (m *GetPipelinesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPipelinesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPipelinesRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPipelinesRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPipelinesRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPipelinesRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPipelinesRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPipelinesRequestValidationError{
				field:  "TimeInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPipelinesRequestMultiError(errors)
	}

	return nil
}

// GetPipelinesRequestMultiError is an error wrapping multiple validation
// errors returned by GetPipelinesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPipelinesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPipelinesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPipelinesRequestMultiError) AllErrors() []error { return m }

// GetPipelinesRequestValidationError is the validation error returned by
// GetPipelinesRequest.Validate if the designated constraints aren't met.
type GetPipelinesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPipelinesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPipelinesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPipelinesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPipelinesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPipelinesRequestValidationError) ErrorName() string {
	return "GetPipelinesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPipelinesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPipelinesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPipelinesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPipelinesRequestValidationError{}

// Validate checks the field values on GetPipelinesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPipelinesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPipelinesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPipelinesResponseMultiError, or nil if none found.
func (m *GetPipelinesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPipelinesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipelines() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPipelinesResponseValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPipelinesResponseValidationError{
						field:  fmt.Sprintf("Pipelines[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPipelinesResponseValidationError{
					field:  fmt.Sprintf("Pipelines[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPipelinesResponseMultiError(errors)
	}

	return nil
}

// GetPipelinesResponseMultiError is an error wrapping multiple validation
// errors returned by GetPipelinesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPipelinesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPipelinesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPipelinesResponseMultiError) AllErrors() []error { return m }

// GetPipelinesResponseValidationError is the validation error returned by
// GetPipelinesResponse.Validate if the designated constraints aren't met.
type GetPipelinesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPipelinesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPipelinesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPipelinesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPipelinesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPipelinesResponseValidationError) ErrorName() string {
	return "GetPipelinesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPipelinesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPipelinesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPipelinesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPipelinesResponseValidationError{}

// Validate checks the field values on GetModelsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetModelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelsRequestMultiError, or nil if none found.
func (m *GetModelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModelsRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModelsRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModelsRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModelsRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModelsRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModelsRequestValidationError{
				field:  "TimeInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetModelsRequestMultiError(errors)
	}

	return nil
}

// GetModelsRequestMultiError is an error wrapping multiple validation errors
// returned by GetModelsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetModelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelsRequestMultiError) AllErrors() []error { return m }

// GetModelsRequestValidationError is the validation error returned by
// GetModelsRequest.Validate if the designated constraints aren't met.
type GetModelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelsRequestValidationError) ErrorName() string { return "GetModelsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetModelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelsRequestValidationError{}

// Validate checks the field values on GetModelsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetModelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelsResponseMultiError, or nil if none found.
func (m *GetModelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetModelsResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetModelsResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetModelsResponseValidationError{
					field:  fmt.Sprintf("Models[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetModelsResponseMultiError(errors)
	}

	return nil
}

// GetModelsResponseMultiError is an error wrapping multiple validation errors
// returned by GetModelsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetModelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelsResponseMultiError) AllErrors() []error { return m }

// GetModelsResponseValidationError is the validation error returned by
// GetModelsResponse.Validate if the designated constraints aren't met.
type GetModelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelsResponseValidationError) ErrorName() string {
	return "GetModelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelsResponseValidationError{}

// Validate checks the field values on GetPipelineTriggerRecordsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPipelineTriggerRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPipelineTriggerRecordsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPipelineTriggerRecordsRequestMultiError, or nil if none found.
func (m *GetPipelineTriggerRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPipelineTriggerRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPipelineTriggerRecordsRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPipelineTriggerRecordsRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPipelineTriggerRecordsRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPipelineTriggerRecordsRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPipelineTriggerRecordsRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPipelineTriggerRecordsRequestValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPipelineTriggerRecordsRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPipelineTriggerRecordsRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPipelineTriggerRecordsRequestValidationError{
				field:  "TimeInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPipelineTriggerRecordsRequestMultiError(errors)
	}

	return nil
}

// GetPipelineTriggerRecordsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPipelineTriggerRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPipelineTriggerRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPipelineTriggerRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPipelineTriggerRecordsRequestMultiError) AllErrors() []error { return m }

// GetPipelineTriggerRecordsRequestValidationError is the validation error
// returned by GetPipelineTriggerRecordsRequest.Validate if the designated
// constraints aren't met.
type GetPipelineTriggerRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPipelineTriggerRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPipelineTriggerRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPipelineTriggerRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPipelineTriggerRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPipelineTriggerRecordsRequestValidationError) ErrorName() string {
	return "GetPipelineTriggerRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPipelineTriggerRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPipelineTriggerRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPipelineTriggerRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPipelineTriggerRecordsRequestValidationError{}

// Validate checks the field values on GetPipelineTriggerRecordsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPipelineTriggerRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPipelineTriggerRecordsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPipelineTriggerRecordsResponseMultiError, or nil if none found.
func (m *GetPipelineTriggerRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPipelineTriggerRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPipelineTriggerRecordsResponseValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPipelineTriggerRecordsResponseValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPipelineTriggerRecordsResponseValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPipelineTriggerRecordsResponseMultiError(errors)
	}

	return nil
}

// GetPipelineTriggerRecordsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetPipelineTriggerRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPipelineTriggerRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPipelineTriggerRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPipelineTriggerRecordsResponseMultiError) AllErrors() []error { return m }

// GetPipelineTriggerRecordsResponseValidationError is the validation error
// returned by GetPipelineTriggerRecordsResponse.Validate if the designated
// constraints aren't met.
type GetPipelineTriggerRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPipelineTriggerRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPipelineTriggerRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPipelineTriggerRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPipelineTriggerRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPipelineTriggerRecordsResponseValidationError) ErrorName() string {
	return "GetPipelineTriggerRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPipelineTriggerRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPipelineTriggerRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPipelineTriggerRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPipelineTriggerRecordsResponseValidationError{}

// Validate checks the field values on GetBulkPipelineTriggerRecordsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetBulkPipelineTriggerRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBulkPipelineTriggerRecordsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBulkPipelineTriggerRecordsRequestMultiError, or nil if none found.
func (m *GetBulkPipelineTriggerRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkPipelineTriggerRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkQueries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkPipelineTriggerRecordsRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkPipelineTriggerRecordsRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkPipelineTriggerRecordsRequestValidationError{
					field:  fmt.Sprintf("BulkQueries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkPipelineTriggerRecordsRequestMultiError(errors)
	}

	return nil
}

// GetBulkPipelineTriggerRecordsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBulkPipelineTriggerRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBulkPipelineTriggerRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkPipelineTriggerRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkPipelineTriggerRecordsRequestMultiError) AllErrors() []error { return m }

// GetBulkPipelineTriggerRecordsRequestValidationError is the validation error
// returned by GetBulkPipelineTriggerRecordsRequest.Validate if the designated
// constraints aren't met.
type GetBulkPipelineTriggerRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkPipelineTriggerRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkPipelineTriggerRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBulkPipelineTriggerRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkPipelineTriggerRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkPipelineTriggerRecordsRequestValidationError) ErrorName() string {
	return "GetBulkPipelineTriggerRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkPipelineTriggerRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkPipelineTriggerRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkPipelineTriggerRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkPipelineTriggerRecordsRequestValidationError{}

// Validate checks the field values on GetBulkPipelineTriggerRecordsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetBulkPipelineTriggerRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBulkPipelineTriggerRecordsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBulkPipelineTriggerRecordsResponseMultiError, or nil if none found.
func (m *GetBulkPipelineTriggerRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkPipelineTriggerRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkPipelineTriggerRecordsResponseValidationError{
						field:  fmt.Sprintf("BulkRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkPipelineTriggerRecordsResponseValidationError{
						field:  fmt.Sprintf("BulkRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkPipelineTriggerRecordsResponseValidationError{
					field:  fmt.Sprintf("BulkRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkPipelineTriggerRecordsResponseMultiError(errors)
	}

	return nil
}

// GetBulkPipelineTriggerRecordsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetBulkPipelineTriggerRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBulkPipelineTriggerRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkPipelineTriggerRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkPipelineTriggerRecordsResponseMultiError) AllErrors() []error { return m }

// GetBulkPipelineTriggerRecordsResponseValidationError is the validation error
// returned by GetBulkPipelineTriggerRecordsResponse.Validate if the
// designated constraints aren't met.
type GetBulkPipelineTriggerRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkPipelineTriggerRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkPipelineTriggerRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBulkPipelineTriggerRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkPipelineTriggerRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkPipelineTriggerRecordsResponseValidationError) ErrorName() string {
	return "GetBulkPipelineTriggerRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkPipelineTriggerRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkPipelineTriggerRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkPipelineTriggerRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkPipelineTriggerRecordsResponseValidationError{}

// Validate checks the field values on
// GetCumulativePipelineTriggerRecordsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCumulativePipelineTriggerRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCumulativePipelineTriggerRecordsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetCumulativePipelineTriggerRecordsRequestMultiError, or nil if none found.
func (m *GetCumulativePipelineTriggerRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCumulativePipelineTriggerRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCumulativePipelineTriggerRecordsRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCumulativePipelineTriggerRecordsRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCumulativePipelineTriggerRecordsRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCumulativePipelineTriggerRecordsRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCumulativePipelineTriggerRecordsRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCumulativePipelineTriggerRecordsRequestValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCumulativePipelineTriggerRecordsRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCumulativePipelineTriggerRecordsRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCumulativePipelineTriggerRecordsRequestValidationError{
				field:  "TimeInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCumulativePipelineTriggerRecordsRequestMultiError(errors)
	}

	return nil
}

// GetCumulativePipelineTriggerRecordsRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetCumulativePipelineTriggerRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCumulativePipelineTriggerRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCumulativePipelineTriggerRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCumulativePipelineTriggerRecordsRequestMultiError) AllErrors() []error { return m }

// GetCumulativePipelineTriggerRecordsRequestValidationError is the validation
// error returned by GetCumulativePipelineTriggerRecordsRequest.Validate if
// the designated constraints aren't met.
type GetCumulativePipelineTriggerRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCumulativePipelineTriggerRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCumulativePipelineTriggerRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCumulativePipelineTriggerRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCumulativePipelineTriggerRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCumulativePipelineTriggerRecordsRequestValidationError) ErrorName() string {
	return "GetCumulativePipelineTriggerRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCumulativePipelineTriggerRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCumulativePipelineTriggerRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCumulativePipelineTriggerRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCumulativePipelineTriggerRecordsRequestValidationError{}

// Validate checks the field values on
// GetCumulativePipelineTriggerRecordsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCumulativePipelineTriggerRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCumulativePipelineTriggerRecordsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetCumulativePipelineTriggerRecordsResponseMultiError, or nil if none found.
func (m *GetCumulativePipelineTriggerRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCumulativePipelineTriggerRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCumulativeRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCumulativePipelineTriggerRecordsResponseValidationError{
						field:  fmt.Sprintf("CumulativeRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCumulativePipelineTriggerRecordsResponseValidationError{
						field:  fmt.Sprintf("CumulativeRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCumulativePipelineTriggerRecordsResponseValidationError{
					field:  fmt.Sprintf("CumulativeRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCumulativePipelineTriggerRecordsResponseMultiError(errors)
	}

	return nil
}

// GetCumulativePipelineTriggerRecordsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetCumulativePipelineTriggerRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCumulativePipelineTriggerRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCumulativePipelineTriggerRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCumulativePipelineTriggerRecordsResponseMultiError) AllErrors() []error { return m }

// GetCumulativePipelineTriggerRecordsResponseValidationError is the validation
// error returned by GetCumulativePipelineTriggerRecordsResponse.Validate if
// the designated constraints aren't met.
type GetCumulativePipelineTriggerRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCumulativePipelineTriggerRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCumulativePipelineTriggerRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCumulativePipelineTriggerRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCumulativePipelineTriggerRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCumulativePipelineTriggerRecordsResponseValidationError) ErrorName() string {
	return "GetCumulativePipelineTriggerRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCumulativePipelineTriggerRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCumulativePipelineTriggerRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCumulativePipelineTriggerRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCumulativePipelineTriggerRecordsResponseValidationError{}

// Validate checks the field values on
// GetBulkCumulativePipelineTriggerRecordsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBulkCumulativePipelineTriggerRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBulkCumulativePipelineTriggerRecordsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetBulkCumulativePipelineTriggerRecordsRequestMultiError, or nil if none found.
func (m *GetBulkCumulativePipelineTriggerRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkCumulativePipelineTriggerRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkQueries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkCumulativePipelineTriggerRecordsRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkCumulativePipelineTriggerRecordsRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkCumulativePipelineTriggerRecordsRequestValidationError{
					field:  fmt.Sprintf("BulkQueries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkCumulativePipelineTriggerRecordsRequestMultiError(errors)
	}

	return nil
}

// GetBulkCumulativePipelineTriggerRecordsRequestMultiError is an error
// wrapping multiple validation errors returned by
// GetBulkCumulativePipelineTriggerRecordsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetBulkCumulativePipelineTriggerRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkCumulativePipelineTriggerRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkCumulativePipelineTriggerRecordsRequestMultiError) AllErrors() []error { return m }

// GetBulkCumulativePipelineTriggerRecordsRequestValidationError is the
// validation error returned by
// GetBulkCumulativePipelineTriggerRecordsRequest.Validate if the designated
// constraints aren't met.
type GetBulkCumulativePipelineTriggerRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkCumulativePipelineTriggerRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkCumulativePipelineTriggerRecordsRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetBulkCumulativePipelineTriggerRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkCumulativePipelineTriggerRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkCumulativePipelineTriggerRecordsRequestValidationError) ErrorName() string {
	return "GetBulkCumulativePipelineTriggerRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkCumulativePipelineTriggerRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkCumulativePipelineTriggerRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkCumulativePipelineTriggerRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkCumulativePipelineTriggerRecordsRequestValidationError{}

// Validate checks the field values on
// GetBulkCumulativePipelineTriggerRecordsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBulkCumulativePipelineTriggerRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBulkCumulativePipelineTriggerRecordsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetBulkCumulativePipelineTriggerRecordsResponseMultiError, or nil if none found.
func (m *GetBulkCumulativePipelineTriggerRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkCumulativePipelineTriggerRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkCumulativeRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkCumulativePipelineTriggerRecordsResponseValidationError{
						field:  fmt.Sprintf("BulkCumulativeRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkCumulativePipelineTriggerRecordsResponseValidationError{
						field:  fmt.Sprintf("BulkCumulativeRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkCumulativePipelineTriggerRecordsResponseValidationError{
					field:  fmt.Sprintf("BulkCumulativeRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkCumulativePipelineTriggerRecordsResponseMultiError(errors)
	}

	return nil
}

// GetBulkCumulativePipelineTriggerRecordsResponseMultiError is an error
// wrapping multiple validation errors returned by
// GetBulkCumulativePipelineTriggerRecordsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetBulkCumulativePipelineTriggerRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkCumulativePipelineTriggerRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkCumulativePipelineTriggerRecordsResponseMultiError) AllErrors() []error { return m }

// GetBulkCumulativePipelineTriggerRecordsResponseValidationError is the
// validation error returned by
// GetBulkCumulativePipelineTriggerRecordsResponse.Validate if the designated
// constraints aren't met.
type GetBulkCumulativePipelineTriggerRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkCumulativePipelineTriggerRecordsResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetBulkCumulativePipelineTriggerRecordsResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetBulkCumulativePipelineTriggerRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkCumulativePipelineTriggerRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkCumulativePipelineTriggerRecordsResponseValidationError) ErrorName() string {
	return "GetBulkCumulativePipelineTriggerRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkCumulativePipelineTriggerRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkCumulativePipelineTriggerRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkCumulativePipelineTriggerRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkCumulativePipelineTriggerRecordsResponseValidationError{}

// Validate checks the field values on GetPipelineTriggerSummaryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPipelineTriggerSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPipelineTriggerSummaryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPipelineTriggerSummaryRequestMultiError, or nil if none found.
func (m *GetPipelineTriggerSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPipelineTriggerSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPipelineTriggerSummaryRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPipelineTriggerSummaryRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPipelineTriggerSummaryRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPipelineTriggerSummaryRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPipelineTriggerSummaryRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPipelineTriggerSummaryRequestValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPipelineTriggerSummaryRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPipelineTriggerSummaryRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPipelineTriggerSummaryRequestValidationError{
				field:  "TimeInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPipelineTriggerSummaryRequestMultiError(errors)
	}

	return nil
}

// GetPipelineTriggerSummaryRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetPipelineTriggerSummaryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPipelineTriggerSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPipelineTriggerSummaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPipelineTriggerSummaryRequestMultiError) AllErrors() []error { return m }

// GetPipelineTriggerSummaryRequestValidationError is the validation error
// returned by GetPipelineTriggerSummaryRequest.Validate if the designated
// constraints aren't met.
type GetPipelineTriggerSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPipelineTriggerSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPipelineTriggerSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPipelineTriggerSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPipelineTriggerSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPipelineTriggerSummaryRequestValidationError) ErrorName() string {
	return "GetPipelineTriggerSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPipelineTriggerSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPipelineTriggerSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPipelineTriggerSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPipelineTriggerSummaryRequestValidationError{}

// Validate checks the field values on GetPipelineTriggerSummaryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetPipelineTriggerSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPipelineTriggerSummaryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetPipelineTriggerSummaryResponseMultiError, or nil if none found.
func (m *GetPipelineTriggerSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPipelineTriggerSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummaries()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPipelineTriggerSummaryResponseValidationError{
					field:  "Summaries",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPipelineTriggerSummaryResponseValidationError{
					field:  "Summaries",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummaries()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPipelineTriggerSummaryResponseValidationError{
				field:  "Summaries",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPipelineTriggerSummaryResponseMultiError(errors)
	}

	return nil
}

// GetPipelineTriggerSummaryResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetPipelineTriggerSummaryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPipelineTriggerSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPipelineTriggerSummaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPipelineTriggerSummaryResponseMultiError) AllErrors() []error { return m }

// GetPipelineTriggerSummaryResponseValidationError is the validation error
// returned by GetPipelineTriggerSummaryResponse.Validate if the designated
// constraints aren't met.
type GetPipelineTriggerSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPipelineTriggerSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPipelineTriggerSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPipelineTriggerSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPipelineTriggerSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPipelineTriggerSummaryResponseValidationError) ErrorName() string {
	return "GetPipelineTriggerSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPipelineTriggerSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPipelineTriggerSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPipelineTriggerSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPipelineTriggerSummaryResponseValidationError{}

// Validate checks the field values on GetBulkPipelineTriggerSummariesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetBulkPipelineTriggerSummariesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBulkPipelineTriggerSummariesRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetBulkPipelineTriggerSummariesRequestMultiError, or nil if none found.
func (m *GetBulkPipelineTriggerSummariesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkPipelineTriggerSummariesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkQueries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkPipelineTriggerSummariesRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkPipelineTriggerSummariesRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkPipelineTriggerSummariesRequestValidationError{
					field:  fmt.Sprintf("BulkQueries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkPipelineTriggerSummariesRequestMultiError(errors)
	}

	return nil
}

// GetBulkPipelineTriggerSummariesRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetBulkPipelineTriggerSummariesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBulkPipelineTriggerSummariesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkPipelineTriggerSummariesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkPipelineTriggerSummariesRequestMultiError) AllErrors() []error { return m }

// GetBulkPipelineTriggerSummariesRequestValidationError is the validation
// error returned by GetBulkPipelineTriggerSummariesRequest.Validate if the
// designated constraints aren't met.
type GetBulkPipelineTriggerSummariesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkPipelineTriggerSummariesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkPipelineTriggerSummariesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBulkPipelineTriggerSummariesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkPipelineTriggerSummariesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkPipelineTriggerSummariesRequestValidationError) ErrorName() string {
	return "GetBulkPipelineTriggerSummariesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkPipelineTriggerSummariesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkPipelineTriggerSummariesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkPipelineTriggerSummariesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkPipelineTriggerSummariesRequestValidationError{}

// Validate checks the field values on GetBulkPipelineTriggerSummariesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetBulkPipelineTriggerSummariesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBulkPipelineTriggerSummariesResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetBulkPipelineTriggerSummariesResponseMultiError, or nil if none found.
func (m *GetBulkPipelineTriggerSummariesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkPipelineTriggerSummariesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkSummaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkPipelineTriggerSummariesResponseValidationError{
						field:  fmt.Sprintf("BulkSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkPipelineTriggerSummariesResponseValidationError{
						field:  fmt.Sprintf("BulkSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkPipelineTriggerSummariesResponseValidationError{
					field:  fmt.Sprintf("BulkSummaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkPipelineTriggerSummariesResponseMultiError(errors)
	}

	return nil
}

// GetBulkPipelineTriggerSummariesResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetBulkPipelineTriggerSummariesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBulkPipelineTriggerSummariesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkPipelineTriggerSummariesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkPipelineTriggerSummariesResponseMultiError) AllErrors() []error { return m }

// GetBulkPipelineTriggerSummariesResponseValidationError is the validation
// error returned by GetBulkPipelineTriggerSummariesResponse.Validate if the
// designated constraints aren't met.
type GetBulkPipelineTriggerSummariesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkPipelineTriggerSummariesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkPipelineTriggerSummariesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBulkPipelineTriggerSummariesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkPipelineTriggerSummariesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkPipelineTriggerSummariesResponseValidationError) ErrorName() string {
	return "GetBulkPipelineTriggerSummariesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkPipelineTriggerSummariesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkPipelineTriggerSummariesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkPipelineTriggerSummariesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkPipelineTriggerSummariesResponseValidationError{}

// Validate checks the field values on GetModelOnlineRecordsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetModelOnlineRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelOnlineRecordsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelOnlineRecordsRequestMultiError, or nil if none found.
func (m *GetModelOnlineRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelOnlineRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModelOnlineRecordsRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModelOnlineRecordsRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModelOnlineRecordsRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModelOnlineRecordsRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModelOnlineRecordsRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModelOnlineRecordsRequestValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModelOnlineRecordsRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModelOnlineRecordsRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModelOnlineRecordsRequestValidationError{
				field:  "TimeInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetModelOnlineRecordsRequestMultiError(errors)
	}

	return nil
}

// GetModelOnlineRecordsRequestMultiError is an error wrapping multiple
// validation errors returned by GetModelOnlineRecordsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetModelOnlineRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelOnlineRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelOnlineRecordsRequestMultiError) AllErrors() []error { return m }

// GetModelOnlineRecordsRequestValidationError is the validation error returned
// by GetModelOnlineRecordsRequest.Validate if the designated constraints
// aren't met.
type GetModelOnlineRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelOnlineRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelOnlineRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelOnlineRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelOnlineRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelOnlineRecordsRequestValidationError) ErrorName() string {
	return "GetModelOnlineRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelOnlineRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelOnlineRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelOnlineRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelOnlineRecordsRequestValidationError{}

// Validate checks the field values on GetModelOnlineRecordsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetModelOnlineRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelOnlineRecordsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetModelOnlineRecordsResponseMultiError, or nil if none found.
func (m *GetModelOnlineRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelOnlineRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetModelOnlineRecordsResponseValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetModelOnlineRecordsResponseValidationError{
						field:  fmt.Sprintf("Records[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetModelOnlineRecordsResponseValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetModelOnlineRecordsResponseMultiError(errors)
	}

	return nil
}

// GetModelOnlineRecordsResponseMultiError is an error wrapping multiple
// validation errors returned by GetModelOnlineRecordsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetModelOnlineRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelOnlineRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelOnlineRecordsResponseMultiError) AllErrors() []error { return m }

// GetModelOnlineRecordsResponseValidationError is the validation error
// returned by GetModelOnlineRecordsResponse.Validate if the designated
// constraints aren't met.
type GetModelOnlineRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelOnlineRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelOnlineRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelOnlineRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelOnlineRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelOnlineRecordsResponseValidationError) ErrorName() string {
	return "GetModelOnlineRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelOnlineRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelOnlineRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelOnlineRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelOnlineRecordsResponseValidationError{}

// Validate checks the field values on GetBulkModelOnlineRecordsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBulkModelOnlineRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBulkModelOnlineRecordsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBulkModelOnlineRecordsRequestMultiError, or nil if none found.
func (m *GetBulkModelOnlineRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkModelOnlineRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkQueries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkModelOnlineRecordsRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkModelOnlineRecordsRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkModelOnlineRecordsRequestValidationError{
					field:  fmt.Sprintf("BulkQueries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkModelOnlineRecordsRequestMultiError(errors)
	}

	return nil
}

// GetBulkModelOnlineRecordsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBulkModelOnlineRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBulkModelOnlineRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkModelOnlineRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkModelOnlineRecordsRequestMultiError) AllErrors() []error { return m }

// GetBulkModelOnlineRecordsRequestValidationError is the validation error
// returned by GetBulkModelOnlineRecordsRequest.Validate if the designated
// constraints aren't met.
type GetBulkModelOnlineRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkModelOnlineRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkModelOnlineRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBulkModelOnlineRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkModelOnlineRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkModelOnlineRecordsRequestValidationError) ErrorName() string {
	return "GetBulkModelOnlineRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkModelOnlineRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkModelOnlineRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkModelOnlineRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkModelOnlineRecordsRequestValidationError{}

// Validate checks the field values on GetBulkModelOnlineRecordsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBulkModelOnlineRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBulkModelOnlineRecordsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBulkModelOnlineRecordsResponseMultiError, or nil if none found.
func (m *GetBulkModelOnlineRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkModelOnlineRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkModelOnlineRecordsResponseValidationError{
						field:  fmt.Sprintf("BulkRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkModelOnlineRecordsResponseValidationError{
						field:  fmt.Sprintf("BulkRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkModelOnlineRecordsResponseValidationError{
					field:  fmt.Sprintf("BulkRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkModelOnlineRecordsResponseMultiError(errors)
	}

	return nil
}

// GetBulkModelOnlineRecordsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetBulkModelOnlineRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBulkModelOnlineRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkModelOnlineRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkModelOnlineRecordsResponseMultiError) AllErrors() []error { return m }

// GetBulkModelOnlineRecordsResponseValidationError is the validation error
// returned by GetBulkModelOnlineRecordsResponse.Validate if the designated
// constraints aren't met.
type GetBulkModelOnlineRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkModelOnlineRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkModelOnlineRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBulkModelOnlineRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkModelOnlineRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkModelOnlineRecordsResponseValidationError) ErrorName() string {
	return "GetBulkModelOnlineRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkModelOnlineRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkModelOnlineRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkModelOnlineRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkModelOnlineRecordsResponseValidationError{}

// Validate checks the field values on GetCumulativeModelOnlineRecordsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetCumulativeModelOnlineRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCumulativeModelOnlineRecordsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetCumulativeModelOnlineRecordsRequestMultiError, or nil if none found.
func (m *GetCumulativeModelOnlineRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCumulativeModelOnlineRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCumulativeModelOnlineRecordsRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCumulativeModelOnlineRecordsRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCumulativeModelOnlineRecordsRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCumulativeModelOnlineRecordsRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCumulativeModelOnlineRecordsRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCumulativeModelOnlineRecordsRequestValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCumulativeModelOnlineRecordsRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCumulativeModelOnlineRecordsRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCumulativeModelOnlineRecordsRequestValidationError{
				field:  "TimeInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCumulativeModelOnlineRecordsRequestMultiError(errors)
	}

	return nil
}

// GetCumulativeModelOnlineRecordsRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetCumulativeModelOnlineRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCumulativeModelOnlineRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCumulativeModelOnlineRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCumulativeModelOnlineRecordsRequestMultiError) AllErrors() []error { return m }

// GetCumulativeModelOnlineRecordsRequestValidationError is the validation
// error returned by GetCumulativeModelOnlineRecordsRequest.Validate if the
// designated constraints aren't met.
type GetCumulativeModelOnlineRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCumulativeModelOnlineRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCumulativeModelOnlineRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCumulativeModelOnlineRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCumulativeModelOnlineRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCumulativeModelOnlineRecordsRequestValidationError) ErrorName() string {
	return "GetCumulativeModelOnlineRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCumulativeModelOnlineRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCumulativeModelOnlineRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCumulativeModelOnlineRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCumulativeModelOnlineRecordsRequestValidationError{}

// Validate checks the field values on GetCumulativeModelOnlineRecordsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetCumulativeModelOnlineRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetCumulativeModelOnlineRecordsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetCumulativeModelOnlineRecordsResponseMultiError, or nil if none found.
func (m *GetCumulativeModelOnlineRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCumulativeModelOnlineRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCumulativeRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCumulativeModelOnlineRecordsResponseValidationError{
						field:  fmt.Sprintf("CumulativeRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCumulativeModelOnlineRecordsResponseValidationError{
						field:  fmt.Sprintf("CumulativeRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCumulativeModelOnlineRecordsResponseValidationError{
					field:  fmt.Sprintf("CumulativeRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCumulativeModelOnlineRecordsResponseMultiError(errors)
	}

	return nil
}

// GetCumulativeModelOnlineRecordsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetCumulativeModelOnlineRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCumulativeModelOnlineRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCumulativeModelOnlineRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCumulativeModelOnlineRecordsResponseMultiError) AllErrors() []error { return m }

// GetCumulativeModelOnlineRecordsResponseValidationError is the validation
// error returned by GetCumulativeModelOnlineRecordsResponse.Validate if the
// designated constraints aren't met.
type GetCumulativeModelOnlineRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCumulativeModelOnlineRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCumulativeModelOnlineRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCumulativeModelOnlineRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCumulativeModelOnlineRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCumulativeModelOnlineRecordsResponseValidationError) ErrorName() string {
	return "GetCumulativeModelOnlineRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCumulativeModelOnlineRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCumulativeModelOnlineRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCumulativeModelOnlineRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCumulativeModelOnlineRecordsResponseValidationError{}

// Validate checks the field values on
// GetBulkCumulativeModelOnlineRecordsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBulkCumulativeModelOnlineRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBulkCumulativeModelOnlineRecordsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetBulkCumulativeModelOnlineRecordsRequestMultiError, or nil if none found.
func (m *GetBulkCumulativeModelOnlineRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkCumulativeModelOnlineRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkQueries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkCumulativeModelOnlineRecordsRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkCumulativeModelOnlineRecordsRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkCumulativeModelOnlineRecordsRequestValidationError{
					field:  fmt.Sprintf("BulkQueries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkCumulativeModelOnlineRecordsRequestMultiError(errors)
	}

	return nil
}

// GetBulkCumulativeModelOnlineRecordsRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetBulkCumulativeModelOnlineRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBulkCumulativeModelOnlineRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkCumulativeModelOnlineRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkCumulativeModelOnlineRecordsRequestMultiError) AllErrors() []error { return m }

// GetBulkCumulativeModelOnlineRecordsRequestValidationError is the validation
// error returned by GetBulkCumulativeModelOnlineRecordsRequest.Validate if
// the designated constraints aren't met.
type GetBulkCumulativeModelOnlineRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkCumulativeModelOnlineRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkCumulativeModelOnlineRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBulkCumulativeModelOnlineRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkCumulativeModelOnlineRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkCumulativeModelOnlineRecordsRequestValidationError) ErrorName() string {
	return "GetBulkCumulativeModelOnlineRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkCumulativeModelOnlineRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkCumulativeModelOnlineRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkCumulativeModelOnlineRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkCumulativeModelOnlineRecordsRequestValidationError{}

// Validate checks the field values on
// GetBulkCumulativeModelOnlineRecordsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetBulkCumulativeModelOnlineRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetBulkCumulativeModelOnlineRecordsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetBulkCumulativeModelOnlineRecordsResponseMultiError, or nil if none found.
func (m *GetBulkCumulativeModelOnlineRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkCumulativeModelOnlineRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkCumulativeRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkCumulativeModelOnlineRecordsResponseValidationError{
						field:  fmt.Sprintf("BulkCumulativeRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkCumulativeModelOnlineRecordsResponseValidationError{
						field:  fmt.Sprintf("BulkCumulativeRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkCumulativeModelOnlineRecordsResponseValidationError{
					field:  fmt.Sprintf("BulkCumulativeRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkCumulativeModelOnlineRecordsResponseMultiError(errors)
	}

	return nil
}

// GetBulkCumulativeModelOnlineRecordsResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetBulkCumulativeModelOnlineRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBulkCumulativeModelOnlineRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkCumulativeModelOnlineRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkCumulativeModelOnlineRecordsResponseMultiError) AllErrors() []error { return m }

// GetBulkCumulativeModelOnlineRecordsResponseValidationError is the validation
// error returned by GetBulkCumulativeModelOnlineRecordsResponse.Validate if
// the designated constraints aren't met.
type GetBulkCumulativeModelOnlineRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkCumulativeModelOnlineRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkCumulativeModelOnlineRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBulkCumulativeModelOnlineRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkCumulativeModelOnlineRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkCumulativeModelOnlineRecordsResponseValidationError) ErrorName() string {
	return "GetBulkCumulativeModelOnlineRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkCumulativeModelOnlineRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkCumulativeModelOnlineRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkCumulativeModelOnlineRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkCumulativeModelOnlineRecordsResponseValidationError{}

// Validate checks the field values on GetModelOnlineSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetModelOnlineSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelOnlineSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelOnlineSummaryRequestMultiError, or nil if none found.
func (m *GetModelOnlineSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelOnlineSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModelOnlineSummaryRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModelOnlineSummaryRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModelOnlineSummaryRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModelOnlineSummaryRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModelOnlineSummaryRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModelOnlineSummaryRequestValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModelOnlineSummaryRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModelOnlineSummaryRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModelOnlineSummaryRequestValidationError{
				field:  "TimeInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetModelOnlineSummaryRequestMultiError(errors)
	}

	return nil
}

// GetModelOnlineSummaryRequestMultiError is an error wrapping multiple
// validation errors returned by GetModelOnlineSummaryRequest.ValidateAll() if
// the designated constraints aren't met.
type GetModelOnlineSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelOnlineSummaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelOnlineSummaryRequestMultiError) AllErrors() []error { return m }

// GetModelOnlineSummaryRequestValidationError is the validation error returned
// by GetModelOnlineSummaryRequest.Validate if the designated constraints
// aren't met.
type GetModelOnlineSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelOnlineSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelOnlineSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelOnlineSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelOnlineSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelOnlineSummaryRequestValidationError) ErrorName() string {
	return "GetModelOnlineSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelOnlineSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelOnlineSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelOnlineSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelOnlineSummaryRequestValidationError{}

// Validate checks the field values on GetModelOnlineSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetModelOnlineSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelOnlineSummaryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetModelOnlineSummaryResponseMultiError, or nil if none found.
func (m *GetModelOnlineSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelOnlineSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModelOnlineSummaryResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModelOnlineSummaryResponseValidationError{
					field:  "Summary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModelOnlineSummaryResponseValidationError{
				field:  "Summary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetModelOnlineSummaryResponseMultiError(errors)
	}

	return nil
}

// GetModelOnlineSummaryResponseMultiError is an error wrapping multiple
// validation errors returned by GetModelOnlineSummaryResponse.ValidateAll()
// if the designated constraints aren't met.
type GetModelOnlineSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelOnlineSummaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelOnlineSummaryResponseMultiError) AllErrors() []error { return m }

// GetModelOnlineSummaryResponseValidationError is the validation error
// returned by GetModelOnlineSummaryResponse.Validate if the designated
// constraints aren't met.
type GetModelOnlineSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelOnlineSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelOnlineSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelOnlineSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelOnlineSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelOnlineSummaryResponseValidationError) ErrorName() string {
	return "GetModelOnlineSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelOnlineSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelOnlineSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelOnlineSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelOnlineSummaryResponseValidationError{}

// Validate checks the field values on GetBulkModelOnlineSummaryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBulkModelOnlineSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBulkModelOnlineSummaryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBulkModelOnlineSummaryRequestMultiError, or nil if none found.
func (m *GetBulkModelOnlineSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkModelOnlineSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkQueries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkModelOnlineSummaryRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkModelOnlineSummaryRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkModelOnlineSummaryRequestValidationError{
					field:  fmt.Sprintf("BulkQueries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkModelOnlineSummaryRequestMultiError(errors)
	}

	return nil
}

// GetBulkModelOnlineSummaryRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBulkModelOnlineSummaryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBulkModelOnlineSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkModelOnlineSummaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkModelOnlineSummaryRequestMultiError) AllErrors() []error { return m }

// GetBulkModelOnlineSummaryRequestValidationError is the validation error
// returned by GetBulkModelOnlineSummaryRequest.Validate if the designated
// constraints aren't met.
type GetBulkModelOnlineSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkModelOnlineSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkModelOnlineSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBulkModelOnlineSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkModelOnlineSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkModelOnlineSummaryRequestValidationError) ErrorName() string {
	return "GetBulkModelOnlineSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkModelOnlineSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkModelOnlineSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkModelOnlineSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkModelOnlineSummaryRequestValidationError{}

// Validate checks the field values on GetBulkModelOnlineSummaryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBulkModelOnlineSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBulkModelOnlineSummaryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBulkModelOnlineSummaryResponseMultiError, or nil if none found.
func (m *GetBulkModelOnlineSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkModelOnlineSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkSummaries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkModelOnlineSummaryResponseValidationError{
						field:  fmt.Sprintf("BulkSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkModelOnlineSummaryResponseValidationError{
						field:  fmt.Sprintf("BulkSummaries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkModelOnlineSummaryResponseValidationError{
					field:  fmt.Sprintf("BulkSummaries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkModelOnlineSummaryResponseMultiError(errors)
	}

	return nil
}

// GetBulkModelOnlineSummaryResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetBulkModelOnlineSummaryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBulkModelOnlineSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkModelOnlineSummaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkModelOnlineSummaryResponseMultiError) AllErrors() []error { return m }

// GetBulkModelOnlineSummaryResponseValidationError is the validation error
// returned by GetBulkModelOnlineSummaryResponse.Validate if the designated
// constraints aren't met.
type GetBulkModelOnlineSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkModelOnlineSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkModelOnlineSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBulkModelOnlineSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkModelOnlineSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkModelOnlineSummaryResponseValidationError) ErrorName() string {
	return "GetBulkModelOnlineSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkModelOnlineSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkModelOnlineSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkModelOnlineSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkModelOnlineSummaryResponseValidationError{}

// Validate checks the field values on GetPipelineTriggerPriceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPipelineTriggerPriceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPipelineTriggerPriceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPipelineTriggerPriceRequestMultiError, or nil if none found.
func (m *GetPipelineTriggerPriceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPipelineTriggerPriceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPipelineTriggerPriceRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPipelineTriggerPriceRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPipelineTriggerPriceRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPipeline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPipelineTriggerPriceRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPipelineTriggerPriceRequestValidationError{
					field:  "Pipeline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPipeline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPipelineTriggerPriceRequestValidationError{
				field:  "Pipeline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPipelineTriggerPriceRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPipelineTriggerPriceRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPipelineTriggerPriceRequestValidationError{
				field:  "TimeInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPipelineTriggerPriceRequestMultiError(errors)
	}

	return nil
}

// GetPipelineTriggerPriceRequestMultiError is an error wrapping multiple
// validation errors returned by GetPipelineTriggerPriceRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPipelineTriggerPriceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPipelineTriggerPriceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPipelineTriggerPriceRequestMultiError) AllErrors() []error { return m }

// GetPipelineTriggerPriceRequestValidationError is the validation error
// returned by GetPipelineTriggerPriceRequest.Validate if the designated
// constraints aren't met.
type GetPipelineTriggerPriceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPipelineTriggerPriceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPipelineTriggerPriceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPipelineTriggerPriceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPipelineTriggerPriceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPipelineTriggerPriceRequestValidationError) ErrorName() string {
	return "GetPipelineTriggerPriceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPipelineTriggerPriceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPipelineTriggerPriceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPipelineTriggerPriceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPipelineTriggerPriceRequestValidationError{}

// Validate checks the field values on GetPipelineTriggerPriceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPipelineTriggerPriceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPipelineTriggerPriceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPipelineTriggerPriceResponseMultiError, or nil if none found.
func (m *GetPipelineTriggerPriceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPipelineTriggerPriceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPrice() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPipelineTriggerPriceResponseValidationError{
						field:  fmt.Sprintf("Price[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPipelineTriggerPriceResponseValidationError{
						field:  fmt.Sprintf("Price[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPipelineTriggerPriceResponseValidationError{
					field:  fmt.Sprintf("Price[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPipelineTriggerPriceResponseMultiError(errors)
	}

	return nil
}

// GetPipelineTriggerPriceResponseMultiError is an error wrapping multiple
// validation errors returned by GetPipelineTriggerPriceResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPipelineTriggerPriceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPipelineTriggerPriceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPipelineTriggerPriceResponseMultiError) AllErrors() []error { return m }

// GetPipelineTriggerPriceResponseValidationError is the validation error
// returned by GetPipelineTriggerPriceResponse.Validate if the designated
// constraints aren't met.
type GetPipelineTriggerPriceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPipelineTriggerPriceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPipelineTriggerPriceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPipelineTriggerPriceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPipelineTriggerPriceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPipelineTriggerPriceResponseValidationError) ErrorName() string {
	return "GetPipelineTriggerPriceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPipelineTriggerPriceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPipelineTriggerPriceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPipelineTriggerPriceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPipelineTriggerPriceResponseValidationError{}

// Validate checks the field values on GetBulkPipelineTriggerPriceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBulkPipelineTriggerPriceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBulkPipelineTriggerPriceRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBulkPipelineTriggerPriceRequestMultiError, or nil if none found.
func (m *GetBulkPipelineTriggerPriceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkPipelineTriggerPriceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkQueries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkPipelineTriggerPriceRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkPipelineTriggerPriceRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkPipelineTriggerPriceRequestValidationError{
					field:  fmt.Sprintf("BulkQueries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkPipelineTriggerPriceRequestMultiError(errors)
	}

	return nil
}

// GetBulkPipelineTriggerPriceRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetBulkPipelineTriggerPriceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetBulkPipelineTriggerPriceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkPipelineTriggerPriceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkPipelineTriggerPriceRequestMultiError) AllErrors() []error { return m }

// GetBulkPipelineTriggerPriceRequestValidationError is the validation error
// returned by GetBulkPipelineTriggerPriceRequest.Validate if the designated
// constraints aren't met.
type GetBulkPipelineTriggerPriceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkPipelineTriggerPriceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkPipelineTriggerPriceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBulkPipelineTriggerPriceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkPipelineTriggerPriceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkPipelineTriggerPriceRequestValidationError) ErrorName() string {
	return "GetBulkPipelineTriggerPriceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkPipelineTriggerPriceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkPipelineTriggerPriceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkPipelineTriggerPriceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkPipelineTriggerPriceRequestValidationError{}

// Validate checks the field values on GetBulkPipelineTriggerPriceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetBulkPipelineTriggerPriceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBulkPipelineTriggerPriceResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetBulkPipelineTriggerPriceResponseMultiError, or nil if none found.
func (m *GetBulkPipelineTriggerPriceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkPipelineTriggerPriceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkPrices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkPipelineTriggerPriceResponseValidationError{
						field:  fmt.Sprintf("BulkPrices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkPipelineTriggerPriceResponseValidationError{
						field:  fmt.Sprintf("BulkPrices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkPipelineTriggerPriceResponseValidationError{
					field:  fmt.Sprintf("BulkPrices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkPipelineTriggerPriceResponseMultiError(errors)
	}

	return nil
}

// GetBulkPipelineTriggerPriceResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetBulkPipelineTriggerPriceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBulkPipelineTriggerPriceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkPipelineTriggerPriceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkPipelineTriggerPriceResponseMultiError) AllErrors() []error { return m }

// GetBulkPipelineTriggerPriceResponseValidationError is the validation error
// returned by GetBulkPipelineTriggerPriceResponse.Validate if the designated
// constraints aren't met.
type GetBulkPipelineTriggerPriceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkPipelineTriggerPriceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkPipelineTriggerPriceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBulkPipelineTriggerPriceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkPipelineTriggerPriceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkPipelineTriggerPriceResponseValidationError) ErrorName() string {
	return "GetBulkPipelineTriggerPriceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkPipelineTriggerPriceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkPipelineTriggerPriceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkPipelineTriggerPriceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkPipelineTriggerPriceResponseValidationError{}

// Validate checks the field values on GetModelOnlinePriceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetModelOnlinePriceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelOnlinePriceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelOnlinePriceRequestMultiError, or nil if none found.
func (m *GetModelOnlinePriceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelOnlinePriceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModelOnlinePriceRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModelOnlinePriceRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModelOnlinePriceRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModelOnlinePriceRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModelOnlinePriceRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModelOnlinePriceRequestValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModelOnlinePriceRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModelOnlinePriceRequestValidationError{
					field:  "TimeInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModelOnlinePriceRequestValidationError{
				field:  "TimeInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetModelOnlinePriceRequestMultiError(errors)
	}

	return nil
}

// GetModelOnlinePriceRequestMultiError is an error wrapping multiple
// validation errors returned by GetModelOnlinePriceRequest.ValidateAll() if
// the designated constraints aren't met.
type GetModelOnlinePriceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelOnlinePriceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelOnlinePriceRequestMultiError) AllErrors() []error { return m }

// GetModelOnlinePriceRequestValidationError is the validation error returned
// by GetModelOnlinePriceRequest.Validate if the designated constraints aren't met.
type GetModelOnlinePriceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelOnlinePriceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelOnlinePriceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelOnlinePriceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelOnlinePriceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelOnlinePriceRequestValidationError) ErrorName() string {
	return "GetModelOnlinePriceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelOnlinePriceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelOnlinePriceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelOnlinePriceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelOnlinePriceRequestValidationError{}

// Validate checks the field values on GetModelOnlinePriceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetModelOnlinePriceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelOnlinePriceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelOnlinePriceResponseMultiError, or nil if none found.
func (m *GetModelOnlinePriceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelOnlinePriceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPrice() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetModelOnlinePriceResponseValidationError{
						field:  fmt.Sprintf("Price[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetModelOnlinePriceResponseValidationError{
						field:  fmt.Sprintf("Price[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetModelOnlinePriceResponseValidationError{
					field:  fmt.Sprintf("Price[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetModelOnlinePriceResponseMultiError(errors)
	}

	return nil
}

// GetModelOnlinePriceResponseMultiError is an error wrapping multiple
// validation errors returned by GetModelOnlinePriceResponse.ValidateAll() if
// the designated constraints aren't met.
type GetModelOnlinePriceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelOnlinePriceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelOnlinePriceResponseMultiError) AllErrors() []error { return m }

// GetModelOnlinePriceResponseValidationError is the validation error returned
// by GetModelOnlinePriceResponse.Validate if the designated constraints
// aren't met.
type GetModelOnlinePriceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelOnlinePriceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelOnlinePriceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelOnlinePriceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelOnlinePriceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelOnlinePriceResponseValidationError) ErrorName() string {
	return "GetModelOnlinePriceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelOnlinePriceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelOnlinePriceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelOnlinePriceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelOnlinePriceResponseValidationError{}

// Validate checks the field values on GetBulkModelOnlinePriceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBulkModelOnlinePriceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBulkModelOnlinePriceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBulkModelOnlinePriceRequestMultiError, or nil if none found.
func (m *GetBulkModelOnlinePriceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkModelOnlinePriceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkQueries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkModelOnlinePriceRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkModelOnlinePriceRequestValidationError{
						field:  fmt.Sprintf("BulkQueries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkModelOnlinePriceRequestValidationError{
					field:  fmt.Sprintf("BulkQueries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkModelOnlinePriceRequestMultiError(errors)
	}

	return nil
}

// GetBulkModelOnlinePriceRequestMultiError is an error wrapping multiple
// validation errors returned by GetBulkModelOnlinePriceRequest.ValidateAll()
// if the designated constraints aren't met.
type GetBulkModelOnlinePriceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkModelOnlinePriceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkModelOnlinePriceRequestMultiError) AllErrors() []error { return m }

// GetBulkModelOnlinePriceRequestValidationError is the validation error
// returned by GetBulkModelOnlinePriceRequest.Validate if the designated
// constraints aren't met.
type GetBulkModelOnlinePriceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkModelOnlinePriceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkModelOnlinePriceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBulkModelOnlinePriceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkModelOnlinePriceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkModelOnlinePriceRequestValidationError) ErrorName() string {
	return "GetBulkModelOnlinePriceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkModelOnlinePriceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkModelOnlinePriceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkModelOnlinePriceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkModelOnlinePriceRequestValidationError{}

// Validate checks the field values on GetBulkModelOnlinePriceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBulkModelOnlinePriceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBulkModelOnlinePriceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetBulkModelOnlinePriceResponseMultiError, or nil if none found.
func (m *GetBulkModelOnlinePriceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBulkModelOnlinePriceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBulkPrices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBulkModelOnlinePriceResponseValidationError{
						field:  fmt.Sprintf("BulkPrices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBulkModelOnlinePriceResponseValidationError{
						field:  fmt.Sprintf("BulkPrices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBulkModelOnlinePriceResponseValidationError{
					field:  fmt.Sprintf("BulkPrices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetBulkModelOnlinePriceResponseMultiError(errors)
	}

	return nil
}

// GetBulkModelOnlinePriceResponseMultiError is an error wrapping multiple
// validation errors returned by GetBulkModelOnlinePriceResponse.ValidateAll()
// if the designated constraints aren't met.
type GetBulkModelOnlinePriceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBulkModelOnlinePriceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBulkModelOnlinePriceResponseMultiError) AllErrors() []error { return m }

// GetBulkModelOnlinePriceResponseValidationError is the validation error
// returned by GetBulkModelOnlinePriceResponse.Validate if the designated
// constraints aren't met.
type GetBulkModelOnlinePriceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBulkModelOnlinePriceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBulkModelOnlinePriceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBulkModelOnlinePriceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBulkModelOnlinePriceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBulkModelOnlinePriceResponseValidationError) ErrorName() string {
	return "GetBulkModelOnlinePriceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBulkModelOnlinePriceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBulkModelOnlinePriceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBulkModelOnlinePriceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBulkModelOnlinePriceResponseValidationError{}

// Validate checks the field values on NullMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NullMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NullMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NullMessageMultiError, or
// nil if none found.
func (m *NullMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *NullMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NullMessageMultiError(errors)
	}

	return nil
}

// NullMessageMultiError is an error wrapping multiple validation errors
// returned by NullMessage.ValidateAll() if the designated constraints aren't met.
type NullMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NullMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NullMessageMultiError) AllErrors() []error { return m }

// NullMessageValidationError is the validation error returned by
// NullMessage.Validate if the designated constraints aren't met.
type NullMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NullMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NullMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NullMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NullMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NullMessageValidationError) ErrorName() string { return "NullMessageValidationError" }

// Error satisfies the builtin error interface
func (e NullMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNullMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NullMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NullMessageValidationError{}

// Validate checks the field values on UserData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserDataMultiError, or nil
// if none found.
func (m *UserData) ValidateAll() error {
	return m.validate(true)
}

func (m *UserData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Name

	if len(errors) > 0 {
		return UserDataMultiError(errors)
	}

	return nil
}

// UserDataMultiError is an error wrapping multiple validation errors returned
// by UserData.ValidateAll() if the designated constraints aren't met.
type UserDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserDataMultiError) AllErrors() []error { return m }

// UserDataValidationError is the validation error returned by
// UserData.Validate if the designated constraints aren't met.
type UserDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserDataValidationError) ErrorName() string { return "UserDataValidationError" }

// Error satisfies the builtin error interface
func (e UserDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserDataValidationError{}

// Validate checks the field values on PipelineData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipelineData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipelineDataMultiError, or
// nil if none found.
func (m *PipelineData) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Id

	// no validation rules for Task

	if len(errors) > 0 {
		return PipelineDataMultiError(errors)
	}

	return nil
}

// PipelineDataMultiError is an error wrapping multiple validation errors
// returned by PipelineData.ValidateAll() if the designated constraints aren't met.
type PipelineDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineDataMultiError) AllErrors() []error { return m }

// PipelineDataValidationError is the validation error returned by
// PipelineData.Validate if the designated constraints aren't met.
type PipelineDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineDataValidationError) ErrorName() string { return "PipelineDataValidationError" }

// Error satisfies the builtin error interface
func (e PipelineDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineDataValidationError{}

// Validate checks the field values on PipelineUsageRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineUsageRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineUsageRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineUsageRecordMultiError, or nil if none found.
func (m *PipelineUsageRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineUsageRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	// no validation rules for OperationId

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetTriggerTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineUsageRecordValidationError{
					field:  "TriggerTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineUsageRecordValidationError{
					field:  "TriggerTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTriggerTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineUsageRecordValidationError{
				field:  "TriggerTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRecordTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineUsageRecordValidationError{
					field:  "RecordTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineUsageRecordValidationError{
					field:  "RecordTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecordTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineUsageRecordValidationError{
				field:  "RecordTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Value

	if len(errors) > 0 {
		return PipelineUsageRecordMultiError(errors)
	}

	return nil
}

// PipelineUsageRecordMultiError is an error wrapping multiple validation
// errors returned by PipelineUsageRecord.ValidateAll() if the designated
// constraints aren't met.
type PipelineUsageRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineUsageRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineUsageRecordMultiError) AllErrors() []error { return m }

// PipelineUsageRecordValidationError is the validation error returned by
// PipelineUsageRecord.Validate if the designated constraints aren't met.
type PipelineUsageRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineUsageRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineUsageRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineUsageRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineUsageRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineUsageRecordValidationError) ErrorName() string {
	return "PipelineUsageRecordValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineUsageRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineUsageRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineUsageRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineUsageRecordValidationError{}

// Validate checks the field values on ModelData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelDataMultiError, or nil
// if none found.
func (m *ModelData) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Id

	// no validation rules for InstanceId

	// no validation rules for Task

	if len(errors) > 0 {
		return ModelDataMultiError(errors)
	}

	return nil
}

// ModelDataMultiError is an error wrapping multiple validation errors returned
// by ModelData.ValidateAll() if the designated constraints aren't met.
type ModelDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelDataMultiError) AllErrors() []error { return m }

// ModelDataValidationError is the validation error returned by
// ModelData.Validate if the designated constraints aren't met.
type ModelDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelDataValidationError) ErrorName() string { return "ModelDataValidationError" }

// Error satisfies the builtin error interface
func (e ModelDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelDataValidationError{}

// Validate checks the field values on ModelUsageRecord with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModelUsageRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelUsageRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelUsageRecordMultiError, or nil if none found.
func (m *ModelUsageRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelUsageRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeployTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelUsageRecordValidationError{
					field:  "DeployTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelUsageRecordValidationError{
					field:  "DeployTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelUsageRecordValidationError{
				field:  "DeployTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRecordTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelUsageRecordValidationError{
					field:  "RecordTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelUsageRecordValidationError{
					field:  "RecordTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRecordTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelUsageRecordValidationError{
				field:  "RecordTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Value

	if len(errors) > 0 {
		return ModelUsageRecordMultiError(errors)
	}

	return nil
}

// ModelUsageRecordMultiError is an error wrapping multiple validation errors
// returned by ModelUsageRecord.ValidateAll() if the designated constraints
// aren't met.
type ModelUsageRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelUsageRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelUsageRecordMultiError) AllErrors() []error { return m }

// ModelUsageRecordValidationError is the validation error returned by
// ModelUsageRecord.Validate if the designated constraints aren't met.
type ModelUsageRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelUsageRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelUsageRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelUsageRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelUsageRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelUsageRecordValidationError) ErrorName() string { return "ModelUsageRecordValidationError" }

// Error satisfies the builtin error interface
func (e ModelUsageRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelUsageRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelUsageRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelUsageRecordValidationError{}

// Validate checks the field values on UsageSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UsageSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UsageSummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UsageSummaryMultiError, or
// nil if none found.
func (m *UsageSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *UsageSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UsageSummaryValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UsageSummaryValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UsageSummaryValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Value

	if len(errors) > 0 {
		return UsageSummaryMultiError(errors)
	}

	return nil
}

// UsageSummaryMultiError is an error wrapping multiple validation errors
// returned by UsageSummary.ValidateAll() if the designated constraints aren't met.
type UsageSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsageSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsageSummaryMultiError) AllErrors() []error { return m }

// UsageSummaryValidationError is the validation error returned by
// UsageSummary.Validate if the designated constraints aren't met.
type UsageSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsageSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsageSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsageSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsageSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsageSummaryValidationError) ErrorName() string { return "UsageSummaryValidationError" }

// Error satisfies the builtin error interface
func (e UsageSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsageSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsageSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsageSummaryValidationError{}

// Validate checks the field values on PriceData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PriceData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PriceData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PriceDataMultiError, or nil
// if none found.
func (m *PriceData) ValidateAll() error {
	return m.validate(true)
}

func (m *PriceData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PriceDataValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PriceDataValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PriceDataValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Currency

	// no validation rules for Amount

	if len(errors) > 0 {
		return PriceDataMultiError(errors)
	}

	return nil
}

// PriceDataMultiError is an error wrapping multiple validation errors returned
// by PriceData.ValidateAll() if the designated constraints aren't met.
type PriceDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PriceDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PriceDataMultiError) AllErrors() []error { return m }

// PriceDataValidationError is the validation error returned by
// PriceData.Validate if the designated constraints aren't met.
type PriceDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PriceDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PriceDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PriceDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PriceDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PriceDataValidationError) ErrorName() string { return "PriceDataValidationError" }

// Error satisfies the builtin error interface
func (e PriceDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPriceData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PriceDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PriceDataValidationError{}

// Validate checks the field values on TimeInterval with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeInterval) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeInterval with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeIntervalMultiError, or
// nil if none found.
func (m *TimeInterval) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeInterval) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeIntervalValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeIntervalValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeIntervalValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeIntervalValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeIntervalValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeIntervalValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TimeIntervalMultiError(errors)
	}

	return nil
}

// TimeIntervalMultiError is an error wrapping multiple validation errors
// returned by TimeInterval.ValidateAll() if the designated constraints aren't met.
type TimeIntervalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeIntervalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeIntervalMultiError) AllErrors() []error { return m }

// TimeIntervalValidationError is the validation error returned by
// TimeInterval.Validate if the designated constraints aren't met.
type TimeIntervalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeIntervalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeIntervalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeIntervalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeIntervalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeIntervalValidationError) ErrorName() string { return "TimeIntervalValidationError" }

// Error satisfies the builtin error interface
func (e TimeIntervalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeInterval.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeIntervalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeIntervalValidationError{}
