// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: core/mgmt/v1alpha/mgmt_public_service.proto

package mgmtv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MgmtPublicService_Liveness_FullMethodName                         = "/core.mgmt.v1alpha.MgmtPublicService/Liveness"
	MgmtPublicService_Readiness_FullMethodName                        = "/core.mgmt.v1alpha.MgmtPublicService/Readiness"
	MgmtPublicService_ListUsers_FullMethodName                        = "/core.mgmt.v1alpha.MgmtPublicService/ListUsers"
	MgmtPublicService_GetUser_FullMethodName                          = "/core.mgmt.v1alpha.MgmtPublicService/GetUser"
	MgmtPublicService_PatchAuthenticatedUser_FullMethodName           = "/core.mgmt.v1alpha.MgmtPublicService/PatchAuthenticatedUser"
	MgmtPublicService_ExistUsername_FullMethodName                    = "/core.mgmt.v1alpha.MgmtPublicService/ExistUsername"
	MgmtPublicService_ListUserMemberships_FullMethodName              = "/core.mgmt.v1alpha.MgmtPublicService/ListUserMemberships"
	MgmtPublicService_GetUserMembership_FullMethodName                = "/core.mgmt.v1alpha.MgmtPublicService/GetUserMembership"
	MgmtPublicService_UpdateUserMembership_FullMethodName             = "/core.mgmt.v1alpha.MgmtPublicService/UpdateUserMembership"
	MgmtPublicService_DeleteUserMembership_FullMethodName             = "/core.mgmt.v1alpha.MgmtPublicService/DeleteUserMembership"
	MgmtPublicService_ListOrganizations_FullMethodName                = "/core.mgmt.v1alpha.MgmtPublicService/ListOrganizations"
	MgmtPublicService_CreateOrganization_FullMethodName               = "/core.mgmt.v1alpha.MgmtPublicService/CreateOrganization"
	MgmtPublicService_GetOrganization_FullMethodName                  = "/core.mgmt.v1alpha.MgmtPublicService/GetOrganization"
	MgmtPublicService_UpdateOrganization_FullMethodName               = "/core.mgmt.v1alpha.MgmtPublicService/UpdateOrganization"
	MgmtPublicService_DeleteOrganization_FullMethodName               = "/core.mgmt.v1alpha.MgmtPublicService/DeleteOrganization"
	MgmtPublicService_ListOrganizationMemberships_FullMethodName      = "/core.mgmt.v1alpha.MgmtPublicService/ListOrganizationMemberships"
	MgmtPublicService_GetOrganizationMembership_FullMethodName        = "/core.mgmt.v1alpha.MgmtPublicService/GetOrganizationMembership"
	MgmtPublicService_UpdateOrganizationMembership_FullMethodName     = "/core.mgmt.v1alpha.MgmtPublicService/UpdateOrganizationMembership"
	MgmtPublicService_DeleteOrganizationMembership_FullMethodName     = "/core.mgmt.v1alpha.MgmtPublicService/DeleteOrganizationMembership"
	MgmtPublicService_CreateToken_FullMethodName                      = "/core.mgmt.v1alpha.MgmtPublicService/CreateToken"
	MgmtPublicService_ListTokens_FullMethodName                       = "/core.mgmt.v1alpha.MgmtPublicService/ListTokens"
	MgmtPublicService_GetToken_FullMethodName                         = "/core.mgmt.v1alpha.MgmtPublicService/GetToken"
	MgmtPublicService_DeleteToken_FullMethodName                      = "/core.mgmt.v1alpha.MgmtPublicService/DeleteToken"
	MgmtPublicService_ValidateToken_FullMethodName                    = "/core.mgmt.v1alpha.MgmtPublicService/ValidateToken"
	MgmtPublicService_ListPipelineTriggerRecords_FullMethodName       = "/core.mgmt.v1alpha.MgmtPublicService/ListPipelineTriggerRecords"
	MgmtPublicService_ListPipelineTriggerTableRecords_FullMethodName  = "/core.mgmt.v1alpha.MgmtPublicService/ListPipelineTriggerTableRecords"
	MgmtPublicService_ListPipelineTriggerChartRecords_FullMethodName  = "/core.mgmt.v1alpha.MgmtPublicService/ListPipelineTriggerChartRecords"
	MgmtPublicService_ListConnectorExecuteRecords_FullMethodName      = "/core.mgmt.v1alpha.MgmtPublicService/ListConnectorExecuteRecords"
	MgmtPublicService_ListConnectorExecuteTableRecords_FullMethodName = "/core.mgmt.v1alpha.MgmtPublicService/ListConnectorExecuteTableRecords"
	MgmtPublicService_ListConnectorExecuteChartRecords_FullMethodName = "/core.mgmt.v1alpha.MgmtPublicService/ListConnectorExecuteChartRecords"
	MgmtPublicService_AuthTokenIssuer_FullMethodName                  = "/core.mgmt.v1alpha.MgmtPublicService/AuthTokenIssuer"
	MgmtPublicService_AuthLogin_FullMethodName                        = "/core.mgmt.v1alpha.MgmtPublicService/AuthLogin"
	MgmtPublicService_AuthLogout_FullMethodName                       = "/core.mgmt.v1alpha.MgmtPublicService/AuthLogout"
	MgmtPublicService_AuthChangePassword_FullMethodName               = "/core.mgmt.v1alpha.MgmtPublicService/AuthChangePassword"
	MgmtPublicService_AuthValidateAccessToken_FullMethodName          = "/core.mgmt.v1alpha.MgmtPublicService/AuthValidateAccessToken"
)

// MgmtPublicServiceClient is the client API for MgmtPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MgmtPublicServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// ListUsers method receives a ListUsersRequest message and returns a
	// ListUsersResponse message.
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// GetUser method receives a GetUser message and returns a
	// GetUser message.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// PatchAuthenticatedUser method receives a PatchAuthenticatedUserRequest
	// message and returns a PatchAuthenticatedUserResponse message.
	PatchAuthenticatedUser(ctx context.Context, in *PatchAuthenticatedUserRequest, opts ...grpc.CallOption) (*PatchAuthenticatedUserResponse, error)
	// ExistUsername method receives a ExistUsernameRequest message and returns a
	// ExistUsernameResponse
	ExistUsername(ctx context.Context, in *ExistUsernameRequest, opts ...grpc.CallOption) (*ExistUsernameResponse, error)
	// ListUserMemberships method receives a ListUserMembershipsRequest message and returns a
	// ListUserMembershipsResponse message.
	ListUserMemberships(ctx context.Context, in *ListUserMembershipsRequest, opts ...grpc.CallOption) (*ListUserMembershipsResponse, error)
	// GetUserMembership method receives a GetUserMembershipRequest message and returns a
	// GetUserMembershipResponse message.
	GetUserMembership(ctx context.Context, in *GetUserMembershipRequest, opts ...grpc.CallOption) (*GetUserMembershipResponse, error)
	// UpdateUserMembership method receives a UpdateUserMembershipRequest message and returns
	// a UpdateUserMembershipResponse message.
	UpdateUserMembership(ctx context.Context, in *UpdateUserMembershipRequest, opts ...grpc.CallOption) (*UpdateUserMembershipResponse, error)
	// DeleteUserMembership method receives a DeleteUserMembershipRequest message and returns
	// a DeleteUserMembershipResponse message.
	DeleteUserMembership(ctx context.Context, in *DeleteUserMembershipRequest, opts ...grpc.CallOption) (*DeleteUserMembershipResponse, error)
	// ListOrganizations method receives a ListOrganizationsRequest message and returns
	// a ListOrganizationsResponse message.
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	// CreateOrganization receives a CreateOrganizationRequest message and returns a
	// a GetOrganizationResponse
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// GetOrganization method receives a GetOrganizationRequest message and returns
	// a GetOrganizationResponse message.
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	// UpdateOrganization method receives a UpdateOrganizationRequest message and
	// returns a UpdateOrganizationResponse
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// DeleteOrganization method receives a DeleteOrganizationRequest message and
	// returns a DeleteOrganizationResponse
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// ListOrganizationMemberships method receives a ListOrganizationMembershipsRequest message and returns a
	// ListOrganizationMembershipsResponse message.
	ListOrganizationMemberships(ctx context.Context, in *ListOrganizationMembershipsRequest, opts ...grpc.CallOption) (*ListOrganizationMembershipsResponse, error)
	// GetOrganizationMembership method receives a GetOrganizationMembershipRequest message and returns a
	// GetOrganizationMembershipResponse message.
	GetOrganizationMembership(ctx context.Context, in *GetOrganizationMembershipRequest, opts ...grpc.CallOption) (*GetOrganizationMembershipResponse, error)
	// UpdateOrganizationMembership method receives a UpdateOrganizationMembershipRequest message and returns
	// a UpdateOrganizationMembershipResponse message.
	UpdateOrganizationMembership(ctx context.Context, in *UpdateOrganizationMembershipRequest, opts ...grpc.CallOption) (*UpdateOrganizationMembershipResponse, error)
	// DeleteOrganizationMembership method receives a DeleteOrganizationMembershipRequest message and returns
	// a DeleteOrganizationMembershipResponse message.
	DeleteOrganizationMembership(ctx context.Context, in *DeleteOrganizationMembershipRequest, opts ...grpc.CallOption) (*DeleteOrganizationMembershipResponse, error)
	// CreateToken method receives a CreateTokenRequest message and returns
	// a CreateTokenResponse message.
	CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error)
	// ListTokens method receives a ListTokensRequest message and returns a
	// ListTokensResponse message.
	ListTokens(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*ListTokensResponse, error)
	// GetToken method receives a GetTokenRequest message and returns a
	// GetTokenResponse message.
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	// DeleteToken method receives a DeleteTokenRequest message and returns
	// a DeleteTokenResponse message.
	DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenResponse, error)
	// ValidateToken method receives a ValidateTokenRequest message and returns
	// a ValidateTokenResponse message.
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	// ListPipelineTriggerRecords method receives a
	// ListPipelineTriggerRecordsRequest message and returns a
	// ListPipelineTriggerRecordsResponse message.
	ListPipelineTriggerRecords(ctx context.Context, in *ListPipelineTriggerRecordsRequest, opts ...grpc.CallOption) (*ListPipelineTriggerRecordsResponse, error)
	// ListPipelineTriggerTableRecords method receives a
	// ListPipelineTriggerTableRecordsRequest message and returns a
	// ListPipelineTriggerTableRecordsResponse message.
	ListPipelineTriggerTableRecords(ctx context.Context, in *ListPipelineTriggerTableRecordsRequest, opts ...grpc.CallOption) (*ListPipelineTriggerTableRecordsResponse, error)
	// ListPipelineTriggerChartRecords method receives a
	// ListPipelineTriggerChartRecordsRequest message and returns a
	// ListPipelineTriggerChartRecordsResponse message.
	ListPipelineTriggerChartRecords(ctx context.Context, in *ListPipelineTriggerChartRecordsRequest, opts ...grpc.CallOption) (*ListPipelineTriggerChartRecordsResponse, error)
	// ListConnectorExecuteRecords method receives a
	// ListConnectorExecuteRecordsRequest message and returns a
	// ListConnectorExecuteRecordsResponse message.
	ListConnectorExecuteRecords(ctx context.Context, in *ListConnectorExecuteRecordsRequest, opts ...grpc.CallOption) (*ListConnectorExecuteRecordsResponse, error)
	// ListConnectorExecuteTableRecords method receives a
	// ListConnectorExecuteTableRecordsRequest message and returns a
	// ListConnectorExecuteTableRecordsResponse message.
	ListConnectorExecuteTableRecords(ctx context.Context, in *ListConnectorExecuteTableRecordsRequest, opts ...grpc.CallOption) (*ListConnectorExecuteTableRecordsResponse, error)
	// ListConnectorExecuteChartRecords method receives a
	// ListConnectorExecuteChartRecordsRequest message and returns a
	// ListConnectorExecuteChartRecordsResponse message.
	ListConnectorExecuteChartRecords(ctx context.Context, in *ListConnectorExecuteChartRecordsRequest, opts ...grpc.CallOption) (*ListConnectorExecuteChartRecordsResponse, error)
	// AuthTokenIssuer endpoint
	AuthTokenIssuer(ctx context.Context, in *AuthTokenIssuerRequest, opts ...grpc.CallOption) (*AuthTokenIssuerResponse, error)
	// Auth Login endpoint
	AuthLogin(ctx context.Context, in *AuthLoginRequest, opts ...grpc.CallOption) (*AuthLoginResponse, error)
	// Auth Logout endpoint
	AuthLogout(ctx context.Context, in *AuthLogoutRequest, opts ...grpc.CallOption) (*AuthLogoutResponse, error)
	// Auth Change password endpoint
	AuthChangePassword(ctx context.Context, in *AuthChangePasswordRequest, opts ...grpc.CallOption) (*AuthChangePasswordResponse, error)
	// Auth AccessToken validation endpoint
	AuthValidateAccessToken(ctx context.Context, in *AuthValidateAccessTokenRequest, opts ...grpc.CallOption) (*AuthValidateAccessTokenResponse, error)
}

type mgmtPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtPublicServiceClient(cc grpc.ClientConnInterface) MgmtPublicServiceClient {
	return &mgmtPublicServiceClient{cc}
}

func (c *mgmtPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_Liveness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_Readiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) PatchAuthenticatedUser(ctx context.Context, in *PatchAuthenticatedUserRequest, opts ...grpc.CallOption) (*PatchAuthenticatedUserResponse, error) {
	out := new(PatchAuthenticatedUserResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_PatchAuthenticatedUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ExistUsername(ctx context.Context, in *ExistUsernameRequest, opts ...grpc.CallOption) (*ExistUsernameResponse, error) {
	out := new(ExistUsernameResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ExistUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListUserMemberships(ctx context.Context, in *ListUserMembershipsRequest, opts ...grpc.CallOption) (*ListUserMembershipsResponse, error) {
	out := new(ListUserMembershipsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListUserMemberships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) GetUserMembership(ctx context.Context, in *GetUserMembershipRequest, opts ...grpc.CallOption) (*GetUserMembershipResponse, error) {
	out := new(GetUserMembershipResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_GetUserMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) UpdateUserMembership(ctx context.Context, in *UpdateUserMembershipRequest, opts ...grpc.CallOption) (*UpdateUserMembershipResponse, error) {
	out := new(UpdateUserMembershipResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_UpdateUserMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) DeleteUserMembership(ctx context.Context, in *DeleteUserMembershipRequest, opts ...grpc.CallOption) (*DeleteUserMembershipResponse, error) {
	out := new(DeleteUserMembershipResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_DeleteUserMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListOrganizations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_CreateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_GetOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_UpdateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_DeleteOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListOrganizationMemberships(ctx context.Context, in *ListOrganizationMembershipsRequest, opts ...grpc.CallOption) (*ListOrganizationMembershipsResponse, error) {
	out := new(ListOrganizationMembershipsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListOrganizationMemberships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) GetOrganizationMembership(ctx context.Context, in *GetOrganizationMembershipRequest, opts ...grpc.CallOption) (*GetOrganizationMembershipResponse, error) {
	out := new(GetOrganizationMembershipResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_GetOrganizationMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) UpdateOrganizationMembership(ctx context.Context, in *UpdateOrganizationMembershipRequest, opts ...grpc.CallOption) (*UpdateOrganizationMembershipResponse, error) {
	out := new(UpdateOrganizationMembershipResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_UpdateOrganizationMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) DeleteOrganizationMembership(ctx context.Context, in *DeleteOrganizationMembershipRequest, opts ...grpc.CallOption) (*DeleteOrganizationMembershipResponse, error) {
	out := new(DeleteOrganizationMembershipResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_DeleteOrganizationMembership_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error) {
	out := new(CreateTokenResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_CreateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListTokens(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*ListTokensResponse, error) {
	out := new(ListTokensResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_GetToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenResponse, error) {
	out := new(DeleteTokenResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_DeleteToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ValidateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListPipelineTriggerRecords(ctx context.Context, in *ListPipelineTriggerRecordsRequest, opts ...grpc.CallOption) (*ListPipelineTriggerRecordsResponse, error) {
	out := new(ListPipelineTriggerRecordsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListPipelineTriggerRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListPipelineTriggerTableRecords(ctx context.Context, in *ListPipelineTriggerTableRecordsRequest, opts ...grpc.CallOption) (*ListPipelineTriggerTableRecordsResponse, error) {
	out := new(ListPipelineTriggerTableRecordsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListPipelineTriggerTableRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListPipelineTriggerChartRecords(ctx context.Context, in *ListPipelineTriggerChartRecordsRequest, opts ...grpc.CallOption) (*ListPipelineTriggerChartRecordsResponse, error) {
	out := new(ListPipelineTriggerChartRecordsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListPipelineTriggerChartRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListConnectorExecuteRecords(ctx context.Context, in *ListConnectorExecuteRecordsRequest, opts ...grpc.CallOption) (*ListConnectorExecuteRecordsResponse, error) {
	out := new(ListConnectorExecuteRecordsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListConnectorExecuteRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListConnectorExecuteTableRecords(ctx context.Context, in *ListConnectorExecuteTableRecordsRequest, opts ...grpc.CallOption) (*ListConnectorExecuteTableRecordsResponse, error) {
	out := new(ListConnectorExecuteTableRecordsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListConnectorExecuteTableRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListConnectorExecuteChartRecords(ctx context.Context, in *ListConnectorExecuteChartRecordsRequest, opts ...grpc.CallOption) (*ListConnectorExecuteChartRecordsResponse, error) {
	out := new(ListConnectorExecuteChartRecordsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListConnectorExecuteChartRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) AuthTokenIssuer(ctx context.Context, in *AuthTokenIssuerRequest, opts ...grpc.CallOption) (*AuthTokenIssuerResponse, error) {
	out := new(AuthTokenIssuerResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_AuthTokenIssuer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) AuthLogin(ctx context.Context, in *AuthLoginRequest, opts ...grpc.CallOption) (*AuthLoginResponse, error) {
	out := new(AuthLoginResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_AuthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) AuthLogout(ctx context.Context, in *AuthLogoutRequest, opts ...grpc.CallOption) (*AuthLogoutResponse, error) {
	out := new(AuthLogoutResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_AuthLogout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) AuthChangePassword(ctx context.Context, in *AuthChangePasswordRequest, opts ...grpc.CallOption) (*AuthChangePasswordResponse, error) {
	out := new(AuthChangePasswordResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_AuthChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) AuthValidateAccessToken(ctx context.Context, in *AuthValidateAccessTokenRequest, opts ...grpc.CallOption) (*AuthValidateAccessTokenResponse, error) {
	out := new(AuthValidateAccessTokenResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_AuthValidateAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtPublicServiceServer is the server API for MgmtPublicService service.
// All implementations should embed UnimplementedMgmtPublicServiceServer
// for forward compatibility
type MgmtPublicServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// ListUsers method receives a ListUsersRequest message and returns a
	// ListUsersResponse message.
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// GetUser method receives a GetUser message and returns a
	// GetUser message.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// PatchAuthenticatedUser method receives a PatchAuthenticatedUserRequest
	// message and returns a PatchAuthenticatedUserResponse message.
	PatchAuthenticatedUser(context.Context, *PatchAuthenticatedUserRequest) (*PatchAuthenticatedUserResponse, error)
	// ExistUsername method receives a ExistUsernameRequest message and returns a
	// ExistUsernameResponse
	ExistUsername(context.Context, *ExistUsernameRequest) (*ExistUsernameResponse, error)
	// ListUserMemberships method receives a ListUserMembershipsRequest message and returns a
	// ListUserMembershipsResponse message.
	ListUserMemberships(context.Context, *ListUserMembershipsRequest) (*ListUserMembershipsResponse, error)
	// GetUserMembership method receives a GetUserMembershipRequest message and returns a
	// GetUserMembershipResponse message.
	GetUserMembership(context.Context, *GetUserMembershipRequest) (*GetUserMembershipResponse, error)
	// UpdateUserMembership method receives a UpdateUserMembershipRequest message and returns
	// a UpdateUserMembershipResponse message.
	UpdateUserMembership(context.Context, *UpdateUserMembershipRequest) (*UpdateUserMembershipResponse, error)
	// DeleteUserMembership method receives a DeleteUserMembershipRequest message and returns
	// a DeleteUserMembershipResponse message.
	DeleteUserMembership(context.Context, *DeleteUserMembershipRequest) (*DeleteUserMembershipResponse, error)
	// ListOrganizations method receives a ListOrganizationsRequest message and returns
	// a ListOrganizationsResponse message.
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	// CreateOrganization receives a CreateOrganizationRequest message and returns a
	// a GetOrganizationResponse
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// GetOrganization method receives a GetOrganizationRequest message and returns
	// a GetOrganizationResponse message.
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	// UpdateOrganization method receives a UpdateOrganizationRequest message and
	// returns a UpdateOrganizationResponse
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// DeleteOrganization method receives a DeleteOrganizationRequest message and
	// returns a DeleteOrganizationResponse
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// ListOrganizationMemberships method receives a ListOrganizationMembershipsRequest message and returns a
	// ListOrganizationMembershipsResponse message.
	ListOrganizationMemberships(context.Context, *ListOrganizationMembershipsRequest) (*ListOrganizationMembershipsResponse, error)
	// GetOrganizationMembership method receives a GetOrganizationMembershipRequest message and returns a
	// GetOrganizationMembershipResponse message.
	GetOrganizationMembership(context.Context, *GetOrganizationMembershipRequest) (*GetOrganizationMembershipResponse, error)
	// UpdateOrganizationMembership method receives a UpdateOrganizationMembershipRequest message and returns
	// a UpdateOrganizationMembershipResponse message.
	UpdateOrganizationMembership(context.Context, *UpdateOrganizationMembershipRequest) (*UpdateOrganizationMembershipResponse, error)
	// DeleteOrganizationMembership method receives a DeleteOrganizationMembershipRequest message and returns
	// a DeleteOrganizationMembershipResponse message.
	DeleteOrganizationMembership(context.Context, *DeleteOrganizationMembershipRequest) (*DeleteOrganizationMembershipResponse, error)
	// CreateToken method receives a CreateTokenRequest message and returns
	// a CreateTokenResponse message.
	CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error)
	// ListTokens method receives a ListTokensRequest message and returns a
	// ListTokensResponse message.
	ListTokens(context.Context, *ListTokensRequest) (*ListTokensResponse, error)
	// GetToken method receives a GetTokenRequest message and returns a
	// GetTokenResponse message.
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	// DeleteToken method receives a DeleteTokenRequest message and returns
	// a DeleteTokenResponse message.
	DeleteToken(context.Context, *DeleteTokenRequest) (*DeleteTokenResponse, error)
	// ValidateToken method receives a ValidateTokenRequest message and returns
	// a ValidateTokenResponse message.
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	// ListPipelineTriggerRecords method receives a
	// ListPipelineTriggerRecordsRequest message and returns a
	// ListPipelineTriggerRecordsResponse message.
	ListPipelineTriggerRecords(context.Context, *ListPipelineTriggerRecordsRequest) (*ListPipelineTriggerRecordsResponse, error)
	// ListPipelineTriggerTableRecords method receives a
	// ListPipelineTriggerTableRecordsRequest message and returns a
	// ListPipelineTriggerTableRecordsResponse message.
	ListPipelineTriggerTableRecords(context.Context, *ListPipelineTriggerTableRecordsRequest) (*ListPipelineTriggerTableRecordsResponse, error)
	// ListPipelineTriggerChartRecords method receives a
	// ListPipelineTriggerChartRecordsRequest message and returns a
	// ListPipelineTriggerChartRecordsResponse message.
	ListPipelineTriggerChartRecords(context.Context, *ListPipelineTriggerChartRecordsRequest) (*ListPipelineTriggerChartRecordsResponse, error)
	// ListConnectorExecuteRecords method receives a
	// ListConnectorExecuteRecordsRequest message and returns a
	// ListConnectorExecuteRecordsResponse message.
	ListConnectorExecuteRecords(context.Context, *ListConnectorExecuteRecordsRequest) (*ListConnectorExecuteRecordsResponse, error)
	// ListConnectorExecuteTableRecords method receives a
	// ListConnectorExecuteTableRecordsRequest message and returns a
	// ListConnectorExecuteTableRecordsResponse message.
	ListConnectorExecuteTableRecords(context.Context, *ListConnectorExecuteTableRecordsRequest) (*ListConnectorExecuteTableRecordsResponse, error)
	// ListConnectorExecuteChartRecords method receives a
	// ListConnectorExecuteChartRecordsRequest message and returns a
	// ListConnectorExecuteChartRecordsResponse message.
	ListConnectorExecuteChartRecords(context.Context, *ListConnectorExecuteChartRecordsRequest) (*ListConnectorExecuteChartRecordsResponse, error)
	// AuthTokenIssuer endpoint
	AuthTokenIssuer(context.Context, *AuthTokenIssuerRequest) (*AuthTokenIssuerResponse, error)
	// Auth Login endpoint
	AuthLogin(context.Context, *AuthLoginRequest) (*AuthLoginResponse, error)
	// Auth Logout endpoint
	AuthLogout(context.Context, *AuthLogoutRequest) (*AuthLogoutResponse, error)
	// Auth Change password endpoint
	AuthChangePassword(context.Context, *AuthChangePasswordRequest) (*AuthChangePasswordResponse, error)
	// Auth AccessToken validation endpoint
	AuthValidateAccessToken(context.Context, *AuthValidateAccessTokenRequest) (*AuthValidateAccessTokenResponse, error)
}

// UnimplementedMgmtPublicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMgmtPublicServiceServer struct {
}

func (UnimplementedMgmtPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedMgmtPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedMgmtPublicServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedMgmtPublicServiceServer) PatchAuthenticatedUser(context.Context, *PatchAuthenticatedUserRequest) (*PatchAuthenticatedUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAuthenticatedUser not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ExistUsername(context.Context, *ExistUsernameRequest) (*ExistUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUsername not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListUserMemberships(context.Context, *ListUserMembershipsRequest) (*ListUserMembershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserMemberships not implemented")
}
func (UnimplementedMgmtPublicServiceServer) GetUserMembership(context.Context, *GetUserMembershipRequest) (*GetUserMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMembership not implemented")
}
func (UnimplementedMgmtPublicServiceServer) UpdateUserMembership(context.Context, *UpdateUserMembershipRequest) (*UpdateUserMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserMembership not implemented")
}
func (UnimplementedMgmtPublicServiceServer) DeleteUserMembership(context.Context, *DeleteUserMembershipRequest) (*DeleteUserMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMembership not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedMgmtPublicServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedMgmtPublicServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedMgmtPublicServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedMgmtPublicServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListOrganizationMemberships(context.Context, *ListOrganizationMembershipsRequest) (*ListOrganizationMembershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationMemberships not implemented")
}
func (UnimplementedMgmtPublicServiceServer) GetOrganizationMembership(context.Context, *GetOrganizationMembershipRequest) (*GetOrganizationMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationMembership not implemented")
}
func (UnimplementedMgmtPublicServiceServer) UpdateOrganizationMembership(context.Context, *UpdateOrganizationMembershipRequest) (*UpdateOrganizationMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationMembership not implemented")
}
func (UnimplementedMgmtPublicServiceServer) DeleteOrganizationMembership(context.Context, *DeleteOrganizationMembershipRequest) (*DeleteOrganizationMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationMembership not implemented")
}
func (UnimplementedMgmtPublicServiceServer) CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListTokens(context.Context, *ListTokensRequest) (*ListTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokens not implemented")
}
func (UnimplementedMgmtPublicServiceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedMgmtPublicServiceServer) DeleteToken(context.Context, *DeleteTokenRequest) (*DeleteTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListPipelineTriggerRecords(context.Context, *ListPipelineTriggerRecordsRequest) (*ListPipelineTriggerRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineTriggerRecords not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListPipelineTriggerTableRecords(context.Context, *ListPipelineTriggerTableRecordsRequest) (*ListPipelineTriggerTableRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineTriggerTableRecords not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListPipelineTriggerChartRecords(context.Context, *ListPipelineTriggerChartRecordsRequest) (*ListPipelineTriggerChartRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineTriggerChartRecords not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListConnectorExecuteRecords(context.Context, *ListConnectorExecuteRecordsRequest) (*ListConnectorExecuteRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectorExecuteRecords not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListConnectorExecuteTableRecords(context.Context, *ListConnectorExecuteTableRecordsRequest) (*ListConnectorExecuteTableRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectorExecuteTableRecords not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListConnectorExecuteChartRecords(context.Context, *ListConnectorExecuteChartRecordsRequest) (*ListConnectorExecuteChartRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectorExecuteChartRecords not implemented")
}
func (UnimplementedMgmtPublicServiceServer) AuthTokenIssuer(context.Context, *AuthTokenIssuerRequest) (*AuthTokenIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthTokenIssuer not implemented")
}
func (UnimplementedMgmtPublicServiceServer) AuthLogin(context.Context, *AuthLoginRequest) (*AuthLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogin not implemented")
}
func (UnimplementedMgmtPublicServiceServer) AuthLogout(context.Context, *AuthLogoutRequest) (*AuthLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogout not implemented")
}
func (UnimplementedMgmtPublicServiceServer) AuthChangePassword(context.Context, *AuthChangePasswordRequest) (*AuthChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthChangePassword not implemented")
}
func (UnimplementedMgmtPublicServiceServer) AuthValidateAccessToken(context.Context, *AuthValidateAccessTokenRequest) (*AuthValidateAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthValidateAccessToken not implemented")
}

// UnsafeMgmtPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MgmtPublicServiceServer will
// result in compilation errors.
type UnsafeMgmtPublicServiceServer interface {
	mustEmbedUnimplementedMgmtPublicServiceServer()
}

func RegisterMgmtPublicServiceServer(s grpc.ServiceRegistrar, srv MgmtPublicServiceServer) {
	s.RegisterService(&MgmtPublicService_ServiceDesc, srv)
}

func _MgmtPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_PatchAuthenticatedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAuthenticatedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).PatchAuthenticatedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_PatchAuthenticatedUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).PatchAuthenticatedUser(ctx, req.(*PatchAuthenticatedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ExistUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ExistUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ExistUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ExistUsername(ctx, req.(*ExistUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListUserMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserMembershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListUserMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListUserMemberships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListUserMemberships(ctx, req.(*ListUserMembershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_GetUserMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).GetUserMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_GetUserMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).GetUserMembership(ctx, req.(*GetUserMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_UpdateUserMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).UpdateUserMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_UpdateUserMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).UpdateUserMembership(ctx, req.(*UpdateUserMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_DeleteUserMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).DeleteUserMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_DeleteUserMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).DeleteUserMembership(ctx, req.(*DeleteUserMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListOrganizationMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationMembershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListOrganizationMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListOrganizationMemberships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListOrganizationMemberships(ctx, req.(*ListOrganizationMembershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_GetOrganizationMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).GetOrganizationMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_GetOrganizationMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).GetOrganizationMembership(ctx, req.(*GetOrganizationMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_UpdateOrganizationMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).UpdateOrganizationMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_UpdateOrganizationMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).UpdateOrganizationMembership(ctx, req.(*UpdateOrganizationMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_DeleteOrganizationMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).DeleteOrganizationMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_DeleteOrganizationMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).DeleteOrganizationMembership(ctx, req.(*DeleteOrganizationMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).CreateToken(ctx, req.(*CreateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListTokens(ctx, req.(*ListTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_DeleteToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).DeleteToken(ctx, req.(*DeleteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListPipelineTriggerRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineTriggerRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListPipelineTriggerRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListPipelineTriggerRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListPipelineTriggerRecords(ctx, req.(*ListPipelineTriggerRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListPipelineTriggerTableRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineTriggerTableRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListPipelineTriggerTableRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListPipelineTriggerTableRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListPipelineTriggerTableRecords(ctx, req.(*ListPipelineTriggerTableRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListPipelineTriggerChartRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineTriggerChartRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListPipelineTriggerChartRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListPipelineTriggerChartRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListPipelineTriggerChartRecords(ctx, req.(*ListPipelineTriggerChartRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListConnectorExecuteRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorExecuteRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListConnectorExecuteRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListConnectorExecuteRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListConnectorExecuteRecords(ctx, req.(*ListConnectorExecuteRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListConnectorExecuteTableRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorExecuteTableRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListConnectorExecuteTableRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListConnectorExecuteTableRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListConnectorExecuteTableRecords(ctx, req.(*ListConnectorExecuteTableRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListConnectorExecuteChartRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorExecuteChartRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListConnectorExecuteChartRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListConnectorExecuteChartRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListConnectorExecuteChartRecords(ctx, req.(*ListConnectorExecuteChartRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_AuthTokenIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthTokenIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).AuthTokenIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_AuthTokenIssuer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).AuthTokenIssuer(ctx, req.(*AuthTokenIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_AuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).AuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_AuthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).AuthLogin(ctx, req.(*AuthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_AuthLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).AuthLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_AuthLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).AuthLogout(ctx, req.(*AuthLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_AuthChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).AuthChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_AuthChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).AuthChangePassword(ctx, req.(*AuthChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_AuthValidateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthValidateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).AuthValidateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_AuthValidateAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).AuthValidateAccessToken(ctx, req.(*AuthValidateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MgmtPublicService_ServiceDesc is the grpc.ServiceDesc for MgmtPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MgmtPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.mgmt.v1alpha.MgmtPublicService",
	HandlerType: (*MgmtPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _MgmtPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _MgmtPublicService_Readiness_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _MgmtPublicService_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _MgmtPublicService_GetUser_Handler,
		},
		{
			MethodName: "PatchAuthenticatedUser",
			Handler:    _MgmtPublicService_PatchAuthenticatedUser_Handler,
		},
		{
			MethodName: "ExistUsername",
			Handler:    _MgmtPublicService_ExistUsername_Handler,
		},
		{
			MethodName: "ListUserMemberships",
			Handler:    _MgmtPublicService_ListUserMemberships_Handler,
		},
		{
			MethodName: "GetUserMembership",
			Handler:    _MgmtPublicService_GetUserMembership_Handler,
		},
		{
			MethodName: "UpdateUserMembership",
			Handler:    _MgmtPublicService_UpdateUserMembership_Handler,
		},
		{
			MethodName: "DeleteUserMembership",
			Handler:    _MgmtPublicService_DeleteUserMembership_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _MgmtPublicService_ListOrganizations_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _MgmtPublicService_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _MgmtPublicService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _MgmtPublicService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _MgmtPublicService_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListOrganizationMemberships",
			Handler:    _MgmtPublicService_ListOrganizationMemberships_Handler,
		},
		{
			MethodName: "GetOrganizationMembership",
			Handler:    _MgmtPublicService_GetOrganizationMembership_Handler,
		},
		{
			MethodName: "UpdateOrganizationMembership",
			Handler:    _MgmtPublicService_UpdateOrganizationMembership_Handler,
		},
		{
			MethodName: "DeleteOrganizationMembership",
			Handler:    _MgmtPublicService_DeleteOrganizationMembership_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _MgmtPublicService_CreateToken_Handler,
		},
		{
			MethodName: "ListTokens",
			Handler:    _MgmtPublicService_ListTokens_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _MgmtPublicService_GetToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _MgmtPublicService_DeleteToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _MgmtPublicService_ValidateToken_Handler,
		},
		{
			MethodName: "ListPipelineTriggerRecords",
			Handler:    _MgmtPublicService_ListPipelineTriggerRecords_Handler,
		},
		{
			MethodName: "ListPipelineTriggerTableRecords",
			Handler:    _MgmtPublicService_ListPipelineTriggerTableRecords_Handler,
		},
		{
			MethodName: "ListPipelineTriggerChartRecords",
			Handler:    _MgmtPublicService_ListPipelineTriggerChartRecords_Handler,
		},
		{
			MethodName: "ListConnectorExecuteRecords",
			Handler:    _MgmtPublicService_ListConnectorExecuteRecords_Handler,
		},
		{
			MethodName: "ListConnectorExecuteTableRecords",
			Handler:    _MgmtPublicService_ListConnectorExecuteTableRecords_Handler,
		},
		{
			MethodName: "ListConnectorExecuteChartRecords",
			Handler:    _MgmtPublicService_ListConnectorExecuteChartRecords_Handler,
		},
		{
			MethodName: "AuthTokenIssuer",
			Handler:    _MgmtPublicService_AuthTokenIssuer_Handler,
		},
		{
			MethodName: "AuthLogin",
			Handler:    _MgmtPublicService_AuthLogin_Handler,
		},
		{
			MethodName: "AuthLogout",
			Handler:    _MgmtPublicService_AuthLogout_Handler,
		},
		{
			MethodName: "AuthChangePassword",
			Handler:    _MgmtPublicService_AuthChangePassword_Handler,
		},
		{
			MethodName: "AuthValidateAccessToken",
			Handler:    _MgmtPublicService_AuthValidateAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/mgmt/v1alpha/mgmt_public_service.proto",
}
