// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: core/mgmt/v1beta/metric.proto

package mgmtv1beta

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mode describes the execution mode of the pipeline (sync or async).
type Mode int32

const (
	// Unspecified.
	Mode_MODE_UNSPECIFIED Mode = 0
	// Synchronous (result is returned in the response).
	Mode_MODE_SYNC Mode = 1
	// Asynchronous (response only contains acknowledgement).
	Mode_MODE_ASYNC Mode = 2
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_SYNC",
		2: "MODE_ASYNC",
	}
	Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"MODE_SYNC":        1,
		"MODE_ASYNC":       2,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_core_mgmt_v1beta_metric_proto_enumTypes[0].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_core_mgmt_v1beta_metric_proto_enumTypes[0]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_core_mgmt_v1beta_metric_proto_rawDescGZIP(), []int{0}
}

// Status describes the output of an execution.
type Status int32

const (
	// Unspecified.
	Status_STATUS_UNSPECIFIED Status = 0
	// Successfully completed.
	Status_STATUS_COMPLETED Status = 1
	// Finished with error.
	Status_STATUS_ERRORED Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_COMPLETED",
		2: "STATUS_ERRORED",
	}
	Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_COMPLETED":   1,
		"STATUS_ERRORED":     2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_core_mgmt_v1beta_metric_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_core_mgmt_v1beta_metric_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_core_mgmt_v1beta_metric_proto_rawDescGZIP(), []int{1}
}

// PipelineTriggerRecord represents a pipeline execution event.
type PipelineTriggerRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The moment when the pipeline was triggered.
	TriggerTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=trigger_time,json=triggerTime,proto3" json:"trigger_time,omitempty"`
	// UUID of the trigger.
	PipelineTriggerId string `protobuf:"bytes,2,opt,name=pipeline_trigger_id,json=pipelineTriggerId,proto3" json:"pipeline_trigger_id,omitempty"`
	// Pipeline ID.
	PipelineId string `protobuf:"bytes,3,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	// Pipeline UUID.
	PipelineUid string `protobuf:"bytes,4,opt,name=pipeline_uid,json=pipelineUid,proto3" json:"pipeline_uid,omitempty"`
	// Trigger mode.
	TriggerMode Mode `protobuf:"varint,5,opt,name=trigger_mode,json=triggerMode,proto3,enum=core.mgmt.v1beta.Mode" json:"trigger_mode,omitempty"`
	// Total execution duration.
	ComputeTimeDuration float32 `protobuf:"fixed32,6,opt,name=compute_time_duration,json=computeTimeDuration,proto3" json:"compute_time_duration,omitempty"`
	// Final status.
	Status Status `protobuf:"varint,7,opt,name=status,proto3,enum=core.mgmt.v1beta.Status" json:"status,omitempty"`
	// If a release of the pipeline was triggered, pipeline version.
	PipelineReleaseId string `protobuf:"bytes,8,opt,name=pipeline_release_id,json=pipelineReleaseId,proto3" json:"pipeline_release_id,omitempty"`
	// If a release of the pipeline was triggered, release UUID.
	PipelineReleaseUid string `protobuf:"bytes,9,opt,name=pipeline_release_uid,json=pipelineReleaseUid,proto3" json:"pipeline_release_uid,omitempty"`
}

func (x *PipelineTriggerRecord) Reset() {
	*x = PipelineTriggerRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTriggerRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTriggerRecord) ProtoMessage() {}

func (x *PipelineTriggerRecord) ProtoReflect() protoreflect.Message {
	mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTriggerRecord.ProtoReflect.Descriptor instead.
func (*PipelineTriggerRecord) Descriptor() ([]byte, []int) {
	return file_core_mgmt_v1beta_metric_proto_rawDescGZIP(), []int{0}
}

func (x *PipelineTriggerRecord) GetTriggerTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TriggerTime
	}
	return nil
}

func (x *PipelineTriggerRecord) GetPipelineTriggerId() string {
	if x != nil {
		return x.PipelineTriggerId
	}
	return ""
}

func (x *PipelineTriggerRecord) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *PipelineTriggerRecord) GetPipelineUid() string {
	if x != nil {
		return x.PipelineUid
	}
	return ""
}

func (x *PipelineTriggerRecord) GetTriggerMode() Mode {
	if x != nil {
		return x.TriggerMode
	}
	return Mode_MODE_UNSPECIFIED
}

func (x *PipelineTriggerRecord) GetComputeTimeDuration() float32 {
	if x != nil {
		return x.ComputeTimeDuration
	}
	return 0
}

func (x *PipelineTriggerRecord) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (x *PipelineTriggerRecord) GetPipelineReleaseId() string {
	if x != nil {
		return x.PipelineReleaseId
	}
	return ""
}

func (x *PipelineTriggerRecord) GetPipelineReleaseUid() string {
	if x != nil {
		return x.PipelineReleaseUid
	}
	return ""
}

// PipelineTriggerTableRecord contains pipeline trigger metrics, aggregated by
// pipeline ID.
type PipelineTriggerTableRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline ID.
	PipelineId string `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	// Pipeline UUID.
	PipelineUid string `protobuf:"bytes,2,opt,name=pipeline_uid,json=pipelineUid,proto3" json:"pipeline_uid,omitempty"`
	// Number of triggers with `STATUS_COMPLETED`.
	TriggerCountCompleted int32 `protobuf:"varint,3,opt,name=trigger_count_completed,json=triggerCountCompleted,proto3" json:"trigger_count_completed,omitempty"`
	// Number of triggers with `STATUS_ERRORED`.
	TriggerCountErrored int32 `protobuf:"varint,4,opt,name=trigger_count_errored,json=triggerCountErrored,proto3" json:"trigger_count_errored,omitempty"`
	// Version for the triggered pipeline if it is a release pipeline.
	PipelineReleaseId string `protobuf:"bytes,5,opt,name=pipeline_release_id,json=pipelineReleaseId,proto3" json:"pipeline_release_id,omitempty"`
	// Release UUID for the triggered pipeline if it is a release pipeline.
	PipelineReleaseUid string `protobuf:"bytes,6,opt,name=pipeline_release_uid,json=pipelineReleaseUid,proto3" json:"pipeline_release_uid,omitempty"`
}

func (x *PipelineTriggerTableRecord) Reset() {
	*x = PipelineTriggerTableRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTriggerTableRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTriggerTableRecord) ProtoMessage() {}

func (x *PipelineTriggerTableRecord) ProtoReflect() protoreflect.Message {
	mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTriggerTableRecord.ProtoReflect.Descriptor instead.
func (*PipelineTriggerTableRecord) Descriptor() ([]byte, []int) {
	return file_core_mgmt_v1beta_metric_proto_rawDescGZIP(), []int{1}
}

func (x *PipelineTriggerTableRecord) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *PipelineTriggerTableRecord) GetPipelineUid() string {
	if x != nil {
		return x.PipelineUid
	}
	return ""
}

func (x *PipelineTriggerTableRecord) GetTriggerCountCompleted() int32 {
	if x != nil {
		return x.TriggerCountCompleted
	}
	return 0
}

func (x *PipelineTriggerTableRecord) GetTriggerCountErrored() int32 {
	if x != nil {
		return x.TriggerCountErrored
	}
	return 0
}

func (x *PipelineTriggerTableRecord) GetPipelineReleaseId() string {
	if x != nil {
		return x.PipelineReleaseId
	}
	return ""
}

func (x *PipelineTriggerTableRecord) GetPipelineReleaseUid() string {
	if x != nil {
		return x.PipelineReleaseUid
	}
	return ""
}

// PipelineTriggerChartRecord contains pipeline trigger metrics, aggregated by
// pipeline ID and time frame.
type PipelineTriggerChartRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pipeline ID.
	PipelineId string `protobuf:"bytes,1,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	// Pipeline UUID.
	PipelineUid string `protobuf:"bytes,2,opt,name=pipeline_uid,json=pipelineUid,proto3" json:"pipeline_uid,omitempty"`
	// Trigger mode.
	TriggerMode Mode `protobuf:"varint,3,opt,name=trigger_mode,json=triggerMode,proto3,enum=core.mgmt.v1beta.Mode" json:"trigger_mode,omitempty"`
	// Final status.
	Status Status `protobuf:"varint,4,opt,name=status,proto3,enum=core.mgmt.v1beta.Status" json:"status,omitempty"`
	// Time buckets.
	TimeBuckets []*timestamppb.Timestamp `protobuf:"bytes,5,rep,name=time_buckets,json=timeBuckets,proto3" json:"time_buckets,omitempty"`
	// Aggregated trigger count in each time bucket.
	TriggerCounts []int32 `protobuf:"varint,6,rep,packed,name=trigger_counts,json=triggerCounts,proto3" json:"trigger_counts,omitempty"`
	// Total computation time duration in each time bucket.
	ComputeTimeDuration []float32 `protobuf:"fixed32,7,rep,packed,name=compute_time_duration,json=computeTimeDuration,proto3" json:"compute_time_duration,omitempty"`
	// Version for the triggered pipeline if it is a release pipeline.
	PipelineReleaseId string `protobuf:"bytes,8,opt,name=pipeline_release_id,json=pipelineReleaseId,proto3" json:"pipeline_release_id,omitempty"`
	// Release UUID for the triggered pipeline if it is a release pipeline.
	PipelineReleaseUid string `protobuf:"bytes,9,opt,name=pipeline_release_uid,json=pipelineReleaseUid,proto3" json:"pipeline_release_uid,omitempty"`
}

func (x *PipelineTriggerChartRecord) Reset() {
	*x = PipelineTriggerChartRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineTriggerChartRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTriggerChartRecord) ProtoMessage() {}

func (x *PipelineTriggerChartRecord) ProtoReflect() protoreflect.Message {
	mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTriggerChartRecord.ProtoReflect.Descriptor instead.
func (*PipelineTriggerChartRecord) Descriptor() ([]byte, []int) {
	return file_core_mgmt_v1beta_metric_proto_rawDescGZIP(), []int{2}
}

func (x *PipelineTriggerChartRecord) GetPipelineId() string {
	if x != nil {
		return x.PipelineId
	}
	return ""
}

func (x *PipelineTriggerChartRecord) GetPipelineUid() string {
	if x != nil {
		return x.PipelineUid
	}
	return ""
}

func (x *PipelineTriggerChartRecord) GetTriggerMode() Mode {
	if x != nil {
		return x.TriggerMode
	}
	return Mode_MODE_UNSPECIFIED
}

func (x *PipelineTriggerChartRecord) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (x *PipelineTriggerChartRecord) GetTimeBuckets() []*timestamppb.Timestamp {
	if x != nil {
		return x.TimeBuckets
	}
	return nil
}

func (x *PipelineTriggerChartRecord) GetTriggerCounts() []int32 {
	if x != nil {
		return x.TriggerCounts
	}
	return nil
}

func (x *PipelineTriggerChartRecord) GetComputeTimeDuration() []float32 {
	if x != nil {
		return x.ComputeTimeDuration
	}
	return nil
}

func (x *PipelineTriggerChartRecord) GetPipelineReleaseId() string {
	if x != nil {
		return x.PipelineReleaseId
	}
	return ""
}

func (x *PipelineTriggerChartRecord) GetPipelineReleaseUid() string {
	if x != nil {
		return x.PipelineReleaseUid
	}
	return ""
}

// ListPipelineTriggerRecordsRequest represents a request to list the triggers
// of a pipeline.
type ListPipelineTriggerRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of triggers to return. If this parameter is unspecified,
	// at most 100 pipelines will be returned. The cap value for this parameter is
	// 1000 (i.e. any value above that will be coerced to 100).
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token.
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
	// expression.
	// - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
	Filter *string `protobuf:"bytes,3,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
}

func (x *ListPipelineTriggerRecordsRequest) Reset() {
	*x = ListPipelineTriggerRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineTriggerRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineTriggerRecordsRequest) ProtoMessage() {}

func (x *ListPipelineTriggerRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineTriggerRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListPipelineTriggerRecordsRequest) Descriptor() ([]byte, []int) {
	return file_core_mgmt_v1beta_metric_proto_rawDescGZIP(), []int{3}
}

func (x *ListPipelineTriggerRecordsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListPipelineTriggerRecordsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListPipelineTriggerRecordsRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

// ListPipelineTriggerRecordsResponse contains a list of pipeline triggers.
type ListPipelineTriggerRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline triggers.
	PipelineTriggerRecords []*PipelineTriggerRecord `protobuf:"bytes,1,rep,name=pipeline_trigger_records,json=pipelineTriggerRecords,proto3" json:"pipeline_trigger_records,omitempty"`
	// Next page token.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of pipeline triggers.
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListPipelineTriggerRecordsResponse) Reset() {
	*x = ListPipelineTriggerRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineTriggerRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineTriggerRecordsResponse) ProtoMessage() {}

func (x *ListPipelineTriggerRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineTriggerRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListPipelineTriggerRecordsResponse) Descriptor() ([]byte, []int) {
	return file_core_mgmt_v1beta_metric_proto_rawDescGZIP(), []int{4}
}

func (x *ListPipelineTriggerRecordsResponse) GetPipelineTriggerRecords() []*PipelineTriggerRecord {
	if x != nil {
		return x.PipelineTriggerRecords
	}
	return nil
}

func (x *ListPipelineTriggerRecordsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListPipelineTriggerRecordsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// ListPipelineTriggerTableRecordsRequest represents a request to list the
// pipeline triggers metrics, aggregated by pipeline ID.
type ListPipelineTriggerTableRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of results to return. If this parameter is unspecified,
	// at most 100 pipelines will be returned. The cap value for this parameter
	// is 1000 (i.e. any value above that will be coerced to 1000).
	PageSize *int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token.
	PageToken *string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
	// expression.
	// - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
	Filter *string `protobuf:"bytes,3,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
}

func (x *ListPipelineTriggerTableRecordsRequest) Reset() {
	*x = ListPipelineTriggerTableRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineTriggerTableRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineTriggerTableRecordsRequest) ProtoMessage() {}

func (x *ListPipelineTriggerTableRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineTriggerTableRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListPipelineTriggerTableRecordsRequest) Descriptor() ([]byte, []int) {
	return file_core_mgmt_v1beta_metric_proto_rawDescGZIP(), []int{5}
}

func (x *ListPipelineTriggerTableRecordsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListPipelineTriggerTableRecordsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListPipelineTriggerTableRecordsRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

// ListPipelineTriggerTableRecordsResponse contains the pipeline metrics.
type ListPipelineTriggerTableRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline trigger tables.
	PipelineTriggerTableRecords []*PipelineTriggerTableRecord `protobuf:"bytes,1,rep,name=pipeline_trigger_table_records,json=pipelineTriggerTableRecords,proto3" json:"pipeline_trigger_table_records,omitempty"`
	// Next page token.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of pipeline trigger records
	TotalSize int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListPipelineTriggerTableRecordsResponse) Reset() {
	*x = ListPipelineTriggerTableRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineTriggerTableRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineTriggerTableRecordsResponse) ProtoMessage() {}

func (x *ListPipelineTriggerTableRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineTriggerTableRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListPipelineTriggerTableRecordsResponse) Descriptor() ([]byte, []int) {
	return file_core_mgmt_v1beta_metric_proto_rawDescGZIP(), []int{6}
}

func (x *ListPipelineTriggerTableRecordsResponse) GetPipelineTriggerTableRecords() []*PipelineTriggerTableRecord {
	if x != nil {
		return x.PipelineTriggerTableRecords
	}
	return nil
}

func (x *ListPipelineTriggerTableRecordsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListPipelineTriggerTableRecordsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// ListPipelineTriggerChartRecordsRequest represents a request to list pipeline
// trigger metrics, aggregated by pipeline ID and time frame.
type ListPipelineTriggerChartRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Aggregation window in nanoseconds.
	AggregationWindow int32 `protobuf:"varint,1,opt,name=aggregation_window,json=aggregationWindow,proto3" json:"aggregation_window,omitempty"`
	// Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
	// expression.
	// - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
	Filter *string `protobuf:"bytes,2,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
}

func (x *ListPipelineTriggerChartRecordsRequest) Reset() {
	*x = ListPipelineTriggerChartRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineTriggerChartRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineTriggerChartRecordsRequest) ProtoMessage() {}

func (x *ListPipelineTriggerChartRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineTriggerChartRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListPipelineTriggerChartRecordsRequest) Descriptor() ([]byte, []int) {
	return file_core_mgmt_v1beta_metric_proto_rawDescGZIP(), []int{7}
}

func (x *ListPipelineTriggerChartRecordsRequest) GetAggregationWindow() int32 {
	if x != nil {
		return x.AggregationWindow
	}
	return 0
}

func (x *ListPipelineTriggerChartRecordsRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

// ListPipelineTriggerChartRecordsResponse contains a list of pipeline trigger
// chart records.
type ListPipelineTriggerChartRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of pipeline trigger records.
	PipelineTriggerChartRecords []*PipelineTriggerChartRecord `protobuf:"bytes,1,rep,name=pipeline_trigger_chart_records,json=pipelineTriggerChartRecords,proto3" json:"pipeline_trigger_chart_records,omitempty"`
}

func (x *ListPipelineTriggerChartRecordsResponse) Reset() {
	*x = ListPipelineTriggerChartRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPipelineTriggerChartRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPipelineTriggerChartRecordsResponse) ProtoMessage() {}

func (x *ListPipelineTriggerChartRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPipelineTriggerChartRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListPipelineTriggerChartRecordsResponse) Descriptor() ([]byte, []int) {
	return file_core_mgmt_v1beta_metric_proto_rawDescGZIP(), []int{8}
}

func (x *ListPipelineTriggerChartRecordsResponse) GetPipelineTriggerChartRecords() []*PipelineTriggerChartRecord {
	if x != nil {
		return x.PipelineTriggerChartRecords
	}
	return nil
}

// CreditConsumptionChartRecord represents a timeline of Instill Credit
// consumption. It contains a collection of (timestamp, amount) pairs that
// represent the total credit consumption in a given time bucket.
type CreditConsumptionChartRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Credit owner ID, e.g. `users/chef-wombat`.
	CreditOwner string `protobuf:"bytes,1,opt,name=credit_owner,json=creditOwner,proto3" json:"credit_owner,omitempty"`
	// Time buckets.
	TimeBuckets []*timestamppb.Timestamp `protobuf:"bytes,2,rep,name=time_buckets,json=timeBuckets,proto3" json:"time_buckets,omitempty"`
	// Total credit consumed in each time bucket.
	Amount []float32 `protobuf:"fixed32,3,rep,packed,name=amount,proto3" json:"amount,omitempty"`
	// Credit consumption source (e.g. "pipeline", "model").
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *CreditConsumptionChartRecord) Reset() {
	*x = CreditConsumptionChartRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditConsumptionChartRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditConsumptionChartRecord) ProtoMessage() {}

func (x *CreditConsumptionChartRecord) ProtoReflect() protoreflect.Message {
	mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditConsumptionChartRecord.ProtoReflect.Descriptor instead.
func (*CreditConsumptionChartRecord) Descriptor() ([]byte, []int) {
	return file_core_mgmt_v1beta_metric_proto_rawDescGZIP(), []int{9}
}

func (x *CreditConsumptionChartRecord) GetCreditOwner() string {
	if x != nil {
		return x.CreditOwner
	}
	return ""
}

func (x *CreditConsumptionChartRecord) GetTimeBuckets() []*timestamppb.Timestamp {
	if x != nil {
		return x.TimeBuckets
	}
	return nil
}

func (x *CreditConsumptionChartRecord) GetAmount() []float32 {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *CreditConsumptionChartRecord) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

// ListCreditConsumptionChartRecordsRequest represents a request to list credit
// consumption chart records for a given owner, grouped by time buckets and
// consumption sources.
type ListCreditConsumptionChartRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user or organization to which the credit belongs.
	// Format: `{[users|organizations]}/{id}`.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// Aggregation window. The value is a positive duration string, i.e. a
	// sequence of decimal numbers, each with optional fraction and a unit
	// suffix, such as "300ms", "1.5h" or "2h45m".
	// The minimum (and default) window is 1h.
	AggregationWindow *string `protobuf:"bytes,2,opt,name=aggregation_window,json=aggregationWindow,proto3,oneof" json:"aggregation_window,omitempty"`
	// Beginning of the time range from which the records will be fetched.
	// The default value is the beginning of the current day, in UTC.
	Start *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start,proto3,oneof" json:"start,omitempty"`
	// End of the time range from which the records will be fetched.
	// The default value is the current timestamp.
	Stop *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=stop,proto3,oneof" json:"stop,omitempty"`
}

func (x *ListCreditConsumptionChartRecordsRequest) Reset() {
	*x = ListCreditConsumptionChartRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCreditConsumptionChartRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCreditConsumptionChartRecordsRequest) ProtoMessage() {}

func (x *ListCreditConsumptionChartRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCreditConsumptionChartRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListCreditConsumptionChartRecordsRequest) Descriptor() ([]byte, []int) {
	return file_core_mgmt_v1beta_metric_proto_rawDescGZIP(), []int{10}
}

func (x *ListCreditConsumptionChartRecordsRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ListCreditConsumptionChartRecordsRequest) GetAggregationWindow() string {
	if x != nil && x.AggregationWindow != nil {
		return *x.AggregationWindow
	}
	return ""
}

func (x *ListCreditConsumptionChartRecordsRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListCreditConsumptionChartRecordsRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

// ListCreditConsumptionChartRecordsResponse contains a list of credit consumption
// chart records.
type ListCreditConsumptionChartRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Credit consumption timelines, aggregated by source.
	CreditConsumptionChartRecords []*CreditConsumptionChartRecord `protobuf:"bytes,1,rep,name=credit_consumption_chart_records,json=creditConsumptionChartRecords,proto3" json:"credit_consumption_chart_records,omitempty"`
}

func (x *ListCreditConsumptionChartRecordsResponse) Reset() {
	*x = ListCreditConsumptionChartRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCreditConsumptionChartRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCreditConsumptionChartRecordsResponse) ProtoMessage() {}

func (x *ListCreditConsumptionChartRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_mgmt_v1beta_metric_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCreditConsumptionChartRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListCreditConsumptionChartRecordsResponse) Descriptor() ([]byte, []int) {
	return file_core_mgmt_v1beta_metric_proto_rawDescGZIP(), []int{11}
}

func (x *ListCreditConsumptionChartRecordsResponse) GetCreditConsumptionChartRecords() []*CreditConsumptionChartRecord {
	if x != nil {
		return x.CreditConsumptionChartRecords
	}
	return nil
}

var File_core_mgmt_v1beta_metric_proto protoreflect.FileDescriptor

var file_core_mgmt_v1beta_metric_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x03, 0x0a, 0x15, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a,
	0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x69, 0x64,
	0x12, 0x39, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x15, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x14, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x55, 0x69, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x1a, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x17, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x15, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x15, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x65, 0x64,
	0x12, 0x33, 0x0a, 0x13, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x11, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x14, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x69, 0x64, 0x22, 0xe7, 0x03, 0x0a,
	0x1a, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x39, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d,
	0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x37, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x02,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x13, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x14, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x12, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x55, 0x69, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x01, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x02, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xce, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x18, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x16, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x48, 0x02, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xe3, 0x01, 0x0a,
	0x27, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x1e, 0x70, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1b,
	0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x01, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x9c, 0x01, 0x0a, 0x27, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x1e, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1b, 0x70, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x02, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x8f, 0x02, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x04,
	0x73, 0x74, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x6f,
	0x70, 0x22, 0xaa, 0x01, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x77, 0x0a, 0x20, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x1d, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x2a, 0x3b,
	0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x41, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x2a, 0x4a, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x02, 0x42, 0xc4, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x42, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x69, 0x6c, 0x6c, 0x2d, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2d,
	0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x3b, 0x6d, 0x67, 0x6d, 0x74, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0xa2, 0x02,
	0x03, 0x43, 0x4d, 0x58, 0xaa, 0x02, 0x10, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x67, 0x6d, 0x74,
	0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0xca, 0x02, 0x10, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x4d,
	0x67, 0x6d, 0x74, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0xe2, 0x02, 0x1c, 0x43, 0x6f, 0x72,
	0x65, 0x5c, 0x4d, 0x67, 0x6d, 0x74, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x43, 0x6f, 0x72, 0x65,
	0x3a, 0x3a, 0x4d, 0x67, 0x6d, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_mgmt_v1beta_metric_proto_rawDescOnce sync.Once
	file_core_mgmt_v1beta_metric_proto_rawDescData = file_core_mgmt_v1beta_metric_proto_rawDesc
)

func file_core_mgmt_v1beta_metric_proto_rawDescGZIP() []byte {
	file_core_mgmt_v1beta_metric_proto_rawDescOnce.Do(func() {
		file_core_mgmt_v1beta_metric_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_mgmt_v1beta_metric_proto_rawDescData)
	})
	return file_core_mgmt_v1beta_metric_proto_rawDescData
}

var file_core_mgmt_v1beta_metric_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_core_mgmt_v1beta_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_core_mgmt_v1beta_metric_proto_goTypes = []interface{}{
	(Mode)(0),                                         // 0: core.mgmt.v1beta.Mode
	(Status)(0),                                       // 1: core.mgmt.v1beta.Status
	(*PipelineTriggerRecord)(nil),                     // 2: core.mgmt.v1beta.PipelineTriggerRecord
	(*PipelineTriggerTableRecord)(nil),                // 3: core.mgmt.v1beta.PipelineTriggerTableRecord
	(*PipelineTriggerChartRecord)(nil),                // 4: core.mgmt.v1beta.PipelineTriggerChartRecord
	(*ListPipelineTriggerRecordsRequest)(nil),         // 5: core.mgmt.v1beta.ListPipelineTriggerRecordsRequest
	(*ListPipelineTriggerRecordsResponse)(nil),        // 6: core.mgmt.v1beta.ListPipelineTriggerRecordsResponse
	(*ListPipelineTriggerTableRecordsRequest)(nil),    // 7: core.mgmt.v1beta.ListPipelineTriggerTableRecordsRequest
	(*ListPipelineTriggerTableRecordsResponse)(nil),   // 8: core.mgmt.v1beta.ListPipelineTriggerTableRecordsResponse
	(*ListPipelineTriggerChartRecordsRequest)(nil),    // 9: core.mgmt.v1beta.ListPipelineTriggerChartRecordsRequest
	(*ListPipelineTriggerChartRecordsResponse)(nil),   // 10: core.mgmt.v1beta.ListPipelineTriggerChartRecordsResponse
	(*CreditConsumptionChartRecord)(nil),              // 11: core.mgmt.v1beta.CreditConsumptionChartRecord
	(*ListCreditConsumptionChartRecordsRequest)(nil),  // 12: core.mgmt.v1beta.ListCreditConsumptionChartRecordsRequest
	(*ListCreditConsumptionChartRecordsResponse)(nil), // 13: core.mgmt.v1beta.ListCreditConsumptionChartRecordsResponse
	(*timestamppb.Timestamp)(nil),                     // 14: google.protobuf.Timestamp
}
var file_core_mgmt_v1beta_metric_proto_depIdxs = []int32{
	14, // 0: core.mgmt.v1beta.PipelineTriggerRecord.trigger_time:type_name -> google.protobuf.Timestamp
	0,  // 1: core.mgmt.v1beta.PipelineTriggerRecord.trigger_mode:type_name -> core.mgmt.v1beta.Mode
	1,  // 2: core.mgmt.v1beta.PipelineTriggerRecord.status:type_name -> core.mgmt.v1beta.Status
	0,  // 3: core.mgmt.v1beta.PipelineTriggerChartRecord.trigger_mode:type_name -> core.mgmt.v1beta.Mode
	1,  // 4: core.mgmt.v1beta.PipelineTriggerChartRecord.status:type_name -> core.mgmt.v1beta.Status
	14, // 5: core.mgmt.v1beta.PipelineTriggerChartRecord.time_buckets:type_name -> google.protobuf.Timestamp
	2,  // 6: core.mgmt.v1beta.ListPipelineTriggerRecordsResponse.pipeline_trigger_records:type_name -> core.mgmt.v1beta.PipelineTriggerRecord
	3,  // 7: core.mgmt.v1beta.ListPipelineTriggerTableRecordsResponse.pipeline_trigger_table_records:type_name -> core.mgmt.v1beta.PipelineTriggerTableRecord
	4,  // 8: core.mgmt.v1beta.ListPipelineTriggerChartRecordsResponse.pipeline_trigger_chart_records:type_name -> core.mgmt.v1beta.PipelineTriggerChartRecord
	14, // 9: core.mgmt.v1beta.CreditConsumptionChartRecord.time_buckets:type_name -> google.protobuf.Timestamp
	14, // 10: core.mgmt.v1beta.ListCreditConsumptionChartRecordsRequest.start:type_name -> google.protobuf.Timestamp
	14, // 11: core.mgmt.v1beta.ListCreditConsumptionChartRecordsRequest.stop:type_name -> google.protobuf.Timestamp
	11, // 12: core.mgmt.v1beta.ListCreditConsumptionChartRecordsResponse.credit_consumption_chart_records:type_name -> core.mgmt.v1beta.CreditConsumptionChartRecord
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_core_mgmt_v1beta_metric_proto_init() }
func file_core_mgmt_v1beta_metric_proto_init() {
	if File_core_mgmt_v1beta_metric_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_core_mgmt_v1beta_metric_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTriggerRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_mgmt_v1beta_metric_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTriggerTableRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_mgmt_v1beta_metric_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineTriggerChartRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_mgmt_v1beta_metric_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineTriggerRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_mgmt_v1beta_metric_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineTriggerRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_mgmt_v1beta_metric_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineTriggerTableRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_mgmt_v1beta_metric_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineTriggerTableRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_mgmt_v1beta_metric_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineTriggerChartRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_mgmt_v1beta_metric_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPipelineTriggerChartRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_mgmt_v1beta_metric_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditConsumptionChartRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_mgmt_v1beta_metric_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCreditConsumptionChartRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_mgmt_v1beta_metric_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCreditConsumptionChartRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_core_mgmt_v1beta_metric_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_core_mgmt_v1beta_metric_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_core_mgmt_v1beta_metric_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_core_mgmt_v1beta_metric_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_mgmt_v1beta_metric_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_core_mgmt_v1beta_metric_proto_goTypes,
		DependencyIndexes: file_core_mgmt_v1beta_metric_proto_depIdxs,
		EnumInfos:         file_core_mgmt_v1beta_metric_proto_enumTypes,
		MessageInfos:      file_core_mgmt_v1beta_metric_proto_msgTypes,
	}.Build()
	File_core_mgmt_v1beta_metric_proto = out.File
	file_core_mgmt_v1beta_metric_proto_rawDesc = nil
	file_core_mgmt_v1beta_metric_proto_goTypes = nil
	file_core_mgmt_v1beta_metric_proto_depIdxs = nil
}
