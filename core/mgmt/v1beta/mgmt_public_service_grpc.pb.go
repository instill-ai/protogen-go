// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: core/mgmt/v1beta/mgmt_public_service.proto

package mgmtv1beta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MgmtPublicService_Liveness_FullMethodName                          = "/core.mgmt.v1beta.MgmtPublicService/Liveness"
	MgmtPublicService_Readiness_FullMethodName                         = "/core.mgmt.v1beta.MgmtPublicService/Readiness"
	MgmtPublicService_GetAuthenticatedUser_FullMethodName              = "/core.mgmt.v1beta.MgmtPublicService/GetAuthenticatedUser"
	MgmtPublicService_PatchAuthenticatedUser_FullMethodName            = "/core.mgmt.v1beta.MgmtPublicService/PatchAuthenticatedUser"
	MgmtPublicService_ListUsers_FullMethodName                         = "/core.mgmt.v1beta.MgmtPublicService/ListUsers"
	MgmtPublicService_GetUser_FullMethodName                           = "/core.mgmt.v1beta.MgmtPublicService/GetUser"
	MgmtPublicService_CreateOrganization_FullMethodName                = "/core.mgmt.v1beta.MgmtPublicService/CreateOrganization"
	MgmtPublicService_ListOrganizations_FullMethodName                 = "/core.mgmt.v1beta.MgmtPublicService/ListOrganizations"
	MgmtPublicService_GetOrganization_FullMethodName                   = "/core.mgmt.v1beta.MgmtPublicService/GetOrganization"
	MgmtPublicService_UpdateOrganization_FullMethodName                = "/core.mgmt.v1beta.MgmtPublicService/UpdateOrganization"
	MgmtPublicService_DeleteOrganization_FullMethodName                = "/core.mgmt.v1beta.MgmtPublicService/DeleteOrganization"
	MgmtPublicService_ListUserMemberships_FullMethodName               = "/core.mgmt.v1beta.MgmtPublicService/ListUserMemberships"
	MgmtPublicService_GetUserMembership_FullMethodName                 = "/core.mgmt.v1beta.MgmtPublicService/GetUserMembership"
	MgmtPublicService_UpdateUserMembership_FullMethodName              = "/core.mgmt.v1beta.MgmtPublicService/UpdateUserMembership"
	MgmtPublicService_DeleteUserMembership_FullMethodName              = "/core.mgmt.v1beta.MgmtPublicService/DeleteUserMembership"
	MgmtPublicService_ListOrganizationMemberships_FullMethodName       = "/core.mgmt.v1beta.MgmtPublicService/ListOrganizationMemberships"
	MgmtPublicService_GetOrganizationMembership_FullMethodName         = "/core.mgmt.v1beta.MgmtPublicService/GetOrganizationMembership"
	MgmtPublicService_UpdateOrganizationMembership_FullMethodName      = "/core.mgmt.v1beta.MgmtPublicService/UpdateOrganizationMembership"
	MgmtPublicService_DeleteOrganizationMembership_FullMethodName      = "/core.mgmt.v1beta.MgmtPublicService/DeleteOrganizationMembership"
	MgmtPublicService_InviteOrganizationMembers_FullMethodName         = "/core.mgmt.v1beta.MgmtPublicService/InviteOrganizationMembers"
	MgmtPublicService_CreateToken_FullMethodName                       = "/core.mgmt.v1beta.MgmtPublicService/CreateToken"
	MgmtPublicService_ListTokens_FullMethodName                        = "/core.mgmt.v1beta.MgmtPublicService/ListTokens"
	MgmtPublicService_GetToken_FullMethodName                          = "/core.mgmt.v1beta.MgmtPublicService/GetToken"
	MgmtPublicService_DeleteToken_FullMethodName                       = "/core.mgmt.v1beta.MgmtPublicService/DeleteToken"
	MgmtPublicService_ValidateToken_FullMethodName                     = "/core.mgmt.v1beta.MgmtPublicService/ValidateToken"
	MgmtPublicService_CheckNamespace_FullMethodName                    = "/core.mgmt.v1beta.MgmtPublicService/CheckNamespace"
	MgmtPublicService_GetPipelineTriggerCount_FullMethodName           = "/core.mgmt.v1beta.MgmtPublicService/GetPipelineTriggerCount"
	MgmtPublicService_GetModelTriggerCount_FullMethodName              = "/core.mgmt.v1beta.MgmtPublicService/GetModelTriggerCount"
	MgmtPublicService_ListPipelineTriggerChartRecords_FullMethodName   = "/core.mgmt.v1beta.MgmtPublicService/ListPipelineTriggerChartRecords"
	MgmtPublicService_ListModelTriggerChartRecords_FullMethodName      = "/core.mgmt.v1beta.MgmtPublicService/ListModelTriggerChartRecords"
	MgmtPublicService_AuthTokenIssuer_FullMethodName                   = "/core.mgmt.v1beta.MgmtPublicService/AuthTokenIssuer"
	MgmtPublicService_AuthLogin_FullMethodName                         = "/core.mgmt.v1beta.MgmtPublicService/AuthLogin"
	MgmtPublicService_AuthLogout_FullMethodName                        = "/core.mgmt.v1beta.MgmtPublicService/AuthLogout"
	MgmtPublicService_AuthChangePassword_FullMethodName                = "/core.mgmt.v1beta.MgmtPublicService/AuthChangePassword"
	MgmtPublicService_AuthValidateAccessToken_FullMethodName           = "/core.mgmt.v1beta.MgmtPublicService/AuthValidateAccessToken"
	MgmtPublicService_ListPipelineTriggerRecords_FullMethodName        = "/core.mgmt.v1beta.MgmtPublicService/ListPipelineTriggerRecords"
	MgmtPublicService_ListPipelineTriggerTableRecords_FullMethodName   = "/core.mgmt.v1beta.MgmtPublicService/ListPipelineTriggerTableRecords"
	MgmtPublicService_ListPipelineTriggerChartRecordsV0_FullMethodName = "/core.mgmt.v1beta.MgmtPublicService/ListPipelineTriggerChartRecordsV0"
)

// MgmtPublicServiceClient is the client API for MgmtPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// # MGMT
//
// MgmtPublicService exposes the public Core endpoints that allow clients to
// manage user resources.
type MgmtPublicServiceClient interface {
	// Check if the MGMT server is alive
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Check if the pipeline server is ready
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// Get the authenticated user
	//
	// Returns the details of the authenticated user.
	GetAuthenticatedUser(ctx context.Context, in *GetAuthenticatedUserRequest, opts ...grpc.CallOption) (*GetAuthenticatedUserResponse, error)
	// Update the authenticated user
	//
	// Updates the information of the authenticated user.
	//
	// In REST requests, only the supplied user fields will be taken into account
	// when updating the resource.
	PatchAuthenticatedUser(ctx context.Context, in *PatchAuthenticatedUserRequest, opts ...grpc.CallOption) (*PatchAuthenticatedUserResponse, error)
	// List users
	//
	// Returns a paginated list of users.
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Get a user
	//
	// Returns the details of a user by their ID.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Create an organization
	//
	// Creates an organization.
	CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error)
	// List organizations
	//
	// Returns a paginated list of organizations.
	ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	// Get an organization
	//
	// Returns the organization details by its ID.
	GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error)
	// Update an organization
	//
	// Accesses and updates an organization by ID.
	//
	// In REST requests, only the supplied organization fields will be taken into
	// account when updating the resource.
	UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error)
	// Delete an organization
	//
	// Accesses and deletes an organization by ID.
	DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error)
	// List user memberships
	//
	// Returns the memberships of a user.
	ListUserMemberships(ctx context.Context, in *ListUserMembershipsRequest, opts ...grpc.CallOption) (*ListUserMembershipsResponse, error)
	// Get a user membership
	//
	// Returns the details of the relationship between a user and an
	// organization. The authenticated must match the membership parent.
	GetUserMembership(ctx context.Context, in *GetUserMembershipRequest, opts ...grpc.CallOption) (*GetUserMembershipResponse, error)
	// Update a user membership
	//
	// Accesses and updates a user membership by parent and membership IDs.
	UpdateUserMembership(ctx context.Context, in *UpdateUserMembershipRequest, opts ...grpc.CallOption) (*UpdateUserMembershipResponse, error)
	// Delete a user membership
	//
	// Accesses and deletes a user membership by parent and membership IDs.
	DeleteUserMembership(ctx context.Context, in *DeleteUserMembershipRequest, opts ...grpc.CallOption) (*DeleteUserMembershipResponse, error)
	// List organization memberships
	//
	// Returns a paginated list of the user memberships in an organization.
	ListOrganizationMemberships(ctx context.Context, in *ListOrganizationMembershipsRequest, opts ...grpc.CallOption) (*ListOrganizationMembershipsResponse, error)
	// Get an organization membership
	//
	// Returns the details of a user membership within an organization.
	GetOrganizationMembership(ctx context.Context, in *GetOrganizationMembershipRequest, opts ...grpc.CallOption) (*GetOrganizationMembershipResponse, error)
	// Update an organization membership
	//
	// Updates a user membership within an organization.
	UpdateOrganizationMembership(ctx context.Context, in *UpdateOrganizationMembershipRequest, opts ...grpc.CallOption) (*UpdateOrganizationMembershipResponse, error)
	// Delete an organization membership
	//
	// Deletes a user membership within an organization.
	DeleteOrganizationMembership(ctx context.Context, in *DeleteOrganizationMembershipRequest, opts ...grpc.CallOption) (*DeleteOrganizationMembershipResponse, error)
	// Invite members to an organization
	//
	// Invites members to an organization.
	InviteOrganizationMembers(ctx context.Context, in *InviteOrganizationMembersRequest, opts ...grpc.CallOption) (*InviteOrganizationMembersResponse, error)
	// Create an API token
	//
	// Creates an API token for the authenticated user.
	CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error)
	// List API tokens
	//
	// Returns a paginated list of the API tokens of the authenticated user.
	ListTokens(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*ListTokensResponse, error)
	// Get an API token
	//
	// Returns the details of an API token.
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	// Delete an API token
	//
	// Deletes an API token.
	DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenResponse, error)
	// Validate an API token
	//
	// Validates an API token.
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error)
	// Check if a namespace is in use
	//
	// Returns the availability of a namespace or, alternatively, the type of
	// resource that is using it.
	CheckNamespace(ctx context.Context, in *CheckNamespaceRequest, opts ...grpc.CallOption) (*CheckNamespaceResponse, error)
	// Get pipeline trigger count
	//
	// Returns the pipeline trigger count of a given requester within a timespan.
	// Results are grouped by trigger status.
	GetPipelineTriggerCount(ctx context.Context, in *GetPipelineTriggerCountRequest, opts ...grpc.CallOption) (*GetPipelineTriggerCountResponse, error)
	// Get model trigger count
	//
	// Returns the model trigger count of a given requester within a timespan.
	// Results are grouped by trigger status.
	GetModelTriggerCount(ctx context.Context, in *GetModelTriggerCountRequest, opts ...grpc.CallOption) (*GetModelTriggerCountResponse, error)
	// List pipeline trigger time charts
	//
	// Returns a timeline of pipeline trigger counts for a given requester. The
	// response will contain one set of records (datapoints), representing the
	// amount of triggers in a time bucket.
	ListPipelineTriggerChartRecords(ctx context.Context, in *ListPipelineTriggerChartRecordsRequest, opts ...grpc.CallOption) (*ListPipelineTriggerChartRecordsResponse, error)
	// List model trigger time charts
	//
	// Returns a timeline of model trigger counts for a given requester. The
	// response will contain one set of records (datapoints), representing the
	// amount of triggers in a time bucket.
	ListModelTriggerChartRecords(ctx context.Context, in *ListModelTriggerChartRecordsRequest, opts ...grpc.CallOption) (*ListModelTriggerChartRecordsResponse, error)
	// Get Auth token issuer
	//
	// Returns the auth token issuer details. This operation requires admin
	// permissions.
	AuthTokenIssuer(ctx context.Context, in *AuthTokenIssuerRequest, opts ...grpc.CallOption) (*AuthTokenIssuerResponse, error)
	// Log in a user
	//
	// Authenticates a user and returns an access token.
	AuthLogin(ctx context.Context, in *AuthLoginRequest, opts ...grpc.CallOption) (*AuthLoginResponse, error)
	// Log out a user
	//
	// Logs out an authenticated user.
	AuthLogout(ctx context.Context, in *AuthLogoutRequest, opts ...grpc.CallOption) (*AuthLogoutResponse, error)
	// Change password
	//
	// Updates the password of a user.
	AuthChangePassword(ctx context.Context, in *AuthChangePasswordRequest, opts ...grpc.CallOption) (*AuthChangePasswordResponse, error)
	// Validate an access token
	//
	// Checks the validity of an access token.
	AuthValidateAccessToken(ctx context.Context, in *AuthValidateAccessTokenRequest, opts ...grpc.CallOption) (*AuthValidateAccessTokenResponse, error)
	// Deprecated: Do not use.
	// List pipeline triggers
	//
	// Returns a paginated list of pipeline executions.
	// NOTE: This method is deprecated and will be retired soon.
	ListPipelineTriggerRecords(ctx context.Context, in *ListPipelineTriggerRecordsRequest, opts ...grpc.CallOption) (*ListPipelineTriggerRecordsResponse, error)
	// Deprecated: Do not use.
	// List pipeline trigger metrics
	//
	// Returns a paginated list of pipeline executions aggregated by pipeline ID.
	// NOTE: This method is deprecated and will be retired soon.
	ListPipelineTriggerTableRecords(ctx context.Context, in *ListPipelineTriggerTableRecordsRequest, opts ...grpc.CallOption) (*ListPipelineTriggerTableRecordsResponse, error)
	// Deprecated: Do not use.
	// List pipeline trigger time charts
	//
	// Returns a timeline of pipeline trigger counts for the pipelines of a given
	// owner.
	// NOTE: This method will soon be retired and replaced by
	// ListPipelineTriggerChartRecords.
	ListPipelineTriggerChartRecordsV0(ctx context.Context, in *ListPipelineTriggerChartRecordsV0Request, opts ...grpc.CallOption) (*ListPipelineTriggerChartRecordsV0Response, error)
}

type mgmtPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMgmtPublicServiceClient(cc grpc.ClientConnInterface) MgmtPublicServiceClient {
	return &mgmtPublicServiceClient{cc}
}

func (c *mgmtPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_Liveness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_Readiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) GetAuthenticatedUser(ctx context.Context, in *GetAuthenticatedUserRequest, opts ...grpc.CallOption) (*GetAuthenticatedUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAuthenticatedUserResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_GetAuthenticatedUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) PatchAuthenticatedUser(ctx context.Context, in *PatchAuthenticatedUserRequest, opts ...grpc.CallOption) (*PatchAuthenticatedUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatchAuthenticatedUserResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_PatchAuthenticatedUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) CreateOrganization(ctx context.Context, in *CreateOrganizationRequest, opts ...grpc.CallOption) (*CreateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrganizationResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_CreateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListOrganizations(ctx context.Context, in *ListOrganizationsRequest, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListOrganizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) GetOrganization(ctx context.Context, in *GetOrganizationRequest, opts ...grpc.CallOption) (*GetOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_GetOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) UpdateOrganization(ctx context.Context, in *UpdateOrganizationRequest, opts ...grpc.CallOption) (*UpdateOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_UpdateOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) DeleteOrganization(ctx context.Context, in *DeleteOrganizationRequest, opts ...grpc.CallOption) (*DeleteOrganizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_DeleteOrganization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListUserMemberships(ctx context.Context, in *ListUserMembershipsRequest, opts ...grpc.CallOption) (*ListUserMembershipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserMembershipsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListUserMemberships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) GetUserMembership(ctx context.Context, in *GetUserMembershipRequest, opts ...grpc.CallOption) (*GetUserMembershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserMembershipResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_GetUserMembership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) UpdateUserMembership(ctx context.Context, in *UpdateUserMembershipRequest, opts ...grpc.CallOption) (*UpdateUserMembershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserMembershipResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_UpdateUserMembership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) DeleteUserMembership(ctx context.Context, in *DeleteUserMembershipRequest, opts ...grpc.CallOption) (*DeleteUserMembershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserMembershipResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_DeleteUserMembership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListOrganizationMemberships(ctx context.Context, in *ListOrganizationMembershipsRequest, opts ...grpc.CallOption) (*ListOrganizationMembershipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrganizationMembershipsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListOrganizationMemberships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) GetOrganizationMembership(ctx context.Context, in *GetOrganizationMembershipRequest, opts ...grpc.CallOption) (*GetOrganizationMembershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrganizationMembershipResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_GetOrganizationMembership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) UpdateOrganizationMembership(ctx context.Context, in *UpdateOrganizationMembershipRequest, opts ...grpc.CallOption) (*UpdateOrganizationMembershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrganizationMembershipResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_UpdateOrganizationMembership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) DeleteOrganizationMembership(ctx context.Context, in *DeleteOrganizationMembershipRequest, opts ...grpc.CallOption) (*DeleteOrganizationMembershipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOrganizationMembershipResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_DeleteOrganizationMembership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) InviteOrganizationMembers(ctx context.Context, in *InviteOrganizationMembersRequest, opts ...grpc.CallOption) (*InviteOrganizationMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteOrganizationMembersResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_InviteOrganizationMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTokenResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_CreateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListTokens(ctx context.Context, in *ListTokensRequest, opts ...grpc.CallOption) (*ListTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTokensResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_GetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) DeleteToken(ctx context.Context, in *DeleteTokenRequest, opts ...grpc.CallOption) (*DeleteTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTokenResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_DeleteToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...grpc.CallOption) (*ValidateTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateTokenResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) CheckNamespace(ctx context.Context, in *CheckNamespaceRequest, opts ...grpc.CallOption) (*CheckNamespaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckNamespaceResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_CheckNamespace_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) GetPipelineTriggerCount(ctx context.Context, in *GetPipelineTriggerCountRequest, opts ...grpc.CallOption) (*GetPipelineTriggerCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPipelineTriggerCountResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_GetPipelineTriggerCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) GetModelTriggerCount(ctx context.Context, in *GetModelTriggerCountRequest, opts ...grpc.CallOption) (*GetModelTriggerCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelTriggerCountResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_GetModelTriggerCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListPipelineTriggerChartRecords(ctx context.Context, in *ListPipelineTriggerChartRecordsRequest, opts ...grpc.CallOption) (*ListPipelineTriggerChartRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPipelineTriggerChartRecordsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListPipelineTriggerChartRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) ListModelTriggerChartRecords(ctx context.Context, in *ListModelTriggerChartRecordsRequest, opts ...grpc.CallOption) (*ListModelTriggerChartRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelTriggerChartRecordsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListModelTriggerChartRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) AuthTokenIssuer(ctx context.Context, in *AuthTokenIssuerRequest, opts ...grpc.CallOption) (*AuthTokenIssuerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthTokenIssuerResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_AuthTokenIssuer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) AuthLogin(ctx context.Context, in *AuthLoginRequest, opts ...grpc.CallOption) (*AuthLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthLoginResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_AuthLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) AuthLogout(ctx context.Context, in *AuthLogoutRequest, opts ...grpc.CallOption) (*AuthLogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthLogoutResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_AuthLogout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) AuthChangePassword(ctx context.Context, in *AuthChangePasswordRequest, opts ...grpc.CallOption) (*AuthChangePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthChangePasswordResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_AuthChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mgmtPublicServiceClient) AuthValidateAccessToken(ctx context.Context, in *AuthValidateAccessTokenRequest, opts ...grpc.CallOption) (*AuthValidateAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthValidateAccessTokenResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_AuthValidateAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *mgmtPublicServiceClient) ListPipelineTriggerRecords(ctx context.Context, in *ListPipelineTriggerRecordsRequest, opts ...grpc.CallOption) (*ListPipelineTriggerRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPipelineTriggerRecordsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListPipelineTriggerRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *mgmtPublicServiceClient) ListPipelineTriggerTableRecords(ctx context.Context, in *ListPipelineTriggerTableRecordsRequest, opts ...grpc.CallOption) (*ListPipelineTriggerTableRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPipelineTriggerTableRecordsResponse)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListPipelineTriggerTableRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *mgmtPublicServiceClient) ListPipelineTriggerChartRecordsV0(ctx context.Context, in *ListPipelineTriggerChartRecordsV0Request, opts ...grpc.CallOption) (*ListPipelineTriggerChartRecordsV0Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPipelineTriggerChartRecordsV0Response)
	err := c.cc.Invoke(ctx, MgmtPublicService_ListPipelineTriggerChartRecordsV0_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MgmtPublicServiceServer is the server API for MgmtPublicService service.
// All implementations should embed UnimplementedMgmtPublicServiceServer
// for forward compatibility.
//
// # MGMT
//
// MgmtPublicService exposes the public Core endpoints that allow clients to
// manage user resources.
type MgmtPublicServiceServer interface {
	// Check if the MGMT server is alive
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Check if the pipeline server is ready
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// Get the authenticated user
	//
	// Returns the details of the authenticated user.
	GetAuthenticatedUser(context.Context, *GetAuthenticatedUserRequest) (*GetAuthenticatedUserResponse, error)
	// Update the authenticated user
	//
	// Updates the information of the authenticated user.
	//
	// In REST requests, only the supplied user fields will be taken into account
	// when updating the resource.
	PatchAuthenticatedUser(context.Context, *PatchAuthenticatedUserRequest) (*PatchAuthenticatedUserResponse, error)
	// List users
	//
	// Returns a paginated list of users.
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// Get a user
	//
	// Returns the details of a user by their ID.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Create an organization
	//
	// Creates an organization.
	CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error)
	// List organizations
	//
	// Returns a paginated list of organizations.
	ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error)
	// Get an organization
	//
	// Returns the organization details by its ID.
	GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error)
	// Update an organization
	//
	// Accesses and updates an organization by ID.
	//
	// In REST requests, only the supplied organization fields will be taken into
	// account when updating the resource.
	UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error)
	// Delete an organization
	//
	// Accesses and deletes an organization by ID.
	DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error)
	// List user memberships
	//
	// Returns the memberships of a user.
	ListUserMemberships(context.Context, *ListUserMembershipsRequest) (*ListUserMembershipsResponse, error)
	// Get a user membership
	//
	// Returns the details of the relationship between a user and an
	// organization. The authenticated must match the membership parent.
	GetUserMembership(context.Context, *GetUserMembershipRequest) (*GetUserMembershipResponse, error)
	// Update a user membership
	//
	// Accesses and updates a user membership by parent and membership IDs.
	UpdateUserMembership(context.Context, *UpdateUserMembershipRequest) (*UpdateUserMembershipResponse, error)
	// Delete a user membership
	//
	// Accesses and deletes a user membership by parent and membership IDs.
	DeleteUserMembership(context.Context, *DeleteUserMembershipRequest) (*DeleteUserMembershipResponse, error)
	// List organization memberships
	//
	// Returns a paginated list of the user memberships in an organization.
	ListOrganizationMemberships(context.Context, *ListOrganizationMembershipsRequest) (*ListOrganizationMembershipsResponse, error)
	// Get an organization membership
	//
	// Returns the details of a user membership within an organization.
	GetOrganizationMembership(context.Context, *GetOrganizationMembershipRequest) (*GetOrganizationMembershipResponse, error)
	// Update an organization membership
	//
	// Updates a user membership within an organization.
	UpdateOrganizationMembership(context.Context, *UpdateOrganizationMembershipRequest) (*UpdateOrganizationMembershipResponse, error)
	// Delete an organization membership
	//
	// Deletes a user membership within an organization.
	DeleteOrganizationMembership(context.Context, *DeleteOrganizationMembershipRequest) (*DeleteOrganizationMembershipResponse, error)
	// Invite members to an organization
	//
	// Invites members to an organization.
	InviteOrganizationMembers(context.Context, *InviteOrganizationMembersRequest) (*InviteOrganizationMembersResponse, error)
	// Create an API token
	//
	// Creates an API token for the authenticated user.
	CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error)
	// List API tokens
	//
	// Returns a paginated list of the API tokens of the authenticated user.
	ListTokens(context.Context, *ListTokensRequest) (*ListTokensResponse, error)
	// Get an API token
	//
	// Returns the details of an API token.
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	// Delete an API token
	//
	// Deletes an API token.
	DeleteToken(context.Context, *DeleteTokenRequest) (*DeleteTokenResponse, error)
	// Validate an API token
	//
	// Validates an API token.
	ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error)
	// Check if a namespace is in use
	//
	// Returns the availability of a namespace or, alternatively, the type of
	// resource that is using it.
	CheckNamespace(context.Context, *CheckNamespaceRequest) (*CheckNamespaceResponse, error)
	// Get pipeline trigger count
	//
	// Returns the pipeline trigger count of a given requester within a timespan.
	// Results are grouped by trigger status.
	GetPipelineTriggerCount(context.Context, *GetPipelineTriggerCountRequest) (*GetPipelineTriggerCountResponse, error)
	// Get model trigger count
	//
	// Returns the model trigger count of a given requester within a timespan.
	// Results are grouped by trigger status.
	GetModelTriggerCount(context.Context, *GetModelTriggerCountRequest) (*GetModelTriggerCountResponse, error)
	// List pipeline trigger time charts
	//
	// Returns a timeline of pipeline trigger counts for a given requester. The
	// response will contain one set of records (datapoints), representing the
	// amount of triggers in a time bucket.
	ListPipelineTriggerChartRecords(context.Context, *ListPipelineTriggerChartRecordsRequest) (*ListPipelineTriggerChartRecordsResponse, error)
	// List model trigger time charts
	//
	// Returns a timeline of model trigger counts for a given requester. The
	// response will contain one set of records (datapoints), representing the
	// amount of triggers in a time bucket.
	ListModelTriggerChartRecords(context.Context, *ListModelTriggerChartRecordsRequest) (*ListModelTriggerChartRecordsResponse, error)
	// Get Auth token issuer
	//
	// Returns the auth token issuer details. This operation requires admin
	// permissions.
	AuthTokenIssuer(context.Context, *AuthTokenIssuerRequest) (*AuthTokenIssuerResponse, error)
	// Log in a user
	//
	// Authenticates a user and returns an access token.
	AuthLogin(context.Context, *AuthLoginRequest) (*AuthLoginResponse, error)
	// Log out a user
	//
	// Logs out an authenticated user.
	AuthLogout(context.Context, *AuthLogoutRequest) (*AuthLogoutResponse, error)
	// Change password
	//
	// Updates the password of a user.
	AuthChangePassword(context.Context, *AuthChangePasswordRequest) (*AuthChangePasswordResponse, error)
	// Validate an access token
	//
	// Checks the validity of an access token.
	AuthValidateAccessToken(context.Context, *AuthValidateAccessTokenRequest) (*AuthValidateAccessTokenResponse, error)
	// Deprecated: Do not use.
	// List pipeline triggers
	//
	// Returns a paginated list of pipeline executions.
	// NOTE: This method is deprecated and will be retired soon.
	ListPipelineTriggerRecords(context.Context, *ListPipelineTriggerRecordsRequest) (*ListPipelineTriggerRecordsResponse, error)
	// Deprecated: Do not use.
	// List pipeline trigger metrics
	//
	// Returns a paginated list of pipeline executions aggregated by pipeline ID.
	// NOTE: This method is deprecated and will be retired soon.
	ListPipelineTriggerTableRecords(context.Context, *ListPipelineTriggerTableRecordsRequest) (*ListPipelineTriggerTableRecordsResponse, error)
	// Deprecated: Do not use.
	// List pipeline trigger time charts
	//
	// Returns a timeline of pipeline trigger counts for the pipelines of a given
	// owner.
	// NOTE: This method will soon be retired and replaced by
	// ListPipelineTriggerChartRecords.
	ListPipelineTriggerChartRecordsV0(context.Context, *ListPipelineTriggerChartRecordsV0Request) (*ListPipelineTriggerChartRecordsV0Response, error)
}

// UnimplementedMgmtPublicServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMgmtPublicServiceServer struct{}

func (UnimplementedMgmtPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedMgmtPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedMgmtPublicServiceServer) GetAuthenticatedUser(context.Context, *GetAuthenticatedUserRequest) (*GetAuthenticatedUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthenticatedUser not implemented")
}
func (UnimplementedMgmtPublicServiceServer) PatchAuthenticatedUser(context.Context, *PatchAuthenticatedUserRequest) (*PatchAuthenticatedUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAuthenticatedUser not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedMgmtPublicServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedMgmtPublicServiceServer) CreateOrganization(context.Context, *CreateOrganizationRequest) (*CreateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListOrganizations(context.Context, *ListOrganizationsRequest) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (UnimplementedMgmtPublicServiceServer) GetOrganization(context.Context, *GetOrganizationRequest) (*GetOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedMgmtPublicServiceServer) UpdateOrganization(context.Context, *UpdateOrganizationRequest) (*UpdateOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (UnimplementedMgmtPublicServiceServer) DeleteOrganization(context.Context, *DeleteOrganizationRequest) (*DeleteOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListUserMemberships(context.Context, *ListUserMembershipsRequest) (*ListUserMembershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserMemberships not implemented")
}
func (UnimplementedMgmtPublicServiceServer) GetUserMembership(context.Context, *GetUserMembershipRequest) (*GetUserMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMembership not implemented")
}
func (UnimplementedMgmtPublicServiceServer) UpdateUserMembership(context.Context, *UpdateUserMembershipRequest) (*UpdateUserMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserMembership not implemented")
}
func (UnimplementedMgmtPublicServiceServer) DeleteUserMembership(context.Context, *DeleteUserMembershipRequest) (*DeleteUserMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserMembership not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListOrganizationMemberships(context.Context, *ListOrganizationMembershipsRequest) (*ListOrganizationMembershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationMemberships not implemented")
}
func (UnimplementedMgmtPublicServiceServer) GetOrganizationMembership(context.Context, *GetOrganizationMembershipRequest) (*GetOrganizationMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationMembership not implemented")
}
func (UnimplementedMgmtPublicServiceServer) UpdateOrganizationMembership(context.Context, *UpdateOrganizationMembershipRequest) (*UpdateOrganizationMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationMembership not implemented")
}
func (UnimplementedMgmtPublicServiceServer) DeleteOrganizationMembership(context.Context, *DeleteOrganizationMembershipRequest) (*DeleteOrganizationMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationMembership not implemented")
}
func (UnimplementedMgmtPublicServiceServer) InviteOrganizationMembers(context.Context, *InviteOrganizationMembersRequest) (*InviteOrganizationMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteOrganizationMembers not implemented")
}
func (UnimplementedMgmtPublicServiceServer) CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListTokens(context.Context, *ListTokensRequest) (*ListTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTokens not implemented")
}
func (UnimplementedMgmtPublicServiceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedMgmtPublicServiceServer) DeleteToken(context.Context, *DeleteTokenRequest) (*DeleteTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ValidateToken(context.Context, *ValidateTokenRequest) (*ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedMgmtPublicServiceServer) CheckNamespace(context.Context, *CheckNamespaceRequest) (*CheckNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNamespace not implemented")
}
func (UnimplementedMgmtPublicServiceServer) GetPipelineTriggerCount(context.Context, *GetPipelineTriggerCountRequest) (*GetPipelineTriggerCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineTriggerCount not implemented")
}
func (UnimplementedMgmtPublicServiceServer) GetModelTriggerCount(context.Context, *GetModelTriggerCountRequest) (*GetModelTriggerCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelTriggerCount not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListPipelineTriggerChartRecords(context.Context, *ListPipelineTriggerChartRecordsRequest) (*ListPipelineTriggerChartRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineTriggerChartRecords not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListModelTriggerChartRecords(context.Context, *ListModelTriggerChartRecordsRequest) (*ListModelTriggerChartRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModelTriggerChartRecords not implemented")
}
func (UnimplementedMgmtPublicServiceServer) AuthTokenIssuer(context.Context, *AuthTokenIssuerRequest) (*AuthTokenIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthTokenIssuer not implemented")
}
func (UnimplementedMgmtPublicServiceServer) AuthLogin(context.Context, *AuthLoginRequest) (*AuthLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogin not implemented")
}
func (UnimplementedMgmtPublicServiceServer) AuthLogout(context.Context, *AuthLogoutRequest) (*AuthLogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogout not implemented")
}
func (UnimplementedMgmtPublicServiceServer) AuthChangePassword(context.Context, *AuthChangePasswordRequest) (*AuthChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthChangePassword not implemented")
}
func (UnimplementedMgmtPublicServiceServer) AuthValidateAccessToken(context.Context, *AuthValidateAccessTokenRequest) (*AuthValidateAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthValidateAccessToken not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListPipelineTriggerRecords(context.Context, *ListPipelineTriggerRecordsRequest) (*ListPipelineTriggerRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineTriggerRecords not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListPipelineTriggerTableRecords(context.Context, *ListPipelineTriggerTableRecordsRequest) (*ListPipelineTriggerTableRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineTriggerTableRecords not implemented")
}
func (UnimplementedMgmtPublicServiceServer) ListPipelineTriggerChartRecordsV0(context.Context, *ListPipelineTriggerChartRecordsV0Request) (*ListPipelineTriggerChartRecordsV0Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipelineTriggerChartRecordsV0 not implemented")
}
func (UnimplementedMgmtPublicServiceServer) testEmbeddedByValue() {}

// UnsafeMgmtPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MgmtPublicServiceServer will
// result in compilation errors.
type UnsafeMgmtPublicServiceServer interface {
	mustEmbedUnimplementedMgmtPublicServiceServer()
}

func RegisterMgmtPublicServiceServer(s grpc.ServiceRegistrar, srv MgmtPublicServiceServer) {
	// If the following call pancis, it indicates UnimplementedMgmtPublicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MgmtPublicService_ServiceDesc, srv)
}

func _MgmtPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_GetAuthenticatedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthenticatedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).GetAuthenticatedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_GetAuthenticatedUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).GetAuthenticatedUser(ctx, req.(*GetAuthenticatedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_PatchAuthenticatedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAuthenticatedUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).PatchAuthenticatedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_PatchAuthenticatedUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).PatchAuthenticatedUser(ctx, req.(*PatchAuthenticatedUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).CreateOrganization(ctx, req.(*CreateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListOrganizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListOrganizations(ctx, req.(*ListOrganizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).GetOrganization(ctx, req.(*GetOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_UpdateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).UpdateOrganization(ctx, req.(*UpdateOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_DeleteOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).DeleteOrganization(ctx, req.(*DeleteOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListUserMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserMembershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListUserMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListUserMemberships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListUserMemberships(ctx, req.(*ListUserMembershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_GetUserMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).GetUserMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_GetUserMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).GetUserMembership(ctx, req.(*GetUserMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_UpdateUserMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).UpdateUserMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_UpdateUserMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).UpdateUserMembership(ctx, req.(*UpdateUserMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_DeleteUserMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).DeleteUserMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_DeleteUserMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).DeleteUserMembership(ctx, req.(*DeleteUserMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListOrganizationMemberships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationMembershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListOrganizationMemberships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListOrganizationMemberships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListOrganizationMemberships(ctx, req.(*ListOrganizationMembershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_GetOrganizationMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).GetOrganizationMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_GetOrganizationMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).GetOrganizationMembership(ctx, req.(*GetOrganizationMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_UpdateOrganizationMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrganizationMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).UpdateOrganizationMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_UpdateOrganizationMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).UpdateOrganizationMembership(ctx, req.(*UpdateOrganizationMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_DeleteOrganizationMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrganizationMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).DeleteOrganizationMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_DeleteOrganizationMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).DeleteOrganizationMembership(ctx, req.(*DeleteOrganizationMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_InviteOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteOrganizationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).InviteOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_InviteOrganizationMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).InviteOrganizationMembers(ctx, req.(*InviteOrganizationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).CreateToken(ctx, req.(*CreateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListTokens(ctx, req.(*ListTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_DeleteToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).DeleteToken(ctx, req.(*DeleteTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ValidateToken(ctx, req.(*ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_CheckNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).CheckNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_CheckNamespace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).CheckNamespace(ctx, req.(*CheckNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_GetPipelineTriggerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineTriggerCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).GetPipelineTriggerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_GetPipelineTriggerCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).GetPipelineTriggerCount(ctx, req.(*GetPipelineTriggerCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_GetModelTriggerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelTriggerCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).GetModelTriggerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_GetModelTriggerCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).GetModelTriggerCount(ctx, req.(*GetModelTriggerCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListPipelineTriggerChartRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineTriggerChartRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListPipelineTriggerChartRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListPipelineTriggerChartRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListPipelineTriggerChartRecords(ctx, req.(*ListPipelineTriggerChartRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListModelTriggerChartRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelTriggerChartRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListModelTriggerChartRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListModelTriggerChartRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListModelTriggerChartRecords(ctx, req.(*ListModelTriggerChartRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_AuthTokenIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthTokenIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).AuthTokenIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_AuthTokenIssuer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).AuthTokenIssuer(ctx, req.(*AuthTokenIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_AuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).AuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_AuthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).AuthLogin(ctx, req.(*AuthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_AuthLogout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthLogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).AuthLogout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_AuthLogout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).AuthLogout(ctx, req.(*AuthLogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_AuthChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).AuthChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_AuthChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).AuthChangePassword(ctx, req.(*AuthChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_AuthValidateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthValidateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).AuthValidateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_AuthValidateAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).AuthValidateAccessToken(ctx, req.(*AuthValidateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListPipelineTriggerRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineTriggerRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListPipelineTriggerRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListPipelineTriggerRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListPipelineTriggerRecords(ctx, req.(*ListPipelineTriggerRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListPipelineTriggerTableRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineTriggerTableRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListPipelineTriggerTableRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListPipelineTriggerTableRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListPipelineTriggerTableRecords(ctx, req.(*ListPipelineTriggerTableRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MgmtPublicService_ListPipelineTriggerChartRecordsV0_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipelineTriggerChartRecordsV0Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MgmtPublicServiceServer).ListPipelineTriggerChartRecordsV0(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MgmtPublicService_ListPipelineTriggerChartRecordsV0_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MgmtPublicServiceServer).ListPipelineTriggerChartRecordsV0(ctx, req.(*ListPipelineTriggerChartRecordsV0Request))
	}
	return interceptor(ctx, in, info, handler)
}

// MgmtPublicService_ServiceDesc is the grpc.ServiceDesc for MgmtPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MgmtPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.mgmt.v1beta.MgmtPublicService",
	HandlerType: (*MgmtPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _MgmtPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _MgmtPublicService_Readiness_Handler,
		},
		{
			MethodName: "GetAuthenticatedUser",
			Handler:    _MgmtPublicService_GetAuthenticatedUser_Handler,
		},
		{
			MethodName: "PatchAuthenticatedUser",
			Handler:    _MgmtPublicService_PatchAuthenticatedUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _MgmtPublicService_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _MgmtPublicService_GetUser_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _MgmtPublicService_CreateOrganization_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _MgmtPublicService_ListOrganizations_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _MgmtPublicService_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _MgmtPublicService_UpdateOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _MgmtPublicService_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListUserMemberships",
			Handler:    _MgmtPublicService_ListUserMemberships_Handler,
		},
		{
			MethodName: "GetUserMembership",
			Handler:    _MgmtPublicService_GetUserMembership_Handler,
		},
		{
			MethodName: "UpdateUserMembership",
			Handler:    _MgmtPublicService_UpdateUserMembership_Handler,
		},
		{
			MethodName: "DeleteUserMembership",
			Handler:    _MgmtPublicService_DeleteUserMembership_Handler,
		},
		{
			MethodName: "ListOrganizationMemberships",
			Handler:    _MgmtPublicService_ListOrganizationMemberships_Handler,
		},
		{
			MethodName: "GetOrganizationMembership",
			Handler:    _MgmtPublicService_GetOrganizationMembership_Handler,
		},
		{
			MethodName: "UpdateOrganizationMembership",
			Handler:    _MgmtPublicService_UpdateOrganizationMembership_Handler,
		},
		{
			MethodName: "DeleteOrganizationMembership",
			Handler:    _MgmtPublicService_DeleteOrganizationMembership_Handler,
		},
		{
			MethodName: "InviteOrganizationMembers",
			Handler:    _MgmtPublicService_InviteOrganizationMembers_Handler,
		},
		{
			MethodName: "CreateToken",
			Handler:    _MgmtPublicService_CreateToken_Handler,
		},
		{
			MethodName: "ListTokens",
			Handler:    _MgmtPublicService_ListTokens_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _MgmtPublicService_GetToken_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _MgmtPublicService_DeleteToken_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _MgmtPublicService_ValidateToken_Handler,
		},
		{
			MethodName: "CheckNamespace",
			Handler:    _MgmtPublicService_CheckNamespace_Handler,
		},
		{
			MethodName: "GetPipelineTriggerCount",
			Handler:    _MgmtPublicService_GetPipelineTriggerCount_Handler,
		},
		{
			MethodName: "GetModelTriggerCount",
			Handler:    _MgmtPublicService_GetModelTriggerCount_Handler,
		},
		{
			MethodName: "ListPipelineTriggerChartRecords",
			Handler:    _MgmtPublicService_ListPipelineTriggerChartRecords_Handler,
		},
		{
			MethodName: "ListModelTriggerChartRecords",
			Handler:    _MgmtPublicService_ListModelTriggerChartRecords_Handler,
		},
		{
			MethodName: "AuthTokenIssuer",
			Handler:    _MgmtPublicService_AuthTokenIssuer_Handler,
		},
		{
			MethodName: "AuthLogin",
			Handler:    _MgmtPublicService_AuthLogin_Handler,
		},
		{
			MethodName: "AuthLogout",
			Handler:    _MgmtPublicService_AuthLogout_Handler,
		},
		{
			MethodName: "AuthChangePassword",
			Handler:    _MgmtPublicService_AuthChangePassword_Handler,
		},
		{
			MethodName: "AuthValidateAccessToken",
			Handler:    _MgmtPublicService_AuthValidateAccessToken_Handler,
		},
		{
			MethodName: "ListPipelineTriggerRecords",
			Handler:    _MgmtPublicService_ListPipelineTriggerRecords_Handler,
		},
		{
			MethodName: "ListPipelineTriggerTableRecords",
			Handler:    _MgmtPublicService_ListPipelineTriggerTableRecords_Handler,
		},
		{
			MethodName: "ListPipelineTriggerChartRecordsV0",
			Handler:    _MgmtPublicService_ListPipelineTriggerChartRecordsV0_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core/mgmt/v1beta/mgmt_public_service.proto",
}
