// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: model/model/v1alpha/common.proto

package modelv1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BoundingBox with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BoundingBox) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BoundingBox with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BoundingBoxMultiError, or
// nil if none found.
func (m *BoundingBox) ValidateAll() error {
	return m.validate(true)
}

func (m *BoundingBox) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Top

	// no validation rules for Left

	// no validation rules for Width

	// no validation rules for Height

	if len(errors) > 0 {
		return BoundingBoxMultiError(errors)
	}

	return nil
}

// BoundingBoxMultiError is an error wrapping multiple validation errors
// returned by BoundingBox.ValidateAll() if the designated constraints aren't met.
type BoundingBoxMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BoundingBoxMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BoundingBoxMultiError) AllErrors() []error { return m }

// BoundingBoxValidationError is the validation error returned by
// BoundingBox.Validate if the designated constraints aren't met.
type BoundingBoxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoundingBoxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoundingBoxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoundingBoxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoundingBoxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoundingBoxValidationError) ErrorName() string { return "BoundingBoxValidationError" }

// Error satisfies the builtin error interface
func (e BoundingBoxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBoundingBox.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoundingBoxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoundingBoxValidationError{}

// Validate checks the field values on PromptImage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PromptImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PromptImage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PromptImageMultiError, or
// nil if none found.
func (m *PromptImage) ValidateAll() error {
	return m.validate(true)
}

func (m *PromptImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Type.(type) {
	case *PromptImage_PromptImageUrl:
		if v == nil {
			err := PromptImageValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PromptImageUrl
	case *PromptImage_PromptImageBase64:
		if v == nil {
			err := PromptImageValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for PromptImageBase64
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PromptImageMultiError(errors)
	}

	return nil
}

// PromptImageMultiError is an error wrapping multiple validation errors
// returned by PromptImage.ValidateAll() if the designated constraints aren't met.
type PromptImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PromptImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PromptImageMultiError) AllErrors() []error { return m }

// PromptImageValidationError is the validation error returned by
// PromptImage.Validate if the designated constraints aren't met.
type PromptImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromptImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromptImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromptImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromptImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromptImageValidationError) ErrorName() string { return "PromptImageValidationError" }

// Error satisfies the builtin error interface
func (e PromptImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromptImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromptImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromptImageValidationError{}

// Validate checks the field values on ImageContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageContentMultiError, or
// nil if none found.
func (m *ImageContent) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetImageUrl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImageContentValidationError{
					field:  "ImageUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImageContentValidationError{
					field:  "ImageUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImageUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImageContentValidationError{
				field:  "ImageUrl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Detail != nil {
		// no validation rules for Detail
	}

	if len(errors) > 0 {
		return ImageContentMultiError(errors)
	}

	return nil
}

// ImageContentMultiError is an error wrapping multiple validation errors
// returned by ImageContent.ValidateAll() if the designated constraints aren't met.
type ImageContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageContentMultiError) AllErrors() []error { return m }

// ImageContentValidationError is the validation error returned by
// ImageContent.Validate if the designated constraints aren't met.
type ImageContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageContentValidationError) ErrorName() string { return "ImageContentValidationError" }

// Error satisfies the builtin error interface
func (e ImageContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageContentValidationError{}

// Validate checks the field values on MessageContent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MessageContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MessageContentMultiError,
// or nil if none found.
func (m *MessageContent) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	switch v := m.Content.(type) {
	case *MessageContent_ImageUrl:
		if v == nil {
			err := MessageContentValidationError{
				field:  "Content",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetImageUrl()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageContentValidationError{
						field:  "ImageUrl",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageContentValidationError{
						field:  "ImageUrl",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetImageUrl()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageContentValidationError{
					field:  "ImageUrl",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MessageContent_Text:
		if v == nil {
			err := MessageContentValidationError{
				field:  "Content",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Text
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return MessageContentMultiError(errors)
	}

	return nil
}

// MessageContentMultiError is an error wrapping multiple validation errors
// returned by MessageContent.ValidateAll() if the designated constraints
// aren't met.
type MessageContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageContentMultiError) AllErrors() []error { return m }

// MessageContentValidationError is the validation error returned by
// MessageContent.Validate if the designated constraints aren't met.
type MessageContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageContentValidationError) ErrorName() string { return "MessageContentValidationError" }

// Error satisfies the builtin error interface
func (e MessageContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageContentValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	for idx, item := range m.GetContent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MessageValidationError{
						field:  fmt.Sprintf("Content[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MessageValidationError{
					field:  fmt.Sprintf("Content[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Permission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Permission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermissionMultiError, or
// nil if none found.
func (m *Permission) ValidateAll() error {
	return m.validate(true)
}

func (m *Permission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CanEdit

	// no validation rules for CanTrigger

	if len(errors) > 0 {
		return PermissionMultiError(errors)
	}

	return nil
}

// PermissionMultiError is an error wrapping multiple validation errors
// returned by Permission.ValidateAll() if the designated constraints aren't met.
type PermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionMultiError) AllErrors() []error { return m }

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionValidationError) ErrorName() string { return "PermissionValidationError" }

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionValidationError{}
