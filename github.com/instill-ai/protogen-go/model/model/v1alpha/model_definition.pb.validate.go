// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: model/model/v1alpha/model_definition.proto

package modelv1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ModelDefinition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModelDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelDefinitionMultiError, or nil if none found.
func (m *ModelDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Uid

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for DocumentationUrl

	// no validation rules for Icon

	// no validation rules for ReleaseStage

	if all {
		switch v := interface{}(m.GetModelSpec()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelDefinitionValidationError{
					field:  "ModelSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelDefinitionValidationError{
					field:  "ModelSpec",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModelSpec()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelDefinitionValidationError{
				field:  "ModelSpec",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelDefinitionValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelDefinitionValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelDefinitionValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelDefinitionValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelDefinitionValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelDefinitionValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModelDefinitionMultiError(errors)
	}

	return nil
}

// ModelDefinitionMultiError is an error wrapping multiple validation errors
// returned by ModelDefinition.ValidateAll() if the designated constraints
// aren't met.
type ModelDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelDefinitionMultiError) AllErrors() []error { return m }

// ModelDefinitionValidationError is the validation error returned by
// ModelDefinition.Validate if the designated constraints aren't met.
type ModelDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelDefinitionValidationError) ErrorName() string { return "ModelDefinitionValidationError" }

// Error satisfies the builtin error interface
func (e ModelDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelDefinitionValidationError{}

// Validate checks the field values on ListModelDefinitionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModelDefinitionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModelDefinitionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModelDefinitionsRequestMultiError, or nil if none found.
func (m *ListModelDefinitionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModelDefinitionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return ListModelDefinitionsRequestMultiError(errors)
	}

	return nil
}

// ListModelDefinitionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListModelDefinitionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListModelDefinitionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModelDefinitionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModelDefinitionsRequestMultiError) AllErrors() []error { return m }

// ListModelDefinitionsRequestValidationError is the validation error returned
// by ListModelDefinitionsRequest.Validate if the designated constraints
// aren't met.
type ListModelDefinitionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModelDefinitionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModelDefinitionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModelDefinitionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModelDefinitionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModelDefinitionsRequestValidationError) ErrorName() string {
	return "ListModelDefinitionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListModelDefinitionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModelDefinitionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModelDefinitionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModelDefinitionsRequestValidationError{}

// Validate checks the field values on ListModelDefinitionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModelDefinitionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModelDefinitionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModelDefinitionsResponseMultiError, or nil if none found.
func (m *ListModelDefinitionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModelDefinitionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModelDefinitions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListModelDefinitionsResponseValidationError{
						field:  fmt.Sprintf("ModelDefinitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListModelDefinitionsResponseValidationError{
						field:  fmt.Sprintf("ModelDefinitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListModelDefinitionsResponseValidationError{
					field:  fmt.Sprintf("ModelDefinitions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListModelDefinitionsResponseMultiError(errors)
	}

	return nil
}

// ListModelDefinitionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListModelDefinitionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListModelDefinitionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModelDefinitionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModelDefinitionsResponseMultiError) AllErrors() []error { return m }

// ListModelDefinitionsResponseValidationError is the validation error returned
// by ListModelDefinitionsResponse.Validate if the designated constraints
// aren't met.
type ListModelDefinitionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModelDefinitionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModelDefinitionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModelDefinitionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModelDefinitionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModelDefinitionsResponseValidationError) ErrorName() string {
	return "ListModelDefinitionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListModelDefinitionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModelDefinitionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModelDefinitionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModelDefinitionsResponseValidationError{}

// Validate checks the field values on GetModelDefinitionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetModelDefinitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelDefinitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelDefinitionRequestMultiError, or nil if none found.
func (m *GetModelDefinitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelDefinitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ModelDefinitionId

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetModelDefinitionRequestMultiError(errors)
	}

	return nil
}

// GetModelDefinitionRequestMultiError is an error wrapping multiple validation
// errors returned by GetModelDefinitionRequest.ValidateAll() if the
// designated constraints aren't met.
type GetModelDefinitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelDefinitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelDefinitionRequestMultiError) AllErrors() []error { return m }

// GetModelDefinitionRequestValidationError is the validation error returned by
// GetModelDefinitionRequest.Validate if the designated constraints aren't met.
type GetModelDefinitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelDefinitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelDefinitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelDefinitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelDefinitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelDefinitionRequestValidationError) ErrorName() string {
	return "GetModelDefinitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelDefinitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelDefinitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelDefinitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelDefinitionRequestValidationError{}

// Validate checks the field values on GetModelDefinitionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetModelDefinitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelDefinitionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelDefinitionResponseMultiError, or nil if none found.
func (m *GetModelDefinitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelDefinitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModelDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModelDefinitionResponseValidationError{
					field:  "ModelDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModelDefinitionResponseValidationError{
					field:  "ModelDefinition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModelDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModelDefinitionResponseValidationError{
				field:  "ModelDefinition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetModelDefinitionResponseMultiError(errors)
	}

	return nil
}

// GetModelDefinitionResponseMultiError is an error wrapping multiple
// validation errors returned by GetModelDefinitionResponse.ValidateAll() if
// the designated constraints aren't met.
type GetModelDefinitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelDefinitionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelDefinitionResponseMultiError) AllErrors() []error { return m }

// GetModelDefinitionResponseValidationError is the validation error returned
// by GetModelDefinitionResponse.Validate if the designated constraints aren't met.
type GetModelDefinitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelDefinitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelDefinitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelDefinitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelDefinitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelDefinitionResponseValidationError) ErrorName() string {
	return "GetModelDefinitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelDefinitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelDefinitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelDefinitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelDefinitionResponseValidationError{}
