// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: app/app/v1alpha/conversation.proto

package appv1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Conversation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Conversation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Conversation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConversationMultiError, or
// nil if none found.
func (m *Conversation) ValidateAll() error {
	return m.validate(true)
}

func (m *Conversation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for NamespaceId

	// no validation rules for AppId

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConversationValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConversationValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConversationValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConversationMultiError(errors)
	}

	return nil
}

// ConversationMultiError is an error wrapping multiple validation errors
// returned by Conversation.ValidateAll() if the designated constraints aren't met.
type ConversationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConversationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConversationMultiError) AllErrors() []error { return m }

// ConversationValidationError is the validation error returned by
// Conversation.Validate if the designated constraints aren't met.
type ConversationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConversationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConversationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConversationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConversationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConversationValidationError) ErrorName() string { return "ConversationValidationError" }

// Error satisfies the builtin error interface
func (e ConversationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConversation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConversationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConversationValidationError{}

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MessageMultiError, or nil if none found.
func (m *Message) ValidateAll() error {
	return m.validate(true)
}

func (m *Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for AppUid

	// no validation rules for ConversationUid

	// no validation rules for Content

	// no validation rules for Role

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MessageValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MessageValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MsgSenderUid

	if len(errors) > 0 {
		return MessageMultiError(errors)
	}

	return nil
}

// MessageMultiError is an error wrapping multiple validation errors returned
// by Message.ValidateAll() if the designated constraints aren't met.
type MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageMultiError) AllErrors() []error { return m }

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on CreateConversationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConversationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConversationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConversationRequestMultiError, or nil if none found.
func (m *CreateConversationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConversationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for AppId

	// no validation rules for ConversationId

	if len(errors) > 0 {
		return CreateConversationRequestMultiError(errors)
	}

	return nil
}

// CreateConversationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateConversationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateConversationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConversationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConversationRequestMultiError) AllErrors() []error { return m }

// CreateConversationRequestValidationError is the validation error returned by
// CreateConversationRequest.Validate if the designated constraints aren't met.
type CreateConversationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConversationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConversationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConversationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConversationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConversationRequestValidationError) ErrorName() string {
	return "CreateConversationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConversationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConversationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConversationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConversationRequestValidationError{}

// Validate checks the field values on CreateConversationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConversationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConversationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConversationResponseMultiError, or nil if none found.
func (m *CreateConversationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConversationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConversation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateConversationResponseValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateConversationResponseValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConversation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateConversationResponseValidationError{
				field:  "Conversation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateConversationResponseMultiError(errors)
	}

	return nil
}

// CreateConversationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateConversationResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateConversationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConversationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConversationResponseMultiError) AllErrors() []error { return m }

// CreateConversationResponseValidationError is the validation error returned
// by CreateConversationResponse.Validate if the designated constraints aren't met.
type CreateConversationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConversationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConversationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConversationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConversationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConversationResponseValidationError) ErrorName() string {
	return "CreateConversationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConversationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConversationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConversationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConversationResponseValidationError{}

// Validate checks the field values on ListConversationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConversationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConversationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConversationsRequestMultiError, or nil if none found.
func (m *ListConversationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConversationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for AppId

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for ConversationId

	// no validation rules for IfAll

	if len(errors) > 0 {
		return ListConversationsRequestMultiError(errors)
	}

	return nil
}

// ListConversationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListConversationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListConversationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConversationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConversationsRequestMultiError) AllErrors() []error { return m }

// ListConversationsRequestValidationError is the validation error returned by
// ListConversationsRequest.Validate if the designated constraints aren't met.
type ListConversationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConversationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConversationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConversationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConversationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConversationsRequestValidationError) ErrorName() string {
	return "ListConversationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConversationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConversationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConversationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConversationsRequestValidationError{}

// Validate checks the field values on ListConversationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConversationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConversationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConversationsResponseMultiError, or nil if none found.
func (m *ListConversationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConversationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConversations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConversationsResponseValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConversationsResponseValidationError{
						field:  fmt.Sprintf("Conversations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConversationsResponseValidationError{
					field:  fmt.Sprintf("Conversations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListConversationsResponseMultiError(errors)
	}

	return nil
}

// ListConversationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListConversationsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListConversationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConversationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConversationsResponseMultiError) AllErrors() []error { return m }

// ListConversationsResponseValidationError is the validation error returned by
// ListConversationsResponse.Validate if the designated constraints aren't met.
type ListConversationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConversationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConversationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConversationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConversationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConversationsResponseValidationError) ErrorName() string {
	return "ListConversationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConversationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConversationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConversationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConversationsResponseValidationError{}

// Validate checks the field values on UpdateConversationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConversationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConversationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConversationRequestMultiError, or nil if none found.
func (m *UpdateConversationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConversationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for AppId

	// no validation rules for ConversationId

	// no validation rules for NewConversationId

	if len(errors) > 0 {
		return UpdateConversationRequestMultiError(errors)
	}

	return nil
}

// UpdateConversationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConversationRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateConversationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConversationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConversationRequestMultiError) AllErrors() []error { return m }

// UpdateConversationRequestValidationError is the validation error returned by
// UpdateConversationRequest.Validate if the designated constraints aren't met.
type UpdateConversationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConversationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConversationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConversationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConversationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConversationRequestValidationError) ErrorName() string {
	return "UpdateConversationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConversationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConversationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConversationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConversationRequestValidationError{}

// Validate checks the field values on UpdateConversationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConversationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConversationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConversationResponseMultiError, or nil if none found.
func (m *UpdateConversationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConversationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConversation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConversationResponseValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConversationResponseValidationError{
					field:  "Conversation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConversation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConversationResponseValidationError{
				field:  "Conversation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConversationResponseMultiError(errors)
	}

	return nil
}

// UpdateConversationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateConversationResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateConversationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConversationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConversationResponseMultiError) AllErrors() []error { return m }

// UpdateConversationResponseValidationError is the validation error returned
// by UpdateConversationResponse.Validate if the designated constraints aren't met.
type UpdateConversationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConversationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConversationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConversationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConversationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConversationResponseValidationError) ErrorName() string {
	return "UpdateConversationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConversationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConversationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConversationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConversationResponseValidationError{}

// Validate checks the field values on DeleteConversationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConversationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConversationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConversationRequestMultiError, or nil if none found.
func (m *DeleteConversationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConversationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for AppId

	// no validation rules for ConversationId

	if len(errors) > 0 {
		return DeleteConversationRequestMultiError(errors)
	}

	return nil
}

// DeleteConversationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteConversationRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteConversationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConversationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConversationRequestMultiError) AllErrors() []error { return m }

// DeleteConversationRequestValidationError is the validation error returned by
// DeleteConversationRequest.Validate if the designated constraints aren't met.
type DeleteConversationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConversationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConversationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConversationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConversationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConversationRequestValidationError) ErrorName() string {
	return "DeleteConversationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConversationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConversationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConversationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConversationRequestValidationError{}

// Validate checks the field values on DeleteConversationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConversationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConversationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConversationResponseMultiError, or nil if none found.
func (m *DeleteConversationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConversationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteConversationResponseMultiError(errors)
	}

	return nil
}

// DeleteConversationResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteConversationResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteConversationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConversationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConversationResponseMultiError) AllErrors() []error { return m }

// DeleteConversationResponseValidationError is the validation error returned
// by DeleteConversationResponse.Validate if the designated constraints aren't met.
type DeleteConversationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConversationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConversationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConversationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConversationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConversationResponseValidationError) ErrorName() string {
	return "DeleteConversationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConversationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConversationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConversationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConversationResponseValidationError{}

// Validate checks the field values on CreateMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMessageRequestMultiError, or nil if none found.
func (m *CreateMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for AppId

	// no validation rules for ConversationId

	// no validation rules for Content

	// no validation rules for Role

	// no validation rules for Type

	if len(errors) > 0 {
		return CreateMessageRequestMultiError(errors)
	}

	return nil
}

// CreateMessageRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMessageRequestMultiError) AllErrors() []error { return m }

// CreateMessageRequestValidationError is the validation error returned by
// CreateMessageRequest.Validate if the designated constraints aren't met.
type CreateMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMessageRequestValidationError) ErrorName() string {
	return "CreateMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMessageRequestValidationError{}

// Validate checks the field values on CreateMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMessageResponseMultiError, or nil if none found.
func (m *CreateMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMessageResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMessageResponseMultiError(errors)
	}

	return nil
}

// CreateMessageResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMessageResponseMultiError) AllErrors() []error { return m }

// CreateMessageResponseValidationError is the validation error returned by
// CreateMessageResponse.Validate if the designated constraints aren't met.
type CreateMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMessageResponseValidationError) ErrorName() string {
	return "CreateMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMessageResponseValidationError{}

// Validate checks the field values on MessageSenderProfile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MessageSenderProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MessageSenderProfile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MessageSenderProfileMultiError, or nil if none found.
func (m *MessageSenderProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *MessageSenderProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MsgSenderUid

	// no validation rules for MsgSenderId

	if m.DisplayName != nil {
		// no validation rules for DisplayName
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if len(errors) > 0 {
		return MessageSenderProfileMultiError(errors)
	}

	return nil
}

// MessageSenderProfileMultiError is an error wrapping multiple validation
// errors returned by MessageSenderProfile.ValidateAll() if the designated
// constraints aren't met.
type MessageSenderProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MessageSenderProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MessageSenderProfileMultiError) AllErrors() []error { return m }

// MessageSenderProfileValidationError is the validation error returned by
// MessageSenderProfile.Validate if the designated constraints aren't met.
type MessageSenderProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageSenderProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageSenderProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageSenderProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageSenderProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageSenderProfileValidationError) ErrorName() string {
	return "MessageSenderProfileValidationError"
}

// Error satisfies the builtin error interface
func (e MessageSenderProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessageSenderProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageSenderProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageSenderProfileValidationError{}

// Validate checks the field values on ListMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMessagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMessagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMessagesRequestMultiError, or nil if none found.
func (m *ListMessagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMessagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for AppId

	// no validation rules for ConversationId

	// no validation rules for LatestK

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for IncludeSystemMessages

	// no validation rules for IfAll

	if len(errors) > 0 {
		return ListMessagesRequestMultiError(errors)
	}

	return nil
}

// ListMessagesRequestMultiError is an error wrapping multiple validation
// errors returned by ListMessagesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMessagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMessagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMessagesRequestMultiError) AllErrors() []error { return m }

// ListMessagesRequestValidationError is the validation error returned by
// ListMessagesRequest.Validate if the designated constraints aren't met.
type ListMessagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMessagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMessagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMessagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMessagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMessagesRequestValidationError) ErrorName() string {
	return "ListMessagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMessagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMessagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMessagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMessagesRequestValidationError{}

// Validate checks the field values on ListMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMessagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMessagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMessagesResponseMultiError, or nil if none found.
func (m *ListMessagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMessagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMessagesResponseValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMessagesResponseValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	for idx, item := range m.GetSenderProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMessagesResponseValidationError{
						field:  fmt.Sprintf("SenderProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMessagesResponseValidationError{
						field:  fmt.Sprintf("SenderProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMessagesResponseValidationError{
					field:  fmt.Sprintf("SenderProfiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMessagesResponseMultiError(errors)
	}

	return nil
}

// ListMessagesResponseMultiError is an error wrapping multiple validation
// errors returned by ListMessagesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMessagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMessagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMessagesResponseMultiError) AllErrors() []error { return m }

// ListMessagesResponseValidationError is the validation error returned by
// ListMessagesResponse.Validate if the designated constraints aren't met.
type ListMessagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMessagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMessagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMessagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMessagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMessagesResponseValidationError) ErrorName() string {
	return "ListMessagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMessagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMessagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMessagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMessagesResponseValidationError{}

// Validate checks the field values on UpdateMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMessageRequestMultiError, or nil if none found.
func (m *UpdateMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for AppId

	// no validation rules for ConversationId

	// no validation rules for MessageUid

	// no validation rules for Content

	if len(errors) > 0 {
		return UpdateMessageRequestMultiError(errors)
	}

	return nil
}

// UpdateMessageRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMessageRequestMultiError) AllErrors() []error { return m }

// UpdateMessageRequestValidationError is the validation error returned by
// UpdateMessageRequest.Validate if the designated constraints aren't met.
type UpdateMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMessageRequestValidationError) ErrorName() string {
	return "UpdateMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMessageRequestValidationError{}

// Validate checks the field values on UpdateMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMessageResponseMultiError, or nil if none found.
func (m *UpdateMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMessageResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMessageResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMessageResponseMultiError(errors)
	}

	return nil
}

// UpdateMessageResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMessageResponseMultiError) AllErrors() []error { return m }

// UpdateMessageResponseValidationError is the validation error returned by
// UpdateMessageResponse.Validate if the designated constraints aren't met.
type UpdateMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMessageResponseValidationError) ErrorName() string {
	return "UpdateMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMessageResponseValidationError{}

// Validate checks the field values on DeleteMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMessageRequestMultiError, or nil if none found.
func (m *DeleteMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for AppId

	// no validation rules for ConversationId

	// no validation rules for MessageUid

	if len(errors) > 0 {
		return DeleteMessageRequestMultiError(errors)
	}

	return nil
}

// DeleteMessageRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMessageRequestMultiError) AllErrors() []error { return m }

// DeleteMessageRequestValidationError is the validation error returned by
// DeleteMessageRequest.Validate if the designated constraints aren't met.
type DeleteMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMessageRequestValidationError) ErrorName() string {
	return "DeleteMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMessageRequestValidationError{}

// Validate checks the field values on DeleteMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMessageResponseMultiError, or nil if none found.
func (m *DeleteMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMessageResponseMultiError(errors)
	}

	return nil
}

// DeleteMessageResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMessageResponseMultiError) AllErrors() []error { return m }

// DeleteMessageResponseValidationError is the validation error returned by
// DeleteMessageResponse.Validate if the designated constraints aren't met.
type DeleteMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMessageResponseValidationError) ErrorName() string {
	return "DeleteMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMessageResponseValidationError{}
