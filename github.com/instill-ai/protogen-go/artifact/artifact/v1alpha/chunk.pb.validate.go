// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: artifact/artifact/v1alpha/chunk.proto

package artifactv1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Chunk with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Chunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Chunk with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChunkMultiError, or nil if none found.
func (m *Chunk) ValidateAll() error {
	return m.validate(true)
}

func (m *Chunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChunkUid

	// no validation rules for Retrievable

	// no validation rules for StartPos

	// no validation rules for EndPos

	// no validation rules for Tokens

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChunkValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChunkValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChunkValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OriginalFileUid

	if len(errors) > 0 {
		return ChunkMultiError(errors)
	}

	return nil
}

// ChunkMultiError is an error wrapping multiple validation errors returned by
// Chunk.ValidateAll() if the designated constraints aren't met.
type ChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChunkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChunkMultiError) AllErrors() []error { return m }

// ChunkValidationError is the validation error returned by Chunk.Validate if
// the designated constraints aren't met.
type ChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChunkValidationError) ErrorName() string { return "ChunkValidationError" }

// Error satisfies the builtin error interface
func (e ChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChunkValidationError{}

// Validate checks the field values on ListChunksRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListChunksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChunksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChunksRequestMultiError, or nil if none found.
func (m *ListChunksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChunksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for CatalogId

	// no validation rules for FileUid

	if len(errors) > 0 {
		return ListChunksRequestMultiError(errors)
	}

	return nil
}

// ListChunksRequestMultiError is an error wrapping multiple validation errors
// returned by ListChunksRequest.ValidateAll() if the designated constraints
// aren't met.
type ListChunksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChunksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChunksRequestMultiError) AllErrors() []error { return m }

// ListChunksRequestValidationError is the validation error returned by
// ListChunksRequest.Validate if the designated constraints aren't met.
type ListChunksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChunksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChunksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChunksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChunksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChunksRequestValidationError) ErrorName() string {
	return "ListChunksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChunksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChunksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChunksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChunksRequestValidationError{}

// Validate checks the field values on ListChunksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChunksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChunksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChunksResponseMultiError, or nil if none found.
func (m *ListChunksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChunksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChunks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListChunksResponseValidationError{
						field:  fmt.Sprintf("Chunks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListChunksResponseValidationError{
						field:  fmt.Sprintf("Chunks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChunksResponseValidationError{
					field:  fmt.Sprintf("Chunks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListChunksResponseMultiError(errors)
	}

	return nil
}

// ListChunksResponseMultiError is an error wrapping multiple validation errors
// returned by ListChunksResponse.ValidateAll() if the designated constraints
// aren't met.
type ListChunksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChunksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChunksResponseMultiError) AllErrors() []error { return m }

// ListChunksResponseValidationError is the validation error returned by
// ListChunksResponse.Validate if the designated constraints aren't met.
type ListChunksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChunksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChunksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChunksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChunksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChunksResponseValidationError) ErrorName() string {
	return "ListChunksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListChunksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChunksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChunksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChunksResponseValidationError{}

// Validate checks the field values on SourceFile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SourceFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SourceFile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SourceFileMultiError, or
// nil if none found.
func (m *SourceFile) ValidateAll() error {
	return m.validate(true)
}

func (m *SourceFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OriginalFileUid

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SourceFileValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SourceFileValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SourceFileValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SourceFileValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SourceFileValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SourceFileValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SourceFileMultiError(errors)
	}

	return nil
}

// SourceFileMultiError is an error wrapping multiple validation errors
// returned by SourceFile.ValidateAll() if the designated constraints aren't met.
type SourceFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SourceFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SourceFileMultiError) AllErrors() []error { return m }

// SourceFileValidationError is the validation error returned by
// SourceFile.Validate if the designated constraints aren't met.
type SourceFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SourceFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SourceFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SourceFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SourceFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SourceFileValidationError) ErrorName() string { return "SourceFileValidationError" }

// Error satisfies the builtin error interface
func (e SourceFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSourceFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SourceFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SourceFileValidationError{}

// Validate checks the field values on GetSourceFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSourceFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSourceFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSourceFileRequestMultiError, or nil if none found.
func (m *GetSourceFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSourceFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for CatalogId

	// no validation rules for FileUid

	if len(errors) > 0 {
		return GetSourceFileRequestMultiError(errors)
	}

	return nil
}

// GetSourceFileRequestMultiError is an error wrapping multiple validation
// errors returned by GetSourceFileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSourceFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSourceFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSourceFileRequestMultiError) AllErrors() []error { return m }

// GetSourceFileRequestValidationError is the validation error returned by
// GetSourceFileRequest.Validate if the designated constraints aren't met.
type GetSourceFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSourceFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSourceFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSourceFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSourceFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSourceFileRequestValidationError) ErrorName() string {
	return "GetSourceFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSourceFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSourceFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSourceFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSourceFileRequestValidationError{}

// Validate checks the field values on GetSourceFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSourceFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSourceFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSourceFileResponseMultiError, or nil if none found.
func (m *GetSourceFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSourceFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSourceFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSourceFileResponseValidationError{
					field:  "SourceFile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSourceFileResponseValidationError{
					field:  "SourceFile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSourceFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSourceFileResponseValidationError{
				field:  "SourceFile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSourceFileResponseMultiError(errors)
	}

	return nil
}

// GetSourceFileResponseMultiError is an error wrapping multiple validation
// errors returned by GetSourceFileResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSourceFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSourceFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSourceFileResponseMultiError) AllErrors() []error { return m }

// GetSourceFileResponseValidationError is the validation error returned by
// GetSourceFileResponse.Validate if the designated constraints aren't met.
type GetSourceFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSourceFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSourceFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSourceFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSourceFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSourceFileResponseValidationError) ErrorName() string {
	return "GetSourceFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSourceFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSourceFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSourceFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSourceFileResponseValidationError{}

// Validate checks the field values on UpdateChunkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChunkRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChunkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChunkRequestMultiError, or nil if none found.
func (m *UpdateChunkRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChunkRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChunkUid

	// no validation rules for Retrievable

	if len(errors) > 0 {
		return UpdateChunkRequestMultiError(errors)
	}

	return nil
}

// UpdateChunkRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateChunkRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateChunkRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChunkRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChunkRequestMultiError) AllErrors() []error { return m }

// UpdateChunkRequestValidationError is the validation error returned by
// UpdateChunkRequest.Validate if the designated constraints aren't met.
type UpdateChunkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChunkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChunkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChunkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChunkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChunkRequestValidationError) ErrorName() string {
	return "UpdateChunkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChunkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChunkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChunkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChunkRequestValidationError{}

// Validate checks the field values on UpdateChunkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChunkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChunkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChunkResponseMultiError, or nil if none found.
func (m *UpdateChunkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChunkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChunk()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateChunkResponseValidationError{
					field:  "Chunk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateChunkResponseValidationError{
					field:  "Chunk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChunk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateChunkResponseValidationError{
				field:  "Chunk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateChunkResponseMultiError(errors)
	}

	return nil
}

// UpdateChunkResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateChunkResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateChunkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChunkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChunkResponseMultiError) AllErrors() []error { return m }

// UpdateChunkResponseValidationError is the validation error returned by
// UpdateChunkResponse.Validate if the designated constraints aren't met.
type UpdateChunkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChunkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChunkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChunkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChunkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChunkResponseValidationError) ErrorName() string {
	return "UpdateChunkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChunkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChunkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChunkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChunkResponseValidationError{}

// Validate checks the field values on SimilarityChunksSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SimilarityChunksSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SimilarityChunksSearchRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SimilarityChunksSearchRequestMultiError, or nil if none found.
func (m *SimilarityChunksSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SimilarityChunksSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for CatalogId

	// no validation rules for TextPrompt

	// no validation rules for TopK

	if len(errors) > 0 {
		return SimilarityChunksSearchRequestMultiError(errors)
	}

	return nil
}

// SimilarityChunksSearchRequestMultiError is an error wrapping multiple
// validation errors returned by SimilarityChunksSearchRequest.ValidateAll()
// if the designated constraints aren't met.
type SimilarityChunksSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SimilarityChunksSearchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SimilarityChunksSearchRequestMultiError) AllErrors() []error { return m }

// SimilarityChunksSearchRequestValidationError is the validation error
// returned by SimilarityChunksSearchRequest.Validate if the designated
// constraints aren't met.
type SimilarityChunksSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimilarityChunksSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimilarityChunksSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimilarityChunksSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimilarityChunksSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimilarityChunksSearchRequestValidationError) ErrorName() string {
	return "SimilarityChunksSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SimilarityChunksSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimilarityChunksSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimilarityChunksSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimilarityChunksSearchRequestValidationError{}

// Validate checks the field values on SimilarityChunksSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SimilarityChunksSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SimilarityChunksSearchResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SimilarityChunksSearchResponseMultiError, or nil if none found.
func (m *SimilarityChunksSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SimilarityChunksSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSimilarChunks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SimilarityChunksSearchResponseValidationError{
						field:  fmt.Sprintf("SimilarChunks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SimilarityChunksSearchResponseValidationError{
						field:  fmt.Sprintf("SimilarChunks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SimilarityChunksSearchResponseValidationError{
					field:  fmt.Sprintf("SimilarChunks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SimilarityChunksSearchResponseMultiError(errors)
	}

	return nil
}

// SimilarityChunksSearchResponseMultiError is an error wrapping multiple
// validation errors returned by SimilarityChunksSearchResponse.ValidateAll()
// if the designated constraints aren't met.
type SimilarityChunksSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SimilarityChunksSearchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SimilarityChunksSearchResponseMultiError) AllErrors() []error { return m }

// SimilarityChunksSearchResponseValidationError is the validation error
// returned by SimilarityChunksSearchResponse.Validate if the designated
// constraints aren't met.
type SimilarityChunksSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimilarityChunksSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimilarityChunksSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimilarityChunksSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimilarityChunksSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimilarityChunksSearchResponseValidationError) ErrorName() string {
	return "SimilarityChunksSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SimilarityChunksSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimilarityChunksSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimilarityChunksSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimilarityChunksSearchResponseValidationError{}

// Validate checks the field values on SimilarityChunk with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SimilarityChunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SimilarityChunk with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SimilarityChunkMultiError, or nil if none found.
func (m *SimilarityChunk) ValidateAll() error {
	return m.validate(true)
}

func (m *SimilarityChunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChunkUid

	// no validation rules for SimilarityScore

	// no validation rules for TextContent

	// no validation rules for SourceFile

	if len(errors) > 0 {
		return SimilarityChunkMultiError(errors)
	}

	return nil
}

// SimilarityChunkMultiError is an error wrapping multiple validation errors
// returned by SimilarityChunk.ValidateAll() if the designated constraints
// aren't met.
type SimilarityChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SimilarityChunkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SimilarityChunkMultiError) AllErrors() []error { return m }

// SimilarityChunkValidationError is the validation error returned by
// SimilarityChunk.Validate if the designated constraints aren't met.
type SimilarityChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimilarityChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimilarityChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimilarityChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimilarityChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimilarityChunkValidationError) ErrorName() string { return "SimilarityChunkValidationError" }

// Error satisfies the builtin error interface
func (e SimilarityChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimilarityChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimilarityChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimilarityChunkValidationError{}
