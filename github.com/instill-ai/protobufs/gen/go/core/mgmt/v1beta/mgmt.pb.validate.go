// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/mgmt/v1beta/mgmt.proto

package mgmtv1beta

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LivenessRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LivenessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LivenessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LivenessRequestMultiError, or nil if none found.
func (m *LivenessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LivenessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.HealthCheckRequest != nil {

		if all {
			switch v := interface{}(m.GetHealthCheckRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LivenessRequestValidationError{
						field:  "HealthCheckRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LivenessRequestValidationError{
						field:  "HealthCheckRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHealthCheckRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LivenessRequestValidationError{
					field:  "HealthCheckRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LivenessRequestMultiError(errors)
	}

	return nil
}

// LivenessRequestMultiError is an error wrapping multiple validation errors
// returned by LivenessRequest.ValidateAll() if the designated constraints
// aren't met.
type LivenessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LivenessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LivenessRequestMultiError) AllErrors() []error { return m }

// LivenessRequestValidationError is the validation error returned by
// LivenessRequest.Validate if the designated constraints aren't met.
type LivenessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LivenessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LivenessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LivenessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LivenessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LivenessRequestValidationError) ErrorName() string { return "LivenessRequestValidationError" }

// Error satisfies the builtin error interface
func (e LivenessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLivenessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LivenessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LivenessRequestValidationError{}

// Validate checks the field values on LivenessResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LivenessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LivenessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LivenessResponseMultiError, or nil if none found.
func (m *LivenessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LivenessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHealthCheckResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LivenessResponseValidationError{
					field:  "HealthCheckResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LivenessResponseValidationError{
					field:  "HealthCheckResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthCheckResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LivenessResponseValidationError{
				field:  "HealthCheckResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LivenessResponseMultiError(errors)
	}

	return nil
}

// LivenessResponseMultiError is an error wrapping multiple validation errors
// returned by LivenessResponse.ValidateAll() if the designated constraints
// aren't met.
type LivenessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LivenessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LivenessResponseMultiError) AllErrors() []error { return m }

// LivenessResponseValidationError is the validation error returned by
// LivenessResponse.Validate if the designated constraints aren't met.
type LivenessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LivenessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LivenessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LivenessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LivenessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LivenessResponseValidationError) ErrorName() string { return "LivenessResponseValidationError" }

// Error satisfies the builtin error interface
func (e LivenessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLivenessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LivenessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LivenessResponseValidationError{}

// Validate checks the field values on ReadinessRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadinessRequestMultiError, or nil if none found.
func (m *ReadinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.HealthCheckRequest != nil {

		if all {
			switch v := interface{}(m.GetHealthCheckRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadinessRequestValidationError{
						field:  "HealthCheckRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadinessRequestValidationError{
						field:  "HealthCheckRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHealthCheckRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadinessRequestValidationError{
					field:  "HealthCheckRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReadinessRequestMultiError(errors)
	}

	return nil
}

// ReadinessRequestMultiError is an error wrapping multiple validation errors
// returned by ReadinessRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadinessRequestMultiError) AllErrors() []error { return m }

// ReadinessRequestValidationError is the validation error returned by
// ReadinessRequest.Validate if the designated constraints aren't met.
type ReadinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadinessRequestValidationError) ErrorName() string { return "ReadinessRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadinessRequestValidationError{}

// Validate checks the field values on ReadinessResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadinessResponseMultiError, or nil if none found.
func (m *ReadinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHealthCheckResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadinessResponseValidationError{
					field:  "HealthCheckResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadinessResponseValidationError{
					field:  "HealthCheckResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthCheckResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadinessResponseValidationError{
				field:  "HealthCheckResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadinessResponseMultiError(errors)
	}

	return nil
}

// ReadinessResponseMultiError is an error wrapping multiple validation errors
// returned by ReadinessResponse.ValidateAll() if the designated constraints
// aren't met.
type ReadinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadinessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadinessResponseMultiError) AllErrors() []error { return m }

// ReadinessResponseValidationError is the validation error returned by
// ReadinessResponse.Validate if the designated constraints aren't met.
type ReadinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadinessResponseValidationError) ErrorName() string {
	return "ReadinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadinessResponseValidationError{}

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Permission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Permission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermissionMultiError, or
// nil if none found.
func (m *Permission) ValidateAll() error {
	return m.validate(true)
}

func (m *Permission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CanEdit

	if len(errors) > 0 {
		return PermissionMultiError(errors)
	}

	return nil
}

// PermissionMultiError is an error wrapping multiple validation errors
// returned by Permission.ValidateAll() if the designated constraints aren't met.
type PermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionMultiError) AllErrors() []error { return m }

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionValidationError) ErrorName() string { return "PermissionValidationError" }

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionValidationError{}

// Validate checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserProfile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserProfileMultiError, or
// nil if none found.
func (m *UserProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *UserProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SocialProfileLinks

	if m.DisplayName != nil {
		// no validation rules for DisplayName
	}

	if m.Bio != nil {
		// no validation rules for Bio
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.PublicEmail != nil {
		// no validation rules for PublicEmail
	}

	if m.CompanyName != nil {
		// no validation rules for CompanyName
	}

	if len(errors) > 0 {
		return UserProfileMultiError(errors)
	}

	return nil
}

// UserProfileMultiError is an error wrapping multiple validation errors
// returned by UserProfile.ValidateAll() if the designated constraints aren't met.
type UserProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserProfileMultiError) AllErrors() []error { return m }

// UserProfileValidationError is the validation error returned by
// UserProfile.Validate if the designated constraints aren't met.
type UserProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserProfileValidationError) ErrorName() string { return "UserProfileValidationError" }

// Error satisfies the builtin error interface
func (e UserProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserProfileValidationError{}

// Validate checks the field values on OrganizationProfile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationProfile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationProfile with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationProfileMultiError, or nil if none found.
func (m *OrganizationProfile) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationProfile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SocialProfileLinks

	if m.DisplayName != nil {
		// no validation rules for DisplayName
	}

	if m.Bio != nil {
		// no validation rules for Bio
	}

	if m.Avatar != nil {
		// no validation rules for Avatar
	}

	if m.PublicEmail != nil {
		// no validation rules for PublicEmail
	}

	if len(errors) > 0 {
		return OrganizationProfileMultiError(errors)
	}

	return nil
}

// OrganizationProfileMultiError is an error wrapping multiple validation
// errors returned by OrganizationProfile.ValidateAll() if the designated
// constraints aren't met.
type OrganizationProfileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationProfileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationProfileMultiError) AllErrors() []error { return m }

// OrganizationProfileValidationError is the validation error returned by
// OrganizationProfile.Validate if the designated constraints aren't met.
type OrganizationProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationProfileValidationError) ErrorName() string {
	return "OrganizationProfileValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationProfile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationProfileValidationError{}

// Validate checks the field values on AuthenticatedUser with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthenticatedUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticatedUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticatedUserMultiError, or nil if none found.
func (m *AuthenticatedUser) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticatedUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticatedUserValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticatedUserValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticatedUserValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticatedUserValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticatedUserValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticatedUserValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Email

	// no validation rules for CustomerId

	// no validation rules for NewsletterSubscription

	// no validation rules for OnboardingStatus

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticatedUserValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticatedUserValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticatedUserValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Uid != nil {
		// no validation rules for Uid
	}

	if m.Role != nil {
		// no validation rules for Role
	}

	if m.CookieToken != nil {
		// no validation rules for CookieToken
	}

	if len(errors) > 0 {
		return AuthenticatedUserMultiError(errors)
	}

	return nil
}

// AuthenticatedUserMultiError is an error wrapping multiple validation errors
// returned by AuthenticatedUser.ValidateAll() if the designated constraints
// aren't met.
type AuthenticatedUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticatedUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticatedUserMultiError) AllErrors() []error { return m }

// AuthenticatedUserValidationError is the validation error returned by
// AuthenticatedUser.Validate if the designated constraints aren't met.
type AuthenticatedUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticatedUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticatedUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticatedUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticatedUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticatedUserValidationError) ErrorName() string {
	return "AuthenticatedUserValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticatedUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticatedUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticatedUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticatedUserValidationError{}

// Validate checks the field values on Owner with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Owner) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Owner with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OwnerMultiError, or nil if none found.
func (m *Owner) ValidateAll() error {
	return m.validate(true)
}

func (m *Owner) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Owner.(type) {
	case *Owner_User:
		if v == nil {
			err := OwnerValidationError{
				field:  "Owner",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OwnerValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OwnerValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OwnerValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Owner_Organization:
		if v == nil {
			err := OwnerValidationError{
				field:  "Owner",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOrganization()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OwnerValidationError{
						field:  "Organization",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OwnerValidationError{
						field:  "Organization",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OwnerValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return OwnerMultiError(errors)
	}

	return nil
}

// OwnerMultiError is an error wrapping multiple validation errors returned by
// Owner.ValidateAll() if the designated constraints aren't met.
type OwnerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OwnerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OwnerMultiError) AllErrors() []error { return m }

// OwnerValidationError is the validation error returned by Owner.Validate if
// the designated constraints aren't met.
type OwnerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OwnerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OwnerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OwnerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OwnerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OwnerValidationError) ErrorName() string { return "OwnerValidationError" }

// Error satisfies the builtin error interface
func (e OwnerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOwner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OwnerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OwnerValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Uid != nil {
		// no validation rules for Uid
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on ListUsersAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUsersAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersAdminRequestMultiError, or nil if none found.
func (m *ListUsersAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if len(errors) > 0 {
		return ListUsersAdminRequestMultiError(errors)
	}

	return nil
}

// ListUsersAdminRequestMultiError is an error wrapping multiple validation
// errors returned by ListUsersAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUsersAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersAdminRequestMultiError) AllErrors() []error { return m }

// ListUsersAdminRequestValidationError is the validation error returned by
// ListUsersAdminRequest.Validate if the designated constraints aren't met.
type ListUsersAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersAdminRequestValidationError) ErrorName() string {
	return "ListUsersAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersAdminRequestValidationError{}

// Validate checks the field values on ListUsersAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUsersAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersAdminResponseMultiError, or nil if none found.
func (m *ListUsersAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersAdminResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersAdminResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersAdminResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListUsersAdminResponseMultiError(errors)
	}

	return nil
}

// ListUsersAdminResponseMultiError is an error wrapping multiple validation
// errors returned by ListUsersAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUsersAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersAdminResponseMultiError) AllErrors() []error { return m }

// ListUsersAdminResponseValidationError is the validation error returned by
// ListUsersAdminResponse.Validate if the designated constraints aren't met.
type ListUsersAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersAdminResponseValidationError) ErrorName() string {
	return "ListUsersAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersAdminResponseValidationError{}

// Validate checks the field values on GetUserAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserAdminRequestMultiError, or nil if none found.
func (m *GetUserAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetUserAdminRequestMultiError(errors)
	}

	return nil
}

// GetUserAdminRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAdminRequestMultiError) AllErrors() []error { return m }

// GetUserAdminRequestValidationError is the validation error returned by
// GetUserAdminRequest.Validate if the designated constraints aren't met.
type GetUserAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAdminRequestValidationError) ErrorName() string {
	return "GetUserAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAdminRequestValidationError{}

// Validate checks the field values on GetUserAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserAdminResponseMultiError, or nil if none found.
func (m *GetUserAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserAdminResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserAdminResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserAdminResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserAdminResponseMultiError(errors)
	}

	return nil
}

// GetUserAdminResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserAdminResponseMultiError) AllErrors() []error { return m }

// GetUserAdminResponseValidationError is the validation error returned by
// GetUserAdminResponse.Validate if the designated constraints aren't met.
type GetUserAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserAdminResponseValidationError) ErrorName() string {
	return "GetUserAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserAdminResponseValidationError{}

// Validate checks the field values on LookUpUserAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookUpUserAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookUpUserAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookUpUserAdminRequestMultiError, or nil if none found.
func (m *LookUpUserAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LookUpUserAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUid

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return LookUpUserAdminRequestMultiError(errors)
	}

	return nil
}

// LookUpUserAdminRequestMultiError is an error wrapping multiple validation
// errors returned by LookUpUserAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type LookUpUserAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookUpUserAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookUpUserAdminRequestMultiError) AllErrors() []error { return m }

// LookUpUserAdminRequestValidationError is the validation error returned by
// LookUpUserAdminRequest.Validate if the designated constraints aren't met.
type LookUpUserAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookUpUserAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookUpUserAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookUpUserAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookUpUserAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookUpUserAdminRequestValidationError) ErrorName() string {
	return "LookUpUserAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LookUpUserAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookUpUserAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookUpUserAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookUpUserAdminRequestValidationError{}

// Validate checks the field values on LookUpUserAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookUpUserAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookUpUserAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookUpUserAdminResponseMultiError, or nil if none found.
func (m *LookUpUserAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LookUpUserAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LookUpUserAdminResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LookUpUserAdminResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LookUpUserAdminResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LookUpUserAdminResponseMultiError(errors)
	}

	return nil
}

// LookUpUserAdminResponseMultiError is an error wrapping multiple validation
// errors returned by LookUpUserAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type LookUpUserAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookUpUserAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookUpUserAdminResponseMultiError) AllErrors() []error { return m }

// LookUpUserAdminResponseValidationError is the validation error returned by
// LookUpUserAdminResponse.Validate if the designated constraints aren't met.
type LookUpUserAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookUpUserAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookUpUserAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookUpUserAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookUpUserAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookUpUserAdminResponseValidationError) ErrorName() string {
	return "LookUpUserAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LookUpUserAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookUpUserAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookUpUserAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookUpUserAdminResponseValidationError{}

// Validate checks the field values on ListOrganizationsAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsAdminRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationsAdminRequestMultiError, or nil if none found.
func (m *ListOrganizationsAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if len(errors) > 0 {
		return ListOrganizationsAdminRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationsAdminRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationsAdminRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationsAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsAdminRequestMultiError) AllErrors() []error { return m }

// ListOrganizationsAdminRequestValidationError is the validation error
// returned by ListOrganizationsAdminRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationsAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsAdminRequestValidationError) ErrorName() string {
	return "ListOrganizationsAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsAdminRequestValidationError{}

// Validate checks the field values on ListOrganizationsAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsAdminResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationsAdminResponseMultiError, or nil if none found.
func (m *ListOrganizationsAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsAdminResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsAdminResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsAdminResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListOrganizationsAdminResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationsAdminResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationsAdminResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationsAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsAdminResponseMultiError) AllErrors() []error { return m }

// ListOrganizationsAdminResponseValidationError is the validation error
// returned by ListOrganizationsAdminResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationsAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsAdminResponseValidationError) ErrorName() string {
	return "ListOrganizationsAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsAdminResponseValidationError{}

// Validate checks the field values on GetOrganizationAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationAdminRequestMultiError, or nil if none found.
func (m *GetOrganizationAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetOrganizationAdminRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationAdminRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationAdminRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationAdminRequestMultiError) AllErrors() []error { return m }

// GetOrganizationAdminRequestValidationError is the validation error returned
// by GetOrganizationAdminRequest.Validate if the designated constraints
// aren't met.
type GetOrganizationAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationAdminRequestValidationError) ErrorName() string {
	return "GetOrganizationAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationAdminRequestValidationError{}

// Validate checks the field values on GetOrganizationAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationAdminResponseMultiError, or nil if none found.
func (m *GetOrganizationAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationAdminResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationAdminResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationAdminResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationAdminResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationAdminResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationAdminResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationAdminResponseMultiError) AllErrors() []error { return m }

// GetOrganizationAdminResponseValidationError is the validation error returned
// by GetOrganizationAdminResponse.Validate if the designated constraints
// aren't met.
type GetOrganizationAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationAdminResponseValidationError) ErrorName() string {
	return "GetOrganizationAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationAdminResponseValidationError{}

// Validate checks the field values on LookUpOrganizationAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookUpOrganizationAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookUpOrganizationAdminRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LookUpOrganizationAdminRequestMultiError, or nil if none found.
func (m *LookUpOrganizationAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LookUpOrganizationAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationUid

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return LookUpOrganizationAdminRequestMultiError(errors)
	}

	return nil
}

// LookUpOrganizationAdminRequestMultiError is an error wrapping multiple
// validation errors returned by LookUpOrganizationAdminRequest.ValidateAll()
// if the designated constraints aren't met.
type LookUpOrganizationAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookUpOrganizationAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookUpOrganizationAdminRequestMultiError) AllErrors() []error { return m }

// LookUpOrganizationAdminRequestValidationError is the validation error
// returned by LookUpOrganizationAdminRequest.Validate if the designated
// constraints aren't met.
type LookUpOrganizationAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookUpOrganizationAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookUpOrganizationAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookUpOrganizationAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookUpOrganizationAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookUpOrganizationAdminRequestValidationError) ErrorName() string {
	return "LookUpOrganizationAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LookUpOrganizationAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookUpOrganizationAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookUpOrganizationAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookUpOrganizationAdminRequestValidationError{}

// Validate checks the field values on LookUpOrganizationAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookUpOrganizationAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookUpOrganizationAdminResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LookUpOrganizationAdminResponseMultiError, or nil if none found.
func (m *LookUpOrganizationAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LookUpOrganizationAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LookUpOrganizationAdminResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LookUpOrganizationAdminResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LookUpOrganizationAdminResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LookUpOrganizationAdminResponseMultiError(errors)
	}

	return nil
}

// LookUpOrganizationAdminResponseMultiError is an error wrapping multiple
// validation errors returned by LookUpOrganizationAdminResponse.ValidateAll()
// if the designated constraints aren't met.
type LookUpOrganizationAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookUpOrganizationAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookUpOrganizationAdminResponseMultiError) AllErrors() []error { return m }

// LookUpOrganizationAdminResponseValidationError is the validation error
// returned by LookUpOrganizationAdminResponse.Validate if the designated
// constraints aren't met.
type LookUpOrganizationAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookUpOrganizationAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookUpOrganizationAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookUpOrganizationAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookUpOrganizationAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookUpOrganizationAdminResponseValidationError) ErrorName() string {
	return "LookUpOrganizationAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LookUpOrganizationAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookUpOrganizationAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookUpOrganizationAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookUpOrganizationAdminResponseValidationError{}

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersRequestMultiError, or nil if none found.
func (m *ListUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if len(errors) > 0 {
		return ListUsersRequestMultiError(errors)
	}

	return nil
}

// ListUsersRequestMultiError is an error wrapping multiple validation errors
// returned by ListUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersRequestMultiError) AllErrors() []error { return m }

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUsersResponseMultiError, or nil if none found.
func (m *ListUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListUsersResponseMultiError(errors)
	}

	return nil
}

// ListUsersResponseMultiError is an error wrapping multiple validation errors
// returned by ListUsersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUsersResponseMultiError) AllErrors() []error { return m }

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on GetAuthenticatedUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthenticatedUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthenticatedUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthenticatedUserRequestMultiError, or nil if none found.
func (m *GetAuthenticatedUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthenticatedUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAuthenticatedUserRequestMultiError(errors)
	}

	return nil
}

// GetAuthenticatedUserRequestMultiError is an error wrapping multiple
// validation errors returned by GetAuthenticatedUserRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAuthenticatedUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthenticatedUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthenticatedUserRequestMultiError) AllErrors() []error { return m }

// GetAuthenticatedUserRequestValidationError is the validation error returned
// by GetAuthenticatedUserRequest.Validate if the designated constraints
// aren't met.
type GetAuthenticatedUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthenticatedUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthenticatedUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthenticatedUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthenticatedUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthenticatedUserRequestValidationError) ErrorName() string {
	return "GetAuthenticatedUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthenticatedUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthenticatedUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthenticatedUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthenticatedUserRequestValidationError{}

// Validate checks the field values on GetAuthenticatedUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthenticatedUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthenticatedUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthenticatedUserResponseMultiError, or nil if none found.
func (m *GetAuthenticatedUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthenticatedUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAuthenticatedUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAuthenticatedUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAuthenticatedUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAuthenticatedUserResponseMultiError(errors)
	}

	return nil
}

// GetAuthenticatedUserResponseMultiError is an error wrapping multiple
// validation errors returned by GetAuthenticatedUserResponse.ValidateAll() if
// the designated constraints aren't met.
type GetAuthenticatedUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthenticatedUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthenticatedUserResponseMultiError) AllErrors() []error { return m }

// GetAuthenticatedUserResponseValidationError is the validation error returned
// by GetAuthenticatedUserResponse.Validate if the designated constraints
// aren't met.
type GetAuthenticatedUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthenticatedUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthenticatedUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthenticatedUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthenticatedUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthenticatedUserResponseValidationError) ErrorName() string {
	return "GetAuthenticatedUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthenticatedUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthenticatedUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthenticatedUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthenticatedUserResponseValidationError{}

// Validate checks the field values on PatchAuthenticatedUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchAuthenticatedUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchAuthenticatedUserRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PatchAuthenticatedUserRequestMultiError, or nil if none found.
func (m *PatchAuthenticatedUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchAuthenticatedUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchAuthenticatedUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchAuthenticatedUserRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchAuthenticatedUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchAuthenticatedUserRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchAuthenticatedUserRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchAuthenticatedUserRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PatchAuthenticatedUserRequestMultiError(errors)
	}

	return nil
}

// PatchAuthenticatedUserRequestMultiError is an error wrapping multiple
// validation errors returned by PatchAuthenticatedUserRequest.ValidateAll()
// if the designated constraints aren't met.
type PatchAuthenticatedUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchAuthenticatedUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchAuthenticatedUserRequestMultiError) AllErrors() []error { return m }

// PatchAuthenticatedUserRequestValidationError is the validation error
// returned by PatchAuthenticatedUserRequest.Validate if the designated
// constraints aren't met.
type PatchAuthenticatedUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchAuthenticatedUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchAuthenticatedUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchAuthenticatedUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchAuthenticatedUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchAuthenticatedUserRequestValidationError) ErrorName() string {
	return "PatchAuthenticatedUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchAuthenticatedUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchAuthenticatedUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchAuthenticatedUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchAuthenticatedUserRequestValidationError{}

// Validate checks the field values on PatchAuthenticatedUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchAuthenticatedUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchAuthenticatedUserResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PatchAuthenticatedUserResponseMultiError, or nil if none found.
func (m *PatchAuthenticatedUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchAuthenticatedUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchAuthenticatedUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchAuthenticatedUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchAuthenticatedUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PatchAuthenticatedUserResponseMultiError(errors)
	}

	return nil
}

// PatchAuthenticatedUserResponseMultiError is an error wrapping multiple
// validation errors returned by PatchAuthenticatedUserResponse.ValidateAll()
// if the designated constraints aren't met.
type PatchAuthenticatedUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchAuthenticatedUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchAuthenticatedUserResponseMultiError) AllErrors() []error { return m }

// PatchAuthenticatedUserResponseValidationError is the validation error
// returned by PatchAuthenticatedUserResponse.Validate if the designated
// constraints aren't met.
type PatchAuthenticatedUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchAuthenticatedUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchAuthenticatedUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchAuthenticatedUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchAuthenticatedUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchAuthenticatedUserResponseValidationError) ErrorName() string {
	return "PatchAuthenticatedUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PatchAuthenticatedUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchAuthenticatedUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchAuthenticatedUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchAuthenticatedUserResponseValidationError{}

// Validate checks the field values on CheckNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckNamespaceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckNamespaceRequestMultiError, or nil if none found.
func (m *CheckNamespaceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckNamespaceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CheckNamespaceRequestMultiError(errors)
	}

	return nil
}

// CheckNamespaceRequestMultiError is an error wrapping multiple validation
// errors returned by CheckNamespaceRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckNamespaceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckNamespaceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckNamespaceRequestMultiError) AllErrors() []error { return m }

// CheckNamespaceRequestValidationError is the validation error returned by
// CheckNamespaceRequest.Validate if the designated constraints aren't met.
type CheckNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckNamespaceRequestValidationError) ErrorName() string {
	return "CheckNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckNamespaceRequestValidationError{}

// Validate checks the field values on CheckNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckNamespaceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckNamespaceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckNamespaceResponseMultiError, or nil if none found.
func (m *CheckNamespaceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckNamespaceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return CheckNamespaceResponseMultiError(errors)
	}

	return nil
}

// CheckNamespaceResponseMultiError is an error wrapping multiple validation
// errors returned by CheckNamespaceResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckNamespaceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckNamespaceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckNamespaceResponseMultiError) AllErrors() []error { return m }

// CheckNamespaceResponseValidationError is the validation error returned by
// CheckNamespaceResponse.Validate if the designated constraints aren't met.
type CheckNamespaceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckNamespaceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckNamespaceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckNamespaceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckNamespaceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckNamespaceResponseValidationError) ErrorName() string {
	return "CheckNamespaceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckNamespaceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckNamespaceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckNamespaceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckNamespaceResponseValidationError{}

// Validate checks the field values on CheckNamespaceAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckNamespaceAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckNamespaceAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckNamespaceAdminRequestMultiError, or nil if none found.
func (m *CheckNamespaceAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckNamespaceAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CheckNamespaceAdminRequestMultiError(errors)
	}

	return nil
}

// CheckNamespaceAdminRequestMultiError is an error wrapping multiple
// validation errors returned by CheckNamespaceAdminRequest.ValidateAll() if
// the designated constraints aren't met.
type CheckNamespaceAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckNamespaceAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckNamespaceAdminRequestMultiError) AllErrors() []error { return m }

// CheckNamespaceAdminRequestValidationError is the validation error returned
// by CheckNamespaceAdminRequest.Validate if the designated constraints aren't met.
type CheckNamespaceAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckNamespaceAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckNamespaceAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckNamespaceAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckNamespaceAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckNamespaceAdminRequestValidationError) ErrorName() string {
	return "CheckNamespaceAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckNamespaceAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckNamespaceAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckNamespaceAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckNamespaceAdminRequestValidationError{}

// Validate checks the field values on CheckNamespaceAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckNamespaceAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckNamespaceAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckNamespaceAdminResponseMultiError, or nil if none found.
func (m *CheckNamespaceAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckNamespaceAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Uid

	switch v := m.Owner.(type) {
	case *CheckNamespaceAdminResponse_User:
		if v == nil {
			err := CheckNamespaceAdminResponseValidationError{
				field:  "Owner",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckNamespaceAdminResponseValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckNamespaceAdminResponseValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckNamespaceAdminResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CheckNamespaceAdminResponse_Organization:
		if v == nil {
			err := CheckNamespaceAdminResponseValidationError{
				field:  "Owner",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOrganization()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckNamespaceAdminResponseValidationError{
						field:  "Organization",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckNamespaceAdminResponseValidationError{
						field:  "Organization",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckNamespaceAdminResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CheckNamespaceAdminResponseMultiError(errors)
	}

	return nil
}

// CheckNamespaceAdminResponseMultiError is an error wrapping multiple
// validation errors returned by CheckNamespaceAdminResponse.ValidateAll() if
// the designated constraints aren't met.
type CheckNamespaceAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckNamespaceAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckNamespaceAdminResponseMultiError) AllErrors() []error { return m }

// CheckNamespaceAdminResponseValidationError is the validation error returned
// by CheckNamespaceAdminResponse.Validate if the designated constraints
// aren't met.
type CheckNamespaceAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckNamespaceAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckNamespaceAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckNamespaceAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckNamespaceAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckNamespaceAdminResponseValidationError) ErrorName() string {
	return "CheckNamespaceAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckNamespaceAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckNamespaceAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckNamespaceAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckNamespaceAdminResponseValidationError{}

// Validate checks the field values on CheckNamespaceByUIDAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckNamespaceByUIDAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckNamespaceByUIDAdminRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckNamespaceByUIDAdminRequestMultiError, or nil if none found.
func (m *CheckNamespaceByUIDAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckNamespaceByUIDAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	if len(errors) > 0 {
		return CheckNamespaceByUIDAdminRequestMultiError(errors)
	}

	return nil
}

// CheckNamespaceByUIDAdminRequestMultiError is an error wrapping multiple
// validation errors returned by CheckNamespaceByUIDAdminRequest.ValidateAll()
// if the designated constraints aren't met.
type CheckNamespaceByUIDAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckNamespaceByUIDAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckNamespaceByUIDAdminRequestMultiError) AllErrors() []error { return m }

// CheckNamespaceByUIDAdminRequestValidationError is the validation error
// returned by CheckNamespaceByUIDAdminRequest.Validate if the designated
// constraints aren't met.
type CheckNamespaceByUIDAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckNamespaceByUIDAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckNamespaceByUIDAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckNamespaceByUIDAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckNamespaceByUIDAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckNamespaceByUIDAdminRequestValidationError) ErrorName() string {
	return "CheckNamespaceByUIDAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckNamespaceByUIDAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckNamespaceByUIDAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckNamespaceByUIDAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckNamespaceByUIDAdminRequestValidationError{}

// Validate checks the field values on CheckNamespaceByUIDAdminResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CheckNamespaceByUIDAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckNamespaceByUIDAdminResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckNamespaceByUIDAdminResponseMultiError, or nil if none found.
func (m *CheckNamespaceByUIDAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckNamespaceByUIDAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Id

	switch v := m.Owner.(type) {
	case *CheckNamespaceByUIDAdminResponse_User:
		if v == nil {
			err := CheckNamespaceByUIDAdminResponseValidationError{
				field:  "Owner",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckNamespaceByUIDAdminResponseValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckNamespaceByUIDAdminResponseValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckNamespaceByUIDAdminResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CheckNamespaceByUIDAdminResponse_Organization:
		if v == nil {
			err := CheckNamespaceByUIDAdminResponseValidationError{
				field:  "Owner",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOrganization()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckNamespaceByUIDAdminResponseValidationError{
						field:  "Organization",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckNamespaceByUIDAdminResponseValidationError{
						field:  "Organization",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckNamespaceByUIDAdminResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CheckNamespaceByUIDAdminResponseMultiError(errors)
	}

	return nil
}

// CheckNamespaceByUIDAdminResponseMultiError is an error wrapping multiple
// validation errors returned by
// CheckNamespaceByUIDAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckNamespaceByUIDAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckNamespaceByUIDAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckNamespaceByUIDAdminResponseMultiError) AllErrors() []error { return m }

// CheckNamespaceByUIDAdminResponseValidationError is the validation error
// returned by CheckNamespaceByUIDAdminResponse.Validate if the designated
// constraints aren't met.
type CheckNamespaceByUIDAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckNamespaceByUIDAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckNamespaceByUIDAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckNamespaceByUIDAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckNamespaceByUIDAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckNamespaceByUIDAdminResponseValidationError) ErrorName() string {
	return "CheckNamespaceByUIDAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckNamespaceByUIDAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckNamespaceByUIDAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckNamespaceByUIDAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckNamespaceByUIDAdminResponseValidationError{}

// Validate checks the field values on ApiToken with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ApiToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApiToken with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ApiTokenMultiError, or nil
// if none found.
func (m *ApiToken) ValidateAll() error {
	return m.validate(true)
}

func (m *ApiToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLastUseTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApiTokenValidationError{
					field:  "LastUseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApiTokenValidationError{
					field:  "LastUseTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastUseTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApiTokenValidationError{
				field:  "LastUseTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Uid

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApiTokenValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApiTokenValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApiTokenValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApiTokenValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApiTokenValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApiTokenValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AccessToken

	// no validation rules for State

	// no validation rules for TokenType

	switch v := m.Expiration.(type) {
	case *ApiToken_Ttl:
		if v == nil {
			err := ApiTokenValidationError{
				field:  "Expiration",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Ttl
	case *ApiToken_ExpireTime:
		if v == nil {
			err := ApiTokenValidationError{
				field:  "Expiration",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExpireTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ApiTokenValidationError{
						field:  "ExpireTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ApiTokenValidationError{
						field:  "ExpireTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpireTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApiTokenValidationError{
					field:  "ExpireTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ApiTokenMultiError(errors)
	}

	return nil
}

// ApiTokenMultiError is an error wrapping multiple validation errors returned
// by ApiToken.ValidateAll() if the designated constraints aren't met.
type ApiTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApiTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApiTokenMultiError) AllErrors() []error { return m }

// ApiTokenValidationError is the validation error returned by
// ApiToken.Validate if the designated constraints aren't met.
type ApiTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApiTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApiTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApiTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApiTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApiTokenValidationError) ErrorName() string { return "ApiTokenValidationError" }

// Error satisfies the builtin error interface
func (e ApiTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApiToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApiTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApiTokenValidationError{}

// Validate checks the field values on CreateTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTokenRequestMultiError, or nil if none found.
func (m *CreateTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTokenRequestValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTokenRequestValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTokenRequestValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTokenRequestMultiError(errors)
	}

	return nil
}

// CreateTokenRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTokenRequestMultiError) AllErrors() []error { return m }

// CreateTokenRequestValidationError is the validation error returned by
// CreateTokenRequest.Validate if the designated constraints aren't met.
type CreateTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTokenRequestValidationError) ErrorName() string {
	return "CreateTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTokenRequestValidationError{}

// Validate checks the field values on CreateTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTokenResponseMultiError, or nil if none found.
func (m *CreateTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTokenResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTokenResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTokenResponseValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTokenResponseMultiError(errors)
	}

	return nil
}

// CreateTokenResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTokenResponseMultiError) AllErrors() []error { return m }

// CreateTokenResponseValidationError is the validation error returned by
// CreateTokenResponse.Validate if the designated constraints aren't met.
type CreateTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTokenResponseValidationError) ErrorName() string {
	return "CreateTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTokenResponseValidationError{}

// Validate checks the field values on ListTokensRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTokensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTokensRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTokensRequestMultiError, or nil if none found.
func (m *ListTokensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTokensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if len(errors) > 0 {
		return ListTokensRequestMultiError(errors)
	}

	return nil
}

// ListTokensRequestMultiError is an error wrapping multiple validation errors
// returned by ListTokensRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTokensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTokensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTokensRequestMultiError) AllErrors() []error { return m }

// ListTokensRequestValidationError is the validation error returned by
// ListTokensRequest.Validate if the designated constraints aren't met.
type ListTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTokensRequestValidationError) ErrorName() string {
	return "ListTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTokensRequestValidationError{}

// Validate checks the field values on ListTokensResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTokensResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTokensResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTokensResponseMultiError, or nil if none found.
func (m *ListTokensResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTokensResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTokens() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTokensResponseValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTokensResponseValidationError{
						field:  fmt.Sprintf("Tokens[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTokensResponseValidationError{
					field:  fmt.Sprintf("Tokens[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListTokensResponseMultiError(errors)
	}

	return nil
}

// ListTokensResponseMultiError is an error wrapping multiple validation errors
// returned by ListTokensResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTokensResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTokensResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTokensResponseMultiError) AllErrors() []error { return m }

// ListTokensResponseValidationError is the validation error returned by
// ListTokensResponse.Validate if the designated constraints aren't met.
type ListTokensResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTokensResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTokensResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTokensResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTokensResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTokensResponseValidationError) ErrorName() string {
	return "ListTokensResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTokensResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTokensResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTokensResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTokensResponseValidationError{}

// Validate checks the field values on GetTokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTokenRequestMultiError, or nil if none found.
func (m *GetTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenId

	if len(errors) > 0 {
		return GetTokenRequestMultiError(errors)
	}

	return nil
}

// GetTokenRequestMultiError is an error wrapping multiple validation errors
// returned by GetTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenRequestMultiError) AllErrors() []error { return m }

// GetTokenRequestValidationError is the validation error returned by
// GetTokenRequest.Validate if the designated constraints aren't met.
type GetTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenRequestValidationError) ErrorName() string { return "GetTokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenRequestValidationError{}

// Validate checks the field values on GetTokenResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTokenResponseMultiError, or nil if none found.
func (m *GetTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTokenResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTokenResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTokenResponseValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTokenResponseMultiError(errors)
	}

	return nil
}

// GetTokenResponseMultiError is an error wrapping multiple validation errors
// returned by GetTokenResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTokenResponseMultiError) AllErrors() []error { return m }

// GetTokenResponseValidationError is the validation error returned by
// GetTokenResponse.Validate if the designated constraints aren't met.
type GetTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTokenResponseValidationError) ErrorName() string { return "GetTokenResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTokenResponseValidationError{}

// Validate checks the field values on DeleteTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTokenRequestMultiError, or nil if none found.
func (m *DeleteTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenId

	if len(errors) > 0 {
		return DeleteTokenRequestMultiError(errors)
	}

	return nil
}

// DeleteTokenRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTokenRequestMultiError) AllErrors() []error { return m }

// DeleteTokenRequestValidationError is the validation error returned by
// DeleteTokenRequest.Validate if the designated constraints aren't met.
type DeleteTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTokenRequestValidationError) ErrorName() string {
	return "DeleteTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTokenRequestValidationError{}

// Validate checks the field values on DeleteTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTokenResponseMultiError, or nil if none found.
func (m *DeleteTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTokenResponseMultiError(errors)
	}

	return nil
}

// DeleteTokenResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTokenResponseMultiError) AllErrors() []error { return m }

// DeleteTokenResponseValidationError is the validation error returned by
// DeleteTokenResponse.Validate if the designated constraints aren't met.
type DeleteTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTokenResponseValidationError) ErrorName() string {
	return "DeleteTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTokenResponseValidationError{}

// Validate checks the field values on ValidateTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateTokenRequestMultiError, or nil if none found.
func (m *ValidateTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ValidateTokenRequestMultiError(errors)
	}

	return nil
}

// ValidateTokenRequestMultiError is an error wrapping multiple validation
// errors returned by ValidateTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type ValidateTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateTokenRequestMultiError) AllErrors() []error { return m }

// ValidateTokenRequestValidationError is the validation error returned by
// ValidateTokenRequest.Validate if the designated constraints aren't met.
type ValidateTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateTokenRequestValidationError) ErrorName() string {
	return "ValidateTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateTokenRequestValidationError{}

// Validate checks the field values on ValidateTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateTokenResponseMultiError, or nil if none found.
func (m *ValidateTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserUid

	if len(errors) > 0 {
		return ValidateTokenResponseMultiError(errors)
	}

	return nil
}

// ValidateTokenResponseMultiError is an error wrapping multiple validation
// errors returned by ValidateTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type ValidateTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateTokenResponseMultiError) AllErrors() []error { return m }

// ValidateTokenResponseValidationError is the validation error returned by
// ValidateTokenResponse.Validate if the designated constraints aren't met.
type ValidateTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateTokenResponseValidationError) ErrorName() string {
	return "ValidateTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateTokenResponseValidationError{}

// Validate checks the field values on GetRemainingCreditRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRemainingCreditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRemainingCreditRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRemainingCreditRequestMultiError, or nil if none found.
func (m *GetRemainingCreditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRemainingCreditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	if len(errors) > 0 {
		return GetRemainingCreditRequestMultiError(errors)
	}

	return nil
}

// GetRemainingCreditRequestMultiError is an error wrapping multiple validation
// errors returned by GetRemainingCreditRequest.ValidateAll() if the
// designated constraints aren't met.
type GetRemainingCreditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRemainingCreditRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRemainingCreditRequestMultiError) AllErrors() []error { return m }

// GetRemainingCreditRequestValidationError is the validation error returned by
// GetRemainingCreditRequest.Validate if the designated constraints aren't met.
type GetRemainingCreditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRemainingCreditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRemainingCreditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRemainingCreditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRemainingCreditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRemainingCreditRequestValidationError) ErrorName() string {
	return "GetRemainingCreditRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRemainingCreditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRemainingCreditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRemainingCreditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRemainingCreditRequestValidationError{}

// Validate checks the field values on GetRemainingCreditResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRemainingCreditResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRemainingCreditResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRemainingCreditResponseMultiError, or nil if none found.
func (m *GetRemainingCreditResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRemainingCreditResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Perishable

	// no validation rules for Imperishable

	// no validation rules for Total

	if len(errors) > 0 {
		return GetRemainingCreditResponseMultiError(errors)
	}

	return nil
}

// GetRemainingCreditResponseMultiError is an error wrapping multiple
// validation errors returned by GetRemainingCreditResponse.ValidateAll() if
// the designated constraints aren't met.
type GetRemainingCreditResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRemainingCreditResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRemainingCreditResponseMultiError) AllErrors() []error { return m }

// GetRemainingCreditResponseValidationError is the validation error returned
// by GetRemainingCreditResponse.Validate if the designated constraints aren't met.
type GetRemainingCreditResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRemainingCreditResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRemainingCreditResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRemainingCreditResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRemainingCreditResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRemainingCreditResponseValidationError) ErrorName() string {
	return "GetRemainingCreditResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRemainingCreditResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRemainingCreditResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRemainingCreditResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRemainingCreditResponseValidationError{}

// Validate checks the field values on GetRemainingCreditAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRemainingCreditAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRemainingCreditAdminRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetRemainingCreditAdminRequestMultiError, or nil if none found.
func (m *GetRemainingCreditAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRemainingCreditAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceUid

	if len(errors) > 0 {
		return GetRemainingCreditAdminRequestMultiError(errors)
	}

	return nil
}

// GetRemainingCreditAdminRequestMultiError is an error wrapping multiple
// validation errors returned by GetRemainingCreditAdminRequest.ValidateAll()
// if the designated constraints aren't met.
type GetRemainingCreditAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRemainingCreditAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRemainingCreditAdminRequestMultiError) AllErrors() []error { return m }

// GetRemainingCreditAdminRequestValidationError is the validation error
// returned by GetRemainingCreditAdminRequest.Validate if the designated
// constraints aren't met.
type GetRemainingCreditAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRemainingCreditAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRemainingCreditAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRemainingCreditAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRemainingCreditAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRemainingCreditAdminRequestValidationError) ErrorName() string {
	return "GetRemainingCreditAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRemainingCreditAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRemainingCreditAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRemainingCreditAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRemainingCreditAdminRequestValidationError{}

// Validate checks the field values on GetRemainingCreditAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRemainingCreditAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRemainingCreditAdminResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetRemainingCreditAdminResponseMultiError, or nil if none found.
func (m *GetRemainingCreditAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRemainingCreditAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	if len(errors) > 0 {
		return GetRemainingCreditAdminResponseMultiError(errors)
	}

	return nil
}

// GetRemainingCreditAdminResponseMultiError is an error wrapping multiple
// validation errors returned by GetRemainingCreditAdminResponse.ValidateAll()
// if the designated constraints aren't met.
type GetRemainingCreditAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRemainingCreditAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRemainingCreditAdminResponseMultiError) AllErrors() []error { return m }

// GetRemainingCreditAdminResponseValidationError is the validation error
// returned by GetRemainingCreditAdminResponse.Validate if the designated
// constraints aren't met.
type GetRemainingCreditAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRemainingCreditAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRemainingCreditAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRemainingCreditAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRemainingCreditAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRemainingCreditAdminResponseValidationError) ErrorName() string {
	return "GetRemainingCreditAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRemainingCreditAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRemainingCreditAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRemainingCreditAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRemainingCreditAdminResponseValidationError{}

// Validate checks the field values on SubtractCreditAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubtractCreditAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubtractCreditAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubtractCreditAdminRequestMultiError, or nil if none found.
func (m *SubtractCreditAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubtractCreditAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	// no validation rules for Concept

	// no validation rules for NamespaceUid

	if len(errors) > 0 {
		return SubtractCreditAdminRequestMultiError(errors)
	}

	return nil
}

// SubtractCreditAdminRequestMultiError is an error wrapping multiple
// validation errors returned by SubtractCreditAdminRequest.ValidateAll() if
// the designated constraints aren't met.
type SubtractCreditAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubtractCreditAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubtractCreditAdminRequestMultiError) AllErrors() []error { return m }

// SubtractCreditAdminRequestValidationError is the validation error returned
// by SubtractCreditAdminRequest.Validate if the designated constraints aren't met.
type SubtractCreditAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubtractCreditAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubtractCreditAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubtractCreditAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubtractCreditAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubtractCreditAdminRequestValidationError) ErrorName() string {
	return "SubtractCreditAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubtractCreditAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubtractCreditAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubtractCreditAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubtractCreditAdminRequestValidationError{}

// Validate checks the field values on SubtractCreditAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubtractCreditAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubtractCreditAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubtractCreditAdminResponseMultiError, or nil if none found.
func (m *SubtractCreditAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubtractCreditAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Amount

	if len(errors) > 0 {
		return SubtractCreditAdminResponseMultiError(errors)
	}

	return nil
}

// SubtractCreditAdminResponseMultiError is an error wrapping multiple
// validation errors returned by SubtractCreditAdminResponse.ValidateAll() if
// the designated constraints aren't met.
type SubtractCreditAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubtractCreditAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubtractCreditAdminResponseMultiError) AllErrors() []error { return m }

// SubtractCreditAdminResponseValidationError is the validation error returned
// by SubtractCreditAdminResponse.Validate if the designated constraints
// aren't met.
type SubtractCreditAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubtractCreditAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubtractCreditAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubtractCreditAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubtractCreditAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubtractCreditAdminResponseValidationError) ErrorName() string {
	return "SubtractCreditAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubtractCreditAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubtractCreditAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubtractCreditAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubtractCreditAdminResponseValidationError{}

// Validate checks the field values on AuthTokenIssuerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthTokenIssuerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthTokenIssuerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthTokenIssuerRequestMultiError, or nil if none found.
func (m *AuthTokenIssuerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthTokenIssuerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return AuthTokenIssuerRequestMultiError(errors)
	}

	return nil
}

// AuthTokenIssuerRequestMultiError is an error wrapping multiple validation
// errors returned by AuthTokenIssuerRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthTokenIssuerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthTokenIssuerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthTokenIssuerRequestMultiError) AllErrors() []error { return m }

// AuthTokenIssuerRequestValidationError is the validation error returned by
// AuthTokenIssuerRequest.Validate if the designated constraints aren't met.
type AuthTokenIssuerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthTokenIssuerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthTokenIssuerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthTokenIssuerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthTokenIssuerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthTokenIssuerRequestValidationError) ErrorName() string {
	return "AuthTokenIssuerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthTokenIssuerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthTokenIssuerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthTokenIssuerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthTokenIssuerRequestValidationError{}

// Validate checks the field values on AuthTokenIssuerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthTokenIssuerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthTokenIssuerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthTokenIssuerResponseMultiError, or nil if none found.
func (m *AuthTokenIssuerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthTokenIssuerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccessToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthTokenIssuerResponseValidationError{
					field:  "AccessToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthTokenIssuerResponseValidationError{
					field:  "AccessToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccessToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthTokenIssuerResponseValidationError{
				field:  "AccessToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthTokenIssuerResponseMultiError(errors)
	}

	return nil
}

// AuthTokenIssuerResponseMultiError is an error wrapping multiple validation
// errors returned by AuthTokenIssuerResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthTokenIssuerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthTokenIssuerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthTokenIssuerResponseMultiError) AllErrors() []error { return m }

// AuthTokenIssuerResponseValidationError is the validation error returned by
// AuthTokenIssuerResponse.Validate if the designated constraints aren't met.
type AuthTokenIssuerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthTokenIssuerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthTokenIssuerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthTokenIssuerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthTokenIssuerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthTokenIssuerResponseValidationError) ErrorName() string {
	return "AuthTokenIssuerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthTokenIssuerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthTokenIssuerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthTokenIssuerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthTokenIssuerResponseValidationError{}

// Validate checks the field values on AuthLoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLoginRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLoginRequestMultiError, or nil if none found.
func (m *AuthLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return AuthLoginRequestMultiError(errors)
	}

	return nil
}

// AuthLoginRequestMultiError is an error wrapping multiple validation errors
// returned by AuthLoginRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLoginRequestMultiError) AllErrors() []error { return m }

// AuthLoginRequestValidationError is the validation error returned by
// AuthLoginRequest.Validate if the designated constraints aren't met.
type AuthLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLoginRequestValidationError) ErrorName() string { return "AuthLoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLoginRequestValidationError{}

// Validate checks the field values on AuthLoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLoginResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLoginResponseMultiError, or nil if none found.
func (m *AuthLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	if len(errors) > 0 {
		return AuthLoginResponseMultiError(errors)
	}

	return nil
}

// AuthLoginResponseMultiError is an error wrapping multiple validation errors
// returned by AuthLoginResponse.ValidateAll() if the designated constraints
// aren't met.
type AuthLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLoginResponseMultiError) AllErrors() []error { return m }

// AuthLoginResponseValidationError is the validation error returned by
// AuthLoginResponse.Validate if the designated constraints aren't met.
type AuthLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLoginResponseValidationError) ErrorName() string {
	return "AuthLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLoginResponseValidationError{}

// Validate checks the field values on AuthLogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthLogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLogoutRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLogoutRequestMultiError, or nil if none found.
func (m *AuthLogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthLogoutRequestMultiError(errors)
	}

	return nil
}

// AuthLogoutRequestMultiError is an error wrapping multiple validation errors
// returned by AuthLogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type AuthLogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLogoutRequestMultiError) AllErrors() []error { return m }

// AuthLogoutRequestValidationError is the validation error returned by
// AuthLogoutRequest.Validate if the designated constraints aren't met.
type AuthLogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLogoutRequestValidationError) ErrorName() string {
	return "AuthLogoutRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthLogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLogoutRequestValidationError{}

// Validate checks the field values on AuthLogoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthLogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLogoutResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLogoutResponseMultiError, or nil if none found.
func (m *AuthLogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthLogoutResponseMultiError(errors)
	}

	return nil
}

// AuthLogoutResponseMultiError is an error wrapping multiple validation errors
// returned by AuthLogoutResponse.ValidateAll() if the designated constraints
// aren't met.
type AuthLogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLogoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLogoutResponseMultiError) AllErrors() []error { return m }

// AuthLogoutResponseValidationError is the validation error returned by
// AuthLogoutResponse.Validate if the designated constraints aren't met.
type AuthLogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLogoutResponseValidationError) ErrorName() string {
	return "AuthLogoutResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthLogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLogoutResponseValidationError{}

// Validate checks the field values on AuthValidateAccessTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthValidateAccessTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthValidateAccessTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthValidateAccessTokenRequestMultiError, or nil if none found.
func (m *AuthValidateAccessTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthValidateAccessTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthValidateAccessTokenRequestMultiError(errors)
	}

	return nil
}

// AuthValidateAccessTokenRequestMultiError is an error wrapping multiple
// validation errors returned by AuthValidateAccessTokenRequest.ValidateAll()
// if the designated constraints aren't met.
type AuthValidateAccessTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthValidateAccessTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthValidateAccessTokenRequestMultiError) AllErrors() []error { return m }

// AuthValidateAccessTokenRequestValidationError is the validation error
// returned by AuthValidateAccessTokenRequest.Validate if the designated
// constraints aren't met.
type AuthValidateAccessTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthValidateAccessTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthValidateAccessTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthValidateAccessTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthValidateAccessTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthValidateAccessTokenRequestValidationError) ErrorName() string {
	return "AuthValidateAccessTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthValidateAccessTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthValidateAccessTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthValidateAccessTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthValidateAccessTokenRequestValidationError{}

// Validate checks the field values on AuthValidateAccessTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthValidateAccessTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthValidateAccessTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthValidateAccessTokenResponseMultiError, or nil if none found.
func (m *AuthValidateAccessTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthValidateAccessTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthValidateAccessTokenResponseMultiError(errors)
	}

	return nil
}

// AuthValidateAccessTokenResponseMultiError is an error wrapping multiple
// validation errors returned by AuthValidateAccessTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type AuthValidateAccessTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthValidateAccessTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthValidateAccessTokenResponseMultiError) AllErrors() []error { return m }

// AuthValidateAccessTokenResponseValidationError is the validation error
// returned by AuthValidateAccessTokenResponse.Validate if the designated
// constraints aren't met.
type AuthValidateAccessTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthValidateAccessTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthValidateAccessTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthValidateAccessTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthValidateAccessTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthValidateAccessTokenResponseValidationError) ErrorName() string {
	return "AuthValidateAccessTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthValidateAccessTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthValidateAccessTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthValidateAccessTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthValidateAccessTokenResponseValidationError{}

// Validate checks the field values on AuthChangePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthChangePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthChangePasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthChangePasswordRequestMultiError, or nil if none found.
func (m *AuthChangePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthChangePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OldPassword

	// no validation rules for NewPassword

	if len(errors) > 0 {
		return AuthChangePasswordRequestMultiError(errors)
	}

	return nil
}

// AuthChangePasswordRequestMultiError is an error wrapping multiple validation
// errors returned by AuthChangePasswordRequest.ValidateAll() if the
// designated constraints aren't met.
type AuthChangePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthChangePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthChangePasswordRequestMultiError) AllErrors() []error { return m }

// AuthChangePasswordRequestValidationError is the validation error returned by
// AuthChangePasswordRequest.Validate if the designated constraints aren't met.
type AuthChangePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthChangePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthChangePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthChangePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthChangePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthChangePasswordRequestValidationError) ErrorName() string {
	return "AuthChangePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthChangePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthChangePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthChangePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthChangePasswordRequestValidationError{}

// Validate checks the field values on AuthChangePasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthChangePasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthChangePasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthChangePasswordResponseMultiError, or nil if none found.
func (m *AuthChangePasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthChangePasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthChangePasswordResponseMultiError(errors)
	}

	return nil
}

// AuthChangePasswordResponseMultiError is an error wrapping multiple
// validation errors returned by AuthChangePasswordResponse.ValidateAll() if
// the designated constraints aren't met.
type AuthChangePasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthChangePasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthChangePasswordResponseMultiError) AllErrors() []error { return m }

// AuthChangePasswordResponseValidationError is the validation error returned
// by AuthChangePasswordResponse.Validate if the designated constraints aren't met.
type AuthChangePasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthChangePasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthChangePasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthChangePasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthChangePasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthChangePasswordResponseValidationError) ErrorName() string {
	return "AuthChangePasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthChangePasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthChangePasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthChangePasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthChangePasswordResponseValidationError{}

// Validate checks the field values on Organization with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Organization) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Organization with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrganizationMultiError, or
// nil if none found.
func (m *Organization) ValidateAll() error {
	return m.validate(true)
}

func (m *Organization) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Uid

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "Profile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrganizationMultiError(errors)
	}

	return nil
}

// OrganizationMultiError is an error wrapping multiple validation errors
// returned by Organization.ValidateAll() if the designated constraints aren't met.
type OrganizationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationMultiError) AllErrors() []error { return m }

// OrganizationValidationError is the validation error returned by
// Organization.Validate if the designated constraints aren't met.
type OrganizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationValidationError) ErrorName() string { return "OrganizationValidationError" }

// Error satisfies the builtin error interface
func (e OrganizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationValidationError{}

// Validate checks the field values on ListOrganizationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsRequestMultiError, or nil if none found.
func (m *ListOrganizationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if len(errors) > 0 {
		return ListOrganizationsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationsRequestValidationError is the validation error returned by
// ListOrganizationsRequest.Validate if the designated constraints aren't met.
type ListOrganizationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsRequestValidationError) ErrorName() string {
	return "ListOrganizationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsRequestValidationError{}

// Validate checks the field values on ListOrganizationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsResponseMultiError, or nil if none found.
func (m *ListOrganizationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListOrganizationsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListOrganizationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationsResponseValidationError is the validation error returned by
// ListOrganizationsResponse.Validate if the designated constraints aren't met.
type ListOrganizationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsResponseValidationError) ErrorName() string {
	return "ListOrganizationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsResponseValidationError{}

// Validate checks the field values on CreateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationRequestMultiError, or nil if none found.
func (m *CreateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationRequestValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationRequestValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationRequestValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationRequestValidationError is the validation error returned by
// CreateOrganizationRequest.Validate if the designated constraints aren't met.
type CreateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationRequestValidationError) ErrorName() string {
	return "CreateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationRequestValidationError{}

// Validate checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationResponseMultiError, or nil if none found.
func (m *CreateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationResponseValidationError is the validation error returned
// by CreateOrganizationResponse.Validate if the designated constraints aren't met.
type CreateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationResponseValidationError) ErrorName() string {
	return "CreateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationResponseValidationError{}

// Validate checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRequestMultiError, or nil if none found.
func (m *GetOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetOrganizationRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRequestMultiError) AllErrors() []error { return m }

// GetOrganizationRequestValidationError is the validation error returned by
// GetOrganizationRequest.Validate if the designated constraints aren't met.
type GetOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRequestValidationError) ErrorName() string {
	return "GetOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRequestValidationError{}

// Validate checks the field values on GetOrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationResponseMultiError, or nil if none found.
func (m *GetOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationResponseMultiError) AllErrors() []error { return m }

// GetOrganizationResponseValidationError is the validation error returned by
// GetOrganizationResponse.Validate if the designated constraints aren't met.
type GetOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationResponseValidationError) ErrorName() string {
	return "GetOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationResponseValidationError{}

// Validate checks the field values on UpdateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationRequestMultiError, or nil if none found.
func (m *UpdateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationRequestValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationRequestValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationRequestValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrganizationId

	if len(errors) > 0 {
		return UpdateOrganizationRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationRequestValidationError is the validation error returned by
// UpdateOrganizationRequest.Validate if the designated constraints aren't met.
type UpdateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationRequestValidationError) ErrorName() string {
	return "UpdateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationRequestValidationError{}

// Validate checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationResponseMultiError, or nil if none found.
func (m *UpdateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationResponseValidationError is the validation error returned
// by UpdateOrganizationResponse.Validate if the designated constraints aren't met.
type UpdateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationResponseValidationError) ErrorName() string {
	return "UpdateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationResponseValidationError{}

// Validate checks the field values on DeleteOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationRequestMultiError, or nil if none found.
func (m *DeleteOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	if len(errors) > 0 {
		return DeleteOrganizationRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationRequestValidationError is the validation error returned by
// DeleteOrganizationRequest.Validate if the designated constraints aren't met.
type DeleteOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationRequestValidationError) ErrorName() string {
	return "DeleteOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationRequestValidationError{}

// Validate checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationResponseMultiError, or nil if none found.
func (m *DeleteOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationResponseValidationError is the validation error returned
// by DeleteOrganizationResponse.Validate if the designated constraints aren't met.
type DeleteOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationResponseValidationError) ErrorName() string {
	return "DeleteOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationResponseValidationError{}

// Validate checks the field values on OrganizationMembership with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationMembership) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationMembership with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationMembershipMultiError, or nil if none found.
func (m *OrganizationMembership) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationMembership) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Role

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationMembershipValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationMembershipValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationMembershipValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationMembershipValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationMembershipValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationMembershipValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrganizationMembershipMultiError(errors)
	}

	return nil
}

// OrganizationMembershipMultiError is an error wrapping multiple validation
// errors returned by OrganizationMembership.ValidateAll() if the designated
// constraints aren't met.
type OrganizationMembershipMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationMembershipMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationMembershipMultiError) AllErrors() []error { return m }

// OrganizationMembershipValidationError is the validation error returned by
// OrganizationMembership.Validate if the designated constraints aren't met.
type OrganizationMembershipValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationMembershipValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationMembershipValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationMembershipValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationMembershipValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationMembershipValidationError) ErrorName() string {
	return "OrganizationMembershipValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationMembershipValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationMembership.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationMembershipValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationMembershipValidationError{}

// Validate checks the field values on UserMembership with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserMembership) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserMembership with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserMembershipMultiError,
// or nil if none found.
func (m *UserMembership) ValidateAll() error {
	return m.validate(true)
}

func (m *UserMembership) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Role

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserMembershipValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserMembershipValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserMembershipValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserMembershipValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserMembershipValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserMembershipValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMembershipMultiError(errors)
	}

	return nil
}

// UserMembershipMultiError is an error wrapping multiple validation errors
// returned by UserMembership.ValidateAll() if the designated constraints
// aren't met.
type UserMembershipMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMembershipMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMembershipMultiError) AllErrors() []error { return m }

// UserMembershipValidationError is the validation error returned by
// UserMembership.Validate if the designated constraints aren't met.
type UserMembershipValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserMembershipValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserMembershipValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserMembershipValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserMembershipValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserMembershipValidationError) ErrorName() string { return "UserMembershipValidationError" }

// Error satisfies the builtin error interface
func (e UserMembershipValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserMembership.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserMembershipValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserMembershipValidationError{}

// Validate checks the field values on ListUserMembershipsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserMembershipsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserMembershipsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserMembershipsRequestMultiError, or nil if none found.
func (m *ListUserMembershipsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserMembershipsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return ListUserMembershipsRequestMultiError(errors)
	}

	return nil
}

// ListUserMembershipsRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserMembershipsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListUserMembershipsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserMembershipsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserMembershipsRequestMultiError) AllErrors() []error { return m }

// ListUserMembershipsRequestValidationError is the validation error returned
// by ListUserMembershipsRequest.Validate if the designated constraints aren't met.
type ListUserMembershipsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserMembershipsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserMembershipsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserMembershipsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserMembershipsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserMembershipsRequestValidationError) ErrorName() string {
	return "ListUserMembershipsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserMembershipsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserMembershipsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserMembershipsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserMembershipsRequestValidationError{}

// Validate checks the field values on ListUserMembershipsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserMembershipsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserMembershipsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserMembershipsResponseMultiError, or nil if none found.
func (m *ListUserMembershipsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserMembershipsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMemberships() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserMembershipsResponseValidationError{
						field:  fmt.Sprintf("Memberships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserMembershipsResponseValidationError{
						field:  fmt.Sprintf("Memberships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserMembershipsResponseValidationError{
					field:  fmt.Sprintf("Memberships[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserMembershipsResponseMultiError(errors)
	}

	return nil
}

// ListUserMembershipsResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserMembershipsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListUserMembershipsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserMembershipsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserMembershipsResponseMultiError) AllErrors() []error { return m }

// ListUserMembershipsResponseValidationError is the validation error returned
// by ListUserMembershipsResponse.Validate if the designated constraints
// aren't met.
type ListUserMembershipsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserMembershipsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserMembershipsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserMembershipsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserMembershipsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserMembershipsResponseValidationError) ErrorName() string {
	return "ListUserMembershipsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserMembershipsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserMembershipsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserMembershipsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserMembershipsResponseValidationError{}

// Validate checks the field values on GetUserMembershipRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserMembershipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserMembershipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserMembershipRequestMultiError, or nil if none found.
func (m *GetUserMembershipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserMembershipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OrganizationId

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetUserMembershipRequestMultiError(errors)
	}

	return nil
}

// GetUserMembershipRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserMembershipRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserMembershipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserMembershipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserMembershipRequestMultiError) AllErrors() []error { return m }

// GetUserMembershipRequestValidationError is the validation error returned by
// GetUserMembershipRequest.Validate if the designated constraints aren't met.
type GetUserMembershipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserMembershipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserMembershipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserMembershipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserMembershipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserMembershipRequestValidationError) ErrorName() string {
	return "GetUserMembershipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserMembershipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserMembershipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserMembershipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserMembershipRequestValidationError{}

// Validate checks the field values on GetUserMembershipResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserMembershipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserMembershipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserMembershipResponseMultiError, or nil if none found.
func (m *GetUserMembershipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserMembershipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMembership()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserMembershipResponseValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserMembershipResponseValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMembership()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserMembershipResponseValidationError{
				field:  "Membership",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserMembershipResponseMultiError(errors)
	}

	return nil
}

// GetUserMembershipResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserMembershipResponse.ValidateAll() if the
// designated constraints aren't met.
type GetUserMembershipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserMembershipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserMembershipResponseMultiError) AllErrors() []error { return m }

// GetUserMembershipResponseValidationError is the validation error returned by
// GetUserMembershipResponse.Validate if the designated constraints aren't met.
type GetUserMembershipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserMembershipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserMembershipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserMembershipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserMembershipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserMembershipResponseValidationError) ErrorName() string {
	return "GetUserMembershipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserMembershipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserMembershipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserMembershipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserMembershipResponseValidationError{}

// Validate checks the field values on UpdateUserMembershipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserMembershipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserMembershipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserMembershipRequestMultiError, or nil if none found.
func (m *UpdateUserMembershipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserMembershipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMembership()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserMembershipRequestValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserMembershipRequestValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMembership()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserMembershipRequestValidationError{
				field:  "Membership",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserMembershipRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserMembershipRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserMembershipRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for OrganizationId

	if len(errors) > 0 {
		return UpdateUserMembershipRequestMultiError(errors)
	}

	return nil
}

// UpdateUserMembershipRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateUserMembershipRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserMembershipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserMembershipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserMembershipRequestMultiError) AllErrors() []error { return m }

// UpdateUserMembershipRequestValidationError is the validation error returned
// by UpdateUserMembershipRequest.Validate if the designated constraints
// aren't met.
type UpdateUserMembershipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserMembershipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserMembershipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserMembershipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserMembershipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserMembershipRequestValidationError) ErrorName() string {
	return "UpdateUserMembershipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserMembershipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserMembershipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserMembershipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserMembershipRequestValidationError{}

// Validate checks the field values on UpdateUserMembershipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserMembershipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserMembershipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserMembershipResponseMultiError, or nil if none found.
func (m *UpdateUserMembershipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserMembershipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMembership()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserMembershipResponseValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserMembershipResponseValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMembership()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserMembershipResponseValidationError{
				field:  "Membership",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserMembershipResponseMultiError(errors)
	}

	return nil
}

// UpdateUserMembershipResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateUserMembershipResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateUserMembershipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserMembershipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserMembershipResponseMultiError) AllErrors() []error { return m }

// UpdateUserMembershipResponseValidationError is the validation error returned
// by UpdateUserMembershipResponse.Validate if the designated constraints
// aren't met.
type UpdateUserMembershipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserMembershipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserMembershipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserMembershipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserMembershipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserMembershipResponseValidationError) ErrorName() string {
	return "UpdateUserMembershipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserMembershipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserMembershipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserMembershipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserMembershipResponseValidationError{}

// Validate checks the field values on DeleteUserMembershipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserMembershipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserMembershipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserMembershipRequestMultiError, or nil if none found.
func (m *DeleteUserMembershipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserMembershipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OrganizationId

	if len(errors) > 0 {
		return DeleteUserMembershipRequestMultiError(errors)
	}

	return nil
}

// DeleteUserMembershipRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteUserMembershipRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteUserMembershipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserMembershipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserMembershipRequestMultiError) AllErrors() []error { return m }

// DeleteUserMembershipRequestValidationError is the validation error returned
// by DeleteUserMembershipRequest.Validate if the designated constraints
// aren't met.
type DeleteUserMembershipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserMembershipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserMembershipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserMembershipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserMembershipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserMembershipRequestValidationError) ErrorName() string {
	return "DeleteUserMembershipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserMembershipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserMembershipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserMembershipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserMembershipRequestValidationError{}

// Validate checks the field values on DeleteUserMembershipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserMembershipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserMembershipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserMembershipResponseMultiError, or nil if none found.
func (m *DeleteUserMembershipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserMembershipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserMembershipResponseMultiError(errors)
	}

	return nil
}

// DeleteUserMembershipResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteUserMembershipResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteUserMembershipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserMembershipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserMembershipResponseMultiError) AllErrors() []error { return m }

// DeleteUserMembershipResponseValidationError is the validation error returned
// by DeleteUserMembershipResponse.Validate if the designated constraints
// aren't met.
type DeleteUserMembershipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserMembershipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserMembershipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserMembershipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserMembershipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserMembershipResponseValidationError) ErrorName() string {
	return "DeleteUserMembershipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserMembershipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserMembershipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserMembershipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserMembershipResponseValidationError{}

// Validate checks the field values on ListOrganizationMembershipsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationMembershipsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationMembershipsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationMembershipsRequestMultiError, or nil if none found.
func (m *ListOrganizationMembershipsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationMembershipsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	if len(errors) > 0 {
		return ListOrganizationMembershipsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationMembershipsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationMembershipsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationMembershipsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationMembershipsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationMembershipsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationMembershipsRequestValidationError is the validation error
// returned by ListOrganizationMembershipsRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationMembershipsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationMembershipsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationMembershipsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationMembershipsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationMembershipsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationMembershipsRequestValidationError) ErrorName() string {
	return "ListOrganizationMembershipsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationMembershipsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationMembershipsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationMembershipsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationMembershipsRequestValidationError{}

// Validate checks the field values on ListOrganizationMembershipsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListOrganizationMembershipsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationMembershipsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationMembershipsResponseMultiError, or nil if none found.
func (m *ListOrganizationMembershipsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationMembershipsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMemberships() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationMembershipsResponseValidationError{
						field:  fmt.Sprintf("Memberships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationMembershipsResponseValidationError{
						field:  fmt.Sprintf("Memberships[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationMembershipsResponseValidationError{
					field:  fmt.Sprintf("Memberships[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrganizationMembershipsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationMembershipsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationMembershipsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationMembershipsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationMembershipsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationMembershipsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationMembershipsResponseValidationError is the validation error
// returned by ListOrganizationMembershipsResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationMembershipsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationMembershipsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationMembershipsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationMembershipsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationMembershipsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationMembershipsResponseValidationError) ErrorName() string {
	return "ListOrganizationMembershipsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationMembershipsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationMembershipsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationMembershipsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationMembershipsResponseValidationError{}

// Validate checks the field values on GetOrganizationMembershipRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrganizationMembershipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationMembershipRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationMembershipRequestMultiError, or nil if none found.
func (m *GetOrganizationMembershipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationMembershipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for UserId

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetOrganizationMembershipRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationMembershipRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationMembershipRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationMembershipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationMembershipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationMembershipRequestMultiError) AllErrors() []error { return m }

// GetOrganizationMembershipRequestValidationError is the validation error
// returned by GetOrganizationMembershipRequest.Validate if the designated
// constraints aren't met.
type GetOrganizationMembershipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationMembershipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationMembershipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationMembershipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationMembershipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationMembershipRequestValidationError) ErrorName() string {
	return "GetOrganizationMembershipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationMembershipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationMembershipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationMembershipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationMembershipRequestValidationError{}

// Validate checks the field values on GetOrganizationMembershipResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrganizationMembershipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationMembershipResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrganizationMembershipResponseMultiError, or nil if none found.
func (m *GetOrganizationMembershipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationMembershipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMembership()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationMembershipResponseValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationMembershipResponseValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMembership()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationMembershipResponseValidationError{
				field:  "Membership",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationMembershipResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationMembershipResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationMembershipResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationMembershipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationMembershipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationMembershipResponseMultiError) AllErrors() []error { return m }

// GetOrganizationMembershipResponseValidationError is the validation error
// returned by GetOrganizationMembershipResponse.Validate if the designated
// constraints aren't met.
type GetOrganizationMembershipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationMembershipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationMembershipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationMembershipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationMembershipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationMembershipResponseValidationError) ErrorName() string {
	return "GetOrganizationMembershipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationMembershipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationMembershipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationMembershipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationMembershipResponseValidationError{}

// Validate checks the field values on UpdateOrganizationMembershipRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateOrganizationMembershipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationMembershipRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateOrganizationMembershipRequestMultiError, or nil if none found.
func (m *UpdateOrganizationMembershipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationMembershipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMembership()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationMembershipRequestValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationMembershipRequestValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMembership()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationMembershipRequestValidationError{
				field:  "Membership",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationMembershipRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationMembershipRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationMembershipRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrganizationId

	// no validation rules for UserId

	if len(errors) > 0 {
		return UpdateOrganizationMembershipRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationMembershipRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateOrganizationMembershipRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrganizationMembershipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationMembershipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationMembershipRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationMembershipRequestValidationError is the validation error
// returned by UpdateOrganizationMembershipRequest.Validate if the designated
// constraints aren't met.
type UpdateOrganizationMembershipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationMembershipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationMembershipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationMembershipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationMembershipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationMembershipRequestValidationError) ErrorName() string {
	return "UpdateOrganizationMembershipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationMembershipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationMembershipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationMembershipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationMembershipRequestValidationError{}

// Validate checks the field values on UpdateOrganizationMembershipResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateOrganizationMembershipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationMembershipResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateOrganizationMembershipResponseMultiError, or nil if none found.
func (m *UpdateOrganizationMembershipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationMembershipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMembership()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationMembershipResponseValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationMembershipResponseValidationError{
					field:  "Membership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMembership()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationMembershipResponseValidationError{
				field:  "Membership",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationMembershipResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationMembershipResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateOrganizationMembershipResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrganizationMembershipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationMembershipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationMembershipResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationMembershipResponseValidationError is the validation error
// returned by UpdateOrganizationMembershipResponse.Validate if the designated
// constraints aren't met.
type UpdateOrganizationMembershipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationMembershipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationMembershipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationMembershipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationMembershipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationMembershipResponseValidationError) ErrorName() string {
	return "UpdateOrganizationMembershipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationMembershipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationMembershipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationMembershipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationMembershipResponseValidationError{}

// Validate checks the field values on DeleteOrganizationMembershipRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteOrganizationMembershipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationMembershipRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationMembershipRequestMultiError, or nil if none found.
func (m *DeleteOrganizationMembershipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationMembershipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteOrganizationMembershipRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationMembershipRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteOrganizationMembershipRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganizationMembershipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationMembershipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationMembershipRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationMembershipRequestValidationError is the validation error
// returned by DeleteOrganizationMembershipRequest.Validate if the designated
// constraints aren't met.
type DeleteOrganizationMembershipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationMembershipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationMembershipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationMembershipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationMembershipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationMembershipRequestValidationError) ErrorName() string {
	return "DeleteOrganizationMembershipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationMembershipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationMembershipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationMembershipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationMembershipRequestValidationError{}

// Validate checks the field values on DeleteOrganizationMembershipResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteOrganizationMembershipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationMembershipResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationMembershipResponseMultiError, or nil if none found.
func (m *DeleteOrganizationMembershipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationMembershipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationMembershipResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationMembershipResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteOrganizationMembershipResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganizationMembershipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationMembershipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationMembershipResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationMembershipResponseValidationError is the validation error
// returned by DeleteOrganizationMembershipResponse.Validate if the designated
// constraints aren't met.
type DeleteOrganizationMembershipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationMembershipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationMembershipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationMembershipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationMembershipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationMembershipResponseValidationError) ErrorName() string {
	return "DeleteOrganizationMembershipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationMembershipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationMembershipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationMembershipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationMembershipResponseValidationError{}

// Validate checks the field values on StripeSubscriptionDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StripeSubscriptionDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StripeSubscriptionDetail with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StripeSubscriptionDetailMultiError, or nil if none found.
func (m *StripeSubscriptionDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *StripeSubscriptionDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductName

	// no validation rules for Id

	// no validation rules for ItemId

	// no validation rules for Price

	// no validation rules for Status

	// no validation rules for Description

	if m.CanceledAt != nil {
		// no validation rules for CanceledAt
	}

	if m.TrialEnd != nil {
		// no validation rules for TrialEnd
	}

	if len(errors) > 0 {
		return StripeSubscriptionDetailMultiError(errors)
	}

	return nil
}

// StripeSubscriptionDetailMultiError is an error wrapping multiple validation
// errors returned by StripeSubscriptionDetail.ValidateAll() if the designated
// constraints aren't met.
type StripeSubscriptionDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StripeSubscriptionDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StripeSubscriptionDetailMultiError) AllErrors() []error { return m }

// StripeSubscriptionDetailValidationError is the validation error returned by
// StripeSubscriptionDetail.Validate if the designated constraints aren't met.
type StripeSubscriptionDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StripeSubscriptionDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StripeSubscriptionDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StripeSubscriptionDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StripeSubscriptionDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StripeSubscriptionDetailValidationError) ErrorName() string {
	return "StripeSubscriptionDetailValidationError"
}

// Error satisfies the builtin error interface
func (e StripeSubscriptionDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStripeSubscriptionDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StripeSubscriptionDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StripeSubscriptionDetailValidationError{}

// Validate checks the field values on UserSubscription with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserSubscription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserSubscription with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserSubscriptionMultiError, or nil if none found.
func (m *UserSubscription) ValidateAll() error {
	return m.validate(true)
}

func (m *UserSubscription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Plan

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserSubscriptionValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserSubscriptionValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserSubscriptionValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserSubscriptionMultiError(errors)
	}

	return nil
}

// UserSubscriptionMultiError is an error wrapping multiple validation errors
// returned by UserSubscription.ValidateAll() if the designated constraints
// aren't met.
type UserSubscriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserSubscriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserSubscriptionMultiError) AllErrors() []error { return m }

// UserSubscriptionValidationError is the validation error returned by
// UserSubscription.Validate if the designated constraints aren't met.
type UserSubscriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserSubscriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserSubscriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserSubscriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserSubscriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserSubscriptionValidationError) ErrorName() string { return "UserSubscriptionValidationError" }

// Error satisfies the builtin error interface
func (e UserSubscriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserSubscription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserSubscriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserSubscriptionValidationError{}

// Validate checks the field values on OrganizationSubscription with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationSubscription) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationSubscription with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationSubscriptionMultiError, or nil if none found.
func (m *OrganizationSubscription) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationSubscription) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Plan

	if all {
		switch v := interface{}(m.GetDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationSubscriptionValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationSubscriptionValidationError{
					field:  "Detail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationSubscriptionValidationError{
				field:  "Detail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UsedSeats

	if len(errors) > 0 {
		return OrganizationSubscriptionMultiError(errors)
	}

	return nil
}

// OrganizationSubscriptionMultiError is an error wrapping multiple validation
// errors returned by OrganizationSubscription.ValidateAll() if the designated
// constraints aren't met.
type OrganizationSubscriptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationSubscriptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationSubscriptionMultiError) AllErrors() []error { return m }

// OrganizationSubscriptionValidationError is the validation error returned by
// OrganizationSubscription.Validate if the designated constraints aren't met.
type OrganizationSubscriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationSubscriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationSubscriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationSubscriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationSubscriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationSubscriptionValidationError) ErrorName() string {
	return "OrganizationSubscriptionValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationSubscriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationSubscription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationSubscriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationSubscriptionValidationError{}

// Validate checks the field values on GetAuthenticatedUserSubscriptionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetAuthenticatedUserSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetAuthenticatedUserSubscriptionRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetAuthenticatedUserSubscriptionRequestMultiError, or nil if none found.
func (m *GetAuthenticatedUserSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthenticatedUserSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAuthenticatedUserSubscriptionRequestMultiError(errors)
	}

	return nil
}

// GetAuthenticatedUserSubscriptionRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetAuthenticatedUserSubscriptionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAuthenticatedUserSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthenticatedUserSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthenticatedUserSubscriptionRequestMultiError) AllErrors() []error { return m }

// GetAuthenticatedUserSubscriptionRequestValidationError is the validation
// error returned by GetAuthenticatedUserSubscriptionRequest.Validate if the
// designated constraints aren't met.
type GetAuthenticatedUserSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthenticatedUserSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthenticatedUserSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthenticatedUserSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthenticatedUserSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthenticatedUserSubscriptionRequestValidationError) ErrorName() string {
	return "GetAuthenticatedUserSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthenticatedUserSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthenticatedUserSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthenticatedUserSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthenticatedUserSubscriptionRequestValidationError{}

// Validate checks the field values on GetAuthenticatedUserSubscriptionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetAuthenticatedUserSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetAuthenticatedUserSubscriptionResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetAuthenticatedUserSubscriptionResponseMultiError, or nil if none found.
func (m *GetAuthenticatedUserSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthenticatedUserSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubscription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAuthenticatedUserSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAuthenticatedUserSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAuthenticatedUserSubscriptionResponseValidationError{
				field:  "Subscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAuthenticatedUserSubscriptionResponseMultiError(errors)
	}

	return nil
}

// GetAuthenticatedUserSubscriptionResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetAuthenticatedUserSubscriptionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAuthenticatedUserSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthenticatedUserSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthenticatedUserSubscriptionResponseMultiError) AllErrors() []error { return m }

// GetAuthenticatedUserSubscriptionResponseValidationError is the validation
// error returned by GetAuthenticatedUserSubscriptionResponse.Validate if the
// designated constraints aren't met.
type GetAuthenticatedUserSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthenticatedUserSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthenticatedUserSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthenticatedUserSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthenticatedUserSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthenticatedUserSubscriptionResponseValidationError) ErrorName() string {
	return "GetAuthenticatedUserSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthenticatedUserSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthenticatedUserSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthenticatedUserSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthenticatedUserSubscriptionResponseValidationError{}

// Validate checks the field values on GetOrganizationSubscriptionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrganizationSubscriptionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationSubscriptionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrganizationSubscriptionRequestMultiError, or nil if none found.
func (m *GetOrganizationSubscriptionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationSubscriptionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	if len(errors) > 0 {
		return GetOrganizationSubscriptionRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationSubscriptionRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationSubscriptionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationSubscriptionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationSubscriptionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationSubscriptionRequestMultiError) AllErrors() []error { return m }

// GetOrganizationSubscriptionRequestValidationError is the validation error
// returned by GetOrganizationSubscriptionRequest.Validate if the designated
// constraints aren't met.
type GetOrganizationSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationSubscriptionRequestValidationError) ErrorName() string {
	return "GetOrganizationSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationSubscriptionRequestValidationError{}

// Validate checks the field values on GetOrganizationSubscriptionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetOrganizationSubscriptionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationSubscriptionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetOrganizationSubscriptionResponseMultiError, or nil if none found.
func (m *GetOrganizationSubscriptionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationSubscriptionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubscription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationSubscriptionResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationSubscriptionResponseValidationError{
				field:  "Subscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationSubscriptionResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationSubscriptionResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetOrganizationSubscriptionResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationSubscriptionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationSubscriptionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationSubscriptionResponseMultiError) AllErrors() []error { return m }

// GetOrganizationSubscriptionResponseValidationError is the validation error
// returned by GetOrganizationSubscriptionResponse.Validate if the designated
// constraints aren't met.
type GetOrganizationSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationSubscriptionResponseValidationError) ErrorName() string {
	return "GetOrganizationSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationSubscriptionResponseValidationError{}

// Validate checks the field values on GetUserSubscriptionAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserSubscriptionAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserSubscriptionAdminRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserSubscriptionAdminRequestMultiError, or nil if none found.
func (m *GetUserSubscriptionAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserSubscriptionAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetUserSubscriptionAdminRequestMultiError(errors)
	}

	return nil
}

// GetUserSubscriptionAdminRequestMultiError is an error wrapping multiple
// validation errors returned by GetUserSubscriptionAdminRequest.ValidateAll()
// if the designated constraints aren't met.
type GetUserSubscriptionAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserSubscriptionAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserSubscriptionAdminRequestMultiError) AllErrors() []error { return m }

// GetUserSubscriptionAdminRequestValidationError is the validation error
// returned by GetUserSubscriptionAdminRequest.Validate if the designated
// constraints aren't met.
type GetUserSubscriptionAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserSubscriptionAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserSubscriptionAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserSubscriptionAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserSubscriptionAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserSubscriptionAdminRequestValidationError) ErrorName() string {
	return "GetUserSubscriptionAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserSubscriptionAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserSubscriptionAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserSubscriptionAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserSubscriptionAdminRequestValidationError{}

// Validate checks the field values on GetUserSubscriptionAdminResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserSubscriptionAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserSubscriptionAdminResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUserSubscriptionAdminResponseMultiError, or nil if none found.
func (m *GetUserSubscriptionAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserSubscriptionAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubscription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserSubscriptionAdminResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserSubscriptionAdminResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserSubscriptionAdminResponseValidationError{
				field:  "Subscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserSubscriptionAdminResponseMultiError(errors)
	}

	return nil
}

// GetUserSubscriptionAdminResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserSubscriptionAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserSubscriptionAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserSubscriptionAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserSubscriptionAdminResponseMultiError) AllErrors() []error { return m }

// GetUserSubscriptionAdminResponseValidationError is the validation error
// returned by GetUserSubscriptionAdminResponse.Validate if the designated
// constraints aren't met.
type GetUserSubscriptionAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserSubscriptionAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserSubscriptionAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserSubscriptionAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserSubscriptionAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserSubscriptionAdminResponseValidationError) ErrorName() string {
	return "GetUserSubscriptionAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserSubscriptionAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserSubscriptionAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserSubscriptionAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserSubscriptionAdminResponseValidationError{}

// Validate checks the field values on GetOrganizationSubscriptionAdminRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOrganizationSubscriptionAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOrganizationSubscriptionAdminRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetOrganizationSubscriptionAdminRequestMultiError, or nil if none found.
func (m *GetOrganizationSubscriptionAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationSubscriptionAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationId

	if len(errors) > 0 {
		return GetOrganizationSubscriptionAdminRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationSubscriptionAdminRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetOrganizationSubscriptionAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationSubscriptionAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationSubscriptionAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationSubscriptionAdminRequestMultiError) AllErrors() []error { return m }

// GetOrganizationSubscriptionAdminRequestValidationError is the validation
// error returned by GetOrganizationSubscriptionAdminRequest.Validate if the
// designated constraints aren't met.
type GetOrganizationSubscriptionAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationSubscriptionAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationSubscriptionAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationSubscriptionAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationSubscriptionAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationSubscriptionAdminRequestValidationError) ErrorName() string {
	return "GetOrganizationSubscriptionAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationSubscriptionAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationSubscriptionAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationSubscriptionAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationSubscriptionAdminRequestValidationError{}

// Validate checks the field values on GetOrganizationSubscriptionAdminResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetOrganizationSubscriptionAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOrganizationSubscriptionAdminResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetOrganizationSubscriptionAdminResponseMultiError, or nil if none found.
func (m *GetOrganizationSubscriptionAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationSubscriptionAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubscription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationSubscriptionAdminResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationSubscriptionAdminResponseValidationError{
					field:  "Subscription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubscription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationSubscriptionAdminResponseValidationError{
				field:  "Subscription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationSubscriptionAdminResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationSubscriptionAdminResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetOrganizationSubscriptionAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationSubscriptionAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationSubscriptionAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationSubscriptionAdminResponseMultiError) AllErrors() []error { return m }

// GetOrganizationSubscriptionAdminResponseValidationError is the validation
// error returned by GetOrganizationSubscriptionAdminResponse.Validate if the
// designated constraints aren't met.
type GetOrganizationSubscriptionAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationSubscriptionAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationSubscriptionAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationSubscriptionAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationSubscriptionAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationSubscriptionAdminResponseValidationError) ErrorName() string {
	return "GetOrganizationSubscriptionAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationSubscriptionAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationSubscriptionAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationSubscriptionAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationSubscriptionAdminResponseValidationError{}

// Validate checks the field values on
// AuthTokenIssuerResponse_UnsignedAccessToken with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthTokenIssuerResponse_UnsignedAccessToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AuthTokenIssuerResponse_UnsignedAccessToken with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AuthTokenIssuerResponse_UnsignedAccessTokenMultiError, or nil if none found.
func (m *AuthTokenIssuerResponse_UnsignedAccessToken) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthTokenIssuerResponse_UnsignedAccessToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Aud

	// no validation rules for Iss

	// no validation rules for Sub

	// no validation rules for Jti

	// no validation rules for Exp

	if len(errors) > 0 {
		return AuthTokenIssuerResponse_UnsignedAccessTokenMultiError(errors)
	}

	return nil
}

// AuthTokenIssuerResponse_UnsignedAccessTokenMultiError is an error wrapping
// multiple validation errors returned by
// AuthTokenIssuerResponse_UnsignedAccessToken.ValidateAll() if the designated
// constraints aren't met.
type AuthTokenIssuerResponse_UnsignedAccessTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthTokenIssuerResponse_UnsignedAccessTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthTokenIssuerResponse_UnsignedAccessTokenMultiError) AllErrors() []error { return m }

// AuthTokenIssuerResponse_UnsignedAccessTokenValidationError is the validation
// error returned by AuthTokenIssuerResponse_UnsignedAccessToken.Validate if
// the designated constraints aren't met.
type AuthTokenIssuerResponse_UnsignedAccessTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthTokenIssuerResponse_UnsignedAccessTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthTokenIssuerResponse_UnsignedAccessTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthTokenIssuerResponse_UnsignedAccessTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthTokenIssuerResponse_UnsignedAccessTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthTokenIssuerResponse_UnsignedAccessTokenValidationError) ErrorName() string {
	return "AuthTokenIssuerResponse_UnsignedAccessTokenValidationError"
}

// Error satisfies the builtin error interface
func (e AuthTokenIssuerResponse_UnsignedAccessTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthTokenIssuerResponse_UnsignedAccessToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthTokenIssuerResponse_UnsignedAccessTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthTokenIssuerResponse_UnsignedAccessTokenValidationError{}
