// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/mgmt/v1beta/metric.proto

package mgmtv1beta

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PipelineTriggerCount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTriggerCount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTriggerCount with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTriggerCountMultiError, or nil if none found.
func (m *PipelineTriggerCount) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTriggerCount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TriggerCount

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return PipelineTriggerCountMultiError(errors)
	}

	return nil
}

// PipelineTriggerCountMultiError is an error wrapping multiple validation
// errors returned by PipelineTriggerCount.ValidateAll() if the designated
// constraints aren't met.
type PipelineTriggerCountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTriggerCountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTriggerCountMultiError) AllErrors() []error { return m }

// PipelineTriggerCountValidationError is the validation error returned by
// PipelineTriggerCount.Validate if the designated constraints aren't met.
type PipelineTriggerCountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTriggerCountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTriggerCountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTriggerCountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTriggerCountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTriggerCountValidationError) ErrorName() string {
	return "PipelineTriggerCountValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTriggerCountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTriggerCount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTriggerCountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTriggerCountValidationError{}

// Validate checks the field values on GetPipelineTriggerCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPipelineTriggerCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPipelineTriggerCountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPipelineTriggerCountRequestMultiError, or nil if none found.
func (m *GetPipelineTriggerCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPipelineTriggerCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	if m.Start != nil {

		if all {
			switch v := interface{}(m.GetStart()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPipelineTriggerCountRequestValidationError{
						field:  "Start",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPipelineTriggerCountRequestValidationError{
						field:  "Start",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPipelineTriggerCountRequestValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Stop != nil {

		if all {
			switch v := interface{}(m.GetStop()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPipelineTriggerCountRequestValidationError{
						field:  "Stop",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPipelineTriggerCountRequestValidationError{
						field:  "Stop",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStop()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPipelineTriggerCountRequestValidationError{
					field:  "Stop",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPipelineTriggerCountRequestMultiError(errors)
	}

	return nil
}

// GetPipelineTriggerCountRequestMultiError is an error wrapping multiple
// validation errors returned by GetPipelineTriggerCountRequest.ValidateAll()
// if the designated constraints aren't met.
type GetPipelineTriggerCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPipelineTriggerCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPipelineTriggerCountRequestMultiError) AllErrors() []error { return m }

// GetPipelineTriggerCountRequestValidationError is the validation error
// returned by GetPipelineTriggerCountRequest.Validate if the designated
// constraints aren't met.
type GetPipelineTriggerCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPipelineTriggerCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPipelineTriggerCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPipelineTriggerCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPipelineTriggerCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPipelineTriggerCountRequestValidationError) ErrorName() string {
	return "GetPipelineTriggerCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPipelineTriggerCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPipelineTriggerCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPipelineTriggerCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPipelineTriggerCountRequestValidationError{}

// Validate checks the field values on GetPipelineTriggerCountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPipelineTriggerCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPipelineTriggerCountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPipelineTriggerCountResponseMultiError, or nil if none found.
func (m *GetPipelineTriggerCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPipelineTriggerCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipelineTriggerCounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPipelineTriggerCountResponseValidationError{
						field:  fmt.Sprintf("PipelineTriggerCounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPipelineTriggerCountResponseValidationError{
						field:  fmt.Sprintf("PipelineTriggerCounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPipelineTriggerCountResponseValidationError{
					field:  fmt.Sprintf("PipelineTriggerCounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPipelineTriggerCountResponseMultiError(errors)
	}

	return nil
}

// GetPipelineTriggerCountResponseMultiError is an error wrapping multiple
// validation errors returned by GetPipelineTriggerCountResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPipelineTriggerCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPipelineTriggerCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPipelineTriggerCountResponseMultiError) AllErrors() []error { return m }

// GetPipelineTriggerCountResponseValidationError is the validation error
// returned by GetPipelineTriggerCountResponse.Validate if the designated
// constraints aren't met.
type GetPipelineTriggerCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPipelineTriggerCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPipelineTriggerCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPipelineTriggerCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPipelineTriggerCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPipelineTriggerCountResponseValidationError) ErrorName() string {
	return "GetPipelineTriggerCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPipelineTriggerCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPipelineTriggerCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPipelineTriggerCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPipelineTriggerCountResponseValidationError{}

// Validate checks the field values on CreditConsumptionChartRecord with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreditConsumptionChartRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditConsumptionChartRecord with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreditConsumptionChartRecordMultiError, or nil if none found.
func (m *CreditConsumptionChartRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditConsumptionChartRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	for idx, item := range m.GetTimeBuckets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreditConsumptionChartRecordValidationError{
						field:  fmt.Sprintf("TimeBuckets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreditConsumptionChartRecordValidationError{
						field:  fmt.Sprintf("TimeBuckets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreditConsumptionChartRecordValidationError{
					field:  fmt.Sprintf("TimeBuckets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Source

	if len(errors) > 0 {
		return CreditConsumptionChartRecordMultiError(errors)
	}

	return nil
}

// CreditConsumptionChartRecordMultiError is an error wrapping multiple
// validation errors returned by CreditConsumptionChartRecord.ValidateAll() if
// the designated constraints aren't met.
type CreditConsumptionChartRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditConsumptionChartRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditConsumptionChartRecordMultiError) AllErrors() []error { return m }

// CreditConsumptionChartRecordValidationError is the validation error returned
// by CreditConsumptionChartRecord.Validate if the designated constraints
// aren't met.
type CreditConsumptionChartRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditConsumptionChartRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditConsumptionChartRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditConsumptionChartRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditConsumptionChartRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditConsumptionChartRecordValidationError) ErrorName() string {
	return "CreditConsumptionChartRecordValidationError"
}

// Error satisfies the builtin error interface
func (e CreditConsumptionChartRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditConsumptionChartRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditConsumptionChartRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditConsumptionChartRecordValidationError{}

// Validate checks the field values on ListCreditConsumptionChartRecordsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListCreditConsumptionChartRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListCreditConsumptionChartRecordsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListCreditConsumptionChartRecordsRequestMultiError, or nil if none found.
func (m *ListCreditConsumptionChartRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCreditConsumptionChartRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	if m.AggregationWindow != nil {
		// no validation rules for AggregationWindow
	}

	if m.Start != nil {

		if all {
			switch v := interface{}(m.GetStart()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCreditConsumptionChartRecordsRequestValidationError{
						field:  "Start",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCreditConsumptionChartRecordsRequestValidationError{
						field:  "Start",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCreditConsumptionChartRecordsRequestValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Stop != nil {

		if all {
			switch v := interface{}(m.GetStop()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCreditConsumptionChartRecordsRequestValidationError{
						field:  "Stop",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCreditConsumptionChartRecordsRequestValidationError{
						field:  "Stop",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStop()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCreditConsumptionChartRecordsRequestValidationError{
					field:  "Stop",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCreditConsumptionChartRecordsRequestMultiError(errors)
	}

	return nil
}

// ListCreditConsumptionChartRecordsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListCreditConsumptionChartRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCreditConsumptionChartRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCreditConsumptionChartRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCreditConsumptionChartRecordsRequestMultiError) AllErrors() []error { return m }

// ListCreditConsumptionChartRecordsRequestValidationError is the validation
// error returned by ListCreditConsumptionChartRecordsRequest.Validate if the
// designated constraints aren't met.
type ListCreditConsumptionChartRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCreditConsumptionChartRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCreditConsumptionChartRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCreditConsumptionChartRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCreditConsumptionChartRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCreditConsumptionChartRecordsRequestValidationError) ErrorName() string {
	return "ListCreditConsumptionChartRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCreditConsumptionChartRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCreditConsumptionChartRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCreditConsumptionChartRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCreditConsumptionChartRecordsRequestValidationError{}

// Validate checks the field values on
// ListCreditConsumptionChartRecordsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListCreditConsumptionChartRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListCreditConsumptionChartRecordsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListCreditConsumptionChartRecordsResponseMultiError, or nil if none found.
func (m *ListCreditConsumptionChartRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCreditConsumptionChartRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCreditConsumptionChartRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCreditConsumptionChartRecordsResponseValidationError{
						field:  fmt.Sprintf("CreditConsumptionChartRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCreditConsumptionChartRecordsResponseValidationError{
						field:  fmt.Sprintf("CreditConsumptionChartRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCreditConsumptionChartRecordsResponseValidationError{
					field:  fmt.Sprintf("CreditConsumptionChartRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCreditConsumptionChartRecordsResponseMultiError(errors)
	}

	return nil
}

// ListCreditConsumptionChartRecordsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListCreditConsumptionChartRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCreditConsumptionChartRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCreditConsumptionChartRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCreditConsumptionChartRecordsResponseMultiError) AllErrors() []error { return m }

// ListCreditConsumptionChartRecordsResponseValidationError is the validation
// error returned by ListCreditConsumptionChartRecordsResponse.Validate if the
// designated constraints aren't met.
type ListCreditConsumptionChartRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCreditConsumptionChartRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCreditConsumptionChartRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCreditConsumptionChartRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCreditConsumptionChartRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCreditConsumptionChartRecordsResponseValidationError) ErrorName() string {
	return "ListCreditConsumptionChartRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCreditConsumptionChartRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCreditConsumptionChartRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCreditConsumptionChartRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCreditConsumptionChartRecordsResponseValidationError{}

// Validate checks the field values on PipelineTriggerTableRecord with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTriggerTableRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTriggerTableRecord with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTriggerTableRecordMultiError, or nil if none found.
func (m *PipelineTriggerTableRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTriggerTableRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineId

	// no validation rules for PipelineUid

	// no validation rules for TriggerCountCompleted

	// no validation rules for TriggerCountErrored

	// no validation rules for PipelineReleaseId

	// no validation rules for PipelineReleaseUid

	if len(errors) > 0 {
		return PipelineTriggerTableRecordMultiError(errors)
	}

	return nil
}

// PipelineTriggerTableRecordMultiError is an error wrapping multiple
// validation errors returned by PipelineTriggerTableRecord.ValidateAll() if
// the designated constraints aren't met.
type PipelineTriggerTableRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTriggerTableRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTriggerTableRecordMultiError) AllErrors() []error { return m }

// PipelineTriggerTableRecordValidationError is the validation error returned
// by PipelineTriggerTableRecord.Validate if the designated constraints aren't met.
type PipelineTriggerTableRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTriggerTableRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTriggerTableRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTriggerTableRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTriggerTableRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTriggerTableRecordValidationError) ErrorName() string {
	return "PipelineTriggerTableRecordValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTriggerTableRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTriggerTableRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTriggerTableRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTriggerTableRecordValidationError{}

// Validate checks the field values on ListPipelineTriggerTableRecordsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListPipelineTriggerTableRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListPipelineTriggerTableRecordsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListPipelineTriggerTableRecordsRequestMultiError, or nil if none found.
func (m *ListPipelineTriggerTableRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelineTriggerTableRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if len(errors) > 0 {
		return ListPipelineTriggerTableRecordsRequestMultiError(errors)
	}

	return nil
}

// ListPipelineTriggerTableRecordsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListPipelineTriggerTableRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPipelineTriggerTableRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelineTriggerTableRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelineTriggerTableRecordsRequestMultiError) AllErrors() []error { return m }

// ListPipelineTriggerTableRecordsRequestValidationError is the validation
// error returned by ListPipelineTriggerTableRecordsRequest.Validate if the
// designated constraints aren't met.
type ListPipelineTriggerTableRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelineTriggerTableRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelineTriggerTableRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelineTriggerTableRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelineTriggerTableRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelineTriggerTableRecordsRequestValidationError) ErrorName() string {
	return "ListPipelineTriggerTableRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelineTriggerTableRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelineTriggerTableRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelineTriggerTableRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelineTriggerTableRecordsRequestValidationError{}

// Validate checks the field values on ListPipelineTriggerTableRecordsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListPipelineTriggerTableRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListPipelineTriggerTableRecordsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListPipelineTriggerTableRecordsResponseMultiError, or nil if none found.
func (m *ListPipelineTriggerTableRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelineTriggerTableRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipelineTriggerTableRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPipelineTriggerTableRecordsResponseValidationError{
						field:  fmt.Sprintf("PipelineTriggerTableRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPipelineTriggerTableRecordsResponseValidationError{
						field:  fmt.Sprintf("PipelineTriggerTableRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPipelineTriggerTableRecordsResponseValidationError{
					field:  fmt.Sprintf("PipelineTriggerTableRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListPipelineTriggerTableRecordsResponseMultiError(errors)
	}

	return nil
}

// ListPipelineTriggerTableRecordsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListPipelineTriggerTableRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPipelineTriggerTableRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelineTriggerTableRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelineTriggerTableRecordsResponseMultiError) AllErrors() []error { return m }

// ListPipelineTriggerTableRecordsResponseValidationError is the validation
// error returned by ListPipelineTriggerTableRecordsResponse.Validate if the
// designated constraints aren't met.
type ListPipelineTriggerTableRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelineTriggerTableRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelineTriggerTableRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelineTriggerTableRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelineTriggerTableRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelineTriggerTableRecordsResponseValidationError) ErrorName() string {
	return "ListPipelineTriggerTableRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelineTriggerTableRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelineTriggerTableRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelineTriggerTableRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelineTriggerTableRecordsResponseValidationError{}

// Validate checks the field values on ListPipelineTriggerChartRecordsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListPipelineTriggerChartRecordsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListPipelineTriggerChartRecordsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListPipelineTriggerChartRecordsRequestMultiError, or nil if none found.
func (m *ListPipelineTriggerChartRecordsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelineTriggerChartRecordsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregationWindow

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if len(errors) > 0 {
		return ListPipelineTriggerChartRecordsRequestMultiError(errors)
	}

	return nil
}

// ListPipelineTriggerChartRecordsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListPipelineTriggerChartRecordsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPipelineTriggerChartRecordsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelineTriggerChartRecordsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelineTriggerChartRecordsRequestMultiError) AllErrors() []error { return m }

// ListPipelineTriggerChartRecordsRequestValidationError is the validation
// error returned by ListPipelineTriggerChartRecordsRequest.Validate if the
// designated constraints aren't met.
type ListPipelineTriggerChartRecordsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelineTriggerChartRecordsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelineTriggerChartRecordsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelineTriggerChartRecordsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelineTriggerChartRecordsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelineTriggerChartRecordsRequestValidationError) ErrorName() string {
	return "ListPipelineTriggerChartRecordsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelineTriggerChartRecordsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelineTriggerChartRecordsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelineTriggerChartRecordsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelineTriggerChartRecordsRequestValidationError{}

// Validate checks the field values on ListPipelineTriggerChartRecordsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListPipelineTriggerChartRecordsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListPipelineTriggerChartRecordsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListPipelineTriggerChartRecordsResponseMultiError, or nil if none found.
func (m *ListPipelineTriggerChartRecordsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipelineTriggerChartRecordsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipelineTriggerChartRecords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPipelineTriggerChartRecordsResponseValidationError{
						field:  fmt.Sprintf("PipelineTriggerChartRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPipelineTriggerChartRecordsResponseValidationError{
						field:  fmt.Sprintf("PipelineTriggerChartRecords[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPipelineTriggerChartRecordsResponseValidationError{
					field:  fmt.Sprintf("PipelineTriggerChartRecords[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPipelineTriggerChartRecordsResponseMultiError(errors)
	}

	return nil
}

// ListPipelineTriggerChartRecordsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListPipelineTriggerChartRecordsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListPipelineTriggerChartRecordsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipelineTriggerChartRecordsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipelineTriggerChartRecordsResponseMultiError) AllErrors() []error { return m }

// ListPipelineTriggerChartRecordsResponseValidationError is the validation
// error returned by ListPipelineTriggerChartRecordsResponse.Validate if the
// designated constraints aren't met.
type ListPipelineTriggerChartRecordsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipelineTriggerChartRecordsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipelineTriggerChartRecordsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipelineTriggerChartRecordsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipelineTriggerChartRecordsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipelineTriggerChartRecordsResponseValidationError) ErrorName() string {
	return "ListPipelineTriggerChartRecordsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipelineTriggerChartRecordsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipelineTriggerChartRecordsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipelineTriggerChartRecordsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipelineTriggerChartRecordsResponseValidationError{}

// Validate checks the field values on PipelineTriggerChartRecord with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineTriggerChartRecord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineTriggerChartRecord with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineTriggerChartRecordMultiError, or nil if none found.
func (m *PipelineTriggerChartRecord) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineTriggerChartRecord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipelineId

	// no validation rules for PipelineUid

	// no validation rules for TriggerMode

	// no validation rules for Status

	for idx, item := range m.GetTimeBuckets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineTriggerChartRecordValidationError{
						field:  fmt.Sprintf("TimeBuckets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineTriggerChartRecordValidationError{
						field:  fmt.Sprintf("TimeBuckets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineTriggerChartRecordValidationError{
					field:  fmt.Sprintf("TimeBuckets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PipelineReleaseId

	// no validation rules for PipelineReleaseUid

	if len(errors) > 0 {
		return PipelineTriggerChartRecordMultiError(errors)
	}

	return nil
}

// PipelineTriggerChartRecordMultiError is an error wrapping multiple
// validation errors returned by PipelineTriggerChartRecord.ValidateAll() if
// the designated constraints aren't met.
type PipelineTriggerChartRecordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineTriggerChartRecordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineTriggerChartRecordMultiError) AllErrors() []error { return m }

// PipelineTriggerChartRecordValidationError is the validation error returned
// by PipelineTriggerChartRecord.Validate if the designated constraints aren't met.
type PipelineTriggerChartRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineTriggerChartRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineTriggerChartRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineTriggerChartRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineTriggerChartRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineTriggerChartRecordValidationError) ErrorName() string {
	return "PipelineTriggerChartRecordValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineTriggerChartRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineTriggerChartRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineTriggerChartRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineTriggerChartRecordValidationError{}
