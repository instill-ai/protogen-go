// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: model/model/v1alpha/model.proto

package modelv1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	runv1alpha "github.com/instill-ai/protobufs/gen/go/common/run/v1alpha"

	taskv1alpha "github.com/instill-ai/protobufs/gen/go/common/task/v1alpha"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = runv1alpha.RunStatus(0)

	_ = taskv1alpha.Task(0)
)

// Validate checks the field values on LivenessRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LivenessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LivenessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LivenessRequestMultiError, or nil if none found.
func (m *LivenessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LivenessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.HealthCheckRequest != nil {

		if all {
			switch v := interface{}(m.GetHealthCheckRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LivenessRequestValidationError{
						field:  "HealthCheckRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LivenessRequestValidationError{
						field:  "HealthCheckRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHealthCheckRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LivenessRequestValidationError{
					field:  "HealthCheckRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LivenessRequestMultiError(errors)
	}

	return nil
}

// LivenessRequestMultiError is an error wrapping multiple validation errors
// returned by LivenessRequest.ValidateAll() if the designated constraints
// aren't met.
type LivenessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LivenessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LivenessRequestMultiError) AllErrors() []error { return m }

// LivenessRequestValidationError is the validation error returned by
// LivenessRequest.Validate if the designated constraints aren't met.
type LivenessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LivenessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LivenessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LivenessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LivenessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LivenessRequestValidationError) ErrorName() string { return "LivenessRequestValidationError" }

// Error satisfies the builtin error interface
func (e LivenessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLivenessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LivenessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LivenessRequestValidationError{}

// Validate checks the field values on LivenessResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LivenessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LivenessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LivenessResponseMultiError, or nil if none found.
func (m *LivenessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LivenessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHealthCheckResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LivenessResponseValidationError{
					field:  "HealthCheckResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LivenessResponseValidationError{
					field:  "HealthCheckResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthCheckResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LivenessResponseValidationError{
				field:  "HealthCheckResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LivenessResponseMultiError(errors)
	}

	return nil
}

// LivenessResponseMultiError is an error wrapping multiple validation errors
// returned by LivenessResponse.ValidateAll() if the designated constraints
// aren't met.
type LivenessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LivenessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LivenessResponseMultiError) AllErrors() []error { return m }

// LivenessResponseValidationError is the validation error returned by
// LivenessResponse.Validate if the designated constraints aren't met.
type LivenessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LivenessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LivenessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LivenessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LivenessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LivenessResponseValidationError) ErrorName() string { return "LivenessResponseValidationError" }

// Error satisfies the builtin error interface
func (e LivenessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLivenessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LivenessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LivenessResponseValidationError{}

// Validate checks the field values on ReadinessRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadinessRequestMultiError, or nil if none found.
func (m *ReadinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.HealthCheckRequest != nil {

		if all {
			switch v := interface{}(m.GetHealthCheckRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadinessRequestValidationError{
						field:  "HealthCheckRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadinessRequestValidationError{
						field:  "HealthCheckRequest",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHealthCheckRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadinessRequestValidationError{
					field:  "HealthCheckRequest",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReadinessRequestMultiError(errors)
	}

	return nil
}

// ReadinessRequestMultiError is an error wrapping multiple validation errors
// returned by ReadinessRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadinessRequestMultiError) AllErrors() []error { return m }

// ReadinessRequestValidationError is the validation error returned by
// ReadinessRequest.Validate if the designated constraints aren't met.
type ReadinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadinessRequestValidationError) ErrorName() string { return "ReadinessRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReadinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadinessRequestValidationError{}

// Validate checks the field values on ReadinessResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadinessResponseMultiError, or nil if none found.
func (m *ReadinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHealthCheckResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReadinessResponseValidationError{
					field:  "HealthCheckResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReadinessResponseValidationError{
					field:  "HealthCheckResponse",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHealthCheckResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReadinessResponseValidationError{
				field:  "HealthCheckResponse",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReadinessResponseMultiError(errors)
	}

	return nil
}

// ReadinessResponseMultiError is an error wrapping multiple validation errors
// returned by ReadinessResponse.ValidateAll() if the designated constraints
// aren't met.
type ReadinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadinessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadinessResponseMultiError) AllErrors() []error { return m }

// ReadinessResponseValidationError is the validation error returned by
// ReadinessResponse.Validate if the designated constraints aren't met.
type ReadinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadinessResponseValidationError) ErrorName() string {
	return "ReadinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadinessResponseValidationError{}

// Validate checks the field values on Region with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Region) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Region with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RegionMultiError, or nil if none found.
func (m *Region) ValidateAll() error {
	return m.validate(true)
}

func (m *Region) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegionName

	if len(errors) > 0 {
		return RegionMultiError(errors)
	}

	return nil
}

// RegionMultiError is an error wrapping multiple validation errors returned by
// Region.ValidateAll() if the designated constraints aren't met.
type RegionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegionMultiError) AllErrors() []error { return m }

// RegionValidationError is the validation error returned by Region.Validate if
// the designated constraints aren't met.
type RegionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegionValidationError) ErrorName() string { return "RegionValidationError" }

// Error satisfies the builtin error interface
func (e RegionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegionValidationError{}

// Validate checks the field values on ModelVersion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelVersion with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelVersionMultiError, or
// nil if none found.
func (m *ModelVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Digest

	// no validation rules for State

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelVersionValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelVersionValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelVersionValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModelVersionMultiError(errors)
	}

	return nil
}

// ModelVersionMultiError is an error wrapping multiple validation errors
// returned by ModelVersion.ValidateAll() if the designated constraints aren't met.
type ModelVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelVersionMultiError) AllErrors() []error { return m }

// ModelVersionValidationError is the validation error returned by
// ModelVersion.Validate if the designated constraints aren't met.
type ModelVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelVersionValidationError) ErrorName() string { return "ModelVersionValidationError" }

// Error satisfies the builtin error interface
func (e ModelVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelVersionValidationError{}

// Validate checks the field values on Model with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Model) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Model with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ModelMultiError, or nil if none found.
func (m *Model) ValidateAll() error {
	return m.validate(true)
}

func (m *Model) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Uid

	// no validation rules for Id

	// no validation rules for ModelDefinition

	if all {
		switch v := interface{}(m.GetConfiguration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "Configuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfiguration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelValidationError{
				field:  "Configuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Task

	// no validation rules for Visibility

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeleteTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "DeleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "DeleteTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeleteTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelValidationError{
				field:  "DeleteTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OwnerName

	// no validation rules for Region

	// no validation rules for Hardware

	if all {
		switch v := interface{}(m.GetPermission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "Permission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelValidationError{
				field:  "Permission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInputSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "InputSchema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "InputSchema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelValidationError{
				field:  "InputSchema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutputSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "OutputSchema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "OutputSchema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutputSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelValidationError{
				field:  "OutputSchema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Owner != nil {

		if all {
			switch v := interface{}(m.GetOwner()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelValidationError{
						field:  "Owner",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelValidationError{
						field:  "Owner",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Readme != nil {
		// no validation rules for Readme
	}

	if m.SourceUrl != nil {
		// no validation rules for SourceUrl
	}

	if m.DocumentationUrl != nil {
		// no validation rules for DocumentationUrl
	}

	if m.License != nil {
		// no validation rules for License
	}

	if m.ProfileImage != nil {
		// no validation rules for ProfileImage
	}

	if len(errors) > 0 {
		return ModelMultiError(errors)
	}

	return nil
}

// ModelMultiError is an error wrapping multiple validation errors returned by
// Model.ValidateAll() if the designated constraints aren't met.
type ModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelMultiError) AllErrors() []error { return m }

// ModelValidationError is the validation error returned by Model.Validate if
// the designated constraints aren't met.
type ModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelValidationError) ErrorName() string { return "ModelValidationError" }

// Error satisfies the builtin error interface
func (e ModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelValidationError{}

// Validate checks the field values on ListModelsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListModelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModelsRequestMultiError, or nil if none found.
func (m *ListModelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.ShowDeleted != nil {
		// no validation rules for ShowDeleted
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.Visibility != nil {
		// no validation rules for Visibility
	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if len(errors) > 0 {
		return ListModelsRequestMultiError(errors)
	}

	return nil
}

// ListModelsRequestMultiError is an error wrapping multiple validation errors
// returned by ListModelsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListModelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModelsRequestMultiError) AllErrors() []error { return m }

// ListModelsRequestValidationError is the validation error returned by
// ListModelsRequest.Validate if the designated constraints aren't met.
type ListModelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModelsRequestValidationError) ErrorName() string {
	return "ListModelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListModelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModelsRequestValidationError{}

// Validate checks the field values on ListModelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModelsResponseMultiError, or nil if none found.
func (m *ListModelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListModelsResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListModelsResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListModelsResponseValidationError{
					field:  fmt.Sprintf("Models[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListModelsResponseMultiError(errors)
	}

	return nil
}

// ListModelsResponseMultiError is an error wrapping multiple validation errors
// returned by ListModelsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListModelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModelsResponseMultiError) AllErrors() []error { return m }

// ListModelsResponseValidationError is the validation error returned by
// ListModelsResponse.Validate if the designated constraints aren't met.
type ListModelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModelsResponseValidationError) ErrorName() string {
	return "ListModelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListModelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModelsResponseValidationError{}

// Validate checks the field values on LookUpModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookUpModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookUpModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookUpModelRequestMultiError, or nil if none found.
func (m *LookUpModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LookUpModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Permalink

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return LookUpModelRequestMultiError(errors)
	}

	return nil
}

// LookUpModelRequestMultiError is an error wrapping multiple validation errors
// returned by LookUpModelRequest.ValidateAll() if the designated constraints
// aren't met.
type LookUpModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookUpModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookUpModelRequestMultiError) AllErrors() []error { return m }

// LookUpModelRequestValidationError is the validation error returned by
// LookUpModelRequest.Validate if the designated constraints aren't met.
type LookUpModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookUpModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookUpModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookUpModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookUpModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookUpModelRequestValidationError) ErrorName() string {
	return "LookUpModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LookUpModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookUpModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookUpModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookUpModelRequestValidationError{}

// Validate checks the field values on LookUpModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookUpModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookUpModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookUpModelResponseMultiError, or nil if none found.
func (m *LookUpModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LookUpModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LookUpModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LookUpModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LookUpModelResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LookUpModelResponseMultiError(errors)
	}

	return nil
}

// LookUpModelResponseMultiError is an error wrapping multiple validation
// errors returned by LookUpModelResponse.ValidateAll() if the designated
// constraints aren't met.
type LookUpModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookUpModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookUpModelResponseMultiError) AllErrors() []error { return m }

// LookUpModelResponseValidationError is the validation error returned by
// LookUpModelResponse.Validate if the designated constraints aren't met.
type LookUpModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookUpModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookUpModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookUpModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookUpModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookUpModelResponseValidationError) ErrorName() string {
	return "LookUpModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LookUpModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookUpModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookUpModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookUpModelResponseValidationError{}

// Validate checks the field values on ListNamespaceModelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespaceModelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespaceModelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespaceModelsRequestMultiError, or nil if none found.
func (m *ListNamespaceModelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespaceModelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.ShowDeleted != nil {
		// no validation rules for ShowDeleted
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.Visibility != nil {
		// no validation rules for Visibility
	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if len(errors) > 0 {
		return ListNamespaceModelsRequestMultiError(errors)
	}

	return nil
}

// ListNamespaceModelsRequestMultiError is an error wrapping multiple
// validation errors returned by ListNamespaceModelsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListNamespaceModelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespaceModelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespaceModelsRequestMultiError) AllErrors() []error { return m }

// ListNamespaceModelsRequestValidationError is the validation error returned
// by ListNamespaceModelsRequest.Validate if the designated constraints aren't met.
type ListNamespaceModelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespaceModelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespaceModelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespaceModelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespaceModelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespaceModelsRequestValidationError) ErrorName() string {
	return "ListNamespaceModelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespaceModelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespaceModelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespaceModelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespaceModelsRequestValidationError{}

// Validate checks the field values on ListNamespaceModelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespaceModelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespaceModelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespaceModelsResponseMultiError, or nil if none found.
func (m *ListNamespaceModelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespaceModelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNamespaceModelsResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNamespaceModelsResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNamespaceModelsResponseValidationError{
					field:  fmt.Sprintf("Models[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListNamespaceModelsResponseMultiError(errors)
	}

	return nil
}

// ListNamespaceModelsResponseMultiError is an error wrapping multiple
// validation errors returned by ListNamespaceModelsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListNamespaceModelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespaceModelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespaceModelsResponseMultiError) AllErrors() []error { return m }

// ListNamespaceModelsResponseValidationError is the validation error returned
// by ListNamespaceModelsResponse.Validate if the designated constraints
// aren't met.
type ListNamespaceModelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespaceModelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespaceModelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespaceModelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespaceModelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespaceModelsResponseValidationError) ErrorName() string {
	return "ListNamespaceModelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespaceModelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespaceModelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespaceModelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespaceModelsResponseValidationError{}

// Validate checks the field values on CreateNamespaceModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNamespaceModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespaceModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNamespaceModelRequestMultiError, or nil if none found.
func (m *CreateNamespaceModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespaceModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespaceModelRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespaceModelRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceModelRequestValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNamespaceModelRequestMultiError(errors)
	}

	return nil
}

// CreateNamespaceModelRequestMultiError is an error wrapping multiple
// validation errors returned by CreateNamespaceModelRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateNamespaceModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespaceModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespaceModelRequestMultiError) AllErrors() []error { return m }

// CreateNamespaceModelRequestValidationError is the validation error returned
// by CreateNamespaceModelRequest.Validate if the designated constraints
// aren't met.
type CreateNamespaceModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceModelRequestValidationError) ErrorName() string {
	return "CreateNamespaceModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceModelRequestValidationError{}

// Validate checks the field values on CreateNamespaceModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNamespaceModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespaceModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNamespaceModelResponseMultiError, or nil if none found.
func (m *CreateNamespaceModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespaceModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespaceModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespaceModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceModelResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNamespaceModelResponseMultiError(errors)
	}

	return nil
}

// CreateNamespaceModelResponseMultiError is an error wrapping multiple
// validation errors returned by CreateNamespaceModelResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateNamespaceModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespaceModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespaceModelResponseMultiError) AllErrors() []error { return m }

// CreateNamespaceModelResponseValidationError is the validation error returned
// by CreateNamespaceModelResponse.Validate if the designated constraints
// aren't met.
type CreateNamespaceModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceModelResponseValidationError) ErrorName() string {
	return "CreateNamespaceModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceModelResponseValidationError{}

// Validate checks the field values on GetNamespaceModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceModelRequestMultiError, or nil if none found.
func (m *GetNamespaceModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetNamespaceModelRequestMultiError(errors)
	}

	return nil
}

// GetNamespaceModelRequestMultiError is an error wrapping multiple validation
// errors returned by GetNamespaceModelRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceModelRequestMultiError) AllErrors() []error { return m }

// GetNamespaceModelRequestValidationError is the validation error returned by
// GetNamespaceModelRequest.Validate if the designated constraints aren't met.
type GetNamespaceModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceModelRequestValidationError) ErrorName() string {
	return "GetNamespaceModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceModelRequestValidationError{}

// Validate checks the field values on GetNamespaceModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceModelResponseMultiError, or nil if none found.
func (m *GetNamespaceModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNamespaceModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNamespaceModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNamespaceModelResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNamespaceModelResponseMultiError(errors)
	}

	return nil
}

// GetNamespaceModelResponseMultiError is an error wrapping multiple validation
// errors returned by GetNamespaceModelResponse.ValidateAll() if the
// designated constraints aren't met.
type GetNamespaceModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceModelResponseMultiError) AllErrors() []error { return m }

// GetNamespaceModelResponseValidationError is the validation error returned by
// GetNamespaceModelResponse.Validate if the designated constraints aren't met.
type GetNamespaceModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceModelResponseValidationError) ErrorName() string {
	return "GetNamespaceModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceModelResponseValidationError{}

// Validate checks the field values on UpdateNamespaceModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNamespaceModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNamespaceModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNamespaceModelRequestMultiError, or nil if none found.
func (m *UpdateNamespaceModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespaceModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespaceModelRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespaceModelRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceModelRequestValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespaceModelRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespaceModelRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceModelRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateNamespaceModelRequestMultiError(errors)
	}

	return nil
}

// UpdateNamespaceModelRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateNamespaceModelRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateNamespaceModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespaceModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespaceModelRequestMultiError) AllErrors() []error { return m }

// UpdateNamespaceModelRequestValidationError is the validation error returned
// by UpdateNamespaceModelRequest.Validate if the designated constraints
// aren't met.
type UpdateNamespaceModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceModelRequestValidationError) ErrorName() string {
	return "UpdateNamespaceModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceModelRequestValidationError{}

// Validate checks the field values on UpdateNamespaceModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNamespaceModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNamespaceModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNamespaceModelResponseMultiError, or nil if none found.
func (m *UpdateNamespaceModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespaceModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespaceModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespaceModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceModelResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateNamespaceModelResponseMultiError(errors)
	}

	return nil
}

// UpdateNamespaceModelResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateNamespaceModelResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateNamespaceModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespaceModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespaceModelResponseMultiError) AllErrors() []error { return m }

// UpdateNamespaceModelResponseValidationError is the validation error returned
// by UpdateNamespaceModelResponse.Validate if the designated constraints
// aren't met.
type UpdateNamespaceModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceModelResponseValidationError) ErrorName() string {
	return "UpdateNamespaceModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceModelResponseValidationError{}

// Validate checks the field values on DeleteNamespaceModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNamespaceModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNamespaceModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNamespaceModelRequestMultiError, or nil if none found.
func (m *DeleteNamespaceModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespaceModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	if len(errors) > 0 {
		return DeleteNamespaceModelRequestMultiError(errors)
	}

	return nil
}

// DeleteNamespaceModelRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteNamespaceModelRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteNamespaceModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespaceModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespaceModelRequestMultiError) AllErrors() []error { return m }

// DeleteNamespaceModelRequestValidationError is the validation error returned
// by DeleteNamespaceModelRequest.Validate if the designated constraints
// aren't met.
type DeleteNamespaceModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceModelRequestValidationError) ErrorName() string {
	return "DeleteNamespaceModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceModelRequestValidationError{}

// Validate checks the field values on DeleteNamespaceModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNamespaceModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNamespaceModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNamespaceModelResponseMultiError, or nil if none found.
func (m *DeleteNamespaceModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespaceModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteNamespaceModelResponseMultiError(errors)
	}

	return nil
}

// DeleteNamespaceModelResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteNamespaceModelResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteNamespaceModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespaceModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespaceModelResponseMultiError) AllErrors() []error { return m }

// DeleteNamespaceModelResponseValidationError is the validation error returned
// by DeleteNamespaceModelResponse.Validate if the designated constraints
// aren't met.
type DeleteNamespaceModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceModelResponseValidationError) ErrorName() string {
	return "DeleteNamespaceModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceModelResponseValidationError{}

// Validate checks the field values on RenameNamespaceModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameNamespaceModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameNamespaceModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameNamespaceModelRequestMultiError, or nil if none found.
func (m *RenameNamespaceModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameNamespaceModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	// no validation rules for NewModelId

	if len(errors) > 0 {
		return RenameNamespaceModelRequestMultiError(errors)
	}

	return nil
}

// RenameNamespaceModelRequestMultiError is an error wrapping multiple
// validation errors returned by RenameNamespaceModelRequest.ValidateAll() if
// the designated constraints aren't met.
type RenameNamespaceModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameNamespaceModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameNamespaceModelRequestMultiError) AllErrors() []error { return m }

// RenameNamespaceModelRequestValidationError is the validation error returned
// by RenameNamespaceModelRequest.Validate if the designated constraints
// aren't met.
type RenameNamespaceModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameNamespaceModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameNamespaceModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameNamespaceModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameNamespaceModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameNamespaceModelRequestValidationError) ErrorName() string {
	return "RenameNamespaceModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenameNamespaceModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameNamespaceModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameNamespaceModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameNamespaceModelRequestValidationError{}

// Validate checks the field values on RenameNamespaceModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameNamespaceModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameNamespaceModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameNamespaceModelResponseMultiError, or nil if none found.
func (m *RenameNamespaceModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameNamespaceModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenameNamespaceModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenameNamespaceModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenameNamespaceModelResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenameNamespaceModelResponseMultiError(errors)
	}

	return nil
}

// RenameNamespaceModelResponseMultiError is an error wrapping multiple
// validation errors returned by RenameNamespaceModelResponse.ValidateAll() if
// the designated constraints aren't met.
type RenameNamespaceModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameNamespaceModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameNamespaceModelResponseMultiError) AllErrors() []error { return m }

// RenameNamespaceModelResponseValidationError is the validation error returned
// by RenameNamespaceModelResponse.Validate if the designated constraints
// aren't met.
type RenameNamespaceModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameNamespaceModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameNamespaceModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameNamespaceModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameNamespaceModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameNamespaceModelResponseValidationError) ErrorName() string {
	return "RenameNamespaceModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenameNamespaceModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameNamespaceModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameNamespaceModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameNamespaceModelResponseValidationError{}

// Validate checks the field values on WatchNamespaceModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchNamespaceModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchNamespaceModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchNamespaceModelRequestMultiError, or nil if none found.
func (m *WatchNamespaceModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchNamespaceModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	// no validation rules for Version

	if len(errors) > 0 {
		return WatchNamespaceModelRequestMultiError(errors)
	}

	return nil
}

// WatchNamespaceModelRequestMultiError is an error wrapping multiple
// validation errors returned by WatchNamespaceModelRequest.ValidateAll() if
// the designated constraints aren't met.
type WatchNamespaceModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchNamespaceModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchNamespaceModelRequestMultiError) AllErrors() []error { return m }

// WatchNamespaceModelRequestValidationError is the validation error returned
// by WatchNamespaceModelRequest.Validate if the designated constraints aren't met.
type WatchNamespaceModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchNamespaceModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchNamespaceModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchNamespaceModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchNamespaceModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchNamespaceModelRequestValidationError) ErrorName() string {
	return "WatchNamespaceModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchNamespaceModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchNamespaceModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchNamespaceModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchNamespaceModelRequestValidationError{}

// Validate checks the field values on WatchNamespaceModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchNamespaceModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchNamespaceModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchNamespaceModelResponseMultiError, or nil if none found.
func (m *WatchNamespaceModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchNamespaceModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for Message

	if len(errors) > 0 {
		return WatchNamespaceModelResponseMultiError(errors)
	}

	return nil
}

// WatchNamespaceModelResponseMultiError is an error wrapping multiple
// validation errors returned by WatchNamespaceModelResponse.ValidateAll() if
// the designated constraints aren't met.
type WatchNamespaceModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchNamespaceModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchNamespaceModelResponseMultiError) AllErrors() []error { return m }

// WatchNamespaceModelResponseValidationError is the validation error returned
// by WatchNamespaceModelResponse.Validate if the designated constraints
// aren't met.
type WatchNamespaceModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchNamespaceModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchNamespaceModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchNamespaceModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchNamespaceModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchNamespaceModelResponseValidationError) ErrorName() string {
	return "WatchNamespaceModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchNamespaceModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchNamespaceModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchNamespaceModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchNamespaceModelResponseValidationError{}

// Validate checks the field values on WatchNamespaceLatestModelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *WatchNamespaceLatestModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchNamespaceLatestModelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WatchNamespaceLatestModelRequestMultiError, or nil if none found.
func (m *WatchNamespaceLatestModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchNamespaceLatestModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	if len(errors) > 0 {
		return WatchNamespaceLatestModelRequestMultiError(errors)
	}

	return nil
}

// WatchNamespaceLatestModelRequestMultiError is an error wrapping multiple
// validation errors returned by
// WatchNamespaceLatestModelRequest.ValidateAll() if the designated
// constraints aren't met.
type WatchNamespaceLatestModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchNamespaceLatestModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchNamespaceLatestModelRequestMultiError) AllErrors() []error { return m }

// WatchNamespaceLatestModelRequestValidationError is the validation error
// returned by WatchNamespaceLatestModelRequest.Validate if the designated
// constraints aren't met.
type WatchNamespaceLatestModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchNamespaceLatestModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchNamespaceLatestModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchNamespaceLatestModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchNamespaceLatestModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchNamespaceLatestModelRequestValidationError) ErrorName() string {
	return "WatchNamespaceLatestModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchNamespaceLatestModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchNamespaceLatestModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchNamespaceLatestModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchNamespaceLatestModelRequestValidationError{}

// Validate checks the field values on WatchNamespaceLatestModelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *WatchNamespaceLatestModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchNamespaceLatestModelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WatchNamespaceLatestModelResponseMultiError, or nil if none found.
func (m *WatchNamespaceLatestModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchNamespaceLatestModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for Message

	if len(errors) > 0 {
		return WatchNamespaceLatestModelResponseMultiError(errors)
	}

	return nil
}

// WatchNamespaceLatestModelResponseMultiError is an error wrapping multiple
// validation errors returned by
// WatchNamespaceLatestModelResponse.ValidateAll() if the designated
// constraints aren't met.
type WatchNamespaceLatestModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchNamespaceLatestModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchNamespaceLatestModelResponseMultiError) AllErrors() []error { return m }

// WatchNamespaceLatestModelResponseValidationError is the validation error
// returned by WatchNamespaceLatestModelResponse.Validate if the designated
// constraints aren't met.
type WatchNamespaceLatestModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchNamespaceLatestModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchNamespaceLatestModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchNamespaceLatestModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchNamespaceLatestModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchNamespaceLatestModelResponseValidationError) ErrorName() string {
	return "WatchNamespaceLatestModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchNamespaceLatestModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchNamespaceLatestModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchNamespaceLatestModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchNamespaceLatestModelResponseValidationError{}

// Validate checks the field values on ListNamespaceModelVersionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListNamespaceModelVersionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespaceModelVersionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListNamespaceModelVersionsRequestMultiError, or nil if none found.
func (m *ListNamespaceModelVersionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespaceModelVersionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if len(errors) > 0 {
		return ListNamespaceModelVersionsRequestMultiError(errors)
	}

	return nil
}

// ListNamespaceModelVersionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListNamespaceModelVersionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListNamespaceModelVersionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespaceModelVersionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespaceModelVersionsRequestMultiError) AllErrors() []error { return m }

// ListNamespaceModelVersionsRequestValidationError is the validation error
// returned by ListNamespaceModelVersionsRequest.Validate if the designated
// constraints aren't met.
type ListNamespaceModelVersionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespaceModelVersionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespaceModelVersionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespaceModelVersionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespaceModelVersionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespaceModelVersionsRequestValidationError) ErrorName() string {
	return "ListNamespaceModelVersionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespaceModelVersionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespaceModelVersionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespaceModelVersionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespaceModelVersionsRequestValidationError{}

// Validate checks the field values on ListNamespaceModelVersionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListNamespaceModelVersionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespaceModelVersionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListNamespaceModelVersionsResponseMultiError, or nil if none found.
func (m *ListNamespaceModelVersionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespaceModelVersionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNamespaceModelVersionsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNamespaceModelVersionsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNamespaceModelVersionsResponseValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalSize

	// no validation rules for PageSize

	// no validation rules for Page

	if len(errors) > 0 {
		return ListNamespaceModelVersionsResponseMultiError(errors)
	}

	return nil
}

// ListNamespaceModelVersionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListNamespaceModelVersionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListNamespaceModelVersionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespaceModelVersionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespaceModelVersionsResponseMultiError) AllErrors() []error { return m }

// ListNamespaceModelVersionsResponseValidationError is the validation error
// returned by ListNamespaceModelVersionsResponse.Validate if the designated
// constraints aren't met.
type ListNamespaceModelVersionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespaceModelVersionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespaceModelVersionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespaceModelVersionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespaceModelVersionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespaceModelVersionsResponseValidationError) ErrorName() string {
	return "ListNamespaceModelVersionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespaceModelVersionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespaceModelVersionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespaceModelVersionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespaceModelVersionsResponseValidationError{}

// Validate checks the field values on DeleteNamespaceModelVersionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteNamespaceModelVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNamespaceModelVersionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteNamespaceModelVersionRequestMultiError, or nil if none found.
func (m *DeleteNamespaceModelVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespaceModelVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	// no validation rules for Version

	if len(errors) > 0 {
		return DeleteNamespaceModelVersionRequestMultiError(errors)
	}

	return nil
}

// DeleteNamespaceModelVersionRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteNamespaceModelVersionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteNamespaceModelVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespaceModelVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespaceModelVersionRequestMultiError) AllErrors() []error { return m }

// DeleteNamespaceModelVersionRequestValidationError is the validation error
// returned by DeleteNamespaceModelVersionRequest.Validate if the designated
// constraints aren't met.
type DeleteNamespaceModelVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceModelVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceModelVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceModelVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceModelVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceModelVersionRequestValidationError) ErrorName() string {
	return "DeleteNamespaceModelVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceModelVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceModelVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceModelVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceModelVersionRequestValidationError{}

// Validate checks the field values on DeleteNamespaceModelVersionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteNamespaceModelVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNamespaceModelVersionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteNamespaceModelVersionResponseMultiError, or nil if none found.
func (m *DeleteNamespaceModelVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespaceModelVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteNamespaceModelVersionResponseMultiError(errors)
	}

	return nil
}

// DeleteNamespaceModelVersionResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteNamespaceModelVersionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteNamespaceModelVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespaceModelVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespaceModelVersionResponseMultiError) AllErrors() []error { return m }

// DeleteNamespaceModelVersionResponseValidationError is the validation error
// returned by DeleteNamespaceModelVersionResponse.Validate if the designated
// constraints aren't met.
type DeleteNamespaceModelVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceModelVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceModelVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceModelVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceModelVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceModelVersionResponseValidationError) ErrorName() string {
	return "DeleteNamespaceModelVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceModelVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceModelVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceModelVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceModelVersionResponseValidationError{}

// Validate checks the field values on TriggerNamespaceModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerNamespaceModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerNamespaceModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerNamespaceModelRequestMultiError, or nil if none found.
func (m *TriggerNamespaceModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerNamespaceModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	// no validation rules for Version

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespaceModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespaceModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespaceModelRequestValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerNamespaceModelRequestMultiError(errors)
	}

	return nil
}

// TriggerNamespaceModelRequestMultiError is an error wrapping multiple
// validation errors returned by TriggerNamespaceModelRequest.ValidateAll() if
// the designated constraints aren't met.
type TriggerNamespaceModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNamespaceModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNamespaceModelRequestMultiError) AllErrors() []error { return m }

// TriggerNamespaceModelRequestValidationError is the validation error returned
// by TriggerNamespaceModelRequest.Validate if the designated constraints
// aren't met.
type TriggerNamespaceModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNamespaceModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerNamespaceModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerNamespaceModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerNamespaceModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNamespaceModelRequestValidationError) ErrorName() string {
	return "TriggerNamespaceModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerNamespaceModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerNamespaceModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNamespaceModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNamespaceModelRequestValidationError{}

// Validate checks the field values on TriggerNamespaceModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerNamespaceModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerNamespaceModelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggerNamespaceModelResponseMultiError, or nil if none found.
func (m *TriggerNamespaceModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerNamespaceModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	for idx, item := range m.GetTaskOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespaceModelResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespaceModelResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespaceModelResponseValidationError{
					field:  fmt.Sprintf("TaskOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerNamespaceModelResponseMultiError(errors)
	}

	return nil
}

// TriggerNamespaceModelResponseMultiError is an error wrapping multiple
// validation errors returned by TriggerNamespaceModelResponse.ValidateAll()
// if the designated constraints aren't met.
type TriggerNamespaceModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNamespaceModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNamespaceModelResponseMultiError) AllErrors() []error { return m }

// TriggerNamespaceModelResponseValidationError is the validation error
// returned by TriggerNamespaceModelResponse.Validate if the designated
// constraints aren't met.
type TriggerNamespaceModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNamespaceModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerNamespaceModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerNamespaceModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerNamespaceModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNamespaceModelResponseValidationError) ErrorName() string {
	return "TriggerNamespaceModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerNamespaceModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerNamespaceModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNamespaceModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNamespaceModelResponseValidationError{}

// Validate checks the field values on TriggerAsyncNamespaceModelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TriggerAsyncNamespaceModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerAsyncNamespaceModelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerAsyncNamespaceModelRequestMultiError, or nil if none found.
func (m *TriggerAsyncNamespaceModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncNamespaceModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	// no validation rules for Version

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncNamespaceModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncNamespaceModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncNamespaceModelRequestValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerAsyncNamespaceModelRequestMultiError(errors)
	}

	return nil
}

// TriggerAsyncNamespaceModelRequestMultiError is an error wrapping multiple
// validation errors returned by
// TriggerAsyncNamespaceModelRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncNamespaceModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncNamespaceModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncNamespaceModelRequestMultiError) AllErrors() []error { return m }

// TriggerAsyncNamespaceModelRequestValidationError is the validation error
// returned by TriggerAsyncNamespaceModelRequest.Validate if the designated
// constraints aren't met.
type TriggerAsyncNamespaceModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncNamespaceModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncNamespaceModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncNamespaceModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncNamespaceModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncNamespaceModelRequestValidationError) ErrorName() string {
	return "TriggerAsyncNamespaceModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncNamespaceModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncNamespaceModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncNamespaceModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncNamespaceModelRequestValidationError{}

// Validate checks the field values on TriggerAsyncNamespaceModelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TriggerAsyncNamespaceModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerAsyncNamespaceModelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerAsyncNamespaceModelResponseMultiError, or nil if none found.
func (m *TriggerAsyncNamespaceModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncNamespaceModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerAsyncNamespaceModelResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerAsyncNamespaceModelResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerAsyncNamespaceModelResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerAsyncNamespaceModelResponseMultiError(errors)
	}

	return nil
}

// TriggerAsyncNamespaceModelResponseMultiError is an error wrapping multiple
// validation errors returned by
// TriggerAsyncNamespaceModelResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncNamespaceModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncNamespaceModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncNamespaceModelResponseMultiError) AllErrors() []error { return m }

// TriggerAsyncNamespaceModelResponseValidationError is the validation error
// returned by TriggerAsyncNamespaceModelResponse.Validate if the designated
// constraints aren't met.
type TriggerAsyncNamespaceModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncNamespaceModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncNamespaceModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncNamespaceModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncNamespaceModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncNamespaceModelResponseValidationError) ErrorName() string {
	return "TriggerAsyncNamespaceModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncNamespaceModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncNamespaceModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncNamespaceModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncNamespaceModelResponseValidationError{}

// Validate checks the field values on TriggerNamespaceLatestModelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TriggerNamespaceLatestModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerNamespaceLatestModelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerNamespaceLatestModelRequestMultiError, or nil if none found.
func (m *TriggerNamespaceLatestModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerNamespaceLatestModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespaceLatestModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespaceLatestModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespaceLatestModelRequestValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerNamespaceLatestModelRequestMultiError(errors)
	}

	return nil
}

// TriggerNamespaceLatestModelRequestMultiError is an error wrapping multiple
// validation errors returned by
// TriggerNamespaceLatestModelRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerNamespaceLatestModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNamespaceLatestModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNamespaceLatestModelRequestMultiError) AllErrors() []error { return m }

// TriggerNamespaceLatestModelRequestValidationError is the validation error
// returned by TriggerNamespaceLatestModelRequest.Validate if the designated
// constraints aren't met.
type TriggerNamespaceLatestModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNamespaceLatestModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerNamespaceLatestModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerNamespaceLatestModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerNamespaceLatestModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNamespaceLatestModelRequestValidationError) ErrorName() string {
	return "TriggerNamespaceLatestModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerNamespaceLatestModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerNamespaceLatestModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNamespaceLatestModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNamespaceLatestModelRequestValidationError{}

// Validate checks the field values on TriggerNamespaceLatestModelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TriggerNamespaceLatestModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerNamespaceLatestModelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerNamespaceLatestModelResponseMultiError, or nil if none found.
func (m *TriggerNamespaceLatestModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerNamespaceLatestModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	for idx, item := range m.GetTaskOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespaceLatestModelResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespaceLatestModelResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespaceLatestModelResponseValidationError{
					field:  fmt.Sprintf("TaskOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerNamespaceLatestModelResponseMultiError(errors)
	}

	return nil
}

// TriggerNamespaceLatestModelResponseMultiError is an error wrapping multiple
// validation errors returned by
// TriggerNamespaceLatestModelResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerNamespaceLatestModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNamespaceLatestModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNamespaceLatestModelResponseMultiError) AllErrors() []error { return m }

// TriggerNamespaceLatestModelResponseValidationError is the validation error
// returned by TriggerNamespaceLatestModelResponse.Validate if the designated
// constraints aren't met.
type TriggerNamespaceLatestModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNamespaceLatestModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerNamespaceLatestModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerNamespaceLatestModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerNamespaceLatestModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNamespaceLatestModelResponseValidationError) ErrorName() string {
	return "TriggerNamespaceLatestModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerNamespaceLatestModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerNamespaceLatestModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNamespaceLatestModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNamespaceLatestModelResponseValidationError{}

// Validate checks the field values on TriggerAsyncNamespaceLatestModelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerAsyncNamespaceLatestModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerAsyncNamespaceLatestModelRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TriggerAsyncNamespaceLatestModelRequestMultiError, or nil if none found.
func (m *TriggerAsyncNamespaceLatestModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncNamespaceLatestModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncNamespaceLatestModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncNamespaceLatestModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncNamespaceLatestModelRequestValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerAsyncNamespaceLatestModelRequestMultiError(errors)
	}

	return nil
}

// TriggerAsyncNamespaceLatestModelRequestMultiError is an error wrapping
// multiple validation errors returned by
// TriggerAsyncNamespaceLatestModelRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncNamespaceLatestModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncNamespaceLatestModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncNamespaceLatestModelRequestMultiError) AllErrors() []error { return m }

// TriggerAsyncNamespaceLatestModelRequestValidationError is the validation
// error returned by TriggerAsyncNamespaceLatestModelRequest.Validate if the
// designated constraints aren't met.
type TriggerAsyncNamespaceLatestModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncNamespaceLatestModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncNamespaceLatestModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncNamespaceLatestModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncNamespaceLatestModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncNamespaceLatestModelRequestValidationError) ErrorName() string {
	return "TriggerAsyncNamespaceLatestModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncNamespaceLatestModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncNamespaceLatestModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncNamespaceLatestModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncNamespaceLatestModelRequestValidationError{}

// Validate checks the field values on TriggerAsyncNamespaceLatestModelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerAsyncNamespaceLatestModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerAsyncNamespaceLatestModelResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerAsyncNamespaceLatestModelResponseMultiError, or nil if none found.
func (m *TriggerAsyncNamespaceLatestModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncNamespaceLatestModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerAsyncNamespaceLatestModelResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerAsyncNamespaceLatestModelResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerAsyncNamespaceLatestModelResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerAsyncNamespaceLatestModelResponseMultiError(errors)
	}

	return nil
}

// TriggerAsyncNamespaceLatestModelResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerAsyncNamespaceLatestModelResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncNamespaceLatestModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncNamespaceLatestModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncNamespaceLatestModelResponseMultiError) AllErrors() []error { return m }

// TriggerAsyncNamespaceLatestModelResponseValidationError is the validation
// error returned by TriggerAsyncNamespaceLatestModelResponse.Validate if the
// designated constraints aren't met.
type TriggerAsyncNamespaceLatestModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncNamespaceLatestModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncNamespaceLatestModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncNamespaceLatestModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncNamespaceLatestModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncNamespaceLatestModelResponseValidationError) ErrorName() string {
	return "TriggerAsyncNamespaceLatestModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncNamespaceLatestModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncNamespaceLatestModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncNamespaceLatestModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncNamespaceLatestModelResponseValidationError{}

// Validate checks the field values on
// TriggerNamespaceModelBinaryFileUploadRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerNamespaceModelBinaryFileUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerNamespaceModelBinaryFileUploadRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerNamespaceModelBinaryFileUploadRequestMultiError, or nil if none found.
func (m *TriggerNamespaceModelBinaryFileUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerNamespaceModelBinaryFileUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	// no validation rules for Version

	for idx, item := range m.GetTaskInput() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespaceModelBinaryFileUploadRequestValidationError{
						field:  fmt.Sprintf("TaskInput[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespaceModelBinaryFileUploadRequestValidationError{
						field:  fmt.Sprintf("TaskInput[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespaceModelBinaryFileUploadRequestValidationError{
					field:  fmt.Sprintf("TaskInput[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerNamespaceModelBinaryFileUploadRequestMultiError(errors)
	}

	return nil
}

// TriggerNamespaceModelBinaryFileUploadRequestMultiError is an error wrapping
// multiple validation errors returned by
// TriggerNamespaceModelBinaryFileUploadRequest.ValidateAll() if the
// designated constraints aren't met.
type TriggerNamespaceModelBinaryFileUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNamespaceModelBinaryFileUploadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNamespaceModelBinaryFileUploadRequestMultiError) AllErrors() []error { return m }

// TriggerNamespaceModelBinaryFileUploadRequestValidationError is the
// validation error returned by
// TriggerNamespaceModelBinaryFileUploadRequest.Validate if the designated
// constraints aren't met.
type TriggerNamespaceModelBinaryFileUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNamespaceModelBinaryFileUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerNamespaceModelBinaryFileUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerNamespaceModelBinaryFileUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerNamespaceModelBinaryFileUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNamespaceModelBinaryFileUploadRequestValidationError) ErrorName() string {
	return "TriggerNamespaceModelBinaryFileUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerNamespaceModelBinaryFileUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerNamespaceModelBinaryFileUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNamespaceModelBinaryFileUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNamespaceModelBinaryFileUploadRequestValidationError{}

// Validate checks the field values on
// TriggerNamespaceModelBinaryFileUploadResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerNamespaceModelBinaryFileUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerNamespaceModelBinaryFileUploadResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerNamespaceModelBinaryFileUploadResponseMultiError, or nil if none found.
func (m *TriggerNamespaceModelBinaryFileUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerNamespaceModelBinaryFileUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	for idx, item := range m.GetTaskOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespaceModelBinaryFileUploadResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespaceModelBinaryFileUploadResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespaceModelBinaryFileUploadResponseValidationError{
					field:  fmt.Sprintf("TaskOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerNamespaceModelBinaryFileUploadResponseMultiError(errors)
	}

	return nil
}

// TriggerNamespaceModelBinaryFileUploadResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerNamespaceModelBinaryFileUploadResponse.ValidateAll() if the
// designated constraints aren't met.
type TriggerNamespaceModelBinaryFileUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNamespaceModelBinaryFileUploadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNamespaceModelBinaryFileUploadResponseMultiError) AllErrors() []error { return m }

// TriggerNamespaceModelBinaryFileUploadResponseValidationError is the
// validation error returned by
// TriggerNamespaceModelBinaryFileUploadResponse.Validate if the designated
// constraints aren't met.
type TriggerNamespaceModelBinaryFileUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNamespaceModelBinaryFileUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerNamespaceModelBinaryFileUploadResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e TriggerNamespaceModelBinaryFileUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerNamespaceModelBinaryFileUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNamespaceModelBinaryFileUploadResponseValidationError) ErrorName() string {
	return "TriggerNamespaceModelBinaryFileUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerNamespaceModelBinaryFileUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerNamespaceModelBinaryFileUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNamespaceModelBinaryFileUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNamespaceModelBinaryFileUploadResponseValidationError{}

// Validate checks the field values on
// TriggerNamespaceLatestModelBinaryFileUploadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TriggerNamespaceLatestModelBinaryFileUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerNamespaceLatestModelBinaryFileUploadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// TriggerNamespaceLatestModelBinaryFileUploadRequestMultiError, or nil if
// none found.
func (m *TriggerNamespaceLatestModelBinaryFileUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerNamespaceLatestModelBinaryFileUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	for idx, item := range m.GetTaskInput() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespaceLatestModelBinaryFileUploadRequestValidationError{
						field:  fmt.Sprintf("TaskInput[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespaceLatestModelBinaryFileUploadRequestValidationError{
						field:  fmt.Sprintf("TaskInput[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespaceLatestModelBinaryFileUploadRequestValidationError{
					field:  fmt.Sprintf("TaskInput[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerNamespaceLatestModelBinaryFileUploadRequestMultiError(errors)
	}

	return nil
}

// TriggerNamespaceLatestModelBinaryFileUploadRequestMultiError is an error
// wrapping multiple validation errors returned by
// TriggerNamespaceLatestModelBinaryFileUploadRequest.ValidateAll() if the
// designated constraints aren't met.
type TriggerNamespaceLatestModelBinaryFileUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNamespaceLatestModelBinaryFileUploadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNamespaceLatestModelBinaryFileUploadRequestMultiError) AllErrors() []error { return m }

// TriggerNamespaceLatestModelBinaryFileUploadRequestValidationError is the
// validation error returned by
// TriggerNamespaceLatestModelBinaryFileUploadRequest.Validate if the
// designated constraints aren't met.
type TriggerNamespaceLatestModelBinaryFileUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNamespaceLatestModelBinaryFileUploadRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e TriggerNamespaceLatestModelBinaryFileUploadRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e TriggerNamespaceLatestModelBinaryFileUploadRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e TriggerNamespaceLatestModelBinaryFileUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNamespaceLatestModelBinaryFileUploadRequestValidationError) ErrorName() string {
	return "TriggerNamespaceLatestModelBinaryFileUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerNamespaceLatestModelBinaryFileUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerNamespaceLatestModelBinaryFileUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNamespaceLatestModelBinaryFileUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNamespaceLatestModelBinaryFileUploadRequestValidationError{}

// Validate checks the field values on
// TriggerNamespaceLatestModelBinaryFileUploadResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TriggerNamespaceLatestModelBinaryFileUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerNamespaceLatestModelBinaryFileUploadResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// TriggerNamespaceLatestModelBinaryFileUploadResponseMultiError, or nil if
// none found.
func (m *TriggerNamespaceLatestModelBinaryFileUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerNamespaceLatestModelBinaryFileUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	for idx, item := range m.GetTaskOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerNamespaceLatestModelBinaryFileUploadResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerNamespaceLatestModelBinaryFileUploadResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerNamespaceLatestModelBinaryFileUploadResponseValidationError{
					field:  fmt.Sprintf("TaskOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerNamespaceLatestModelBinaryFileUploadResponseMultiError(errors)
	}

	return nil
}

// TriggerNamespaceLatestModelBinaryFileUploadResponseMultiError is an error
// wrapping multiple validation errors returned by
// TriggerNamespaceLatestModelBinaryFileUploadResponse.ValidateAll() if the
// designated constraints aren't met.
type TriggerNamespaceLatestModelBinaryFileUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerNamespaceLatestModelBinaryFileUploadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerNamespaceLatestModelBinaryFileUploadResponseMultiError) AllErrors() []error { return m }

// TriggerNamespaceLatestModelBinaryFileUploadResponseValidationError is the
// validation error returned by
// TriggerNamespaceLatestModelBinaryFileUploadResponse.Validate if the
// designated constraints aren't met.
type TriggerNamespaceLatestModelBinaryFileUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerNamespaceLatestModelBinaryFileUploadResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e TriggerNamespaceLatestModelBinaryFileUploadResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e TriggerNamespaceLatestModelBinaryFileUploadResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e TriggerNamespaceLatestModelBinaryFileUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerNamespaceLatestModelBinaryFileUploadResponseValidationError) ErrorName() string {
	return "TriggerNamespaceLatestModelBinaryFileUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerNamespaceLatestModelBinaryFileUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerNamespaceLatestModelBinaryFileUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerNamespaceLatestModelBinaryFileUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerNamespaceLatestModelBinaryFileUploadResponseValidationError{}

// Validate checks the field values on GetNamespaceLatestModelOperationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetNamespaceLatestModelOperationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetNamespaceLatestModelOperationRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GetNamespaceLatestModelOperationRequestMultiError, or nil if none found.
func (m *GetNamespaceLatestModelOperationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceLatestModelOperationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetNamespaceLatestModelOperationRequestMultiError(errors)
	}

	return nil
}

// GetNamespaceLatestModelOperationRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetNamespaceLatestModelOperationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceLatestModelOperationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceLatestModelOperationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceLatestModelOperationRequestMultiError) AllErrors() []error { return m }

// GetNamespaceLatestModelOperationRequestValidationError is the validation
// error returned by GetNamespaceLatestModelOperationRequest.Validate if the
// designated constraints aren't met.
type GetNamespaceLatestModelOperationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceLatestModelOperationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceLatestModelOperationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceLatestModelOperationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceLatestModelOperationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceLatestModelOperationRequestValidationError) ErrorName() string {
	return "GetNamespaceLatestModelOperationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceLatestModelOperationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceLatestModelOperationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceLatestModelOperationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceLatestModelOperationRequestValidationError{}

// Validate checks the field values on GetNamespaceLatestModelOperationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetNamespaceLatestModelOperationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetNamespaceLatestModelOperationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetNamespaceLatestModelOperationResponseMultiError, or nil if none found.
func (m *GetNamespaceLatestModelOperationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceLatestModelOperationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNamespaceLatestModelOperationResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNamespaceLatestModelOperationResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNamespaceLatestModelOperationResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNamespaceLatestModelOperationResponseMultiError(errors)
	}

	return nil
}

// GetNamespaceLatestModelOperationResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetNamespaceLatestModelOperationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceLatestModelOperationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceLatestModelOperationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceLatestModelOperationResponseMultiError) AllErrors() []error { return m }

// GetNamespaceLatestModelOperationResponseValidationError is the validation
// error returned by GetNamespaceLatestModelOperationResponse.Validate if the
// designated constraints aren't met.
type GetNamespaceLatestModelOperationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceLatestModelOperationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceLatestModelOperationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceLatestModelOperationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceLatestModelOperationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceLatestModelOperationResponseValidationError) ErrorName() string {
	return "GetNamespaceLatestModelOperationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceLatestModelOperationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceLatestModelOperationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceLatestModelOperationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceLatestModelOperationResponseValidationError{}

// Validate checks the field values on GetNamespaceModelOperationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetNamespaceModelOperationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceModelOperationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetNamespaceModelOperationRequestMultiError, or nil if none found.
func (m *GetNamespaceModelOperationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceModelOperationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	// no validation rules for Version

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetNamespaceModelOperationRequestMultiError(errors)
	}

	return nil
}

// GetNamespaceModelOperationRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetNamespaceModelOperationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceModelOperationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceModelOperationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceModelOperationRequestMultiError) AllErrors() []error { return m }

// GetNamespaceModelOperationRequestValidationError is the validation error
// returned by GetNamespaceModelOperationRequest.Validate if the designated
// constraints aren't met.
type GetNamespaceModelOperationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceModelOperationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceModelOperationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceModelOperationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceModelOperationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceModelOperationRequestValidationError) ErrorName() string {
	return "GetNamespaceModelOperationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceModelOperationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceModelOperationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceModelOperationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceModelOperationRequestValidationError{}

// Validate checks the field values on GetNamespaceModelOperationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetNamespaceModelOperationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceModelOperationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetNamespaceModelOperationResponseMultiError, or nil if none found.
func (m *GetNamespaceModelOperationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceModelOperationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNamespaceModelOperationResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNamespaceModelOperationResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNamespaceModelOperationResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNamespaceModelOperationResponseMultiError(errors)
	}

	return nil
}

// GetNamespaceModelOperationResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetNamespaceModelOperationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNamespaceModelOperationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceModelOperationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceModelOperationResponseMultiError) AllErrors() []error { return m }

// GetNamespaceModelOperationResponseValidationError is the validation error
// returned by GetNamespaceModelOperationResponse.Validate if the designated
// constraints aren't met.
type GetNamespaceModelOperationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceModelOperationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceModelOperationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceModelOperationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceModelOperationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceModelOperationResponseValidationError) ErrorName() string {
	return "GetNamespaceModelOperationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceModelOperationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceModelOperationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceModelOperationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceModelOperationResponseValidationError{}

// Validate checks the field values on DeployNamespaceModelAdminRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeployNamespaceModelAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployNamespaceModelAdminRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeployNamespaceModelAdminRequestMultiError, or nil if none found.
func (m *DeployNamespaceModelAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployNamespaceModelAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	// no validation rules for Version

	// no validation rules for Digest

	if len(errors) > 0 {
		return DeployNamespaceModelAdminRequestMultiError(errors)
	}

	return nil
}

// DeployNamespaceModelAdminRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeployNamespaceModelAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type DeployNamespaceModelAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployNamespaceModelAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployNamespaceModelAdminRequestMultiError) AllErrors() []error { return m }

// DeployNamespaceModelAdminRequestValidationError is the validation error
// returned by DeployNamespaceModelAdminRequest.Validate if the designated
// constraints aren't met.
type DeployNamespaceModelAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployNamespaceModelAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployNamespaceModelAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployNamespaceModelAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployNamespaceModelAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployNamespaceModelAdminRequestValidationError) ErrorName() string {
	return "DeployNamespaceModelAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeployNamespaceModelAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployNamespaceModelAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployNamespaceModelAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployNamespaceModelAdminRequestValidationError{}

// Validate checks the field values on DeployNamespaceModelAdminResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeployNamespaceModelAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployNamespaceModelAdminResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeployNamespaceModelAdminResponseMultiError, or nil if none found.
func (m *DeployNamespaceModelAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployNamespaceModelAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeployNamespaceModelAdminResponseMultiError(errors)
	}

	return nil
}

// DeployNamespaceModelAdminResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeployNamespaceModelAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type DeployNamespaceModelAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployNamespaceModelAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployNamespaceModelAdminResponseMultiError) AllErrors() []error { return m }

// DeployNamespaceModelAdminResponseValidationError is the validation error
// returned by DeployNamespaceModelAdminResponse.Validate if the designated
// constraints aren't met.
type DeployNamespaceModelAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployNamespaceModelAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployNamespaceModelAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployNamespaceModelAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployNamespaceModelAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployNamespaceModelAdminResponseValidationError) ErrorName() string {
	return "DeployNamespaceModelAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeployNamespaceModelAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployNamespaceModelAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployNamespaceModelAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployNamespaceModelAdminResponseValidationError{}

// Validate checks the field values on UndeployNamespaceModelAdminRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UndeployNamespaceModelAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UndeployNamespaceModelAdminRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UndeployNamespaceModelAdminRequestMultiError, or nil if none found.
func (m *UndeployNamespaceModelAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UndeployNamespaceModelAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	// no validation rules for Version

	// no validation rules for Digest

	if len(errors) > 0 {
		return UndeployNamespaceModelAdminRequestMultiError(errors)
	}

	return nil
}

// UndeployNamespaceModelAdminRequestMultiError is an error wrapping multiple
// validation errors returned by
// UndeployNamespaceModelAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type UndeployNamespaceModelAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UndeployNamespaceModelAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UndeployNamespaceModelAdminRequestMultiError) AllErrors() []error { return m }

// UndeployNamespaceModelAdminRequestValidationError is the validation error
// returned by UndeployNamespaceModelAdminRequest.Validate if the designated
// constraints aren't met.
type UndeployNamespaceModelAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UndeployNamespaceModelAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UndeployNamespaceModelAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UndeployNamespaceModelAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UndeployNamespaceModelAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UndeployNamespaceModelAdminRequestValidationError) ErrorName() string {
	return "UndeployNamespaceModelAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UndeployNamespaceModelAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUndeployNamespaceModelAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UndeployNamespaceModelAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UndeployNamespaceModelAdminRequestValidationError{}

// Validate checks the field values on UndeployNamespaceModelAdminResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UndeployNamespaceModelAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UndeployNamespaceModelAdminResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UndeployNamespaceModelAdminResponseMultiError, or nil if none found.
func (m *UndeployNamespaceModelAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UndeployNamespaceModelAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UndeployNamespaceModelAdminResponseMultiError(errors)
	}

	return nil
}

// UndeployNamespaceModelAdminResponseMultiError is an error wrapping multiple
// validation errors returned by
// UndeployNamespaceModelAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type UndeployNamespaceModelAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UndeployNamespaceModelAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UndeployNamespaceModelAdminResponseMultiError) AllErrors() []error { return m }

// UndeployNamespaceModelAdminResponseValidationError is the validation error
// returned by UndeployNamespaceModelAdminResponse.Validate if the designated
// constraints aren't met.
type UndeployNamespaceModelAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UndeployNamespaceModelAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UndeployNamespaceModelAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UndeployNamespaceModelAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UndeployNamespaceModelAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UndeployNamespaceModelAdminResponseValidationError) ErrorName() string {
	return "UndeployNamespaceModelAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UndeployNamespaceModelAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUndeployNamespaceModelAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UndeployNamespaceModelAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UndeployNamespaceModelAdminResponseValidationError{}

// Validate checks the field values on CreateUserModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserModelRequestMultiError, or nil if none found.
func (m *CreateUserModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserModelRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserModelRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserModelRequestValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Parent

	if len(errors) > 0 {
		return CreateUserModelRequestMultiError(errors)
	}

	return nil
}

// CreateUserModelRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserModelRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserModelRequestMultiError) AllErrors() []error { return m }

// CreateUserModelRequestValidationError is the validation error returned by
// CreateUserModelRequest.Validate if the designated constraints aren't met.
type CreateUserModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserModelRequestValidationError) ErrorName() string {
	return "CreateUserModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserModelRequestValidationError{}

// Validate checks the field values on CreateUserModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserModelResponseMultiError, or nil if none found.
func (m *CreateUserModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserModelResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserModelResponseMultiError(errors)
	}

	return nil
}

// CreateUserModelResponseMultiError is an error wrapping multiple validation
// errors returned by CreateUserModelResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateUserModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserModelResponseMultiError) AllErrors() []error { return m }

// CreateUserModelResponseValidationError is the validation error returned by
// CreateUserModelResponse.Validate if the designated constraints aren't met.
type CreateUserModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserModelResponseValidationError) ErrorName() string {
	return "CreateUserModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserModelResponseValidationError{}

// Validate checks the field values on ListUserModelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserModelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserModelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserModelsRequestMultiError, or nil if none found.
func (m *ListUserModelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserModelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.ShowDeleted != nil {
		// no validation rules for ShowDeleted
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.Visibility != nil {
		// no validation rules for Visibility
	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if len(errors) > 0 {
		return ListUserModelsRequestMultiError(errors)
	}

	return nil
}

// ListUserModelsRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserModelsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserModelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserModelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserModelsRequestMultiError) AllErrors() []error { return m }

// ListUserModelsRequestValidationError is the validation error returned by
// ListUserModelsRequest.Validate if the designated constraints aren't met.
type ListUserModelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserModelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserModelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserModelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserModelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserModelsRequestValidationError) ErrorName() string {
	return "ListUserModelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserModelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserModelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserModelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserModelsRequestValidationError{}

// Validate checks the field values on ListUserModelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserModelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserModelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserModelsResponseMultiError, or nil if none found.
func (m *ListUserModelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserModelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserModelsResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserModelsResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserModelsResponseValidationError{
					field:  fmt.Sprintf("Models[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListUserModelsResponseMultiError(errors)
	}

	return nil
}

// ListUserModelsResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserModelsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserModelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserModelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserModelsResponseMultiError) AllErrors() []error { return m }

// ListUserModelsResponseValidationError is the validation error returned by
// ListUserModelsResponse.Validate if the designated constraints aren't met.
type ListUserModelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserModelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserModelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserModelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserModelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserModelsResponseValidationError) ErrorName() string {
	return "ListUserModelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserModelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserModelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserModelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserModelsResponseValidationError{}

// Validate checks the field values on GetUserModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserModelRequestMultiError, or nil if none found.
func (m *GetUserModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetUserModelRequestMultiError(errors)
	}

	return nil
}

// GetUserModelRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserModelRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserModelRequestMultiError) AllErrors() []error { return m }

// GetUserModelRequestValidationError is the validation error returned by
// GetUserModelRequest.Validate if the designated constraints aren't met.
type GetUserModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserModelRequestValidationError) ErrorName() string {
	return "GetUserModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserModelRequestValidationError{}

// Validate checks the field values on GetUserModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserModelResponseMultiError, or nil if none found.
func (m *GetUserModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserModelResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserModelResponseMultiError(errors)
	}

	return nil
}

// GetUserModelResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserModelResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserModelResponseMultiError) AllErrors() []error { return m }

// GetUserModelResponseValidationError is the validation error returned by
// GetUserModelResponse.Validate if the designated constraints aren't met.
type GetUserModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserModelResponseValidationError) ErrorName() string {
	return "GetUserModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserModelResponseValidationError{}

// Validate checks the field values on UpdateUserModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserModelRequestMultiError, or nil if none found.
func (m *UpdateUserModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserModelRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserModelRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserModelRequestValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserModelRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserModelRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserModelRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserModelRequestMultiError(errors)
	}

	return nil
}

// UpdateUserModelRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserModelRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserModelRequestMultiError) AllErrors() []error { return m }

// UpdateUserModelRequestValidationError is the validation error returned by
// UpdateUserModelRequest.Validate if the designated constraints aren't met.
type UpdateUserModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserModelRequestValidationError) ErrorName() string {
	return "UpdateUserModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserModelRequestValidationError{}

// Validate checks the field values on UpdateUserModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserModelResponseMultiError, or nil if none found.
func (m *UpdateUserModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserModelResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserModelResponseMultiError(errors)
	}

	return nil
}

// UpdateUserModelResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserModelResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserModelResponseMultiError) AllErrors() []error { return m }

// UpdateUserModelResponseValidationError is the validation error returned by
// UpdateUserModelResponse.Validate if the designated constraints aren't met.
type UpdateUserModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserModelResponseValidationError) ErrorName() string {
	return "UpdateUserModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserModelResponseValidationError{}

// Validate checks the field values on DeleteUserModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserModelRequestMultiError, or nil if none found.
func (m *DeleteUserModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteUserModelRequestMultiError(errors)
	}

	return nil
}

// DeleteUserModelRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserModelRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserModelRequestMultiError) AllErrors() []error { return m }

// DeleteUserModelRequestValidationError is the validation error returned by
// DeleteUserModelRequest.Validate if the designated constraints aren't met.
type DeleteUserModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserModelRequestValidationError) ErrorName() string {
	return "DeleteUserModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserModelRequestValidationError{}

// Validate checks the field values on DeleteUserModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserModelResponseMultiError, or nil if none found.
func (m *DeleteUserModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserModelResponseMultiError(errors)
	}

	return nil
}

// DeleteUserModelResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUserModelResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserModelResponseMultiError) AllErrors() []error { return m }

// DeleteUserModelResponseValidationError is the validation error returned by
// DeleteUserModelResponse.Validate if the designated constraints aren't met.
type DeleteUserModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserModelResponseValidationError) ErrorName() string {
	return "DeleteUserModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserModelResponseValidationError{}

// Validate checks the field values on RenameUserModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameUserModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameUserModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameUserModelRequestMultiError, or nil if none found.
func (m *RenameUserModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameUserModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for NewModelId

	if len(errors) > 0 {
		return RenameUserModelRequestMultiError(errors)
	}

	return nil
}

// RenameUserModelRequestMultiError is an error wrapping multiple validation
// errors returned by RenameUserModelRequest.ValidateAll() if the designated
// constraints aren't met.
type RenameUserModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameUserModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameUserModelRequestMultiError) AllErrors() []error { return m }

// RenameUserModelRequestValidationError is the validation error returned by
// RenameUserModelRequest.Validate if the designated constraints aren't met.
type RenameUserModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameUserModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameUserModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameUserModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameUserModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameUserModelRequestValidationError) ErrorName() string {
	return "RenameUserModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenameUserModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameUserModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameUserModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameUserModelRequestValidationError{}

// Validate checks the field values on RenameUserModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameUserModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameUserModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameUserModelResponseMultiError, or nil if none found.
func (m *RenameUserModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameUserModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenameUserModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenameUserModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenameUserModelResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenameUserModelResponseMultiError(errors)
	}

	return nil
}

// RenameUserModelResponseMultiError is an error wrapping multiple validation
// errors returned by RenameUserModelResponse.ValidateAll() if the designated
// constraints aren't met.
type RenameUserModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameUserModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameUserModelResponseMultiError) AllErrors() []error { return m }

// RenameUserModelResponseValidationError is the validation error returned by
// RenameUserModelResponse.Validate if the designated constraints aren't met.
type RenameUserModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameUserModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameUserModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameUserModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameUserModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameUserModelResponseValidationError) ErrorName() string {
	return "RenameUserModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenameUserModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameUserModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameUserModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameUserModelResponseValidationError{}

// Validate checks the field values on WatchUserModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchUserModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchUserModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchUserModelRequestMultiError, or nil if none found.
func (m *WatchUserModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchUserModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	if len(errors) > 0 {
		return WatchUserModelRequestMultiError(errors)
	}

	return nil
}

// WatchUserModelRequestMultiError is an error wrapping multiple validation
// errors returned by WatchUserModelRequest.ValidateAll() if the designated
// constraints aren't met.
type WatchUserModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchUserModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchUserModelRequestMultiError) AllErrors() []error { return m }

// WatchUserModelRequestValidationError is the validation error returned by
// WatchUserModelRequest.Validate if the designated constraints aren't met.
type WatchUserModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchUserModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchUserModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchUserModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchUserModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchUserModelRequestValidationError) ErrorName() string {
	return "WatchUserModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchUserModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchUserModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchUserModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchUserModelRequestValidationError{}

// Validate checks the field values on WatchUserModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchUserModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchUserModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchUserModelResponseMultiError, or nil if none found.
func (m *WatchUserModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchUserModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for Message

	if len(errors) > 0 {
		return WatchUserModelResponseMultiError(errors)
	}

	return nil
}

// WatchUserModelResponseMultiError is an error wrapping multiple validation
// errors returned by WatchUserModelResponse.ValidateAll() if the designated
// constraints aren't met.
type WatchUserModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchUserModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchUserModelResponseMultiError) AllErrors() []error { return m }

// WatchUserModelResponseValidationError is the validation error returned by
// WatchUserModelResponse.Validate if the designated constraints aren't met.
type WatchUserModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchUserModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchUserModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchUserModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchUserModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchUserModelResponseValidationError) ErrorName() string {
	return "WatchUserModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchUserModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchUserModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchUserModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchUserModelResponseValidationError{}

// Validate checks the field values on WatchUserLatestModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchUserLatestModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchUserLatestModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchUserLatestModelRequestMultiError, or nil if none found.
func (m *WatchUserLatestModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchUserLatestModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return WatchUserLatestModelRequestMultiError(errors)
	}

	return nil
}

// WatchUserLatestModelRequestMultiError is an error wrapping multiple
// validation errors returned by WatchUserLatestModelRequest.ValidateAll() if
// the designated constraints aren't met.
type WatchUserLatestModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchUserLatestModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchUserLatestModelRequestMultiError) AllErrors() []error { return m }

// WatchUserLatestModelRequestValidationError is the validation error returned
// by WatchUserLatestModelRequest.Validate if the designated constraints
// aren't met.
type WatchUserLatestModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchUserLatestModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchUserLatestModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchUserLatestModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchUserLatestModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchUserLatestModelRequestValidationError) ErrorName() string {
	return "WatchUserLatestModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchUserLatestModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchUserLatestModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchUserLatestModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchUserLatestModelRequestValidationError{}

// Validate checks the field values on WatchUserLatestModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchUserLatestModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchUserLatestModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchUserLatestModelResponseMultiError, or nil if none found.
func (m *WatchUserLatestModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchUserLatestModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for Message

	if len(errors) > 0 {
		return WatchUserLatestModelResponseMultiError(errors)
	}

	return nil
}

// WatchUserLatestModelResponseMultiError is an error wrapping multiple
// validation errors returned by WatchUserLatestModelResponse.ValidateAll() if
// the designated constraints aren't met.
type WatchUserLatestModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchUserLatestModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchUserLatestModelResponseMultiError) AllErrors() []error { return m }

// WatchUserLatestModelResponseValidationError is the validation error returned
// by WatchUserLatestModelResponse.Validate if the designated constraints
// aren't met.
type WatchUserLatestModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchUserLatestModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchUserLatestModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchUserLatestModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchUserLatestModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchUserLatestModelResponseValidationError) ErrorName() string {
	return "WatchUserLatestModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchUserLatestModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchUserLatestModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchUserLatestModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchUserLatestModelResponseValidationError{}

// Validate checks the field values on ListUserModelVersionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserModelVersionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserModelVersionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserModelVersionsRequestMultiError, or nil if none found.
func (m *ListUserModelVersionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserModelVersionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if len(errors) > 0 {
		return ListUserModelVersionsRequestMultiError(errors)
	}

	return nil
}

// ListUserModelVersionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserModelVersionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListUserModelVersionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserModelVersionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserModelVersionsRequestMultiError) AllErrors() []error { return m }

// ListUserModelVersionsRequestValidationError is the validation error returned
// by ListUserModelVersionsRequest.Validate if the designated constraints
// aren't met.
type ListUserModelVersionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserModelVersionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserModelVersionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserModelVersionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserModelVersionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserModelVersionsRequestValidationError) ErrorName() string {
	return "ListUserModelVersionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserModelVersionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserModelVersionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserModelVersionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserModelVersionsRequestValidationError{}

// Validate checks the field values on ListUserModelVersionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserModelVersionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserModelVersionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUserModelVersionsResponseMultiError, or nil if none found.
func (m *ListUserModelVersionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserModelVersionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserModelVersionsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserModelVersionsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserModelVersionsResponseValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalSize

	// no validation rules for PageSize

	// no validation rules for Page

	if len(errors) > 0 {
		return ListUserModelVersionsResponseMultiError(errors)
	}

	return nil
}

// ListUserModelVersionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserModelVersionsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListUserModelVersionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserModelVersionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserModelVersionsResponseMultiError) AllErrors() []error { return m }

// ListUserModelVersionsResponseValidationError is the validation error
// returned by ListUserModelVersionsResponse.Validate if the designated
// constraints aren't met.
type ListUserModelVersionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserModelVersionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserModelVersionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserModelVersionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserModelVersionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserModelVersionsResponseValidationError) ErrorName() string {
	return "ListUserModelVersionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserModelVersionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserModelVersionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserModelVersionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserModelVersionsResponseValidationError{}

// Validate checks the field values on DeleteUserModelVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserModelVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserModelVersionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteUserModelVersionRequestMultiError, or nil if none found.
func (m *DeleteUserModelVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserModelVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	if len(errors) > 0 {
		return DeleteUserModelVersionRequestMultiError(errors)
	}

	return nil
}

// DeleteUserModelVersionRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteUserModelVersionRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteUserModelVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserModelVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserModelVersionRequestMultiError) AllErrors() []error { return m }

// DeleteUserModelVersionRequestValidationError is the validation error
// returned by DeleteUserModelVersionRequest.Validate if the designated
// constraints aren't met.
type DeleteUserModelVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserModelVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserModelVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserModelVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserModelVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserModelVersionRequestValidationError) ErrorName() string {
	return "DeleteUserModelVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserModelVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserModelVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserModelVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserModelVersionRequestValidationError{}

// Validate checks the field values on DeleteUserModelVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserModelVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserModelVersionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteUserModelVersionResponseMultiError, or nil if none found.
func (m *DeleteUserModelVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserModelVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserModelVersionResponseMultiError(errors)
	}

	return nil
}

// DeleteUserModelVersionResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteUserModelVersionResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteUserModelVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserModelVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserModelVersionResponseMultiError) AllErrors() []error { return m }

// DeleteUserModelVersionResponseValidationError is the validation error
// returned by DeleteUserModelVersionResponse.Validate if the designated
// constraints aren't met.
type DeleteUserModelVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserModelVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserModelVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserModelVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserModelVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserModelVersionResponseValidationError) ErrorName() string {
	return "DeleteUserModelVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserModelVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserModelVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserModelVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserModelVersionResponseValidationError{}

// Validate checks the field values on TriggerUserModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerUserModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerUserModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerUserModelRequestMultiError, or nil if none found.
func (m *TriggerUserModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerUserModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserModelRequestValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerUserModelRequestMultiError(errors)
	}

	return nil
}

// TriggerUserModelRequestMultiError is an error wrapping multiple validation
// errors returned by TriggerUserModelRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerUserModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerUserModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerUserModelRequestMultiError) AllErrors() []error { return m }

// TriggerUserModelRequestValidationError is the validation error returned by
// TriggerUserModelRequest.Validate if the designated constraints aren't met.
type TriggerUserModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerUserModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerUserModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerUserModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerUserModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerUserModelRequestValidationError) ErrorName() string {
	return "TriggerUserModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerUserModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerUserModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerUserModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerUserModelRequestValidationError{}

// Validate checks the field values on TriggerUserModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerUserModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerUserModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerUserModelResponseMultiError, or nil if none found.
func (m *TriggerUserModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerUserModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	for idx, item := range m.GetTaskOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserModelResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserModelResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserModelResponseValidationError{
					field:  fmt.Sprintf("TaskOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerUserModelResponseMultiError(errors)
	}

	return nil
}

// TriggerUserModelResponseMultiError is an error wrapping multiple validation
// errors returned by TriggerUserModelResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerUserModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerUserModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerUserModelResponseMultiError) AllErrors() []error { return m }

// TriggerUserModelResponseValidationError is the validation error returned by
// TriggerUserModelResponse.Validate if the designated constraints aren't met.
type TriggerUserModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerUserModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerUserModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerUserModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerUserModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerUserModelResponseValidationError) ErrorName() string {
	return "TriggerUserModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerUserModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerUserModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerUserModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerUserModelResponseValidationError{}

// Validate checks the field values on TriggerAsyncUserModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerAsyncUserModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerAsyncUserModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerAsyncUserModelRequestMultiError, or nil if none found.
func (m *TriggerAsyncUserModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncUserModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncUserModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncUserModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncUserModelRequestValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerAsyncUserModelRequestMultiError(errors)
	}

	return nil
}

// TriggerAsyncUserModelRequestMultiError is an error wrapping multiple
// validation errors returned by TriggerAsyncUserModelRequest.ValidateAll() if
// the designated constraints aren't met.
type TriggerAsyncUserModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncUserModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncUserModelRequestMultiError) AllErrors() []error { return m }

// TriggerAsyncUserModelRequestValidationError is the validation error returned
// by TriggerAsyncUserModelRequest.Validate if the designated constraints
// aren't met.
type TriggerAsyncUserModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncUserModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncUserModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncUserModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncUserModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncUserModelRequestValidationError) ErrorName() string {
	return "TriggerAsyncUserModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncUserModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncUserModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncUserModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncUserModelRequestValidationError{}

// Validate checks the field values on TriggerAsyncUserModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerAsyncUserModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerAsyncUserModelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggerAsyncUserModelResponseMultiError, or nil if none found.
func (m *TriggerAsyncUserModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncUserModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerAsyncUserModelResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerAsyncUserModelResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerAsyncUserModelResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerAsyncUserModelResponseMultiError(errors)
	}

	return nil
}

// TriggerAsyncUserModelResponseMultiError is an error wrapping multiple
// validation errors returned by TriggerAsyncUserModelResponse.ValidateAll()
// if the designated constraints aren't met.
type TriggerAsyncUserModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncUserModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncUserModelResponseMultiError) AllErrors() []error { return m }

// TriggerAsyncUserModelResponseValidationError is the validation error
// returned by TriggerAsyncUserModelResponse.Validate if the designated
// constraints aren't met.
type TriggerAsyncUserModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncUserModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncUserModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncUserModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncUserModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncUserModelResponseValidationError) ErrorName() string {
	return "TriggerAsyncUserModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncUserModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncUserModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncUserModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncUserModelResponseValidationError{}

// Validate checks the field values on TriggerUserLatestModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerUserLatestModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerUserLatestModelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggerUserLatestModelRequestMultiError, or nil if none found.
func (m *TriggerUserLatestModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerUserLatestModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserLatestModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserLatestModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserLatestModelRequestValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerUserLatestModelRequestMultiError(errors)
	}

	return nil
}

// TriggerUserLatestModelRequestMultiError is an error wrapping multiple
// validation errors returned by TriggerUserLatestModelRequest.ValidateAll()
// if the designated constraints aren't met.
type TriggerUserLatestModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerUserLatestModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerUserLatestModelRequestMultiError) AllErrors() []error { return m }

// TriggerUserLatestModelRequestValidationError is the validation error
// returned by TriggerUserLatestModelRequest.Validate if the designated
// constraints aren't met.
type TriggerUserLatestModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerUserLatestModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerUserLatestModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerUserLatestModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerUserLatestModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerUserLatestModelRequestValidationError) ErrorName() string {
	return "TriggerUserLatestModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerUserLatestModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerUserLatestModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerUserLatestModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerUserLatestModelRequestValidationError{}

// Validate checks the field values on TriggerUserLatestModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerUserLatestModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerUserLatestModelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggerUserLatestModelResponseMultiError, or nil if none found.
func (m *TriggerUserLatestModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerUserLatestModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	for idx, item := range m.GetTaskOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserLatestModelResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserLatestModelResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserLatestModelResponseValidationError{
					field:  fmt.Sprintf("TaskOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerUserLatestModelResponseMultiError(errors)
	}

	return nil
}

// TriggerUserLatestModelResponseMultiError is an error wrapping multiple
// validation errors returned by TriggerUserLatestModelResponse.ValidateAll()
// if the designated constraints aren't met.
type TriggerUserLatestModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerUserLatestModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerUserLatestModelResponseMultiError) AllErrors() []error { return m }

// TriggerUserLatestModelResponseValidationError is the validation error
// returned by TriggerUserLatestModelResponse.Validate if the designated
// constraints aren't met.
type TriggerUserLatestModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerUserLatestModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerUserLatestModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerUserLatestModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerUserLatestModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerUserLatestModelResponseValidationError) ErrorName() string {
	return "TriggerUserLatestModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerUserLatestModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerUserLatestModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerUserLatestModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerUserLatestModelResponseValidationError{}

// Validate checks the field values on TriggerAsyncUserLatestModelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TriggerAsyncUserLatestModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerAsyncUserLatestModelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerAsyncUserLatestModelRequestMultiError, or nil if none found.
func (m *TriggerAsyncUserLatestModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncUserLatestModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncUserLatestModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncUserLatestModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncUserLatestModelRequestValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerAsyncUserLatestModelRequestMultiError(errors)
	}

	return nil
}

// TriggerAsyncUserLatestModelRequestMultiError is an error wrapping multiple
// validation errors returned by
// TriggerAsyncUserLatestModelRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncUserLatestModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncUserLatestModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncUserLatestModelRequestMultiError) AllErrors() []error { return m }

// TriggerAsyncUserLatestModelRequestValidationError is the validation error
// returned by TriggerAsyncUserLatestModelRequest.Validate if the designated
// constraints aren't met.
type TriggerAsyncUserLatestModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncUserLatestModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncUserLatestModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncUserLatestModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncUserLatestModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncUserLatestModelRequestValidationError) ErrorName() string {
	return "TriggerAsyncUserLatestModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncUserLatestModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncUserLatestModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncUserLatestModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncUserLatestModelRequestValidationError{}

// Validate checks the field values on TriggerAsyncUserLatestModelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TriggerAsyncUserLatestModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerAsyncUserLatestModelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerAsyncUserLatestModelResponseMultiError, or nil if none found.
func (m *TriggerAsyncUserLatestModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncUserLatestModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerAsyncUserLatestModelResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerAsyncUserLatestModelResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerAsyncUserLatestModelResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerAsyncUserLatestModelResponseMultiError(errors)
	}

	return nil
}

// TriggerAsyncUserLatestModelResponseMultiError is an error wrapping multiple
// validation errors returned by
// TriggerAsyncUserLatestModelResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncUserLatestModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncUserLatestModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncUserLatestModelResponseMultiError) AllErrors() []error { return m }

// TriggerAsyncUserLatestModelResponseValidationError is the validation error
// returned by TriggerAsyncUserLatestModelResponse.Validate if the designated
// constraints aren't met.
type TriggerAsyncUserLatestModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncUserLatestModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncUserLatestModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncUserLatestModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncUserLatestModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncUserLatestModelResponseValidationError) ErrorName() string {
	return "TriggerAsyncUserLatestModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncUserLatestModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncUserLatestModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncUserLatestModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncUserLatestModelResponseValidationError{}

// Validate checks the field values on TriggerUserModelBinaryFileUploadRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerUserModelBinaryFileUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerUserModelBinaryFileUploadRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TriggerUserModelBinaryFileUploadRequestMultiError, or nil if none found.
func (m *TriggerUserModelBinaryFileUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerUserModelBinaryFileUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserModelBinaryFileUploadRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserModelBinaryFileUploadRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserModelBinaryFileUploadRequestValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerUserModelBinaryFileUploadRequestMultiError(errors)
	}

	return nil
}

// TriggerUserModelBinaryFileUploadRequestMultiError is an error wrapping
// multiple validation errors returned by
// TriggerUserModelBinaryFileUploadRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerUserModelBinaryFileUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerUserModelBinaryFileUploadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerUserModelBinaryFileUploadRequestMultiError) AllErrors() []error { return m }

// TriggerUserModelBinaryFileUploadRequestValidationError is the validation
// error returned by TriggerUserModelBinaryFileUploadRequest.Validate if the
// designated constraints aren't met.
type TriggerUserModelBinaryFileUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerUserModelBinaryFileUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerUserModelBinaryFileUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerUserModelBinaryFileUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerUserModelBinaryFileUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerUserModelBinaryFileUploadRequestValidationError) ErrorName() string {
	return "TriggerUserModelBinaryFileUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerUserModelBinaryFileUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerUserModelBinaryFileUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerUserModelBinaryFileUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerUserModelBinaryFileUploadRequestValidationError{}

// Validate checks the field values on TriggerUserModelBinaryFileUploadResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerUserModelBinaryFileUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerUserModelBinaryFileUploadResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerUserModelBinaryFileUploadResponseMultiError, or nil if none found.
func (m *TriggerUserModelBinaryFileUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerUserModelBinaryFileUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	for idx, item := range m.GetTaskOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerUserModelBinaryFileUploadResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerUserModelBinaryFileUploadResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerUserModelBinaryFileUploadResponseValidationError{
					field:  fmt.Sprintf("TaskOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerUserModelBinaryFileUploadResponseMultiError(errors)
	}

	return nil
}

// TriggerUserModelBinaryFileUploadResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerUserModelBinaryFileUploadResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerUserModelBinaryFileUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerUserModelBinaryFileUploadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerUserModelBinaryFileUploadResponseMultiError) AllErrors() []error { return m }

// TriggerUserModelBinaryFileUploadResponseValidationError is the validation
// error returned by TriggerUserModelBinaryFileUploadResponse.Validate if the
// designated constraints aren't met.
type TriggerUserModelBinaryFileUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerUserModelBinaryFileUploadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerUserModelBinaryFileUploadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerUserModelBinaryFileUploadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerUserModelBinaryFileUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerUserModelBinaryFileUploadResponseValidationError) ErrorName() string {
	return "TriggerUserModelBinaryFileUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerUserModelBinaryFileUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerUserModelBinaryFileUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerUserModelBinaryFileUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerUserModelBinaryFileUploadResponseValidationError{}

// Validate checks the field values on CreateOrganizationModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationModelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrganizationModelRequestMultiError, or nil if none found.
func (m *CreateOrganizationModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationModelRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationModelRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationModelRequestValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Parent

	if len(errors) > 0 {
		return CreateOrganizationModelRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationModelRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationModelRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateOrganizationModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationModelRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationModelRequestValidationError is the validation error
// returned by CreateOrganizationModelRequest.Validate if the designated
// constraints aren't met.
type CreateOrganizationModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationModelRequestValidationError) ErrorName() string {
	return "CreateOrganizationModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationModelRequestValidationError{}

// Validate checks the field values on CreateOrganizationModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationModelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrganizationModelResponseMultiError, or nil if none found.
func (m *CreateOrganizationModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationModelResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationModelResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationModelResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationModelResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateOrganizationModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationModelResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationModelResponseValidationError is the validation error
// returned by CreateOrganizationModelResponse.Validate if the designated
// constraints aren't met.
type CreateOrganizationModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationModelResponseValidationError) ErrorName() string {
	return "CreateOrganizationModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationModelResponseValidationError{}

// Validate checks the field values on ListOrganizationModelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationModelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationModelsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationModelsRequestMultiError, or nil if none found.
func (m *ListOrganizationModelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationModelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.ShowDeleted != nil {
		// no validation rules for ShowDeleted
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if m.Visibility != nil {
		// no validation rules for Visibility
	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if len(errors) > 0 {
		return ListOrganizationModelsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationModelsRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationModelsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationModelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationModelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationModelsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationModelsRequestValidationError is the validation error
// returned by ListOrganizationModelsRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationModelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationModelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationModelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationModelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationModelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationModelsRequestValidationError) ErrorName() string {
	return "ListOrganizationModelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationModelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationModelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationModelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationModelsRequestValidationError{}

// Validate checks the field values on ListOrganizationModelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationModelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationModelsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationModelsResponseMultiError, or nil if none found.
func (m *ListOrganizationModelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationModelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationModelsResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationModelsResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationModelsResponseValidationError{
					field:  fmt.Sprintf("Models[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListOrganizationModelsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationModelsResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationModelsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationModelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationModelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationModelsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationModelsResponseValidationError is the validation error
// returned by ListOrganizationModelsResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationModelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationModelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationModelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationModelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationModelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationModelsResponseValidationError) ErrorName() string {
	return "ListOrganizationModelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationModelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationModelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationModelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationModelsResponseValidationError{}

// Validate checks the field values on GetOrganizationModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationModelRequestMultiError, or nil if none found.
func (m *GetOrganizationModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetOrganizationModelRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationModelRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationModelRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationModelRequestMultiError) AllErrors() []error { return m }

// GetOrganizationModelRequestValidationError is the validation error returned
// by GetOrganizationModelRequest.Validate if the designated constraints
// aren't met.
type GetOrganizationModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationModelRequestValidationError) ErrorName() string {
	return "GetOrganizationModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationModelRequestValidationError{}

// Validate checks the field values on GetOrganizationModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationModelResponseMultiError, or nil if none found.
func (m *GetOrganizationModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationModelResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationModelResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationModelResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationModelResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationModelResponseMultiError) AllErrors() []error { return m }

// GetOrganizationModelResponseValidationError is the validation error returned
// by GetOrganizationModelResponse.Validate if the designated constraints
// aren't met.
type GetOrganizationModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationModelResponseValidationError) ErrorName() string {
	return "GetOrganizationModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationModelResponseValidationError{}

// Validate checks the field values on UpdateOrganizationModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationModelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrganizationModelRequestMultiError, or nil if none found.
func (m *UpdateOrganizationModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationModelRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationModelRequestValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationModelRequestValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationModelRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationModelRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationModelRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationModelRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationModelRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationModelRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateOrganizationModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationModelRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationModelRequestValidationError is the validation error
// returned by UpdateOrganizationModelRequest.Validate if the designated
// constraints aren't met.
type UpdateOrganizationModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationModelRequestValidationError) ErrorName() string {
	return "UpdateOrganizationModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationModelRequestValidationError{}

// Validate checks the field values on UpdateOrganizationModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationModelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrganizationModelResponseMultiError, or nil if none found.
func (m *UpdateOrganizationModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationModelResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationModelResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationModelResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationModelResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateOrganizationModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationModelResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationModelResponseValidationError is the validation error
// returned by UpdateOrganizationModelResponse.Validate if the designated
// constraints aren't met.
type UpdateOrganizationModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationModelResponseValidationError) ErrorName() string {
	return "UpdateOrganizationModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationModelResponseValidationError{}

// Validate checks the field values on DeleteOrganizationModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationModelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationModelRequestMultiError, or nil if none found.
func (m *DeleteOrganizationModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteOrganizationModelRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationModelRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationModelRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteOrganizationModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationModelRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationModelRequestValidationError is the validation error
// returned by DeleteOrganizationModelRequest.Validate if the designated
// constraints aren't met.
type DeleteOrganizationModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationModelRequestValidationError) ErrorName() string {
	return "DeleteOrganizationModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationModelRequestValidationError{}

// Validate checks the field values on DeleteOrganizationModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationModelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationModelResponseMultiError, or nil if none found.
func (m *DeleteOrganizationModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationModelResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationModelResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationModelResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteOrganizationModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationModelResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationModelResponseValidationError is the validation error
// returned by DeleteOrganizationModelResponse.Validate if the designated
// constraints aren't met.
type DeleteOrganizationModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationModelResponseValidationError) ErrorName() string {
	return "DeleteOrganizationModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationModelResponseValidationError{}

// Validate checks the field values on RenameOrganizationModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameOrganizationModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameOrganizationModelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenameOrganizationModelRequestMultiError, or nil if none found.
func (m *RenameOrganizationModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameOrganizationModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for NewModelId

	if len(errors) > 0 {
		return RenameOrganizationModelRequestMultiError(errors)
	}

	return nil
}

// RenameOrganizationModelRequestMultiError is an error wrapping multiple
// validation errors returned by RenameOrganizationModelRequest.ValidateAll()
// if the designated constraints aren't met.
type RenameOrganizationModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameOrganizationModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameOrganizationModelRequestMultiError) AllErrors() []error { return m }

// RenameOrganizationModelRequestValidationError is the validation error
// returned by RenameOrganizationModelRequest.Validate if the designated
// constraints aren't met.
type RenameOrganizationModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameOrganizationModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameOrganizationModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameOrganizationModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameOrganizationModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameOrganizationModelRequestValidationError) ErrorName() string {
	return "RenameOrganizationModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenameOrganizationModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameOrganizationModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameOrganizationModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameOrganizationModelRequestValidationError{}

// Validate checks the field values on RenameOrganizationModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameOrganizationModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameOrganizationModelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenameOrganizationModelResponseMultiError, or nil if none found.
func (m *RenameOrganizationModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameOrganizationModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenameOrganizationModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenameOrganizationModelResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenameOrganizationModelResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenameOrganizationModelResponseMultiError(errors)
	}

	return nil
}

// RenameOrganizationModelResponseMultiError is an error wrapping multiple
// validation errors returned by RenameOrganizationModelResponse.ValidateAll()
// if the designated constraints aren't met.
type RenameOrganizationModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameOrganizationModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameOrganizationModelResponseMultiError) AllErrors() []error { return m }

// RenameOrganizationModelResponseValidationError is the validation error
// returned by RenameOrganizationModelResponse.Validate if the designated
// constraints aren't met.
type RenameOrganizationModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameOrganizationModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameOrganizationModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameOrganizationModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameOrganizationModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameOrganizationModelResponseValidationError) ErrorName() string {
	return "RenameOrganizationModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenameOrganizationModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameOrganizationModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameOrganizationModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameOrganizationModelResponseValidationError{}

// Validate checks the field values on WatchOrganizationModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchOrganizationModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchOrganizationModelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WatchOrganizationModelRequestMultiError, or nil if none found.
func (m *WatchOrganizationModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchOrganizationModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	if len(errors) > 0 {
		return WatchOrganizationModelRequestMultiError(errors)
	}

	return nil
}

// WatchOrganizationModelRequestMultiError is an error wrapping multiple
// validation errors returned by WatchOrganizationModelRequest.ValidateAll()
// if the designated constraints aren't met.
type WatchOrganizationModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchOrganizationModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchOrganizationModelRequestMultiError) AllErrors() []error { return m }

// WatchOrganizationModelRequestValidationError is the validation error
// returned by WatchOrganizationModelRequest.Validate if the designated
// constraints aren't met.
type WatchOrganizationModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchOrganizationModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchOrganizationModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchOrganizationModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchOrganizationModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchOrganizationModelRequestValidationError) ErrorName() string {
	return "WatchOrganizationModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchOrganizationModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchOrganizationModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchOrganizationModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchOrganizationModelRequestValidationError{}

// Validate checks the field values on WatchOrganizationModelResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchOrganizationModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchOrganizationModelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WatchOrganizationModelResponseMultiError, or nil if none found.
func (m *WatchOrganizationModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchOrganizationModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for Message

	if len(errors) > 0 {
		return WatchOrganizationModelResponseMultiError(errors)
	}

	return nil
}

// WatchOrganizationModelResponseMultiError is an error wrapping multiple
// validation errors returned by WatchOrganizationModelResponse.ValidateAll()
// if the designated constraints aren't met.
type WatchOrganizationModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchOrganizationModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchOrganizationModelResponseMultiError) AllErrors() []error { return m }

// WatchOrganizationModelResponseValidationError is the validation error
// returned by WatchOrganizationModelResponse.Validate if the designated
// constraints aren't met.
type WatchOrganizationModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchOrganizationModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchOrganizationModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchOrganizationModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchOrganizationModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchOrganizationModelResponseValidationError) ErrorName() string {
	return "WatchOrganizationModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchOrganizationModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchOrganizationModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchOrganizationModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchOrganizationModelResponseValidationError{}

// Validate checks the field values on WatchOrganizationLatestModelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *WatchOrganizationLatestModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchOrganizationLatestModelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WatchOrganizationLatestModelRequestMultiError, or nil if none found.
func (m *WatchOrganizationLatestModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchOrganizationLatestModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return WatchOrganizationLatestModelRequestMultiError(errors)
	}

	return nil
}

// WatchOrganizationLatestModelRequestMultiError is an error wrapping multiple
// validation errors returned by
// WatchOrganizationLatestModelRequest.ValidateAll() if the designated
// constraints aren't met.
type WatchOrganizationLatestModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchOrganizationLatestModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchOrganizationLatestModelRequestMultiError) AllErrors() []error { return m }

// WatchOrganizationLatestModelRequestValidationError is the validation error
// returned by WatchOrganizationLatestModelRequest.Validate if the designated
// constraints aren't met.
type WatchOrganizationLatestModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchOrganizationLatestModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchOrganizationLatestModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchOrganizationLatestModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchOrganizationLatestModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchOrganizationLatestModelRequestValidationError) ErrorName() string {
	return "WatchOrganizationLatestModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchOrganizationLatestModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchOrganizationLatestModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchOrganizationLatestModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchOrganizationLatestModelRequestValidationError{}

// Validate checks the field values on WatchOrganizationLatestModelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WatchOrganizationLatestModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchOrganizationLatestModelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WatchOrganizationLatestModelResponseMultiError, or nil if none found.
func (m *WatchOrganizationLatestModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchOrganizationLatestModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for State

	// no validation rules for Message

	if len(errors) > 0 {
		return WatchOrganizationLatestModelResponseMultiError(errors)
	}

	return nil
}

// WatchOrganizationLatestModelResponseMultiError is an error wrapping multiple
// validation errors returned by
// WatchOrganizationLatestModelResponse.ValidateAll() if the designated
// constraints aren't met.
type WatchOrganizationLatestModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchOrganizationLatestModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchOrganizationLatestModelResponseMultiError) AllErrors() []error { return m }

// WatchOrganizationLatestModelResponseValidationError is the validation error
// returned by WatchOrganizationLatestModelResponse.Validate if the designated
// constraints aren't met.
type WatchOrganizationLatestModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchOrganizationLatestModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchOrganizationLatestModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchOrganizationLatestModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchOrganizationLatestModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchOrganizationLatestModelResponseValidationError) ErrorName() string {
	return "WatchOrganizationLatestModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchOrganizationLatestModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchOrganizationLatestModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchOrganizationLatestModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchOrganizationLatestModelResponseValidationError{}

// Validate checks the field values on ListOrganizationModelVersionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOrganizationModelVersionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationModelVersionsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationModelVersionsRequestMultiError, or nil if none found.
func (m *ListOrganizationModelVersionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationModelVersionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if len(errors) > 0 {
		return ListOrganizationModelVersionsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationModelVersionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListOrganizationModelVersionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationModelVersionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationModelVersionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationModelVersionsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationModelVersionsRequestValidationError is the validation error
// returned by ListOrganizationModelVersionsRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationModelVersionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationModelVersionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationModelVersionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationModelVersionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationModelVersionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationModelVersionsRequestValidationError) ErrorName() string {
	return "ListOrganizationModelVersionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationModelVersionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationModelVersionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationModelVersionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationModelVersionsRequestValidationError{}

// Validate checks the field values on ListOrganizationModelVersionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListOrganizationModelVersionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationModelVersionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListOrganizationModelVersionsResponseMultiError, or nil if none found.
func (m *ListOrganizationModelVersionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationModelVersionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationModelVersionsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationModelVersionsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationModelVersionsResponseValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalSize

	// no validation rules for PageSize

	// no validation rules for Page

	if len(errors) > 0 {
		return ListOrganizationModelVersionsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationModelVersionsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListOrganizationModelVersionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationModelVersionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationModelVersionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationModelVersionsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationModelVersionsResponseValidationError is the validation error
// returned by ListOrganizationModelVersionsResponse.Validate if the
// designated constraints aren't met.
type ListOrganizationModelVersionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationModelVersionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationModelVersionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationModelVersionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationModelVersionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationModelVersionsResponseValidationError) ErrorName() string {
	return "ListOrganizationModelVersionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationModelVersionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationModelVersionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationModelVersionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationModelVersionsResponseValidationError{}

// Validate checks the field values on DeleteOrganizationModelVersionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteOrganizationModelVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationModelVersionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationModelVersionRequestMultiError, or nil if none found.
func (m *DeleteOrganizationModelVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationModelVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	if len(errors) > 0 {
		return DeleteOrganizationModelVersionRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationModelVersionRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteOrganizationModelVersionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganizationModelVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationModelVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationModelVersionRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationModelVersionRequestValidationError is the validation error
// returned by DeleteOrganizationModelVersionRequest.Validate if the
// designated constraints aren't met.
type DeleteOrganizationModelVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationModelVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationModelVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationModelVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationModelVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationModelVersionRequestValidationError) ErrorName() string {
	return "DeleteOrganizationModelVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationModelVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationModelVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationModelVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationModelVersionRequestValidationError{}

// Validate checks the field values on DeleteOrganizationModelVersionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteOrganizationModelVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteOrganizationModelVersionResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// DeleteOrganizationModelVersionResponseMultiError, or nil if none found.
func (m *DeleteOrganizationModelVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationModelVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationModelVersionResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationModelVersionResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteOrganizationModelVersionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganizationModelVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationModelVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationModelVersionResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationModelVersionResponseValidationError is the validation
// error returned by DeleteOrganizationModelVersionResponse.Validate if the
// designated constraints aren't met.
type DeleteOrganizationModelVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationModelVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationModelVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationModelVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationModelVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationModelVersionResponseValidationError) ErrorName() string {
	return "DeleteOrganizationModelVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationModelVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationModelVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationModelVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationModelVersionResponseValidationError{}

// Validate checks the field values on TriggerOrganizationModelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerOrganizationModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerOrganizationModelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggerOrganizationModelRequestMultiError, or nil if none found.
func (m *TriggerOrganizationModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerOrganizationModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationModelRequestValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerOrganizationModelRequestMultiError(errors)
	}

	return nil
}

// TriggerOrganizationModelRequestMultiError is an error wrapping multiple
// validation errors returned by TriggerOrganizationModelRequest.ValidateAll()
// if the designated constraints aren't met.
type TriggerOrganizationModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerOrganizationModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerOrganizationModelRequestMultiError) AllErrors() []error { return m }

// TriggerOrganizationModelRequestValidationError is the validation error
// returned by TriggerOrganizationModelRequest.Validate if the designated
// constraints aren't met.
type TriggerOrganizationModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerOrganizationModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerOrganizationModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerOrganizationModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerOrganizationModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerOrganizationModelRequestValidationError) ErrorName() string {
	return "TriggerOrganizationModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerOrganizationModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerOrganizationModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerOrganizationModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerOrganizationModelRequestValidationError{}

// Validate checks the field values on TriggerOrganizationModelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *TriggerOrganizationModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerOrganizationModelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggerOrganizationModelResponseMultiError, or nil if none found.
func (m *TriggerOrganizationModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerOrganizationModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	for idx, item := range m.GetTaskOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationModelResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationModelResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationModelResponseValidationError{
					field:  fmt.Sprintf("TaskOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerOrganizationModelResponseMultiError(errors)
	}

	return nil
}

// TriggerOrganizationModelResponseMultiError is an error wrapping multiple
// validation errors returned by
// TriggerOrganizationModelResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerOrganizationModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerOrganizationModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerOrganizationModelResponseMultiError) AllErrors() []error { return m }

// TriggerOrganizationModelResponseValidationError is the validation error
// returned by TriggerOrganizationModelResponse.Validate if the designated
// constraints aren't met.
type TriggerOrganizationModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerOrganizationModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerOrganizationModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerOrganizationModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerOrganizationModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerOrganizationModelResponseValidationError) ErrorName() string {
	return "TriggerOrganizationModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerOrganizationModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerOrganizationModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerOrganizationModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerOrganizationModelResponseValidationError{}

// Validate checks the field values on TriggerAsyncOrganizationModelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerAsyncOrganizationModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerAsyncOrganizationModelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerAsyncOrganizationModelRequestMultiError, or nil if none found.
func (m *TriggerAsyncOrganizationModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncOrganizationModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncOrganizationModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncOrganizationModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncOrganizationModelRequestValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerAsyncOrganizationModelRequestMultiError(errors)
	}

	return nil
}

// TriggerAsyncOrganizationModelRequestMultiError is an error wrapping multiple
// validation errors returned by
// TriggerAsyncOrganizationModelRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncOrganizationModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncOrganizationModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncOrganizationModelRequestMultiError) AllErrors() []error { return m }

// TriggerAsyncOrganizationModelRequestValidationError is the validation error
// returned by TriggerAsyncOrganizationModelRequest.Validate if the designated
// constraints aren't met.
type TriggerAsyncOrganizationModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncOrganizationModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncOrganizationModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncOrganizationModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncOrganizationModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncOrganizationModelRequestValidationError) ErrorName() string {
	return "TriggerAsyncOrganizationModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncOrganizationModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncOrganizationModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncOrganizationModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncOrganizationModelRequestValidationError{}

// Validate checks the field values on TriggerAsyncOrganizationModelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerAsyncOrganizationModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerAsyncOrganizationModelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerAsyncOrganizationModelResponseMultiError, or nil if none found.
func (m *TriggerAsyncOrganizationModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncOrganizationModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerAsyncOrganizationModelResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerAsyncOrganizationModelResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerAsyncOrganizationModelResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerAsyncOrganizationModelResponseMultiError(errors)
	}

	return nil
}

// TriggerAsyncOrganizationModelResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerAsyncOrganizationModelResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncOrganizationModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncOrganizationModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncOrganizationModelResponseMultiError) AllErrors() []error { return m }

// TriggerAsyncOrganizationModelResponseValidationError is the validation error
// returned by TriggerAsyncOrganizationModelResponse.Validate if the
// designated constraints aren't met.
type TriggerAsyncOrganizationModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncOrganizationModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncOrganizationModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncOrganizationModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncOrganizationModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncOrganizationModelResponseValidationError) ErrorName() string {
	return "TriggerAsyncOrganizationModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncOrganizationModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncOrganizationModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncOrganizationModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncOrganizationModelResponseValidationError{}

// Validate checks the field values on TriggerOrganizationLatestModelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerOrganizationLatestModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerOrganizationLatestModelRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// TriggerOrganizationLatestModelRequestMultiError, or nil if none found.
func (m *TriggerOrganizationLatestModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerOrganizationLatestModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationLatestModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationLatestModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationLatestModelRequestValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerOrganizationLatestModelRequestMultiError(errors)
	}

	return nil
}

// TriggerOrganizationLatestModelRequestMultiError is an error wrapping
// multiple validation errors returned by
// TriggerOrganizationLatestModelRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerOrganizationLatestModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerOrganizationLatestModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerOrganizationLatestModelRequestMultiError) AllErrors() []error { return m }

// TriggerOrganizationLatestModelRequestValidationError is the validation error
// returned by TriggerOrganizationLatestModelRequest.Validate if the
// designated constraints aren't met.
type TriggerOrganizationLatestModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerOrganizationLatestModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerOrganizationLatestModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerOrganizationLatestModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerOrganizationLatestModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerOrganizationLatestModelRequestValidationError) ErrorName() string {
	return "TriggerOrganizationLatestModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerOrganizationLatestModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerOrganizationLatestModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerOrganizationLatestModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerOrganizationLatestModelRequestValidationError{}

// Validate checks the field values on TriggerOrganizationLatestModelResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *TriggerOrganizationLatestModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerOrganizationLatestModelResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// TriggerOrganizationLatestModelResponseMultiError, or nil if none found.
func (m *TriggerOrganizationLatestModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerOrganizationLatestModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	for idx, item := range m.GetTaskOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationLatestModelResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationLatestModelResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationLatestModelResponseValidationError{
					field:  fmt.Sprintf("TaskOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerOrganizationLatestModelResponseMultiError(errors)
	}

	return nil
}

// TriggerOrganizationLatestModelResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerOrganizationLatestModelResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerOrganizationLatestModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerOrganizationLatestModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerOrganizationLatestModelResponseMultiError) AllErrors() []error { return m }

// TriggerOrganizationLatestModelResponseValidationError is the validation
// error returned by TriggerOrganizationLatestModelResponse.Validate if the
// designated constraints aren't met.
type TriggerOrganizationLatestModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerOrganizationLatestModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerOrganizationLatestModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerOrganizationLatestModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerOrganizationLatestModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerOrganizationLatestModelResponseValidationError) ErrorName() string {
	return "TriggerOrganizationLatestModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerOrganizationLatestModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerOrganizationLatestModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerOrganizationLatestModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerOrganizationLatestModelResponseValidationError{}

// Validate checks the field values on
// TriggerAsyncOrganizationLatestModelRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerAsyncOrganizationLatestModelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerAsyncOrganizationLatestModelRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerAsyncOrganizationLatestModelRequestMultiError, or nil if none found.
func (m *TriggerAsyncOrganizationLatestModelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncOrganizationLatestModelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerAsyncOrganizationLatestModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerAsyncOrganizationLatestModelRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerAsyncOrganizationLatestModelRequestValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerAsyncOrganizationLatestModelRequestMultiError(errors)
	}

	return nil
}

// TriggerAsyncOrganizationLatestModelRequestMultiError is an error wrapping
// multiple validation errors returned by
// TriggerAsyncOrganizationLatestModelRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncOrganizationLatestModelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncOrganizationLatestModelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncOrganizationLatestModelRequestMultiError) AllErrors() []error { return m }

// TriggerAsyncOrganizationLatestModelRequestValidationError is the validation
// error returned by TriggerAsyncOrganizationLatestModelRequest.Validate if
// the designated constraints aren't met.
type TriggerAsyncOrganizationLatestModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncOrganizationLatestModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncOrganizationLatestModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncOrganizationLatestModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncOrganizationLatestModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncOrganizationLatestModelRequestValidationError) ErrorName() string {
	return "TriggerAsyncOrganizationLatestModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncOrganizationLatestModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncOrganizationLatestModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncOrganizationLatestModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncOrganizationLatestModelRequestValidationError{}

// Validate checks the field values on
// TriggerAsyncOrganizationLatestModelResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerAsyncOrganizationLatestModelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerAsyncOrganizationLatestModelResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TriggerAsyncOrganizationLatestModelResponseMultiError, or nil if none found.
func (m *TriggerAsyncOrganizationLatestModelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerAsyncOrganizationLatestModelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerAsyncOrganizationLatestModelResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerAsyncOrganizationLatestModelResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerAsyncOrganizationLatestModelResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TriggerAsyncOrganizationLatestModelResponseMultiError(errors)
	}

	return nil
}

// TriggerAsyncOrganizationLatestModelResponseMultiError is an error wrapping
// multiple validation errors returned by
// TriggerAsyncOrganizationLatestModelResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerAsyncOrganizationLatestModelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerAsyncOrganizationLatestModelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerAsyncOrganizationLatestModelResponseMultiError) AllErrors() []error { return m }

// TriggerAsyncOrganizationLatestModelResponseValidationError is the validation
// error returned by TriggerAsyncOrganizationLatestModelResponse.Validate if
// the designated constraints aren't met.
type TriggerAsyncOrganizationLatestModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerAsyncOrganizationLatestModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerAsyncOrganizationLatestModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerAsyncOrganizationLatestModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerAsyncOrganizationLatestModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerAsyncOrganizationLatestModelResponseValidationError) ErrorName() string {
	return "TriggerAsyncOrganizationLatestModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerAsyncOrganizationLatestModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerAsyncOrganizationLatestModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerAsyncOrganizationLatestModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerAsyncOrganizationLatestModelResponseValidationError{}

// Validate checks the field values on
// TriggerOrganizationModelBinaryFileUploadRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerOrganizationModelBinaryFileUploadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerOrganizationModelBinaryFileUploadRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// TriggerOrganizationModelBinaryFileUploadRequestMultiError, or nil if none found.
func (m *TriggerOrganizationModelBinaryFileUploadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerOrganizationModelBinaryFileUploadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationModelBinaryFileUploadRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationModelBinaryFileUploadRequestValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationModelBinaryFileUploadRequestValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerOrganizationModelBinaryFileUploadRequestMultiError(errors)
	}

	return nil
}

// TriggerOrganizationModelBinaryFileUploadRequestMultiError is an error
// wrapping multiple validation errors returned by
// TriggerOrganizationModelBinaryFileUploadRequest.ValidateAll() if the
// designated constraints aren't met.
type TriggerOrganizationModelBinaryFileUploadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerOrganizationModelBinaryFileUploadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerOrganizationModelBinaryFileUploadRequestMultiError) AllErrors() []error { return m }

// TriggerOrganizationModelBinaryFileUploadRequestValidationError is the
// validation error returned by
// TriggerOrganizationModelBinaryFileUploadRequest.Validate if the designated
// constraints aren't met.
type TriggerOrganizationModelBinaryFileUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerOrganizationModelBinaryFileUploadRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e TriggerOrganizationModelBinaryFileUploadRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e TriggerOrganizationModelBinaryFileUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerOrganizationModelBinaryFileUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerOrganizationModelBinaryFileUploadRequestValidationError) ErrorName() string {
	return "TriggerOrganizationModelBinaryFileUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerOrganizationModelBinaryFileUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerOrganizationModelBinaryFileUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerOrganizationModelBinaryFileUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerOrganizationModelBinaryFileUploadRequestValidationError{}

// Validate checks the field values on
// TriggerOrganizationModelBinaryFileUploadResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TriggerOrganizationModelBinaryFileUploadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TriggerOrganizationModelBinaryFileUploadResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// TriggerOrganizationModelBinaryFileUploadResponseMultiError, or nil if none found.
func (m *TriggerOrganizationModelBinaryFileUploadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerOrganizationModelBinaryFileUploadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	for idx, item := range m.GetTaskOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerOrganizationModelBinaryFileUploadResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerOrganizationModelBinaryFileUploadResponseValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerOrganizationModelBinaryFileUploadResponseValidationError{
					field:  fmt.Sprintf("TaskOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TriggerOrganizationModelBinaryFileUploadResponseMultiError(errors)
	}

	return nil
}

// TriggerOrganizationModelBinaryFileUploadResponseMultiError is an error
// wrapping multiple validation errors returned by
// TriggerOrganizationModelBinaryFileUploadResponse.ValidateAll() if the
// designated constraints aren't met.
type TriggerOrganizationModelBinaryFileUploadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerOrganizationModelBinaryFileUploadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerOrganizationModelBinaryFileUploadResponseMultiError) AllErrors() []error { return m }

// TriggerOrganizationModelBinaryFileUploadResponseValidationError is the
// validation error returned by
// TriggerOrganizationModelBinaryFileUploadResponse.Validate if the designated
// constraints aren't met.
type TriggerOrganizationModelBinaryFileUploadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerOrganizationModelBinaryFileUploadResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e TriggerOrganizationModelBinaryFileUploadResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e TriggerOrganizationModelBinaryFileUploadResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e TriggerOrganizationModelBinaryFileUploadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerOrganizationModelBinaryFileUploadResponseValidationError) ErrorName() string {
	return "TriggerOrganizationModelBinaryFileUploadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerOrganizationModelBinaryFileUploadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerOrganizationModelBinaryFileUploadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerOrganizationModelBinaryFileUploadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerOrganizationModelBinaryFileUploadResponseValidationError{}

// Validate checks the field values on GetModelOperationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetModelOperationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelOperationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelOperationRequestMultiError, or nil if none found.
func (m *GetModelOperationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelOperationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperationId

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetModelOperationRequestMultiError(errors)
	}

	return nil
}

// GetModelOperationRequestMultiError is an error wrapping multiple validation
// errors returned by GetModelOperationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetModelOperationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelOperationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelOperationRequestMultiError) AllErrors() []error { return m }

// GetModelOperationRequestValidationError is the validation error returned by
// GetModelOperationRequest.Validate if the designated constraints aren't met.
type GetModelOperationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelOperationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelOperationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelOperationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelOperationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelOperationRequestValidationError) ErrorName() string {
	return "GetModelOperationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelOperationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelOperationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelOperationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelOperationRequestValidationError{}

// Validate checks the field values on GetModelOperationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetModelOperationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelOperationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelOperationResponseMultiError, or nil if none found.
func (m *GetModelOperationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelOperationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModelOperationResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModelOperationResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModelOperationResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetModelOperationResponseMultiError(errors)
	}

	return nil
}

// GetModelOperationResponseMultiError is an error wrapping multiple validation
// errors returned by GetModelOperationResponse.ValidateAll() if the
// designated constraints aren't met.
type GetModelOperationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelOperationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelOperationResponseMultiError) AllErrors() []error { return m }

// GetModelOperationResponseValidationError is the validation error returned by
// GetModelOperationResponse.Validate if the designated constraints aren't met.
type GetModelOperationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelOperationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelOperationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelOperationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelOperationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelOperationResponseValidationError) ErrorName() string {
	return "GetModelOperationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelOperationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelOperationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelOperationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelOperationResponseValidationError{}

// Validate checks the field values on LatestOperation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LatestOperation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LatestOperation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LatestOperationMultiError, or nil if none found.
func (m *LatestOperation) ValidateAll() error {
	return m.validate(true)
}

func (m *LatestOperation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LatestOperationValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LatestOperationValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LatestOperationValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LatestOperationValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LatestOperationValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LatestOperationValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LatestOperationMultiError(errors)
	}

	return nil
}

// LatestOperationMultiError is an error wrapping multiple validation errors
// returned by LatestOperation.ValidateAll() if the designated constraints
// aren't met.
type LatestOperationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LatestOperationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LatestOperationMultiError) AllErrors() []error { return m }

// LatestOperationValidationError is the validation error returned by
// LatestOperation.Validate if the designated constraints aren't met.
type LatestOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LatestOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LatestOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LatestOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LatestOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LatestOperationValidationError) ErrorName() string { return "LatestOperationValidationError" }

// Error satisfies the builtin error interface
func (e LatestOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLatestOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LatestOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LatestOperationValidationError{}

// Validate checks the field values on GetUserLatestModelOperationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserLatestModelOperationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserLatestModelOperationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserLatestModelOperationRequestMultiError, or nil if none found.
func (m *GetUserLatestModelOperationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserLatestModelOperationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetUserLatestModelOperationRequestMultiError(errors)
	}

	return nil
}

// GetUserLatestModelOperationRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetUserLatestModelOperationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserLatestModelOperationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserLatestModelOperationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserLatestModelOperationRequestMultiError) AllErrors() []error { return m }

// GetUserLatestModelOperationRequestValidationError is the validation error
// returned by GetUserLatestModelOperationRequest.Validate if the designated
// constraints aren't met.
type GetUserLatestModelOperationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserLatestModelOperationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserLatestModelOperationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserLatestModelOperationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserLatestModelOperationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserLatestModelOperationRequestValidationError) ErrorName() string {
	return "GetUserLatestModelOperationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserLatestModelOperationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserLatestModelOperationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserLatestModelOperationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserLatestModelOperationRequestValidationError{}

// Validate checks the field values on GetUserLatestModelOperationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUserLatestModelOperationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserLatestModelOperationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetUserLatestModelOperationResponseMultiError, or nil if none found.
func (m *GetUserLatestModelOperationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserLatestModelOperationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserLatestModelOperationResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserLatestModelOperationResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserLatestModelOperationResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserLatestModelOperationResponseMultiError(errors)
	}

	return nil
}

// GetUserLatestModelOperationResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUserLatestModelOperationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserLatestModelOperationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserLatestModelOperationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserLatestModelOperationResponseMultiError) AllErrors() []error { return m }

// GetUserLatestModelOperationResponseValidationError is the validation error
// returned by GetUserLatestModelOperationResponse.Validate if the designated
// constraints aren't met.
type GetUserLatestModelOperationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserLatestModelOperationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserLatestModelOperationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserLatestModelOperationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserLatestModelOperationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserLatestModelOperationResponseValidationError) ErrorName() string {
	return "GetUserLatestModelOperationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserLatestModelOperationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserLatestModelOperationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserLatestModelOperationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserLatestModelOperationResponseValidationError{}

// Validate checks the field values on
// GetOrganizationLatestModelOperationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationLatestModelOperationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOrganizationLatestModelOperationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetOrganizationLatestModelOperationRequestMultiError, or nil if none found.
func (m *GetOrganizationLatestModelOperationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationLatestModelOperationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return GetOrganizationLatestModelOperationRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationLatestModelOperationRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetOrganizationLatestModelOperationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationLatestModelOperationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationLatestModelOperationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationLatestModelOperationRequestMultiError) AllErrors() []error { return m }

// GetOrganizationLatestModelOperationRequestValidationError is the validation
// error returned by GetOrganizationLatestModelOperationRequest.Validate if
// the designated constraints aren't met.
type GetOrganizationLatestModelOperationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationLatestModelOperationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationLatestModelOperationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationLatestModelOperationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationLatestModelOperationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationLatestModelOperationRequestValidationError) ErrorName() string {
	return "GetOrganizationLatestModelOperationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationLatestModelOperationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationLatestModelOperationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationLatestModelOperationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationLatestModelOperationRequestValidationError{}

// Validate checks the field values on
// GetOrganizationLatestModelOperationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationLatestModelOperationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetOrganizationLatestModelOperationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetOrganizationLatestModelOperationResponseMultiError, or nil if none found.
func (m *GetOrganizationLatestModelOperationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationLatestModelOperationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationLatestModelOperationResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationLatestModelOperationResponseValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationLatestModelOperationResponseValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationLatestModelOperationResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationLatestModelOperationResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetOrganizationLatestModelOperationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationLatestModelOperationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationLatestModelOperationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationLatestModelOperationResponseMultiError) AllErrors() []error { return m }

// GetOrganizationLatestModelOperationResponseValidationError is the validation
// error returned by GetOrganizationLatestModelOperationResponse.Validate if
// the designated constraints aren't met.
type GetOrganizationLatestModelOperationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationLatestModelOperationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationLatestModelOperationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationLatestModelOperationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationLatestModelOperationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationLatestModelOperationResponseValidationError) ErrorName() string {
	return "GetOrganizationLatestModelOperationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationLatestModelOperationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationLatestModelOperationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationLatestModelOperationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationLatestModelOperationResponseValidationError{}

// Validate checks the field values on ListAvailableRegionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAvailableRegionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAvailableRegionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAvailableRegionsRequestMultiError, or nil if none found.
func (m *ListAvailableRegionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAvailableRegionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAvailableRegionsRequestMultiError(errors)
	}

	return nil
}

// ListAvailableRegionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListAvailableRegionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListAvailableRegionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAvailableRegionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAvailableRegionsRequestMultiError) AllErrors() []error { return m }

// ListAvailableRegionsRequestValidationError is the validation error returned
// by ListAvailableRegionsRequest.Validate if the designated constraints
// aren't met.
type ListAvailableRegionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAvailableRegionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAvailableRegionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAvailableRegionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAvailableRegionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAvailableRegionsRequestValidationError) ErrorName() string {
	return "ListAvailableRegionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAvailableRegionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAvailableRegionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAvailableRegionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAvailableRegionsRequestValidationError{}

// Validate checks the field values on ListAvailableRegionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAvailableRegionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAvailableRegionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAvailableRegionsResponseMultiError, or nil if none found.
func (m *ListAvailableRegionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAvailableRegionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRegions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAvailableRegionsResponseValidationError{
						field:  fmt.Sprintf("Regions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAvailableRegionsResponseValidationError{
						field:  fmt.Sprintf("Regions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAvailableRegionsResponseValidationError{
					field:  fmt.Sprintf("Regions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAvailableRegionsResponseMultiError(errors)
	}

	return nil
}

// ListAvailableRegionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListAvailableRegionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListAvailableRegionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAvailableRegionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAvailableRegionsResponseMultiError) AllErrors() []error { return m }

// ListAvailableRegionsResponseValidationError is the validation error returned
// by ListAvailableRegionsResponse.Validate if the designated constraints
// aren't met.
type ListAvailableRegionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAvailableRegionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAvailableRegionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAvailableRegionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAvailableRegionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAvailableRegionsResponseValidationError) ErrorName() string {
	return "ListAvailableRegionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAvailableRegionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAvailableRegionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAvailableRegionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAvailableRegionsResponseValidationError{}

// Validate checks the field values on ListModelsAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModelsAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModelsAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModelsAdminRequestMultiError, or nil if none found.
func (m *ListModelsAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModelsAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.ShowDeleted != nil {
		// no validation rules for ShowDeleted
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if len(errors) > 0 {
		return ListModelsAdminRequestMultiError(errors)
	}

	return nil
}

// ListModelsAdminRequestMultiError is an error wrapping multiple validation
// errors returned by ListModelsAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type ListModelsAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModelsAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModelsAdminRequestMultiError) AllErrors() []error { return m }

// ListModelsAdminRequestValidationError is the validation error returned by
// ListModelsAdminRequest.Validate if the designated constraints aren't met.
type ListModelsAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModelsAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModelsAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModelsAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModelsAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModelsAdminRequestValidationError) ErrorName() string {
	return "ListModelsAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListModelsAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModelsAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModelsAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModelsAdminRequestValidationError{}

// Validate checks the field values on ListModelsAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModelsAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModelsAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModelsAdminResponseMultiError, or nil if none found.
func (m *ListModelsAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModelsAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListModelsAdminResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListModelsAdminResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListModelsAdminResponseValidationError{
					field:  fmt.Sprintf("Models[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListModelsAdminResponseMultiError(errors)
	}

	return nil
}

// ListModelsAdminResponseMultiError is an error wrapping multiple validation
// errors returned by ListModelsAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type ListModelsAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModelsAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModelsAdminResponseMultiError) AllErrors() []error { return m }

// ListModelsAdminResponseValidationError is the validation error returned by
// ListModelsAdminResponse.Validate if the designated constraints aren't met.
type ListModelsAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModelsAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModelsAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModelsAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModelsAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModelsAdminResponseValidationError) ErrorName() string {
	return "ListModelsAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListModelsAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModelsAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModelsAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModelsAdminResponseValidationError{}

// Validate checks the field values on LookUpModelAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookUpModelAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookUpModelAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookUpModelAdminRequestMultiError, or nil if none found.
func (m *LookUpModelAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LookUpModelAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Permalink

	if m.View != nil {
		// no validation rules for View
	}

	if len(errors) > 0 {
		return LookUpModelAdminRequestMultiError(errors)
	}

	return nil
}

// LookUpModelAdminRequestMultiError is an error wrapping multiple validation
// errors returned by LookUpModelAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type LookUpModelAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookUpModelAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookUpModelAdminRequestMultiError) AllErrors() []error { return m }

// LookUpModelAdminRequestValidationError is the validation error returned by
// LookUpModelAdminRequest.Validate if the designated constraints aren't met.
type LookUpModelAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookUpModelAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookUpModelAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookUpModelAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookUpModelAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookUpModelAdminRequestValidationError) ErrorName() string {
	return "LookUpModelAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LookUpModelAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookUpModelAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookUpModelAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookUpModelAdminRequestValidationError{}

// Validate checks the field values on LookUpModelAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LookUpModelAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LookUpModelAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LookUpModelAdminResponseMultiError, or nil if none found.
func (m *LookUpModelAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LookUpModelAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LookUpModelAdminResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LookUpModelAdminResponseValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LookUpModelAdminResponseValidationError{
				field:  "Model",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LookUpModelAdminResponseMultiError(errors)
	}

	return nil
}

// LookUpModelAdminResponseMultiError is an error wrapping multiple validation
// errors returned by LookUpModelAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type LookUpModelAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LookUpModelAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LookUpModelAdminResponseMultiError) AllErrors() []error { return m }

// LookUpModelAdminResponseValidationError is the validation error returned by
// LookUpModelAdminResponse.Validate if the designated constraints aren't met.
type LookUpModelAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LookUpModelAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LookUpModelAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LookUpModelAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LookUpModelAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LookUpModelAdminResponseValidationError) ErrorName() string {
	return "LookUpModelAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LookUpModelAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLookUpModelAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LookUpModelAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LookUpModelAdminResponseValidationError{}

// Validate checks the field values on DeployUserModelAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployUserModelAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployUserModelAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployUserModelAdminRequestMultiError, or nil if none found.
func (m *DeployUserModelAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployUserModelAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Digest

	if len(errors) > 0 {
		return DeployUserModelAdminRequestMultiError(errors)
	}

	return nil
}

// DeployUserModelAdminRequestMultiError is an error wrapping multiple
// validation errors returned by DeployUserModelAdminRequest.ValidateAll() if
// the designated constraints aren't met.
type DeployUserModelAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployUserModelAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployUserModelAdminRequestMultiError) AllErrors() []error { return m }

// DeployUserModelAdminRequestValidationError is the validation error returned
// by DeployUserModelAdminRequest.Validate if the designated constraints
// aren't met.
type DeployUserModelAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployUserModelAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployUserModelAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployUserModelAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployUserModelAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployUserModelAdminRequestValidationError) ErrorName() string {
	return "DeployUserModelAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeployUserModelAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployUserModelAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployUserModelAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployUserModelAdminRequestValidationError{}

// Validate checks the field values on DeployUserModelAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeployUserModelAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployUserModelAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeployUserModelAdminResponseMultiError, or nil if none found.
func (m *DeployUserModelAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployUserModelAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeployUserModelAdminResponseMultiError(errors)
	}

	return nil
}

// DeployUserModelAdminResponseMultiError is an error wrapping multiple
// validation errors returned by DeployUserModelAdminResponse.ValidateAll() if
// the designated constraints aren't met.
type DeployUserModelAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployUserModelAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployUserModelAdminResponseMultiError) AllErrors() []error { return m }

// DeployUserModelAdminResponseValidationError is the validation error returned
// by DeployUserModelAdminResponse.Validate if the designated constraints
// aren't met.
type DeployUserModelAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployUserModelAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployUserModelAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployUserModelAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployUserModelAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployUserModelAdminResponseValidationError) ErrorName() string {
	return "DeployUserModelAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeployUserModelAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployUserModelAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployUserModelAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployUserModelAdminResponseValidationError{}

// Validate checks the field values on DeployOrganizationModelAdminRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeployOrganizationModelAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployOrganizationModelAdminRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeployOrganizationModelAdminRequestMultiError, or nil if none found.
func (m *DeployOrganizationModelAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployOrganizationModelAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Digest

	if len(errors) > 0 {
		return DeployOrganizationModelAdminRequestMultiError(errors)
	}

	return nil
}

// DeployOrganizationModelAdminRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeployOrganizationModelAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type DeployOrganizationModelAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployOrganizationModelAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployOrganizationModelAdminRequestMultiError) AllErrors() []error { return m }

// DeployOrganizationModelAdminRequestValidationError is the validation error
// returned by DeployOrganizationModelAdminRequest.Validate if the designated
// constraints aren't met.
type DeployOrganizationModelAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployOrganizationModelAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployOrganizationModelAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployOrganizationModelAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployOrganizationModelAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployOrganizationModelAdminRequestValidationError) ErrorName() string {
	return "DeployOrganizationModelAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeployOrganizationModelAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployOrganizationModelAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployOrganizationModelAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployOrganizationModelAdminRequestValidationError{}

// Validate checks the field values on DeployOrganizationModelAdminResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeployOrganizationModelAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeployOrganizationModelAdminResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeployOrganizationModelAdminResponseMultiError, or nil if none found.
func (m *DeployOrganizationModelAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeployOrganizationModelAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeployOrganizationModelAdminResponseMultiError(errors)
	}

	return nil
}

// DeployOrganizationModelAdminResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeployOrganizationModelAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type DeployOrganizationModelAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeployOrganizationModelAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeployOrganizationModelAdminResponseMultiError) AllErrors() []error { return m }

// DeployOrganizationModelAdminResponseValidationError is the validation error
// returned by DeployOrganizationModelAdminResponse.Validate if the designated
// constraints aren't met.
type DeployOrganizationModelAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployOrganizationModelAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployOrganizationModelAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployOrganizationModelAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployOrganizationModelAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployOrganizationModelAdminResponseValidationError) ErrorName() string {
	return "DeployOrganizationModelAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeployOrganizationModelAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployOrganizationModelAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployOrganizationModelAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployOrganizationModelAdminResponseValidationError{}

// Validate checks the field values on UndeployUserModelAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UndeployUserModelAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UndeployUserModelAdminRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UndeployUserModelAdminRequestMultiError, or nil if none found.
func (m *UndeployUserModelAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UndeployUserModelAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Digest

	if len(errors) > 0 {
		return UndeployUserModelAdminRequestMultiError(errors)
	}

	return nil
}

// UndeployUserModelAdminRequestMultiError is an error wrapping multiple
// validation errors returned by UndeployUserModelAdminRequest.ValidateAll()
// if the designated constraints aren't met.
type UndeployUserModelAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UndeployUserModelAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UndeployUserModelAdminRequestMultiError) AllErrors() []error { return m }

// UndeployUserModelAdminRequestValidationError is the validation error
// returned by UndeployUserModelAdminRequest.Validate if the designated
// constraints aren't met.
type UndeployUserModelAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UndeployUserModelAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UndeployUserModelAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UndeployUserModelAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UndeployUserModelAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UndeployUserModelAdminRequestValidationError) ErrorName() string {
	return "UndeployUserModelAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UndeployUserModelAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUndeployUserModelAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UndeployUserModelAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UndeployUserModelAdminRequestValidationError{}

// Validate checks the field values on UndeployUserModelAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UndeployUserModelAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UndeployUserModelAdminResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UndeployUserModelAdminResponseMultiError, or nil if none found.
func (m *UndeployUserModelAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UndeployUserModelAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UndeployUserModelAdminResponseMultiError(errors)
	}

	return nil
}

// UndeployUserModelAdminResponseMultiError is an error wrapping multiple
// validation errors returned by UndeployUserModelAdminResponse.ValidateAll()
// if the designated constraints aren't met.
type UndeployUserModelAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UndeployUserModelAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UndeployUserModelAdminResponseMultiError) AllErrors() []error { return m }

// UndeployUserModelAdminResponseValidationError is the validation error
// returned by UndeployUserModelAdminResponse.Validate if the designated
// constraints aren't met.
type UndeployUserModelAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UndeployUserModelAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UndeployUserModelAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UndeployUserModelAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UndeployUserModelAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UndeployUserModelAdminResponseValidationError) ErrorName() string {
	return "UndeployUserModelAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UndeployUserModelAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUndeployUserModelAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UndeployUserModelAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UndeployUserModelAdminResponseValidationError{}

// Validate checks the field values on UndeployOrganizationModelAdminRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UndeployOrganizationModelAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UndeployOrganizationModelAdminRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UndeployOrganizationModelAdminRequestMultiError, or nil if none found.
func (m *UndeployOrganizationModelAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UndeployOrganizationModelAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Version

	// no validation rules for Digest

	if len(errors) > 0 {
		return UndeployOrganizationModelAdminRequestMultiError(errors)
	}

	return nil
}

// UndeployOrganizationModelAdminRequestMultiError is an error wrapping
// multiple validation errors returned by
// UndeployOrganizationModelAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type UndeployOrganizationModelAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UndeployOrganizationModelAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UndeployOrganizationModelAdminRequestMultiError) AllErrors() []error { return m }

// UndeployOrganizationModelAdminRequestValidationError is the validation error
// returned by UndeployOrganizationModelAdminRequest.Validate if the
// designated constraints aren't met.
type UndeployOrganizationModelAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UndeployOrganizationModelAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UndeployOrganizationModelAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UndeployOrganizationModelAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UndeployOrganizationModelAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UndeployOrganizationModelAdminRequestValidationError) ErrorName() string {
	return "UndeployOrganizationModelAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UndeployOrganizationModelAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUndeployOrganizationModelAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UndeployOrganizationModelAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UndeployOrganizationModelAdminRequestValidationError{}

// Validate checks the field values on UndeployOrganizationModelAdminResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UndeployOrganizationModelAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UndeployOrganizationModelAdminResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UndeployOrganizationModelAdminResponseMultiError, or nil if none found.
func (m *UndeployOrganizationModelAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UndeployOrganizationModelAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UndeployOrganizationModelAdminResponseMultiError(errors)
	}

	return nil
}

// UndeployOrganizationModelAdminResponseMultiError is an error wrapping
// multiple validation errors returned by
// UndeployOrganizationModelAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type UndeployOrganizationModelAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UndeployOrganizationModelAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UndeployOrganizationModelAdminResponseMultiError) AllErrors() []error { return m }

// UndeployOrganizationModelAdminResponseValidationError is the validation
// error returned by UndeployOrganizationModelAdminResponse.Validate if the
// designated constraints aren't met.
type UndeployOrganizationModelAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UndeployOrganizationModelAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UndeployOrganizationModelAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UndeployOrganizationModelAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UndeployOrganizationModelAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UndeployOrganizationModelAdminResponseValidationError) ErrorName() string {
	return "UndeployOrganizationModelAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UndeployOrganizationModelAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUndeployOrganizationModelAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UndeployOrganizationModelAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UndeployOrganizationModelAdminResponseValidationError{}

// Validate checks the field values on ModelRun with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ModelRun) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelRun with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ModelRunMultiError, or nil
// if none found.
func (m *ModelRun) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelRun) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for ModelUid

	// no validation rules for Status

	// no validation rules for Source

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelRunValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelRunValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelRunValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelRunValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelRunValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelRunValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	for idx, item := range m.GetTaskInputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelRunValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelRunValidationError{
						field:  fmt.Sprintf("TaskInputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelRunValidationError{
					field:  fmt.Sprintf("TaskInputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTaskOutputs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelRunValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelRunValidationError{
						field:  fmt.Sprintf("TaskOutputs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelRunValidationError{
					field:  fmt.Sprintf("TaskOutputs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TotalDuration != nil {
		// no validation rules for TotalDuration
	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ModelRunValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ModelRunValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ModelRunValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RunnerId != nil {
		// no validation rules for RunnerId
	}

	if m.CreditAmount != nil {
		// no validation rules for CreditAmount
	}

	if m.Error != nil {
		// no validation rules for Error
	}

	if len(errors) > 0 {
		return ModelRunMultiError(errors)
	}

	return nil
}

// ModelRunMultiError is an error wrapping multiple validation errors returned
// by ModelRun.ValidateAll() if the designated constraints aren't met.
type ModelRunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelRunMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelRunMultiError) AllErrors() []error { return m }

// ModelRunValidationError is the validation error returned by
// ModelRun.Validate if the designated constraints aren't met.
type ModelRunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelRunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelRunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelRunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelRunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelRunValidationError) ErrorName() string { return "ModelRunValidationError" }

// Error satisfies the builtin error interface
func (e ModelRunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelRun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelRunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelRunValidationError{}

// Validate checks the field values on ListModelRunsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModelRunsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModelRunsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModelRunsRequestMultiError, or nil if none found.
func (m *ListModelRunsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModelRunsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for ModelId

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.Page != nil {
		// no validation rules for Page
	}

	if m.View != nil {
		// no validation rules for View
	}

	if m.OrderBy != nil {
		// no validation rules for OrderBy
	}

	if m.Filter != nil {
		// no validation rules for Filter
	}

	if len(errors) > 0 {
		return ListModelRunsRequestMultiError(errors)
	}

	return nil
}

// ListModelRunsRequestMultiError is an error wrapping multiple validation
// errors returned by ListModelRunsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListModelRunsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModelRunsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModelRunsRequestMultiError) AllErrors() []error { return m }

// ListModelRunsRequestValidationError is the validation error returned by
// ListModelRunsRequest.Validate if the designated constraints aren't met.
type ListModelRunsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModelRunsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModelRunsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModelRunsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModelRunsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModelRunsRequestValidationError) ErrorName() string {
	return "ListModelRunsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListModelRunsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModelRunsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModelRunsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModelRunsRequestValidationError{}

// Validate checks the field values on ListModelRunsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModelRunsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModelRunsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModelRunsResponseMultiError, or nil if none found.
func (m *ListModelRunsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModelRunsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRuns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListModelRunsResponseValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListModelRunsResponseValidationError{
						field:  fmt.Sprintf("Runs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListModelRunsResponseValidationError{
					field:  fmt.Sprintf("Runs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalSize

	// no validation rules for PageSize

	// no validation rules for Page

	if len(errors) > 0 {
		return ListModelRunsResponseMultiError(errors)
	}

	return nil
}

// ListModelRunsResponseMultiError is an error wrapping multiple validation
// errors returned by ListModelRunsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListModelRunsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModelRunsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModelRunsResponseMultiError) AllErrors() []error { return m }

// ListModelRunsResponseValidationError is the validation error returned by
// ListModelRunsResponse.Validate if the designated constraints aren't met.
type ListModelRunsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModelRunsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModelRunsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModelRunsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModelRunsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModelRunsResponseValidationError) ErrorName() string {
	return "ListModelRunsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListModelRunsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModelRunsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModelRunsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModelRunsResponseValidationError{}

// Validate checks the field values on Model_Stats with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Model_Stats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Model_Stats with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Model_StatsMultiError, or
// nil if none found.
func (m *Model_Stats) ValidateAll() error {
	return m.validate(true)
}

func (m *Model_Stats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumberOfRuns

	if all {
		switch v := interface{}(m.GetLastRunTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Model_StatsValidationError{
					field:  "LastRunTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Model_StatsValidationError{
					field:  "LastRunTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastRunTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Model_StatsValidationError{
				field:  "LastRunTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Model_StatsMultiError(errors)
	}

	return nil
}

// Model_StatsMultiError is an error wrapping multiple validation errors
// returned by Model_Stats.ValidateAll() if the designated constraints aren't met.
type Model_StatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Model_StatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Model_StatsMultiError) AllErrors() []error { return m }

// Model_StatsValidationError is the validation error returned by
// Model_Stats.Validate if the designated constraints aren't met.
type Model_StatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Model_StatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Model_StatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Model_StatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Model_StatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Model_StatsValidationError) ErrorName() string { return "Model_StatsValidationError" }

// Error satisfies the builtin error interface
func (e Model_StatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModel_Stats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Model_StatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Model_StatsValidationError{}
