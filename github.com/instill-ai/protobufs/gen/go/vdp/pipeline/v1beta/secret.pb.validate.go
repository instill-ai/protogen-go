// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: vdp/pipeline/v1beta/secret.proto

package pipelinev1beta

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Secret) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Secret with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SecretMultiError, or nil if none found.
func (m *Secret) ValidateAll() error {
	return m.validate(true)
}

func (m *Secret) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Uid

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecretValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecretValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SecretValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SecretValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SecretValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	if m.Value != nil {
		// no validation rules for Value
	}

	if len(errors) > 0 {
		return SecretMultiError(errors)
	}

	return nil
}

// SecretMultiError is an error wrapping multiple validation errors returned by
// Secret.ValidateAll() if the designated constraints aren't met.
type SecretMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SecretMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SecretMultiError) AllErrors() []error { return m }

// SecretValidationError is the validation error returned by Secret.Validate if
// the designated constraints aren't met.
type SecretValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SecretValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SecretValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SecretValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SecretValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SecretValidationError) ErrorName() string { return "SecretValidationError" }

// Error satisfies the builtin error interface
func (e SecretValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSecret.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SecretValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SecretValidationError{}

// Validate checks the field values on CreateNamespaceSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNamespaceSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespaceSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNamespaceSecretRequestMultiError, or nil if none found.
func (m *CreateNamespaceSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespaceSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespaceSecretRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespaceSecretRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceSecretRequestValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNamespaceSecretRequestMultiError(errors)
	}

	return nil
}

// CreateNamespaceSecretRequestMultiError is an error wrapping multiple
// validation errors returned by CreateNamespaceSecretRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateNamespaceSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespaceSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespaceSecretRequestMultiError) AllErrors() []error { return m }

// CreateNamespaceSecretRequestValidationError is the validation error returned
// by CreateNamespaceSecretRequest.Validate if the designated constraints
// aren't met.
type CreateNamespaceSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceSecretRequestValidationError) ErrorName() string {
	return "CreateNamespaceSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceSecretRequestValidationError{}

// Validate checks the field values on CreateNamespaceSecretResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNamespaceSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNamespaceSecretResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateNamespaceSecretResponseMultiError, or nil if none found.
func (m *CreateNamespaceSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNamespaceSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateNamespaceSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateNamespaceSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateNamespaceSecretResponseValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateNamespaceSecretResponseMultiError(errors)
	}

	return nil
}

// CreateNamespaceSecretResponseMultiError is an error wrapping multiple
// validation errors returned by CreateNamespaceSecretResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateNamespaceSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNamespaceSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNamespaceSecretResponseMultiError) AllErrors() []error { return m }

// CreateNamespaceSecretResponseValidationError is the validation error
// returned by CreateNamespaceSecretResponse.Validate if the designated
// constraints aren't met.
type CreateNamespaceSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceSecretResponseValidationError) ErrorName() string {
	return "CreateNamespaceSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceSecretResponseValidationError{}

// Validate checks the field values on ListNamespaceSecretsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespaceSecretsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespaceSecretsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespaceSecretsRequestMultiError, or nil if none found.
func (m *ListNamespaceSecretsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespaceSecretsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if len(errors) > 0 {
		return ListNamespaceSecretsRequestMultiError(errors)
	}

	return nil
}

// ListNamespaceSecretsRequestMultiError is an error wrapping multiple
// validation errors returned by ListNamespaceSecretsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListNamespaceSecretsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespaceSecretsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespaceSecretsRequestMultiError) AllErrors() []error { return m }

// ListNamespaceSecretsRequestValidationError is the validation error returned
// by ListNamespaceSecretsRequest.Validate if the designated constraints
// aren't met.
type ListNamespaceSecretsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespaceSecretsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespaceSecretsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespaceSecretsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespaceSecretsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespaceSecretsRequestValidationError) ErrorName() string {
	return "ListNamespaceSecretsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespaceSecretsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespaceSecretsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespaceSecretsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespaceSecretsRequestValidationError{}

// Validate checks the field values on ListNamespaceSecretsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNamespaceSecretsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNamespaceSecretsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNamespaceSecretsResponseMultiError, or nil if none found.
func (m *ListNamespaceSecretsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNamespaceSecretsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNamespaceSecretsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNamespaceSecretsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNamespaceSecretsResponseValidationError{
					field:  fmt.Sprintf("Secrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListNamespaceSecretsResponseMultiError(errors)
	}

	return nil
}

// ListNamespaceSecretsResponseMultiError is an error wrapping multiple
// validation errors returned by ListNamespaceSecretsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListNamespaceSecretsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNamespaceSecretsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNamespaceSecretsResponseMultiError) AllErrors() []error { return m }

// ListNamespaceSecretsResponseValidationError is the validation error returned
// by ListNamespaceSecretsResponse.Validate if the designated constraints
// aren't met.
type ListNamespaceSecretsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespaceSecretsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespaceSecretsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespaceSecretsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespaceSecretsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespaceSecretsResponseValidationError) ErrorName() string {
	return "ListNamespaceSecretsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespaceSecretsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespaceSecretsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespaceSecretsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespaceSecretsResponseValidationError{}

// Validate checks the field values on GetNamespaceSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceSecretRequestMultiError, or nil if none found.
func (m *GetNamespaceSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for SecretId

	if len(errors) > 0 {
		return GetNamespaceSecretRequestMultiError(errors)
	}

	return nil
}

// GetNamespaceSecretRequestMultiError is an error wrapping multiple validation
// errors returned by GetNamespaceSecretRequest.ValidateAll() if the
// designated constraints aren't met.
type GetNamespaceSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceSecretRequestMultiError) AllErrors() []error { return m }

// GetNamespaceSecretRequestValidationError is the validation error returned by
// GetNamespaceSecretRequest.Validate if the designated constraints aren't met.
type GetNamespaceSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceSecretRequestValidationError) ErrorName() string {
	return "GetNamespaceSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceSecretRequestValidationError{}

// Validate checks the field values on GetNamespaceSecretResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNamespaceSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNamespaceSecretResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNamespaceSecretResponseMultiError, or nil if none found.
func (m *GetNamespaceSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNamespaceSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNamespaceSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNamespaceSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNamespaceSecretResponseValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNamespaceSecretResponseMultiError(errors)
	}

	return nil
}

// GetNamespaceSecretResponseMultiError is an error wrapping multiple
// validation errors returned by GetNamespaceSecretResponse.ValidateAll() if
// the designated constraints aren't met.
type GetNamespaceSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNamespaceSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNamespaceSecretResponseMultiError) AllErrors() []error { return m }

// GetNamespaceSecretResponseValidationError is the validation error returned
// by GetNamespaceSecretResponse.Validate if the designated constraints aren't met.
type GetNamespaceSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceSecretResponseValidationError) ErrorName() string {
	return "GetNamespaceSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceSecretResponseValidationError{}

// Validate checks the field values on UpdateNamespaceSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNamespaceSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNamespaceSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNamespaceSecretRequestMultiError, or nil if none found.
func (m *UpdateNamespaceSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespaceSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for SecretId

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespaceSecretRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespaceSecretRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceSecretRequestValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespaceSecretRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespaceSecretRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceSecretRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateNamespaceSecretRequestMultiError(errors)
	}

	return nil
}

// UpdateNamespaceSecretRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateNamespaceSecretRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateNamespaceSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespaceSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespaceSecretRequestMultiError) AllErrors() []error { return m }

// UpdateNamespaceSecretRequestValidationError is the validation error returned
// by UpdateNamespaceSecretRequest.Validate if the designated constraints
// aren't met.
type UpdateNamespaceSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceSecretRequestValidationError) ErrorName() string {
	return "UpdateNamespaceSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceSecretRequestValidationError{}

// Validate checks the field values on UpdateNamespaceSecretResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNamespaceSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNamespaceSecretResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateNamespaceSecretResponseMultiError, or nil if none found.
func (m *UpdateNamespaceSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNamespaceSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateNamespaceSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateNamespaceSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNamespaceSecretResponseValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateNamespaceSecretResponseMultiError(errors)
	}

	return nil
}

// UpdateNamespaceSecretResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateNamespaceSecretResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateNamespaceSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNamespaceSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNamespaceSecretResponseMultiError) AllErrors() []error { return m }

// UpdateNamespaceSecretResponseValidationError is the validation error
// returned by UpdateNamespaceSecretResponse.Validate if the designated
// constraints aren't met.
type UpdateNamespaceSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNamespaceSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNamespaceSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNamespaceSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNamespaceSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNamespaceSecretResponseValidationError) ErrorName() string {
	return "UpdateNamespaceSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNamespaceSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNamespaceSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNamespaceSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNamespaceSecretResponseValidationError{}

// Validate checks the field values on DeleteNamespaceSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNamespaceSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNamespaceSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNamespaceSecretRequestMultiError, or nil if none found.
func (m *DeleteNamespaceSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespaceSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for SecretId

	if len(errors) > 0 {
		return DeleteNamespaceSecretRequestMultiError(errors)
	}

	return nil
}

// DeleteNamespaceSecretRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteNamespaceSecretRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteNamespaceSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespaceSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespaceSecretRequestMultiError) AllErrors() []error { return m }

// DeleteNamespaceSecretRequestValidationError is the validation error returned
// by DeleteNamespaceSecretRequest.Validate if the designated constraints
// aren't met.
type DeleteNamespaceSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceSecretRequestValidationError) ErrorName() string {
	return "DeleteNamespaceSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceSecretRequestValidationError{}

// Validate checks the field values on DeleteNamespaceSecretResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNamespaceSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNamespaceSecretResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteNamespaceSecretResponseMultiError, or nil if none found.
func (m *DeleteNamespaceSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNamespaceSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteNamespaceSecretResponseMultiError(errors)
	}

	return nil
}

// DeleteNamespaceSecretResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteNamespaceSecretResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteNamespaceSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNamespaceSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNamespaceSecretResponseMultiError) AllErrors() []error { return m }

// DeleteNamespaceSecretResponseValidationError is the validation error
// returned by DeleteNamespaceSecretResponse.Validate if the designated
// constraints aren't met.
type DeleteNamespaceSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceSecretResponseValidationError) ErrorName() string {
	return "DeleteNamespaceSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceSecretResponseValidationError{}

// Validate checks the field values on CreateUserSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserSecretRequestMultiError, or nil if none found.
func (m *CreateUserSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserSecretRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserSecretRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserSecretRequestValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Parent

	if len(errors) > 0 {
		return CreateUserSecretRequestMultiError(errors)
	}

	return nil
}

// CreateUserSecretRequestMultiError is an error wrapping multiple validation
// errors returned by CreateUserSecretRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateUserSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserSecretRequestMultiError) AllErrors() []error { return m }

// CreateUserSecretRequestValidationError is the validation error returned by
// CreateUserSecretRequest.Validate if the designated constraints aren't met.
type CreateUserSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserSecretRequestValidationError) ErrorName() string {
	return "CreateUserSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserSecretRequestValidationError{}

// Validate checks the field values on CreateUserSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserSecretResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserSecretResponseMultiError, or nil if none found.
func (m *CreateUserSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserSecretResponseValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserSecretResponseMultiError(errors)
	}

	return nil
}

// CreateUserSecretResponseMultiError is an error wrapping multiple validation
// errors returned by CreateUserSecretResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateUserSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserSecretResponseMultiError) AllErrors() []error { return m }

// CreateUserSecretResponseValidationError is the validation error returned by
// CreateUserSecretResponse.Validate if the designated constraints aren't met.
type CreateUserSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserSecretResponseValidationError) ErrorName() string {
	return "CreateUserSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserSecretResponseValidationError{}

// Validate checks the field values on ListUserSecretsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserSecretsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserSecretsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserSecretsRequestMultiError, or nil if none found.
func (m *ListUserSecretsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserSecretsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if len(errors) > 0 {
		return ListUserSecretsRequestMultiError(errors)
	}

	return nil
}

// ListUserSecretsRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserSecretsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserSecretsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserSecretsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserSecretsRequestMultiError) AllErrors() []error { return m }

// ListUserSecretsRequestValidationError is the validation error returned by
// ListUserSecretsRequest.Validate if the designated constraints aren't met.
type ListUserSecretsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserSecretsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserSecretsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserSecretsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserSecretsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserSecretsRequestValidationError) ErrorName() string {
	return "ListUserSecretsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserSecretsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserSecretsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserSecretsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserSecretsRequestValidationError{}

// Validate checks the field values on ListUserSecretsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserSecretsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserSecretsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserSecretsResponseMultiError, or nil if none found.
func (m *ListUserSecretsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserSecretsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserSecretsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserSecretsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserSecretsResponseValidationError{
					field:  fmt.Sprintf("Secrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListUserSecretsResponseMultiError(errors)
	}

	return nil
}

// ListUserSecretsResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserSecretsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserSecretsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserSecretsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserSecretsResponseMultiError) AllErrors() []error { return m }

// ListUserSecretsResponseValidationError is the validation error returned by
// ListUserSecretsResponse.Validate if the designated constraints aren't met.
type ListUserSecretsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserSecretsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserSecretsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserSecretsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserSecretsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserSecretsResponseValidationError) ErrorName() string {
	return "ListUserSecretsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserSecretsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserSecretsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserSecretsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserSecretsResponseValidationError{}

// Validate checks the field values on GetUserSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserSecretRequestMultiError, or nil if none found.
func (m *GetUserSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetUserSecretRequestMultiError(errors)
	}

	return nil
}

// GetUserSecretRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserSecretRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserSecretRequestMultiError) AllErrors() []error { return m }

// GetUserSecretRequestValidationError is the validation error returned by
// GetUserSecretRequest.Validate if the designated constraints aren't met.
type GetUserSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserSecretRequestValidationError) ErrorName() string {
	return "GetUserSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserSecretRequestValidationError{}

// Validate checks the field values on GetUserSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserSecretResponseMultiError, or nil if none found.
func (m *GetUserSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserSecretResponseValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserSecretResponseMultiError(errors)
	}

	return nil
}

// GetUserSecretResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserSecretResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserSecretResponseMultiError) AllErrors() []error { return m }

// GetUserSecretResponseValidationError is the validation error returned by
// GetUserSecretResponse.Validate if the designated constraints aren't met.
type GetUserSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserSecretResponseValidationError) ErrorName() string {
	return "GetUserSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserSecretResponseValidationError{}

// Validate checks the field values on UpdateUserSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserSecretRequestMultiError, or nil if none found.
func (m *UpdateUserSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserSecretRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserSecretRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserSecretRequestValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserSecretRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserSecretRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserSecretRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserSecretRequestMultiError(errors)
	}

	return nil
}

// UpdateUserSecretRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserSecretRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserSecretRequestMultiError) AllErrors() []error { return m }

// UpdateUserSecretRequestValidationError is the validation error returned by
// UpdateUserSecretRequest.Validate if the designated constraints aren't met.
type UpdateUserSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserSecretRequestValidationError) ErrorName() string {
	return "UpdateUserSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserSecretRequestValidationError{}

// Validate checks the field values on UpdateUserSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserSecretResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserSecretResponseMultiError, or nil if none found.
func (m *UpdateUserSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserSecretResponseValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserSecretResponseMultiError(errors)
	}

	return nil
}

// UpdateUserSecretResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserSecretResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserSecretResponseMultiError) AllErrors() []error { return m }

// UpdateUserSecretResponseValidationError is the validation error returned by
// UpdateUserSecretResponse.Validate if the designated constraints aren't met.
type UpdateUserSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserSecretResponseValidationError) ErrorName() string {
	return "UpdateUserSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserSecretResponseValidationError{}

// Validate checks the field values on DeleteUserSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserSecretRequestMultiError, or nil if none found.
func (m *DeleteUserSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteUserSecretRequestMultiError(errors)
	}

	return nil
}

// DeleteUserSecretRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteUserSecretRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserSecretRequestMultiError) AllErrors() []error { return m }

// DeleteUserSecretRequestValidationError is the validation error returned by
// DeleteUserSecretRequest.Validate if the designated constraints aren't met.
type DeleteUserSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserSecretRequestValidationError) ErrorName() string {
	return "DeleteUserSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserSecretRequestValidationError{}

// Validate checks the field values on DeleteUserSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserSecretResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserSecretResponseMultiError, or nil if none found.
func (m *DeleteUserSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserSecretResponseMultiError(errors)
	}

	return nil
}

// DeleteUserSecretResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteUserSecretResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserSecretResponseMultiError) AllErrors() []error { return m }

// DeleteUserSecretResponseValidationError is the validation error returned by
// DeleteUserSecretResponse.Validate if the designated constraints aren't met.
type DeleteUserSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserSecretResponseValidationError) ErrorName() string {
	return "DeleteUserSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserSecretResponseValidationError{}

// Validate checks the field values on CreateOrganizationSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationSecretRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrganizationSecretRequestMultiError, or nil if none found.
func (m *CreateOrganizationSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationSecretRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationSecretRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationSecretRequestValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Parent

	if len(errors) > 0 {
		return CreateOrganizationSecretRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationSecretRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationSecretRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateOrganizationSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationSecretRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationSecretRequestValidationError is the validation error
// returned by CreateOrganizationSecretRequest.Validate if the designated
// constraints aren't met.
type CreateOrganizationSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationSecretRequestValidationError) ErrorName() string {
	return "CreateOrganizationSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationSecretRequestValidationError{}

// Validate checks the field values on CreateOrganizationSecretResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrganizationSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationSecretResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrganizationSecretResponseMultiError, or nil if none found.
func (m *CreateOrganizationSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationSecretResponseValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationSecretResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationSecretResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrganizationSecretResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrganizationSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationSecretResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationSecretResponseValidationError is the validation error
// returned by CreateOrganizationSecretResponse.Validate if the designated
// constraints aren't met.
type CreateOrganizationSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationSecretResponseValidationError) ErrorName() string {
	return "CreateOrganizationSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationSecretResponseValidationError{}

// Validate checks the field values on ListOrganizationSecretsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationSecretsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationSecretsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationSecretsRequestMultiError, or nil if none found.
func (m *ListOrganizationSecretsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationSecretsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if m.PageSize != nil {
		// no validation rules for PageSize
	}

	if m.PageToken != nil {
		// no validation rules for PageToken
	}

	if len(errors) > 0 {
		return ListOrganizationSecretsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationSecretsRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationSecretsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationSecretsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationSecretsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationSecretsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationSecretsRequestValidationError is the validation error
// returned by ListOrganizationSecretsRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationSecretsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationSecretsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationSecretsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationSecretsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationSecretsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationSecretsRequestValidationError) ErrorName() string {
	return "ListOrganizationSecretsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationSecretsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationSecretsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationSecretsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationSecretsRequestValidationError{}

// Validate checks the field values on ListOrganizationSecretsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationSecretsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationSecretsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationSecretsResponseMultiError, or nil if none found.
func (m *ListOrganizationSecretsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationSecretsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSecrets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationSecretsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationSecretsResponseValidationError{
						field:  fmt.Sprintf("Secrets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationSecretsResponseValidationError{
					field:  fmt.Sprintf("Secrets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	// no validation rules for TotalSize

	if len(errors) > 0 {
		return ListOrganizationSecretsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationSecretsResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationSecretsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationSecretsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationSecretsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationSecretsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationSecretsResponseValidationError is the validation error
// returned by ListOrganizationSecretsResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationSecretsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationSecretsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationSecretsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationSecretsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationSecretsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationSecretsResponseValidationError) ErrorName() string {
	return "ListOrganizationSecretsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationSecretsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationSecretsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationSecretsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationSecretsResponseValidationError{}

// Validate checks the field values on GetOrganizationSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationSecretRequestMultiError, or nil if none found.
func (m *GetOrganizationSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetOrganizationSecretRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationSecretRequestMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationSecretRequest.ValidateAll() if
// the designated constraints aren't met.
type GetOrganizationSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationSecretRequestMultiError) AllErrors() []error { return m }

// GetOrganizationSecretRequestValidationError is the validation error returned
// by GetOrganizationSecretRequest.Validate if the designated constraints
// aren't met.
type GetOrganizationSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationSecretRequestValidationError) ErrorName() string {
	return "GetOrganizationSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationSecretRequestValidationError{}

// Validate checks the field values on GetOrganizationSecretResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationSecretResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetOrganizationSecretResponseMultiError, or nil if none found.
func (m *GetOrganizationSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationSecretResponseValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationSecretResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationSecretResponseMultiError is an error wrapping multiple
// validation errors returned by GetOrganizationSecretResponse.ValidateAll()
// if the designated constraints aren't met.
type GetOrganizationSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationSecretResponseMultiError) AllErrors() []error { return m }

// GetOrganizationSecretResponseValidationError is the validation error
// returned by GetOrganizationSecretResponse.Validate if the designated
// constraints aren't met.
type GetOrganizationSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationSecretResponseValidationError) ErrorName() string {
	return "GetOrganizationSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationSecretResponseValidationError{}

// Validate checks the field values on UpdateOrganizationSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationSecretRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrganizationSecretRequestMultiError, or nil if none found.
func (m *UpdateOrganizationSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationSecretRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationSecretRequestValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationSecretRequestValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationSecretRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationSecretRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationSecretRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationSecretRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationSecretRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationSecretRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateOrganizationSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationSecretRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationSecretRequestValidationError is the validation error
// returned by UpdateOrganizationSecretRequest.Validate if the designated
// constraints aren't met.
type UpdateOrganizationSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationSecretRequestValidationError) ErrorName() string {
	return "UpdateOrganizationSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationSecretRequestValidationError{}

// Validate checks the field values on UpdateOrganizationSecretResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateOrganizationSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationSecretResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrganizationSecretResponseMultiError, or nil if none found.
func (m *UpdateOrganizationSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSecret()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationSecretResponseValidationError{
					field:  "Secret",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecret()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationSecretResponseValidationError{
				field:  "Secret",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationSecretResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationSecretResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateOrganizationSecretResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrganizationSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationSecretResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationSecretResponseValidationError is the validation error
// returned by UpdateOrganizationSecretResponse.Validate if the designated
// constraints aren't met.
type UpdateOrganizationSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationSecretResponseValidationError) ErrorName() string {
	return "UpdateOrganizationSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationSecretResponseValidationError{}

// Validate checks the field values on DeleteOrganizationSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationSecretRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationSecretRequestMultiError, or nil if none found.
func (m *DeleteOrganizationSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteOrganizationSecretRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationSecretRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationSecretRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteOrganizationSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationSecretRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationSecretRequestValidationError is the validation error
// returned by DeleteOrganizationSecretRequest.Validate if the designated
// constraints aren't met.
type DeleteOrganizationSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationSecretRequestValidationError) ErrorName() string {
	return "DeleteOrganizationSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationSecretRequestValidationError{}

// Validate checks the field values on DeleteOrganizationSecretResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteOrganizationSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationSecretResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOrganizationSecretResponseMultiError, or nil if none found.
func (m *DeleteOrganizationSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationSecretResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationSecretResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteOrganizationSecretResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrganizationSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationSecretResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationSecretResponseValidationError is the validation error
// returned by DeleteOrganizationSecretResponse.Validate if the designated
// constraints aren't met.
type DeleteOrganizationSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationSecretResponseValidationError) ErrorName() string {
	return "DeleteOrganizationSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationSecretResponseValidationError{}
