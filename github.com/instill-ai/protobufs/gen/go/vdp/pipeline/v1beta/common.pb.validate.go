// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: vdp/pipeline/v1beta/common.proto

package pipelinev1beta

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Sharing with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Sharing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sharing with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SharingMultiError, or nil if none found.
func (m *Sharing) ValidateAll() error {
	return m.validate(true)
}

func (m *Sharing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetUsers()))
		i := 0
		for key := range m.GetUsers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetUsers()[key]
			_ = val

			// no validation rules for Users[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, SharingValidationError{
							field:  fmt.Sprintf("Users[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, SharingValidationError{
							field:  fmt.Sprintf("Users[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return SharingValidationError{
						field:  fmt.Sprintf("Users[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetShareCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SharingValidationError{
					field:  "ShareCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SharingValidationError{
					field:  "ShareCode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShareCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SharingValidationError{
				field:  "ShareCode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SharingMultiError(errors)
	}

	return nil
}

// SharingMultiError is an error wrapping multiple validation errors returned
// by Sharing.ValidateAll() if the designated constraints aren't met.
type SharingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharingMultiError) AllErrors() []error { return m }

// SharingValidationError is the validation error returned by Sharing.Validate
// if the designated constraints aren't met.
type SharingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharingValidationError) ErrorName() string { return "SharingValidationError" }

// Error satisfies the builtin error interface
func (e SharingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharingValidationError{}

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Permission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Permission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermissionMultiError, or
// nil if none found.
func (m *Permission) ValidateAll() error {
	return m.validate(true)
}

func (m *Permission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CanEdit

	// no validation rules for CanTrigger

	// no validation rules for CanRelease

	if len(errors) > 0 {
		return PermissionMultiError(errors)
	}

	return nil
}

// PermissionMultiError is an error wrapping multiple validation errors
// returned by Permission.ValidateAll() if the designated constraints aren't met.
type PermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionMultiError) AllErrors() []error { return m }

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionValidationError) ErrorName() string { return "PermissionValidationError" }

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionValidationError{}

// Validate checks the field values on CheckNameRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckNameRequestMultiError, or nil if none found.
func (m *CheckNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return CheckNameRequestMultiError(errors)
	}

	return nil
}

// CheckNameRequestMultiError is an error wrapping multiple validation errors
// returned by CheckNameRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckNameRequestMultiError) AllErrors() []error { return m }

// CheckNameRequestValidationError is the validation error returned by
// CheckNameRequest.Validate if the designated constraints aren't met.
type CheckNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckNameRequestValidationError) ErrorName() string { return "CheckNameRequestValidationError" }

// Error satisfies the builtin error interface
func (e CheckNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckNameRequestValidationError{}

// Validate checks the field values on CheckNameResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckNameResponseMultiError, or nil if none found.
func (m *CheckNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Availability

	if len(errors) > 0 {
		return CheckNameResponseMultiError(errors)
	}

	return nil
}

// CheckNameResponseMultiError is an error wrapping multiple validation errors
// returned by CheckNameResponse.ValidateAll() if the designated constraints
// aren't met.
type CheckNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckNameResponseMultiError) AllErrors() []error { return m }

// CheckNameResponseValidationError is the validation error returned by
// CheckNameResponse.Validate if the designated constraints aren't met.
type CheckNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckNameResponseValidationError) ErrorName() string {
	return "CheckNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckNameResponseValidationError{}

// Validate checks the field values on ComponentTask with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ComponentTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ComponentTask with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ComponentTaskMultiError, or
// nil if none found.
func (m *ComponentTask) ValidateAll() error {
	return m.validate(true)
}

func (m *ComponentTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Description

	if len(errors) > 0 {
		return ComponentTaskMultiError(errors)
	}

	return nil
}

// ComponentTaskMultiError is an error wrapping multiple validation errors
// returned by ComponentTask.ValidateAll() if the designated constraints
// aren't met.
type ComponentTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ComponentTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ComponentTaskMultiError) AllErrors() []error { return m }

// ComponentTaskValidationError is the validation error returned by
// ComponentTask.Validate if the designated constraints aren't met.
type ComponentTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ComponentTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ComponentTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ComponentTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ComponentTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ComponentTaskValidationError) ErrorName() string { return "ComponentTaskValidationError" }

// Error satisfies the builtin error interface
func (e ComponentTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComponentTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ComponentTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ComponentTaskValidationError{}

// Validate checks the field values on Sharing_User with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Sharing_User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sharing_User with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Sharing_UserMultiError, or
// nil if none found.
func (m *Sharing_User) ValidateAll() error {
	return m.validate(true)
}

func (m *Sharing_User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for Role

	if len(errors) > 0 {
		return Sharing_UserMultiError(errors)
	}

	return nil
}

// Sharing_UserMultiError is an error wrapping multiple validation errors
// returned by Sharing_User.ValidateAll() if the designated constraints aren't met.
type Sharing_UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Sharing_UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Sharing_UserMultiError) AllErrors() []error { return m }

// Sharing_UserValidationError is the validation error returned by
// Sharing_User.Validate if the designated constraints aren't met.
type Sharing_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Sharing_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Sharing_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Sharing_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Sharing_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Sharing_UserValidationError) ErrorName() string { return "Sharing_UserValidationError" }

// Error satisfies the builtin error interface
func (e Sharing_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharing_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Sharing_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Sharing_UserValidationError{}

// Validate checks the field values on Sharing_ShareCode with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Sharing_ShareCode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sharing_ShareCode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Sharing_ShareCodeMultiError, or nil if none found.
func (m *Sharing_ShareCode) ValidateAll() error {
	return m.validate(true)
}

func (m *Sharing_ShareCode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	// no validation rules for Code

	// no validation rules for Enabled

	// no validation rules for Role

	if len(errors) > 0 {
		return Sharing_ShareCodeMultiError(errors)
	}

	return nil
}

// Sharing_ShareCodeMultiError is an error wrapping multiple validation errors
// returned by Sharing_ShareCode.ValidateAll() if the designated constraints
// aren't met.
type Sharing_ShareCodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Sharing_ShareCodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Sharing_ShareCodeMultiError) AllErrors() []error { return m }

// Sharing_ShareCodeValidationError is the validation error returned by
// Sharing_ShareCode.Validate if the designated constraints aren't met.
type Sharing_ShareCodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Sharing_ShareCodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Sharing_ShareCodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Sharing_ShareCodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Sharing_ShareCodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Sharing_ShareCodeValidationError) ErrorName() string {
	return "Sharing_ShareCodeValidationError"
}

// Error satisfies the builtin error interface
func (e Sharing_ShareCodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharing_ShareCode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Sharing_ShareCodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Sharing_ShareCodeValidationError{}
