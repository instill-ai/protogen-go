// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: artifact/artifact/v1alpha/file_catalog.proto

package artifactv1alpha

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetFileCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFileCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFileCatalogRequestMultiError, or nil if none found.
func (m *GetFileCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NamespaceId

	// no validation rules for CatalogId

	// no validation rules for FileId

	// no validation rules for FileUid

	if len(errors) > 0 {
		return GetFileCatalogRequestMultiError(errors)
	}

	return nil
}

// GetFileCatalogRequestMultiError is an error wrapping multiple validation
// errors returned by GetFileCatalogRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFileCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileCatalogRequestMultiError) AllErrors() []error { return m }

// GetFileCatalogRequestValidationError is the validation error returned by
// GetFileCatalogRequest.Validate if the designated constraints aren't met.
type GetFileCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileCatalogRequestValidationError) ErrorName() string {
	return "GetFileCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFileCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileCatalogRequestValidationError{}

// Validate checks the field values on GetFileCatalogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFileCatalogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileCatalogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFileCatalogResponseMultiError, or nil if none found.
func (m *GetFileCatalogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileCatalogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OriginalData

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileCatalogResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileCatalogResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileCatalogResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetText()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileCatalogResponseValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileCatalogResponseValidationError{
					field:  "Text",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileCatalogResponseValidationError{
				field:  "Text",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetChunks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFileCatalogResponseValidationError{
						field:  fmt.Sprintf("Chunks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFileCatalogResponseValidationError{
						field:  fmt.Sprintf("Chunks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFileCatalogResponseValidationError{
					field:  fmt.Sprintf("Chunks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFileCatalogResponseMultiError(errors)
	}

	return nil
}

// GetFileCatalogResponseMultiError is an error wrapping multiple validation
// errors returned by GetFileCatalogResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFileCatalogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileCatalogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileCatalogResponseMultiError) AllErrors() []error { return m }

// GetFileCatalogResponseValidationError is the validation error returned by
// GetFileCatalogResponse.Validate if the designated constraints aren't met.
type GetFileCatalogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileCatalogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileCatalogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileCatalogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileCatalogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileCatalogResponseValidationError) ErrorName() string {
	return "GetFileCatalogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFileCatalogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileCatalogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileCatalogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileCatalogResponseValidationError{}

// Validate checks the field values on GetFileCatalogResponse_Metadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFileCatalogResponse_Metadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileCatalogResponse_Metadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFileCatalogResponse_MetadataMultiError, or nil if none found.
func (m *GetFileCatalogResponse_Metadata) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileCatalogResponse_Metadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileUid

	// no validation rules for FileId

	// no validation rules for FileType

	// no validation rules for FileSize

	if all {
		switch v := interface{}(m.GetFileUploadTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileCatalogResponse_MetadataValidationError{
					field:  "FileUploadTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileCatalogResponse_MetadataValidationError{
					field:  "FileUploadTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileUploadTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileCatalogResponse_MetadataValidationError{
				field:  "FileUploadTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FileProcessStatus

	if len(errors) > 0 {
		return GetFileCatalogResponse_MetadataMultiError(errors)
	}

	return nil
}

// GetFileCatalogResponse_MetadataMultiError is an error wrapping multiple
// validation errors returned by GetFileCatalogResponse_Metadata.ValidateAll()
// if the designated constraints aren't met.
type GetFileCatalogResponse_MetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileCatalogResponse_MetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileCatalogResponse_MetadataMultiError) AllErrors() []error { return m }

// GetFileCatalogResponse_MetadataValidationError is the validation error
// returned by GetFileCatalogResponse_Metadata.Validate if the designated
// constraints aren't met.
type GetFileCatalogResponse_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileCatalogResponse_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileCatalogResponse_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileCatalogResponse_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileCatalogResponse_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileCatalogResponse_MetadataValidationError) ErrorName() string {
	return "GetFileCatalogResponse_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e GetFileCatalogResponse_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileCatalogResponse_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileCatalogResponse_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileCatalogResponse_MetadataValidationError{}

// Validate checks the field values on GetFileCatalogResponse_Text with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFileCatalogResponse_Text) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileCatalogResponse_Text with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFileCatalogResponse_TextMultiError, or nil if none found.
func (m *GetFileCatalogResponse_Text) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileCatalogResponse_Text) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransformedContent

	// no validation rules for TransformedContentChunkNum

	// no validation rules for TransformedContentTokenNum

	if all {
		switch v := interface{}(m.GetTransformedContentUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileCatalogResponse_TextValidationError{
					field:  "TransformedContentUpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileCatalogResponse_TextValidationError{
					field:  "TransformedContentUpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransformedContentUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileCatalogResponse_TextValidationError{
				field:  "TransformedContentUpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFileCatalogResponse_TextMultiError(errors)
	}

	return nil
}

// GetFileCatalogResponse_TextMultiError is an error wrapping multiple
// validation errors returned by GetFileCatalogResponse_Text.ValidateAll() if
// the designated constraints aren't met.
type GetFileCatalogResponse_TextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileCatalogResponse_TextMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileCatalogResponse_TextMultiError) AllErrors() []error { return m }

// GetFileCatalogResponse_TextValidationError is the validation error returned
// by GetFileCatalogResponse_Text.Validate if the designated constraints
// aren't met.
type GetFileCatalogResponse_TextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileCatalogResponse_TextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileCatalogResponse_TextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileCatalogResponse_TextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileCatalogResponse_TextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileCatalogResponse_TextValidationError) ErrorName() string {
	return "GetFileCatalogResponse_TextValidationError"
}

// Error satisfies the builtin error interface
func (e GetFileCatalogResponse_TextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileCatalogResponse_Text.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileCatalogResponse_TextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileCatalogResponse_TextValidationError{}

// Validate checks the field values on GetFileCatalogResponse_Chunk with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFileCatalogResponse_Chunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileCatalogResponse_Chunk with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFileCatalogResponse_ChunkMultiError, or nil if none found.
func (m *GetFileCatalogResponse_Chunk) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileCatalogResponse_Chunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for Type

	// no validation rules for StartPos

	// no validation rules for EndPos

	// no validation rules for Content

	// no validation rules for TokensNum

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileCatalogResponse_ChunkValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileCatalogResponse_ChunkValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileCatalogResponse_ChunkValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Retrievable

	if len(errors) > 0 {
		return GetFileCatalogResponse_ChunkMultiError(errors)
	}

	return nil
}

// GetFileCatalogResponse_ChunkMultiError is an error wrapping multiple
// validation errors returned by GetFileCatalogResponse_Chunk.ValidateAll() if
// the designated constraints aren't met.
type GetFileCatalogResponse_ChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileCatalogResponse_ChunkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileCatalogResponse_ChunkMultiError) AllErrors() []error { return m }

// GetFileCatalogResponse_ChunkValidationError is the validation error returned
// by GetFileCatalogResponse_Chunk.Validate if the designated constraints
// aren't met.
type GetFileCatalogResponse_ChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileCatalogResponse_ChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileCatalogResponse_ChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileCatalogResponse_ChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileCatalogResponse_ChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileCatalogResponse_ChunkValidationError) ErrorName() string {
	return "GetFileCatalogResponse_ChunkValidationError"
}

// Error satisfies the builtin error interface
func (e GetFileCatalogResponse_ChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileCatalogResponse_Chunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileCatalogResponse_ChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileCatalogResponse_ChunkValidationError{}
