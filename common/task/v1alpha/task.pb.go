// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: common/task/v1alpha/task.proto

package taskv1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Task enumerates the AI task that a model is designed to solve.
type Task int32

const (
	// Unspecified.
	Task_TASK_UNSPECIFIED Task = 0
	// Image Classification - classify images into predefined categories.
	Task_TASK_CLASSIFICATION Task = 1
	// Object Detection - detect and localize multiple objects in images.
	Task_TASK_DETECTION Task = 2
	// Keypoint Detection - detect and localize multiple keypoints of objects in images.
	Task_TASK_KEYPOINT Task = 3
	// OCR (Optical Character Recognition) - detect and recognize text in images.
	Task_TASK_OCR Task = 4
	// Instance Segmentation - detect, localize and delineate multiple objects in images.
	Task_TASK_INSTANCE_SEGMENTATION Task = 5
	// Semantic Segmentation - classify image pixels into predefined categories.
	Task_TASK_SEMANTIC_SEGMENTATION Task = 6
	// Text to Image - generate images from input text prompts.
	Task_TASK_TEXT_TO_IMAGE Task = 7
	// Image to Image - generate an image from another image.
	Task_TASK_IMAGE_TO_IMAGE Task = 11
	// Embedding - generate an embedding (a representation as coordinates) from a multimodal input.
	Task_TASK_EMBEDDING Task = 12
	// Speech Recognition - transcribe the words in an audio input.
	Task_TASK_SPEECH_RECOGNITION Task = 13
	// Conversational Text Generation - generate text as responses to a dialog input.
	Task_TASK_CHAT Task = 14
	// Completion Text Generation - generate text following the input prompt.
	Task_TASK_COMPLETION Task = 15
	// Custom - custom task type for free form input/output.
	Task_TASK_CUSTOM Task = 16
)

// Enum value maps for Task.
var (
	Task_name = map[int32]string{
		0:  "TASK_UNSPECIFIED",
		1:  "TASK_CLASSIFICATION",
		2:  "TASK_DETECTION",
		3:  "TASK_KEYPOINT",
		4:  "TASK_OCR",
		5:  "TASK_INSTANCE_SEGMENTATION",
		6:  "TASK_SEMANTIC_SEGMENTATION",
		7:  "TASK_TEXT_TO_IMAGE",
		11: "TASK_IMAGE_TO_IMAGE",
		12: "TASK_EMBEDDING",
		13: "TASK_SPEECH_RECOGNITION",
		14: "TASK_CHAT",
		15: "TASK_COMPLETION",
		16: "TASK_CUSTOM",
	}
	Task_value = map[string]int32{
		"TASK_UNSPECIFIED":           0,
		"TASK_CLASSIFICATION":        1,
		"TASK_DETECTION":             2,
		"TASK_KEYPOINT":              3,
		"TASK_OCR":                   4,
		"TASK_INSTANCE_SEGMENTATION": 5,
		"TASK_SEMANTIC_SEGMENTATION": 6,
		"TASK_TEXT_TO_IMAGE":         7,
		"TASK_IMAGE_TO_IMAGE":        11,
		"TASK_EMBEDDING":             12,
		"TASK_SPEECH_RECOGNITION":    13,
		"TASK_CHAT":                  14,
		"TASK_COMPLETION":            15,
		"TASK_CUSTOM":                16,
	}
)

func (x Task) Enum() *Task {
	p := new(Task)
	*p = x
	return p
}

func (x Task) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task) Descriptor() protoreflect.EnumDescriptor {
	return file_common_task_v1alpha_task_proto_enumTypes[0].Descriptor()
}

func (Task) Type() protoreflect.EnumType {
	return &file_common_task_v1alpha_task_proto_enumTypes[0]
}

func (x Task) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task.Descriptor instead.
func (Task) EnumDescriptor() ([]byte, []int) {
	return file_common_task_v1alpha_task_proto_rawDescGZIP(), []int{0}
}

var File_common_task_v1alpha_task_proto protoreflect.FileDescriptor

var file_common_task_v1alpha_task_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2a, 0xd3, 0x02, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4f, 0x43, 0x52,
	0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x45, 0x4d, 0x41, 0x4e,
	0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f,
	0x54, 0x4f, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x4d, 0x41, 0x47,
	0x45, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x4d, 0x42, 0x45,
	0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x48, 0x41,
	0x54, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x10, 0x22, 0x04, 0x08, 0x08, 0x10, 0x08, 0x22,
	0x04, 0x08, 0x09, 0x10, 0x09, 0x22, 0x04, 0x08, 0x0a, 0x10, 0x0a, 0x42, 0xd5, 0x01, 0x0a, 0x17,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2d, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x74, 0x61, 0x73, 0x6b,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x43, 0x54, 0x58, 0xaa, 0x02, 0x13,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0xca, 0x02, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5c, 0x54, 0x61, 0x73,
	0x6b, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x1f, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x5c, 0x54, 0x61, 0x73, 0x6b, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x3a, 0x3a, 0x54, 0x61, 0x73, 0x6b, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_task_v1alpha_task_proto_rawDescOnce sync.Once
	file_common_task_v1alpha_task_proto_rawDescData = file_common_task_v1alpha_task_proto_rawDesc
)

func file_common_task_v1alpha_task_proto_rawDescGZIP() []byte {
	file_common_task_v1alpha_task_proto_rawDescOnce.Do(func() {
		file_common_task_v1alpha_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_task_v1alpha_task_proto_rawDescData)
	})
	return file_common_task_v1alpha_task_proto_rawDescData
}

var file_common_task_v1alpha_task_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_common_task_v1alpha_task_proto_goTypes = []interface{}{
	(Task)(0), // 0: common.task.v1alpha.Task
}
var file_common_task_v1alpha_task_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_task_v1alpha_task_proto_init() }
func file_common_task_v1alpha_task_proto_init() {
	if File_common_task_v1alpha_task_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_task_v1alpha_task_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_task_v1alpha_task_proto_goTypes,
		DependencyIndexes: file_common_task_v1alpha_task_proto_depIdxs,
		EnumInfos:         file_common_task_v1alpha_task_proto_enumTypes,
	}.Build()
	File_common_task_v1alpha_task_proto = out.File
	file_common_task_v1alpha_task_proto_rawDesc = nil
	file_common_task_v1alpha_task_proto_goTypes = nil
	file_common_task_v1alpha_task_proto_depIdxs = nil
}
