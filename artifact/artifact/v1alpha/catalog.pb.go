// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: artifact/artifact/v1alpha/catalog.proto

package artifactv1alpha

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Catalog Type. e.g. "persistent" or "ephemeral"
type CatalogType int32

const (
	// UNSPECIFIED
	CatalogType_CATALOG_TYPE_UNSPECIFIED CatalogType = 0
	// PERSISTENT
	CatalogType_CATALOG_TYPE_PERSISTENT CatalogType = 1
	// EPHEMERAL
	CatalogType_CATALOG_TYPE_EPHEMERAL CatalogType = 2
)

// Enum value maps for CatalogType.
var (
	CatalogType_name = map[int32]string{
		0: "CATALOG_TYPE_UNSPECIFIED",
		1: "CATALOG_TYPE_PERSISTENT",
		2: "CATALOG_TYPE_EPHEMERAL",
	}
	CatalogType_value = map[string]int32{
		"CATALOG_TYPE_UNSPECIFIED": 0,
		"CATALOG_TYPE_PERSISTENT":  1,
		"CATALOG_TYPE_EPHEMERAL":   2,
	}
)

func (x CatalogType) Enum() *CatalogType {
	p := new(CatalogType)
	*p = x
	return p
}

func (x CatalogType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CatalogType) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_artifact_v1alpha_catalog_proto_enumTypes[0].Descriptor()
}

func (CatalogType) Type() protoreflect.EnumType {
	return &file_artifact_artifact_v1alpha_catalog_proto_enumTypes[0]
}

func (x CatalogType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CatalogType.Descriptor instead.
func (CatalogType) EnumDescriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_catalog_proto_rawDescGZIP(), []int{0}
}

// Catalog represents a catalog.
type Catalog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The catalog uid (internal UUID).
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// The catalog id (user-provided or system-generated).
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The resource name of the catalog.
	// Format: `namespaces/{namespace}/catalogs/{catalog}`.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The catalog description.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The creation time of the catalog.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The last update time of the catalog.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The owner/namespace of the catalog.
	OwnerName string `protobuf:"bytes,7,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	// The catalog tags.
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// The catalog converting pipelines.
	// Deprecated: Conversion is now handled by AI providers.
	//
	// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/catalog.proto.
	ConvertingPipelines []string `protobuf:"bytes,9,rep,name=converting_pipelines,json=convertingPipelines,proto3" json:"converting_pipelines,omitempty"`
	// The catalog splitting pipelines.
	// Deprecated: Chunking is now handled internally.
	//
	// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/catalog.proto.
	SplittingPipelines []string `protobuf:"bytes,10,rep,name=splitting_pipelines,json=splittingPipelines,proto3" json:"splitting_pipelines,omitempty"`
	// The catalog embedding pipelines.
	// Deprecated: Use embedding_config instead.
	//
	// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/catalog.proto.
	EmbeddingPipelines []string `protobuf:"bytes,11,rep,name=embedding_pipelines,json=embeddingPipelines,proto3" json:"embedding_pipelines,omitempty"`
	// The downstream apps
	DownstreamApps []string `protobuf:"bytes,12,rep,name=downstream_apps,json=downstreamApps,proto3" json:"downstream_apps,omitempty"`
	// The total files in catalog.
	TotalFiles uint32 `protobuf:"varint,13,opt,name=total_files,json=totalFiles,proto3" json:"total_files,omitempty"`
	// The total tokens in catalog.
	TotalTokens uint32 `protobuf:"varint,14,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	// The current used storage in catalog.
	UsedStorage uint64 `protobuf:"varint,15,opt,name=used_storage,json=usedStorage,proto3" json:"used_storage,omitempty"`
	// The catalog summarizing pipelines.
	// Deprecated: Summarization is now handled by AI providers.
	//
	// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/catalog.proto.
	SummarizingPipelines []string `protobuf:"bytes,16,rep,name=summarizing_pipelines,json=summarizingPipelines,proto3" json:"summarizing_pipelines,omitempty"`
	// The embedding configuration for the catalog.
	EmbeddingConfig *Catalog_EmbeddingConfig `protobuf:"bytes,17,opt,name=embedding_config,json=embeddingConfig,proto3" json:"embedding_config,omitempty"`
	// The UID of the active Milvus collection for this catalog.
	// This supports collection versioning for embedding dimension changes.
	ActiveCollectionUid string `protobuf:"bytes,18,opt,name=active_collection_uid,json=activeCollectionUid,proto3" json:"active_collection_uid,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Catalog) Reset() {
	*x = Catalog{}
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Catalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Catalog) ProtoMessage() {}

func (x *Catalog) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Catalog.ProtoReflect.Descriptor instead.
func (*Catalog) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_catalog_proto_rawDescGZIP(), []int{0}
}

func (x *Catalog) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Catalog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Catalog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Catalog) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Catalog) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Catalog) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Catalog) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *Catalog) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/catalog.proto.
func (x *Catalog) GetConvertingPipelines() []string {
	if x != nil {
		return x.ConvertingPipelines
	}
	return nil
}

// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/catalog.proto.
func (x *Catalog) GetSplittingPipelines() []string {
	if x != nil {
		return x.SplittingPipelines
	}
	return nil
}

// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/catalog.proto.
func (x *Catalog) GetEmbeddingPipelines() []string {
	if x != nil {
		return x.EmbeddingPipelines
	}
	return nil
}

func (x *Catalog) GetDownstreamApps() []string {
	if x != nil {
		return x.DownstreamApps
	}
	return nil
}

func (x *Catalog) GetTotalFiles() uint32 {
	if x != nil {
		return x.TotalFiles
	}
	return 0
}

func (x *Catalog) GetTotalTokens() uint32 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *Catalog) GetUsedStorage() uint64 {
	if x != nil {
		return x.UsedStorage
	}
	return 0
}

// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/catalog.proto.
func (x *Catalog) GetSummarizingPipelines() []string {
	if x != nil {
		return x.SummarizingPipelines
	}
	return nil
}

func (x *Catalog) GetEmbeddingConfig() *Catalog_EmbeddingConfig {
	if x != nil {
		return x.EmbeddingConfig
	}
	return nil
}

func (x *Catalog) GetActiveCollectionUid() string {
	if x != nil {
		return x.ActiveCollectionUid
	}
	return ""
}

// CreateCatalogRequest represents a request to create a catalog.
type CreateCatalogRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The catalog's owner(namespaces).
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The catalog id (user-provided or auto-generated).
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The catalog description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The catalog tags.
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// The catalog type. default is PERSISTENT
	Type CatalogType `protobuf:"varint,5,opt,name=type,proto3,enum=artifact.artifact.v1alpha.CatalogType" json:"type,omitempty"`
	// Pipelines used for converting page-based documents (i.e., files with pdf,
	// doc[x] or ppt[x] extension) to Markdown. The strings in the list identify
	// the pipelines and MUST have the format
	// `{namespaceID}/{pipelineID}@{version}`. The pipeline recipes MUST have the
	// following variable and output fields:
	// ```yaml variable
	// variable:
	//
	//	document_input:
	//	  title: document-input
	//	  description: Upload a document (PDF/DOCX/DOC/PPTX/PPT)
	//	  type: file
	//
	// ```
	// The `convert_result` output should be a list of strings, one per page.
	// ```yaml output
	// output:
	//
	//	convert_result:
	//	  title: convert-result
	//	  value: ${merge-markdown-refinement.output.results[0]}
	//
	// ```
	// Other variable and output fields will be ignored.
	//
	// The pipelines will be executed in order until one produces a successful,
	// non-empty result.
	//
	// If no pipelines are provided, a default pipeline will be used. For
	// non-document catalog files, the conversion pipeline is deterministic (such
	// files are typically trivial to convert and don't require a dedicated
	// pipeline to improve the conversion performance).
	ConvertingPipelines []string `protobuf:"bytes,6,rep,name=converting_pipelines,json=convertingPipelines,proto3" json:"converting_pipelines,omitempty"`
	// System ID to use for this catalog.
	// References a system configuration in the system table that defines how the knowledge base
	// will be created based on the system's RAG configurations including:
	// - AI model family (e.g., "openai", "gemini")
	// - Embedding vector dimensionality (e.g., 1536 for OpenAI, 3072 for Gemini)
	// - Chunking method
	// - Other RAG-related settings
	//
	// Available systems: "openai", "gemini", or custom systems defined in the system table.
	// If not specified, defaults to "openai" system.
	SystemId      *string `protobuf:"bytes,7,opt,name=system_id,json=systemId,proto3,oneof" json:"system_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCatalogRequest) Reset() {
	*x = CreateCatalogRequest{}
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCatalogRequest) ProtoMessage() {}

func (x *CreateCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCatalogRequest.ProtoReflect.Descriptor instead.
func (*CreateCatalogRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_catalog_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCatalogRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *CreateCatalogRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateCatalogRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCatalogRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateCatalogRequest) GetType() CatalogType {
	if x != nil {
		return x.Type
	}
	return CatalogType_CATALOG_TYPE_UNSPECIFIED
}

func (x *CreateCatalogRequest) GetConvertingPipelines() []string {
	if x != nil {
		return x.ConvertingPipelines
	}
	return nil
}

func (x *CreateCatalogRequest) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

// CreateCatalogResponse represents a response for creating a catalog.
type CreateCatalogResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The created catalog.
	Catalog       *Catalog `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCatalogResponse) Reset() {
	*x = CreateCatalogResponse{}
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCatalogResponse) ProtoMessage() {}

func (x *CreateCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCatalogResponse.ProtoReflect.Descriptor instead.
func (*CreateCatalogResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_catalog_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCatalogResponse) GetCatalog() *Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

// GetCatalogRequest represents a request to get a catalog.
type GetCatalogRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace ID.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// Catalog ID.
	CatalogId     string `protobuf:"bytes,2,opt,name=catalog_id,json=catalogId,proto3" json:"catalog_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCatalogRequest) Reset() {
	*x = GetCatalogRequest{}
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCatalogRequest) ProtoMessage() {}

func (x *GetCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCatalogRequest.ProtoReflect.Descriptor instead.
func (*GetCatalogRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_catalog_proto_rawDescGZIP(), []int{3}
}

func (x *GetCatalogRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *GetCatalogRequest) GetCatalogId() string {
	if x != nil {
		return x.CatalogId
	}
	return ""
}

// GetCatalogResponse represents a response for getting a catalog.
type GetCatalogResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The catalog resource.
	Catalog       *Catalog `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCatalogResponse) Reset() {
	*x = GetCatalogResponse{}
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCatalogResponse) ProtoMessage() {}

func (x *GetCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCatalogResponse.ProtoReflect.Descriptor instead.
func (*GetCatalogResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_catalog_proto_rawDescGZIP(), []int{4}
}

func (x *GetCatalogResponse) GetCatalog() *Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

// Request message for ListCatalogs(not include the ephemeral catalogs)
type ListCatalogsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User ID for which to list the catalogs
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The maximum number of catalogs to return. If this parameter is unspecified,
	// at most 10 catalogs will be returned. The cap value for this parameter
	// is 100 (i.e. any value above that will be coerced to 100).
	PageSize *int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token.
	PageToken *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
	// - `id="<catalog_id>"` or `uid="<uuid>"` - Filter by specific catalog ID/UID
	// - `q="<text>"` - Fuzzy search on catalog ID and description
	//
	// **Examples**:
	// - Filter by ID: `id="my-catalog"`
	// - Search catalogs: `q="my-catalog"`
	Filter        *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCatalogsRequest) Reset() {
	*x = ListCatalogsRequest{}
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCatalogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCatalogsRequest) ProtoMessage() {}

func (x *ListCatalogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCatalogsRequest.ProtoReflect.Descriptor instead.
func (*ListCatalogsRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_catalog_proto_rawDescGZIP(), []int{5}
}

func (x *ListCatalogsRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *ListCatalogsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListCatalogsRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListCatalogsRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

// GetCatalogsResponse represents a response for getting all catalogs from users.
type ListCatalogsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The catalogs container.
	Catalogs []*Catalog `protobuf:"bytes,1,rep,name=catalogs,proto3" json:"catalogs,omitempty"`
	// Next page token.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of catalogs.
	TotalSize     int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCatalogsResponse) Reset() {
	*x = ListCatalogsResponse{}
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCatalogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCatalogsResponse) ProtoMessage() {}

func (x *ListCatalogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCatalogsResponse.ProtoReflect.Descriptor instead.
func (*ListCatalogsResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_catalog_proto_rawDescGZIP(), []int{6}
}

func (x *ListCatalogsResponse) GetCatalogs() []*Catalog {
	if x != nil {
		return x.Catalogs
	}
	return nil
}

func (x *ListCatalogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListCatalogsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// UpdateCatalogRequest represents a request to update a catalog.
type UpdateCatalogRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace ID.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// Catalog ID.
	CatalogId string `protobuf:"bytes,2,opt,name=catalog_id,json=catalogId,proto3" json:"catalog_id,omitempty"`
	// The catalog fields that will replace the existing ones.
	Catalog *Catalog `protobuf:"bytes,3,opt,name=catalog,proto3" json:"catalog,omitempty"`
	// The update mask specifies the subset of fields that should be modified.
	//
	// For more information about this field, see
	// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#field-mask.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCatalogRequest) Reset() {
	*x = UpdateCatalogRequest{}
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCatalogRequest) ProtoMessage() {}

func (x *UpdateCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCatalogRequest.ProtoReflect.Descriptor instead.
func (*UpdateCatalogRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_catalog_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCatalogRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *UpdateCatalogRequest) GetCatalogId() string {
	if x != nil {
		return x.CatalogId
	}
	return ""
}

func (x *UpdateCatalogRequest) GetCatalog() *Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

func (x *UpdateCatalogRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdateCatalogResponse represents a response for updating a catalog.
type UpdateCatalogResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The updated catalog.
	Catalog       *Catalog `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCatalogResponse) Reset() {
	*x = UpdateCatalogResponse{}
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCatalogResponse) ProtoMessage() {}

func (x *UpdateCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCatalogResponse.ProtoReflect.Descriptor instead.
func (*UpdateCatalogResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_catalog_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCatalogResponse) GetCatalog() *Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

// DeleteCatalogRequest represents a request to delete a catalog.
type DeleteCatalogRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The owner's id. i.e. namespace.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The catalog id.
	CatalogId     string `protobuf:"bytes,2,opt,name=catalog_id,json=catalogId,proto3" json:"catalog_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCatalogRequest) Reset() {
	*x = DeleteCatalogRequest{}
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCatalogRequest) ProtoMessage() {}

func (x *DeleteCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCatalogRequest.ProtoReflect.Descriptor instead.
func (*DeleteCatalogRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_catalog_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteCatalogRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *DeleteCatalogRequest) GetCatalogId() string {
	if x != nil {
		return x.CatalogId
	}
	return ""
}

// DeleteCatalogResponse represents a response for deleting a catalog.
type DeleteCatalogResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The catalog identifier.
	Catalog       *Catalog `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCatalogResponse) Reset() {
	*x = DeleteCatalogResponse{}
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCatalogResponse) ProtoMessage() {}

func (x *DeleteCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCatalogResponse.ProtoReflect.Descriptor instead.
func (*DeleteCatalogResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_catalog_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteCatalogResponse) GetCatalog() *Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

// EmbeddingConfig defines the embedding configuration for a catalog
type Catalog_EmbeddingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The AI model family used for embeddings (e.g., "gemini", "openai")
	ModelFamily string `protobuf:"bytes,1,opt,name=model_family,json=modelFamily,proto3" json:"model_family,omitempty"`
	// The dimensionality of the embedding vectors
	Dimensionality uint32 `protobuf:"varint,2,opt,name=dimensionality,proto3" json:"dimensionality,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Catalog_EmbeddingConfig) Reset() {
	*x = Catalog_EmbeddingConfig{}
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Catalog_EmbeddingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Catalog_EmbeddingConfig) ProtoMessage() {}

func (x *Catalog_EmbeddingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_catalog_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Catalog_EmbeddingConfig.ProtoReflect.Descriptor instead.
func (*Catalog_EmbeddingConfig) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_catalog_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Catalog_EmbeddingConfig) GetModelFamily() string {
	if x != nil {
		return x.ModelFamily
	}
	return ""
}

func (x *Catalog_EmbeddingConfig) GetDimensionality() uint32 {
	if x != nil {
		return x.Dimensionality
	}
	return 0
}

var File_artifact_artifact_v1alpha_catalog_proto protoreflect.FileDescriptor

const file_artifact_artifact_v1alpha_catalog_proto_rawDesc = "" +
	"\n" +
	"'artifact/artifact/v1alpha/catalog.proto\x12\x19artifact.artifact.v1alpha\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xeb\a\n" +
	"\aCatalog\x12\x15\n" +
	"\x03uid\x18\x01 \x01(\tB\x03\xe0A\x03R\x03uid\x12\x13\n" +
	"\x02id\x18\x02 \x01(\tB\x03\xe0A\x05R\x02id\x12\x17\n" +
	"\x04name\x18\x03 \x01(\tB\x03\xe0A\x03R\x04name\x12%\n" +
	"\vdescription\x18\x04 \x01(\tB\x03\xe0A\x01R\vdescription\x12@\n" +
	"\vcreate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\x03\xe0A\x03R\n" +
	"createTime\x12@\n" +
	"\vupdate_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\x03\xe0A\x03R\n" +
	"updateTime\x12\"\n" +
	"\n" +
	"owner_name\x18\a \x01(\tB\x03\xe0A\x03R\townerName\x12\x17\n" +
	"\x04tags\x18\b \x03(\tB\x03\xe0A\x01R\x04tags\x128\n" +
	"\x14converting_pipelines\x18\t \x03(\tB\x05\xe0A\x01\x18\x01R\x13convertingPipelines\x126\n" +
	"\x13splitting_pipelines\x18\n" +
	" \x03(\tB\x05\xe0A\x01\x18\x01R\x12splittingPipelines\x126\n" +
	"\x13embedding_pipelines\x18\v \x03(\tB\x05\xe0A\x01\x18\x01R\x12embeddingPipelines\x12,\n" +
	"\x0fdownstream_apps\x18\f \x03(\tB\x03\xe0A\x03R\x0edownstreamApps\x12$\n" +
	"\vtotal_files\x18\r \x01(\rB\x03\xe0A\x03R\n" +
	"totalFiles\x12&\n" +
	"\ftotal_tokens\x18\x0e \x01(\rB\x03\xe0A\x03R\vtotalTokens\x12&\n" +
	"\fused_storage\x18\x0f \x01(\x04B\x03\xe0A\x03R\vusedStorage\x12:\n" +
	"\x15summarizing_pipelines\x18\x10 \x03(\tB\x05\xe0A\x01\x18\x01R\x14summarizingPipelines\x12b\n" +
	"\x10embedding_config\x18\x11 \x01(\v22.artifact.artifact.v1alpha.Catalog.EmbeddingConfigB\x03\xe0A\x01R\x0fembeddingConfig\x127\n" +
	"\x15active_collection_uid\x18\x12 \x01(\tB\x03\xe0A\x03R\x13activeCollectionUid\x1a\\\n" +
	"\x0fEmbeddingConfig\x12!\n" +
	"\fmodel_family\x18\x01 \x01(\tR\vmodelFamily\x12&\n" +
	"\x0edimensionality\x18\x02 \x01(\rR\x0edimensionality:.\xeaA+\x12)namespaces/{namespace}/catalogs/{catalog}\"\xc1\x02\n" +
	"\x14CreateCatalogRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12\x13\n" +
	"\x02id\x18\x02 \x01(\tB\x03\xe0A\x01R\x02id\x12%\n" +
	"\vdescription\x18\x03 \x01(\tB\x03\xe0A\x01R\vdescription\x12\x17\n" +
	"\x04tags\x18\x04 \x03(\tB\x03\xe0A\x01R\x04tags\x12?\n" +
	"\x04type\x18\x05 \x01(\x0e2&.artifact.artifact.v1alpha.CatalogTypeB\x03\xe0A\x01R\x04type\x126\n" +
	"\x14converting_pipelines\x18\x06 \x03(\tB\x03\xe0A\x01R\x13convertingPipelines\x12%\n" +
	"\tsystem_id\x18\a \x01(\tB\x03\xe0A\x01H\x00R\bsystemId\x88\x01\x01B\f\n" +
	"\n" +
	"_system_id\"Z\n" +
	"\x15CreateCatalogResponse\x12A\n" +
	"\acatalog\x18\x01 \x01(\v2\".artifact.artifact.v1alpha.CatalogB\x03\xe0A\x03R\acatalog\"_\n" +
	"\x11GetCatalogRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12\"\n" +
	"\n" +
	"catalog_id\x18\x02 \x01(\tB\x03\xe0A\x02R\tcatalogId\"W\n" +
	"\x12GetCatalogResponse\x12A\n" +
	"\acatalog\x18\x01 \x01(\v2\".artifact.artifact.v1alpha.CatalogB\x03\xe0A\x03R\acatalog\"\xd7\x01\n" +
	"\x13ListCatalogsRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12%\n" +
	"\tpage_size\x18\x02 \x01(\x05B\x03\xe0A\x01H\x00R\bpageSize\x88\x01\x01\x12'\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\x03\xe0A\x01H\x01R\tpageToken\x88\x01\x01\x12 \n" +
	"\x06filter\x18\x04 \x01(\tB\x03\xe0A\x01H\x02R\x06filter\x88\x01\x01B\f\n" +
	"\n" +
	"_page_sizeB\r\n" +
	"\v_page_tokenB\t\n" +
	"\a_filter\"\xac\x01\n" +
	"\x14ListCatalogsResponse\x12C\n" +
	"\bcatalogs\x18\x01 \x03(\v2\".artifact.artifact.v1alpha.CatalogB\x03\xe0A\x03R\bcatalogs\x12+\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tB\x03\xe0A\x03R\rnextPageToken\x12\"\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05B\x03\xe0A\x03R\ttotalSize\"\xe7\x01\n" +
	"\x14UpdateCatalogRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12\"\n" +
	"\n" +
	"catalog_id\x18\x02 \x01(\tB\x03\xe0A\x02R\tcatalogId\x12A\n" +
	"\acatalog\x18\x03 \x01(\v2\".artifact.artifact.v1alpha.CatalogB\x03\xe0A\x02R\acatalog\x12@\n" +
	"\vupdate_mask\x18\x04 \x01(\v2\x1a.google.protobuf.FieldMaskB\x03\xe0A\x02R\n" +
	"updateMask\"Z\n" +
	"\x15UpdateCatalogResponse\x12A\n" +
	"\acatalog\x18\x01 \x01(\v2\".artifact.artifact.v1alpha.CatalogB\x03\xe0A\x03R\acatalog\"b\n" +
	"\x14DeleteCatalogRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12\"\n" +
	"\n" +
	"catalog_id\x18\x02 \x01(\tB\x03\xe0A\x02R\tcatalogId\"Z\n" +
	"\x15DeleteCatalogResponse\x12A\n" +
	"\acatalog\x18\x01 \x01(\v2\".artifact.artifact.v1alpha.CatalogB\x03\xe0A\x03R\acatalog*d\n" +
	"\vCatalogType\x12\x1c\n" +
	"\x18CATALOG_TYPE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17CATALOG_TYPE_PERSISTENT\x10\x01\x12\x1a\n" +
	"\x16CATALOG_TYPE_EPHEMERAL\x10\x02B\x80\x02\n" +
	"\x1dcom.artifact.artifact.v1alphaB\fCatalogProtoP\x01ZKgithub.com/instill-ai/protogen-go/artifact/artifact/v1alpha;artifactv1alpha\xa2\x02\x03AAX\xaa\x02\x19Artifact.Artifact.V1alpha\xca\x02\x19Artifact\\Artifact\\V1alpha\xe2\x02%Artifact\\Artifact\\V1alpha\\GPBMetadata\xea\x02\x1bArtifact::Artifact::V1alphab\x06proto3"

var (
	file_artifact_artifact_v1alpha_catalog_proto_rawDescOnce sync.Once
	file_artifact_artifact_v1alpha_catalog_proto_rawDescData []byte
)

func file_artifact_artifact_v1alpha_catalog_proto_rawDescGZIP() []byte {
	file_artifact_artifact_v1alpha_catalog_proto_rawDescOnce.Do(func() {
		file_artifact_artifact_v1alpha_catalog_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_artifact_artifact_v1alpha_catalog_proto_rawDesc), len(file_artifact_artifact_v1alpha_catalog_proto_rawDesc)))
	})
	return file_artifact_artifact_v1alpha_catalog_proto_rawDescData
}

var file_artifact_artifact_v1alpha_catalog_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_artifact_artifact_v1alpha_catalog_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_artifact_artifact_v1alpha_catalog_proto_goTypes = []any{
	(CatalogType)(0),                // 0: artifact.artifact.v1alpha.CatalogType
	(*Catalog)(nil),                 // 1: artifact.artifact.v1alpha.Catalog
	(*CreateCatalogRequest)(nil),    // 2: artifact.artifact.v1alpha.CreateCatalogRequest
	(*CreateCatalogResponse)(nil),   // 3: artifact.artifact.v1alpha.CreateCatalogResponse
	(*GetCatalogRequest)(nil),       // 4: artifact.artifact.v1alpha.GetCatalogRequest
	(*GetCatalogResponse)(nil),      // 5: artifact.artifact.v1alpha.GetCatalogResponse
	(*ListCatalogsRequest)(nil),     // 6: artifact.artifact.v1alpha.ListCatalogsRequest
	(*ListCatalogsResponse)(nil),    // 7: artifact.artifact.v1alpha.ListCatalogsResponse
	(*UpdateCatalogRequest)(nil),    // 8: artifact.artifact.v1alpha.UpdateCatalogRequest
	(*UpdateCatalogResponse)(nil),   // 9: artifact.artifact.v1alpha.UpdateCatalogResponse
	(*DeleteCatalogRequest)(nil),    // 10: artifact.artifact.v1alpha.DeleteCatalogRequest
	(*DeleteCatalogResponse)(nil),   // 11: artifact.artifact.v1alpha.DeleteCatalogResponse
	(*Catalog_EmbeddingConfig)(nil), // 12: artifact.artifact.v1alpha.Catalog.EmbeddingConfig
	(*timestamppb.Timestamp)(nil),   // 13: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),   // 14: google.protobuf.FieldMask
}
var file_artifact_artifact_v1alpha_catalog_proto_depIdxs = []int32{
	13, // 0: artifact.artifact.v1alpha.Catalog.create_time:type_name -> google.protobuf.Timestamp
	13, // 1: artifact.artifact.v1alpha.Catalog.update_time:type_name -> google.protobuf.Timestamp
	12, // 2: artifact.artifact.v1alpha.Catalog.embedding_config:type_name -> artifact.artifact.v1alpha.Catalog.EmbeddingConfig
	0,  // 3: artifact.artifact.v1alpha.CreateCatalogRequest.type:type_name -> artifact.artifact.v1alpha.CatalogType
	1,  // 4: artifact.artifact.v1alpha.CreateCatalogResponse.catalog:type_name -> artifact.artifact.v1alpha.Catalog
	1,  // 5: artifact.artifact.v1alpha.GetCatalogResponse.catalog:type_name -> artifact.artifact.v1alpha.Catalog
	1,  // 6: artifact.artifact.v1alpha.ListCatalogsResponse.catalogs:type_name -> artifact.artifact.v1alpha.Catalog
	1,  // 7: artifact.artifact.v1alpha.UpdateCatalogRequest.catalog:type_name -> artifact.artifact.v1alpha.Catalog
	14, // 8: artifact.artifact.v1alpha.UpdateCatalogRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 9: artifact.artifact.v1alpha.UpdateCatalogResponse.catalog:type_name -> artifact.artifact.v1alpha.Catalog
	1,  // 10: artifact.artifact.v1alpha.DeleteCatalogResponse.catalog:type_name -> artifact.artifact.v1alpha.Catalog
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_artifact_artifact_v1alpha_catalog_proto_init() }
func file_artifact_artifact_v1alpha_catalog_proto_init() {
	if File_artifact_artifact_v1alpha_catalog_proto != nil {
		return
	}
	file_artifact_artifact_v1alpha_catalog_proto_msgTypes[1].OneofWrappers = []any{}
	file_artifact_artifact_v1alpha_catalog_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_artifact_artifact_v1alpha_catalog_proto_rawDesc), len(file_artifact_artifact_v1alpha_catalog_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_artifact_artifact_v1alpha_catalog_proto_goTypes,
		DependencyIndexes: file_artifact_artifact_v1alpha_catalog_proto_depIdxs,
		EnumInfos:         file_artifact_artifact_v1alpha_catalog_proto_enumTypes,
		MessageInfos:      file_artifact_artifact_v1alpha_catalog_proto_msgTypes,
	}.Build()
	File_artifact_artifact_v1alpha_catalog_proto = out.File
	file_artifact_artifact_v1alpha_catalog_proto_goTypes = nil
	file_artifact_artifact_v1alpha_catalog_proto_depIdxs = nil
}
