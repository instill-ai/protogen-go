// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: artifact/artifact/v1alpha/update.proto

package artifactv1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// KnowledgeBaseUpdateStatus represents the various states of a Knowledge Base update lifecycle
type KnowledgeBaseUpdateStatus int32

const (
	// KNOWLEDGE_BASE_UPDATE_STATUS_UNSPECIFIED - Invalid/unknown state
	KnowledgeBaseUpdateStatus_KNOWLEDGE_BASE_UPDATE_STATUS_UNSPECIFIED KnowledgeBaseUpdateStatus = 0
	// KNOWLEDGE_BASE_UPDATE_STATUS_NONE - KB has never been updated (default state for new KBs)
	KnowledgeBaseUpdateStatus_KNOWLEDGE_BASE_UPDATE_STATUS_NONE KnowledgeBaseUpdateStatus = 1
	// KNOWLEDGE_BASE_UPDATE_STATUS_UPDATING - Phase 1-2: Preparing and reprocessing
	// The staging KB is being created and populated by reprocessing all files with new configuration
	KnowledgeBaseUpdateStatus_KNOWLEDGE_BASE_UPDATE_STATUS_UPDATING KnowledgeBaseUpdateStatus = 2
	// KNOWLEDGE_BASE_UPDATE_STATUS_SYNCING - Phase 3: Synchronization
	// Locking KB and waiting for all dual-processed files to complete
	KnowledgeBaseUpdateStatus_KNOWLEDGE_BASE_UPDATE_STATUS_SYNCING KnowledgeBaseUpdateStatus = 3
	// KNOWLEDGE_BASE_UPDATE_STATUS_VALIDATING - Phase 4: Validation
	// Validating data integrity (file counts, embeddings, chunks)
	KnowledgeBaseUpdateStatus_KNOWLEDGE_BASE_UPDATE_STATUS_VALIDATING KnowledgeBaseUpdateStatus = 4
	// KNOWLEDGE_BASE_UPDATE_STATUS_SWAPPING - Phase 5: Atomic Swap
	// Performing atomic pointer swap of collections and metadata
	KnowledgeBaseUpdateStatus_KNOWLEDGE_BASE_UPDATE_STATUS_SWAPPING KnowledgeBaseUpdateStatus = 5
	// KNOWLEDGE_BASE_UPDATE_STATUS_COMPLETED - Phase 6: Cleanup/Retention
	// Update completed successfully, rollback KB retained for configured period
	KnowledgeBaseUpdateStatus_KNOWLEDGE_BASE_UPDATE_STATUS_COMPLETED KnowledgeBaseUpdateStatus = 6
	// KNOWLEDGE_BASE_UPDATE_STATUS_FAILED - Update failed at some point
	// Production KB remains unchanged and can be used normally
	KnowledgeBaseUpdateStatus_KNOWLEDGE_BASE_UPDATE_STATUS_FAILED KnowledgeBaseUpdateStatus = 7
	// KNOWLEDGE_BASE_UPDATE_STATUS_ROLLED_BACK - Update was rolled back
	// Previous version has been restored from the rollback KB
	KnowledgeBaseUpdateStatus_KNOWLEDGE_BASE_UPDATE_STATUS_ROLLED_BACK KnowledgeBaseUpdateStatus = 8
	// KNOWLEDGE_BASE_UPDATE_STATUS_ABORTED - Update was manually aborted
	// Production KB remains unchanged and can be updated again
	KnowledgeBaseUpdateStatus_KNOWLEDGE_BASE_UPDATE_STATUS_ABORTED KnowledgeBaseUpdateStatus = 9
)

// Enum value maps for KnowledgeBaseUpdateStatus.
var (
	KnowledgeBaseUpdateStatus_name = map[int32]string{
		0: "KNOWLEDGE_BASE_UPDATE_STATUS_UNSPECIFIED",
		1: "KNOWLEDGE_BASE_UPDATE_STATUS_NONE",
		2: "KNOWLEDGE_BASE_UPDATE_STATUS_UPDATING",
		3: "KNOWLEDGE_BASE_UPDATE_STATUS_SYNCING",
		4: "KNOWLEDGE_BASE_UPDATE_STATUS_VALIDATING",
		5: "KNOWLEDGE_BASE_UPDATE_STATUS_SWAPPING",
		6: "KNOWLEDGE_BASE_UPDATE_STATUS_COMPLETED",
		7: "KNOWLEDGE_BASE_UPDATE_STATUS_FAILED",
		8: "KNOWLEDGE_BASE_UPDATE_STATUS_ROLLED_BACK",
		9: "KNOWLEDGE_BASE_UPDATE_STATUS_ABORTED",
	}
	KnowledgeBaseUpdateStatus_value = map[string]int32{
		"KNOWLEDGE_BASE_UPDATE_STATUS_UNSPECIFIED": 0,
		"KNOWLEDGE_BASE_UPDATE_STATUS_NONE":        1,
		"KNOWLEDGE_BASE_UPDATE_STATUS_UPDATING":    2,
		"KNOWLEDGE_BASE_UPDATE_STATUS_SYNCING":     3,
		"KNOWLEDGE_BASE_UPDATE_STATUS_VALIDATING":  4,
		"KNOWLEDGE_BASE_UPDATE_STATUS_SWAPPING":    5,
		"KNOWLEDGE_BASE_UPDATE_STATUS_COMPLETED":   6,
		"KNOWLEDGE_BASE_UPDATE_STATUS_FAILED":      7,
		"KNOWLEDGE_BASE_UPDATE_STATUS_ROLLED_BACK": 8,
		"KNOWLEDGE_BASE_UPDATE_STATUS_ABORTED":     9,
	}
)

func (x KnowledgeBaseUpdateStatus) Enum() *KnowledgeBaseUpdateStatus {
	p := new(KnowledgeBaseUpdateStatus)
	*p = x
	return p
}

func (x KnowledgeBaseUpdateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KnowledgeBaseUpdateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_artifact_v1alpha_update_proto_enumTypes[0].Descriptor()
}

func (KnowledgeBaseUpdateStatus) Type() protoreflect.EnumType {
	return &file_artifact_artifact_v1alpha_update_proto_enumTypes[0]
}

func (x KnowledgeBaseUpdateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KnowledgeBaseUpdateStatus.Descriptor instead.
func (KnowledgeBaseUpdateStatus) EnumDescriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{0}
}

// TimeUnit specifies the unit of time for retention duration
type SetRollbackRetentionAdminRequest_TimeUnit int32

const (
	// Unspecified
	SetRollbackRetentionAdminRequest_TIME_UNIT_UNSPECIFIED SetRollbackRetentionAdminRequest_TimeUnit = 0
	// Seconds
	SetRollbackRetentionAdminRequest_TIME_UNIT_SECOND SetRollbackRetentionAdminRequest_TimeUnit = 1
	// Minutes
	SetRollbackRetentionAdminRequest_TIME_UNIT_MINUTE SetRollbackRetentionAdminRequest_TimeUnit = 2
	// Hours
	SetRollbackRetentionAdminRequest_TIME_UNIT_HOUR SetRollbackRetentionAdminRequest_TimeUnit = 3
	// Days
	SetRollbackRetentionAdminRequest_TIME_UNIT_DAY SetRollbackRetentionAdminRequest_TimeUnit = 4
)

// Enum value maps for SetRollbackRetentionAdminRequest_TimeUnit.
var (
	SetRollbackRetentionAdminRequest_TimeUnit_name = map[int32]string{
		0: "TIME_UNIT_UNSPECIFIED",
		1: "TIME_UNIT_SECOND",
		2: "TIME_UNIT_MINUTE",
		3: "TIME_UNIT_HOUR",
		4: "TIME_UNIT_DAY",
	}
	SetRollbackRetentionAdminRequest_TimeUnit_value = map[string]int32{
		"TIME_UNIT_UNSPECIFIED": 0,
		"TIME_UNIT_SECOND":      1,
		"TIME_UNIT_MINUTE":      2,
		"TIME_UNIT_HOUR":        3,
		"TIME_UNIT_DAY":         4,
	}
)

func (x SetRollbackRetentionAdminRequest_TimeUnit) Enum() *SetRollbackRetentionAdminRequest_TimeUnit {
	p := new(SetRollbackRetentionAdminRequest_TimeUnit)
	*p = x
	return p
}

func (x SetRollbackRetentionAdminRequest_TimeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetRollbackRetentionAdminRequest_TimeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_artifact_v1alpha_update_proto_enumTypes[1].Descriptor()
}

func (SetRollbackRetentionAdminRequest_TimeUnit) Type() protoreflect.EnumType {
	return &file_artifact_artifact_v1alpha_update_proto_enumTypes[1]
}

func (x SetRollbackRetentionAdminRequest_TimeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetRollbackRetentionAdminRequest_TimeUnit.Descriptor instead.
func (SetRollbackRetentionAdminRequest_TimeUnit) EnumDescriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{5, 0}
}

// KnowledgeBaseUpdateDetails provides detailed information about a knowledge base update
type KnowledgeBaseUpdateDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UID of the catalog
	CatalogUid string `protobuf:"bytes,1,opt,name=catalog_uid,json=catalogUid,proto3" json:"catalog_uid,omitempty"`
	// Status of the catalog update
	Status KnowledgeBaseUpdateStatus `protobuf:"varint,2,opt,name=status,proto3,enum=artifact.artifact.v1alpha.KnowledgeBaseUpdateStatus" json:"status,omitempty"`
	// Workflow ID of the catalog update
	WorkflowId string `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Started at time of the catalog update
	StartedAt string `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Completed at time of the catalog update
	CompletedAt string `protobuf:"bytes,5,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// Number of files processed
	FilesProcessed int32 `protobuf:"varint,6,opt,name=files_processed,json=filesProcessed,proto3" json:"files_processed,omitempty"`
	// Total number of files to process
	TotalFiles int32 `protobuf:"varint,7,opt,name=total_files,json=totalFiles,proto3" json:"total_files,omitempty"`
	// Error message explaining why the update failed
	// Populated ONLY when status is KNOWLEDGE_BASE_UPDATE_STATUS_FAILED
	// Empty for all other statuses (NONE, UPDATING, SYNCING, VALIDATING, SWAPPING, COMPLETED, ROLLED_BACK, ABORTED)
	ErrorMessage string `protobuf:"bytes,8,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Current system ID (e.g., "openai", "gemini")
	// The system configuration currently active in the production KB
	// - For UPDATING: The system being updated to (from staging KB - will become current after swap)
	// - For COMPLETED/FAILED/ROLLED_BACK/ABORTED/NONE: The current production system ID
	// Always reflects the KB's current state
	CurrentSystemId string `protobuf:"bytes,9,opt,name=current_system_id,json=currentSystemId,proto3" json:"current_system_id,omitempty"`
	// Previous system ID before the update (e.g., "openai", "gemini")
	// Captured at update start for historical audit trail
	// - For UPDATING: The system before update started
	// - For COMPLETED: The system before successful update (what was replaced)
	// - For FAILED/ABORTED: The system before failed attempt (same as current, since update didn't complete)
	// - For ROLLED_BACK: The system that was rolled back FROM (before rollback)
	// - For NONE: Empty (never been updated)
	PreviousSystemId string `protobuf:"bytes,10,opt,name=previous_system_id,json=previousSystemId,proto3" json:"previous_system_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *KnowledgeBaseUpdateDetails) Reset() {
	*x = KnowledgeBaseUpdateDetails{}
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseUpdateDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseUpdateDetails) ProtoMessage() {}

func (x *KnowledgeBaseUpdateDetails) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseUpdateDetails.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseUpdateDetails) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{0}
}

func (x *KnowledgeBaseUpdateDetails) GetCatalogUid() string {
	if x != nil {
		return x.CatalogUid
	}
	return ""
}

func (x *KnowledgeBaseUpdateDetails) GetStatus() KnowledgeBaseUpdateStatus {
	if x != nil {
		return x.Status
	}
	return KnowledgeBaseUpdateStatus_KNOWLEDGE_BASE_UPDATE_STATUS_UNSPECIFIED
}

func (x *KnowledgeBaseUpdateDetails) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *KnowledgeBaseUpdateDetails) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *KnowledgeBaseUpdateDetails) GetCompletedAt() string {
	if x != nil {
		return x.CompletedAt
	}
	return ""
}

func (x *KnowledgeBaseUpdateDetails) GetFilesProcessed() int32 {
	if x != nil {
		return x.FilesProcessed
	}
	return 0
}

func (x *KnowledgeBaseUpdateDetails) GetTotalFiles() int32 {
	if x != nil {
		return x.TotalFiles
	}
	return 0
}

func (x *KnowledgeBaseUpdateDetails) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *KnowledgeBaseUpdateDetails) GetCurrentSystemId() string {
	if x != nil {
		return x.CurrentSystemId
	}
	return ""
}

func (x *KnowledgeBaseUpdateDetails) GetPreviousSystemId() string {
	if x != nil {
		return x.PreviousSystemId
	}
	return ""
}

// RollbackAdminRequest (admin only)
type RollbackAdminRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: users/{user}/catalogs/{catalog}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollbackAdminRequest) Reset() {
	*x = RollbackAdminRequest{}
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackAdminRequest) ProtoMessage() {}

func (x *RollbackAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackAdminRequest.ProtoReflect.Descriptor instead.
func (*RollbackAdminRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{1}
}

func (x *RollbackAdminRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// RollbackAdminResponse (admin only)
type RollbackAdminResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The rolled-back catalog
	Catalog *Catalog `protobuf:"bytes,1,opt,name=catalog,proto3" json:"catalog,omitempty"`
	// Status message
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RollbackAdminResponse) Reset() {
	*x = RollbackAdminResponse{}
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RollbackAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollbackAdminResponse) ProtoMessage() {}

func (x *RollbackAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollbackAdminResponse.ProtoReflect.Descriptor instead.
func (*RollbackAdminResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{2}
}

func (x *RollbackAdminResponse) GetCatalog() *Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

func (x *RollbackAdminResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// PurgeRollbackAdminRequest (admin only)
type PurgeRollbackAdminRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: users/{user}/catalogs/{catalog}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PurgeRollbackAdminRequest) Reset() {
	*x = PurgeRollbackAdminRequest{}
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurgeRollbackAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeRollbackAdminRequest) ProtoMessage() {}

func (x *PurgeRollbackAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeRollbackAdminRequest.ProtoReflect.Descriptor instead.
func (*PurgeRollbackAdminRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{3}
}

func (x *PurgeRollbackAdminRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// PurgeRollbackAdminResponse (admin only)
type PurgeRollbackAdminResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the purge was successful
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// UID of the purged catalog
	PurgedCatalogUid string `protobuf:"bytes,2,opt,name=purged_catalog_uid,json=purgedCatalogUid,proto3" json:"purged_catalog_uid,omitempty"`
	// Number of files deleted
	DeletedFiles int32 `protobuf:"varint,3,opt,name=deleted_files,json=deletedFiles,proto3" json:"deleted_files,omitempty"`
	// Status message
	Message       string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PurgeRollbackAdminResponse) Reset() {
	*x = PurgeRollbackAdminResponse{}
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurgeRollbackAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeRollbackAdminResponse) ProtoMessage() {}

func (x *PurgeRollbackAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeRollbackAdminResponse.ProtoReflect.Descriptor instead.
func (*PurgeRollbackAdminResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{4}
}

func (x *PurgeRollbackAdminResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PurgeRollbackAdminResponse) GetPurgedCatalogUid() string {
	if x != nil {
		return x.PurgedCatalogUid
	}
	return ""
}

func (x *PurgeRollbackAdminResponse) GetDeletedFiles() int32 {
	if x != nil {
		return x.DeletedFiles
	}
	return 0
}

func (x *PurgeRollbackAdminResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// SetRollbackRetentionAdminRequest (admin only)
type SetRollbackRetentionAdminRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: users/{user}/catalogs/{catalog}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Duration value (e.g., 5, 30, 24, 7)
	Duration int32 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// Time unit (second, minute, hour, day)
	TimeUnit      SetRollbackRetentionAdminRequest_TimeUnit `protobuf:"varint,3,opt,name=time_unit,json=timeUnit,proto3,enum=artifact.artifact.v1alpha.SetRollbackRetentionAdminRequest_TimeUnit" json:"time_unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetRollbackRetentionAdminRequest) Reset() {
	*x = SetRollbackRetentionAdminRequest{}
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRollbackRetentionAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRollbackRetentionAdminRequest) ProtoMessage() {}

func (x *SetRollbackRetentionAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRollbackRetentionAdminRequest.ProtoReflect.Descriptor instead.
func (*SetRollbackRetentionAdminRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{5}
}

func (x *SetRollbackRetentionAdminRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetRollbackRetentionAdminRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SetRollbackRetentionAdminRequest) GetTimeUnit() SetRollbackRetentionAdminRequest_TimeUnit {
	if x != nil {
		return x.TimeUnit
	}
	return SetRollbackRetentionAdminRequest_TIME_UNIT_UNSPECIFIED
}

// SetRollbackRetentionAdminResponse (admin only)
type SetRollbackRetentionAdminResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Previous retention until date
	PreviousRetentionUntil string `protobuf:"bytes,1,opt,name=previous_retention_until,json=previousRetentionUntil,proto3" json:"previous_retention_until,omitempty"`
	// New retention until date
	NewRetentionUntil string `protobuf:"bytes,2,opt,name=new_retention_until,json=newRetentionUntil,proto3" json:"new_retention_until,omitempty"`
	// Total retention duration in seconds
	TotalRetentionSeconds int64 `protobuf:"varint,3,opt,name=total_retention_seconds,json=totalRetentionSeconds,proto3" json:"total_retention_seconds,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SetRollbackRetentionAdminResponse) Reset() {
	*x = SetRollbackRetentionAdminResponse{}
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetRollbackRetentionAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRollbackRetentionAdminResponse) ProtoMessage() {}

func (x *SetRollbackRetentionAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRollbackRetentionAdminResponse.ProtoReflect.Descriptor instead.
func (*SetRollbackRetentionAdminResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{6}
}

func (x *SetRollbackRetentionAdminResponse) GetPreviousRetentionUntil() string {
	if x != nil {
		return x.PreviousRetentionUntil
	}
	return ""
}

func (x *SetRollbackRetentionAdminResponse) GetNewRetentionUntil() string {
	if x != nil {
		return x.NewRetentionUntil
	}
	return ""
}

func (x *SetRollbackRetentionAdminResponse) GetTotalRetentionSeconds() int64 {
	if x != nil {
		return x.TotalRetentionSeconds
	}
	return 0
}

// GetKnowledgeBaseUpdateStatusAdminRequest (admin only)
type GetKnowledgeBaseUpdateStatusAdminRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKnowledgeBaseUpdateStatusAdminRequest) Reset() {
	*x = GetKnowledgeBaseUpdateStatusAdminRequest{}
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseUpdateStatusAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseUpdateStatusAdminRequest) ProtoMessage() {}

func (x *GetKnowledgeBaseUpdateStatusAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseUpdateStatusAdminRequest.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseUpdateStatusAdminRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{7}
}

// GetKnowledgeBaseUpdateStatusAdminResponse (admin only)
type GetKnowledgeBaseUpdateStatusAdminResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether update is in progress
	UpdateInProgress bool `protobuf:"varint,1,opt,name=update_in_progress,json=updateInProgress,proto3" json:"update_in_progress,omitempty"`
	// List of knowledge base update details
	Details []*KnowledgeBaseUpdateDetails `protobuf:"bytes,2,rep,name=details,proto3" json:"details,omitempty"`
	// Status message
	Message       string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKnowledgeBaseUpdateStatusAdminResponse) Reset() {
	*x = GetKnowledgeBaseUpdateStatusAdminResponse{}
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseUpdateStatusAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseUpdateStatusAdminResponse) ProtoMessage() {}

func (x *GetKnowledgeBaseUpdateStatusAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseUpdateStatusAdminResponse.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseUpdateStatusAdminResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{8}
}

func (x *GetKnowledgeBaseUpdateStatusAdminResponse) GetUpdateInProgress() bool {
	if x != nil {
		return x.UpdateInProgress
	}
	return false
}

func (x *GetKnowledgeBaseUpdateStatusAdminResponse) GetDetails() []*KnowledgeBaseUpdateDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *GetKnowledgeBaseUpdateStatusAdminResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ExecuteKnowledgeBaseUpdateAdminRequest (admin only)
type ExecuteKnowledgeBaseUpdateAdminRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional: Specific catalog IDs to update. If empty, updates all eligible catalogs.
	CatalogIds []string `protobuf:"bytes,1,rep,name=catalog_ids,json=catalogIds,proto3" json:"catalog_ids,omitempty"`
	// Optional: System ID containing configuration to apply.
	// If specified, uses config from system table where id=<this value>
	// If not specified, KBs keep their current config (useful for reprocessing).
	SystemId *string `protobuf:"bytes,2,opt,name=system_id,json=systemId,proto3,oneof" json:"system_id,omitempty"`
	// Optional: Tags to filter which catalogs to update (OR logic - match any tag).
	Tags          []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteKnowledgeBaseUpdateAdminRequest) Reset() {
	*x = ExecuteKnowledgeBaseUpdateAdminRequest{}
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteKnowledgeBaseUpdateAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteKnowledgeBaseUpdateAdminRequest) ProtoMessage() {}

func (x *ExecuteKnowledgeBaseUpdateAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteKnowledgeBaseUpdateAdminRequest.ProtoReflect.Descriptor instead.
func (*ExecuteKnowledgeBaseUpdateAdminRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{9}
}

func (x *ExecuteKnowledgeBaseUpdateAdminRequest) GetCatalogIds() []string {
	if x != nil {
		return x.CatalogIds
	}
	return nil
}

func (x *ExecuteKnowledgeBaseUpdateAdminRequest) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

func (x *ExecuteKnowledgeBaseUpdateAdminRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// ExecuteKnowledgeBaseUpdateAdminResponse (admin only)
type ExecuteKnowledgeBaseUpdateAdminResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the workflow started successfully
	Started bool `protobuf:"varint,1,opt,name=started,proto3" json:"started,omitempty"`
	// Human-readable status message explaining the result
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// List of knowledge base update details (populated when update already in progress)
	Details       []*KnowledgeBaseUpdateDetails `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteKnowledgeBaseUpdateAdminResponse) Reset() {
	*x = ExecuteKnowledgeBaseUpdateAdminResponse{}
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteKnowledgeBaseUpdateAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteKnowledgeBaseUpdateAdminResponse) ProtoMessage() {}

func (x *ExecuteKnowledgeBaseUpdateAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteKnowledgeBaseUpdateAdminResponse.ProtoReflect.Descriptor instead.
func (*ExecuteKnowledgeBaseUpdateAdminResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{10}
}

func (x *ExecuteKnowledgeBaseUpdateAdminResponse) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

func (x *ExecuteKnowledgeBaseUpdateAdminResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExecuteKnowledgeBaseUpdateAdminResponse) GetDetails() []*KnowledgeBaseUpdateDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

// AbortKnowledgeBaseUpdateAdminRequest (admin only)
type AbortKnowledgeBaseUpdateAdminRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional: Specific catalog IDs to abort. If empty, aborts all currently updating catalogs.
	CatalogIds    []string `protobuf:"bytes,1,rep,name=catalog_ids,json=catalogIds,proto3" json:"catalog_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AbortKnowledgeBaseUpdateAdminRequest) Reset() {
	*x = AbortKnowledgeBaseUpdateAdminRequest{}
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbortKnowledgeBaseUpdateAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortKnowledgeBaseUpdateAdminRequest) ProtoMessage() {}

func (x *AbortKnowledgeBaseUpdateAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortKnowledgeBaseUpdateAdminRequest.ProtoReflect.Descriptor instead.
func (*AbortKnowledgeBaseUpdateAdminRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{11}
}

func (x *AbortKnowledgeBaseUpdateAdminRequest) GetCatalogIds() []string {
	if x != nil {
		return x.CatalogIds
	}
	return nil
}

// AbortKnowledgeBaseUpdateAdminResponse (admin only)
type AbortKnowledgeBaseUpdateAdminResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the abort operation completed successfully
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Human-readable status message explaining the result
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// List of knowledge base update details that were aborted
	Details       []*KnowledgeBaseUpdateDetails `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AbortKnowledgeBaseUpdateAdminResponse) Reset() {
	*x = AbortKnowledgeBaseUpdateAdminResponse{}
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbortKnowledgeBaseUpdateAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortKnowledgeBaseUpdateAdminResponse) ProtoMessage() {}

func (x *AbortKnowledgeBaseUpdateAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_update_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortKnowledgeBaseUpdateAdminResponse.ProtoReflect.Descriptor instead.
func (*AbortKnowledgeBaseUpdateAdminResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_update_proto_rawDescGZIP(), []int{12}
}

func (x *AbortKnowledgeBaseUpdateAdminResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AbortKnowledgeBaseUpdateAdminResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AbortKnowledgeBaseUpdateAdminResponse) GetDetails() []*KnowledgeBaseUpdateDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_artifact_artifact_v1alpha_update_proto protoreflect.FileDescriptor

const file_artifact_artifact_v1alpha_update_proto_rawDesc = "" +
	"\n" +
	"&artifact/artifact/v1alpha/update.proto\x12\x19artifact.artifact.v1alpha\x1a(artifact/artifact/v1alpha/artifact.proto\"\xb7\x03\n" +
	"\x1aKnowledgeBaseUpdateDetails\x12\x1f\n" +
	"\vcatalog_uid\x18\x01 \x01(\tR\n" +
	"catalogUid\x12L\n" +
	"\x06status\x18\x02 \x01(\x0e24.artifact.artifact.v1alpha.KnowledgeBaseUpdateStatusR\x06status\x12\x1f\n" +
	"\vworkflow_id\x18\x03 \x01(\tR\n" +
	"workflowId\x12\x1d\n" +
	"\n" +
	"started_at\x18\x04 \x01(\tR\tstartedAt\x12!\n" +
	"\fcompleted_at\x18\x05 \x01(\tR\vcompletedAt\x12'\n" +
	"\x0ffiles_processed\x18\x06 \x01(\x05R\x0efilesProcessed\x12\x1f\n" +
	"\vtotal_files\x18\a \x01(\x05R\n" +
	"totalFiles\x12#\n" +
	"\rerror_message\x18\b \x01(\tR\ferrorMessage\x12*\n" +
	"\x11current_system_id\x18\t \x01(\tR\x0fcurrentSystemId\x12,\n" +
	"\x12previous_system_id\x18\n" +
	" \x01(\tR\x10previousSystemId\"*\n" +
	"\x14RollbackAdminRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"o\n" +
	"\x15RollbackAdminResponse\x12<\n" +
	"\acatalog\x18\x01 \x01(\v2\".artifact.artifact.v1alpha.CatalogR\acatalog\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"/\n" +
	"\x19PurgeRollbackAdminRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"\xa3\x01\n" +
	"\x1aPurgeRollbackAdminResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12,\n" +
	"\x12purged_catalog_uid\x18\x02 \x01(\tR\x10purgedCatalogUid\x12#\n" +
	"\rdeleted_files\x18\x03 \x01(\x05R\fdeletedFiles\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\"\xaf\x02\n" +
	" SetRollbackRetentionAdminRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bduration\x18\x02 \x01(\x05R\bduration\x12a\n" +
	"\ttime_unit\x18\x03 \x01(\x0e2D.artifact.artifact.v1alpha.SetRollbackRetentionAdminRequest.TimeUnitR\btimeUnit\"x\n" +
	"\bTimeUnit\x12\x19\n" +
	"\x15TIME_UNIT_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10TIME_UNIT_SECOND\x10\x01\x12\x14\n" +
	"\x10TIME_UNIT_MINUTE\x10\x02\x12\x12\n" +
	"\x0eTIME_UNIT_HOUR\x10\x03\x12\x11\n" +
	"\rTIME_UNIT_DAY\x10\x04\"\xc5\x01\n" +
	"!SetRollbackRetentionAdminResponse\x128\n" +
	"\x18previous_retention_until\x18\x01 \x01(\tR\x16previousRetentionUntil\x12.\n" +
	"\x13new_retention_until\x18\x02 \x01(\tR\x11newRetentionUntil\x126\n" +
	"\x17total_retention_seconds\x18\x03 \x01(\x03R\x15totalRetentionSeconds\"*\n" +
	"(GetKnowledgeBaseUpdateStatusAdminRequest\"\xc4\x01\n" +
	")GetKnowledgeBaseUpdateStatusAdminResponse\x12,\n" +
	"\x12update_in_progress\x18\x01 \x01(\bR\x10updateInProgress\x12O\n" +
	"\adetails\x18\x02 \x03(\v25.artifact.artifact.v1alpha.KnowledgeBaseUpdateDetailsR\adetails\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\"\x8d\x01\n" +
	"&ExecuteKnowledgeBaseUpdateAdminRequest\x12\x1f\n" +
	"\vcatalog_ids\x18\x01 \x03(\tR\n" +
	"catalogIds\x12 \n" +
	"\tsystem_id\x18\x02 \x01(\tH\x00R\bsystemId\x88\x01\x01\x12\x12\n" +
	"\x04tags\x18\x03 \x03(\tR\x04tagsB\f\n" +
	"\n" +
	"_system_id\"\xae\x01\n" +
	"'ExecuteKnowledgeBaseUpdateAdminResponse\x12\x18\n" +
	"\astarted\x18\x01 \x01(\bR\astarted\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12O\n" +
	"\adetails\x18\x03 \x03(\v25.artifact.artifact.v1alpha.KnowledgeBaseUpdateDetailsR\adetails\"G\n" +
	"$AbortKnowledgeBaseUpdateAdminRequest\x12\x1f\n" +
	"\vcatalog_ids\x18\x01 \x03(\tR\n" +
	"catalogIds\"\xac\x01\n" +
	"%AbortKnowledgeBaseUpdateAdminResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12O\n" +
	"\adetails\x18\x03 \x03(\v25.artifact.artifact.v1alpha.KnowledgeBaseUpdateDetailsR\adetails*\xca\x03\n" +
	"\x19KnowledgeBaseUpdateStatus\x12,\n" +
	"(KNOWLEDGE_BASE_UPDATE_STATUS_UNSPECIFIED\x10\x00\x12%\n" +
	"!KNOWLEDGE_BASE_UPDATE_STATUS_NONE\x10\x01\x12)\n" +
	"%KNOWLEDGE_BASE_UPDATE_STATUS_UPDATING\x10\x02\x12(\n" +
	"$KNOWLEDGE_BASE_UPDATE_STATUS_SYNCING\x10\x03\x12+\n" +
	"'KNOWLEDGE_BASE_UPDATE_STATUS_VALIDATING\x10\x04\x12)\n" +
	"%KNOWLEDGE_BASE_UPDATE_STATUS_SWAPPING\x10\x05\x12*\n" +
	"&KNOWLEDGE_BASE_UPDATE_STATUS_COMPLETED\x10\x06\x12'\n" +
	"#KNOWLEDGE_BASE_UPDATE_STATUS_FAILED\x10\a\x12,\n" +
	"(KNOWLEDGE_BASE_UPDATE_STATUS_ROLLED_BACK\x10\b\x12(\n" +
	"$KNOWLEDGE_BASE_UPDATE_STATUS_ABORTED\x10\tB\xff\x01\n" +
	"\x1dcom.artifact.artifact.v1alphaB\vUpdateProtoP\x01ZKgithub.com/instill-ai/protogen-go/artifact/artifact/v1alpha;artifactv1alpha\xa2\x02\x03AAX\xaa\x02\x19Artifact.Artifact.V1alpha\xca\x02\x19Artifact\\Artifact\\V1alpha\xe2\x02%Artifact\\Artifact\\V1alpha\\GPBMetadata\xea\x02\x1bArtifact::Artifact::V1alphab\x06proto3"

var (
	file_artifact_artifact_v1alpha_update_proto_rawDescOnce sync.Once
	file_artifact_artifact_v1alpha_update_proto_rawDescData []byte
)

func file_artifact_artifact_v1alpha_update_proto_rawDescGZIP() []byte {
	file_artifact_artifact_v1alpha_update_proto_rawDescOnce.Do(func() {
		file_artifact_artifact_v1alpha_update_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_artifact_artifact_v1alpha_update_proto_rawDesc), len(file_artifact_artifact_v1alpha_update_proto_rawDesc)))
	})
	return file_artifact_artifact_v1alpha_update_proto_rawDescData
}

var file_artifact_artifact_v1alpha_update_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_artifact_artifact_v1alpha_update_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_artifact_artifact_v1alpha_update_proto_goTypes = []any{
	(KnowledgeBaseUpdateStatus)(0),                    // 0: artifact.artifact.v1alpha.KnowledgeBaseUpdateStatus
	(SetRollbackRetentionAdminRequest_TimeUnit)(0),    // 1: artifact.artifact.v1alpha.SetRollbackRetentionAdminRequest.TimeUnit
	(*KnowledgeBaseUpdateDetails)(nil),                // 2: artifact.artifact.v1alpha.KnowledgeBaseUpdateDetails
	(*RollbackAdminRequest)(nil),                      // 3: artifact.artifact.v1alpha.RollbackAdminRequest
	(*RollbackAdminResponse)(nil),                     // 4: artifact.artifact.v1alpha.RollbackAdminResponse
	(*PurgeRollbackAdminRequest)(nil),                 // 5: artifact.artifact.v1alpha.PurgeRollbackAdminRequest
	(*PurgeRollbackAdminResponse)(nil),                // 6: artifact.artifact.v1alpha.PurgeRollbackAdminResponse
	(*SetRollbackRetentionAdminRequest)(nil),          // 7: artifact.artifact.v1alpha.SetRollbackRetentionAdminRequest
	(*SetRollbackRetentionAdminResponse)(nil),         // 8: artifact.artifact.v1alpha.SetRollbackRetentionAdminResponse
	(*GetKnowledgeBaseUpdateStatusAdminRequest)(nil),  // 9: artifact.artifact.v1alpha.GetKnowledgeBaseUpdateStatusAdminRequest
	(*GetKnowledgeBaseUpdateStatusAdminResponse)(nil), // 10: artifact.artifact.v1alpha.GetKnowledgeBaseUpdateStatusAdminResponse
	(*ExecuteKnowledgeBaseUpdateAdminRequest)(nil),    // 11: artifact.artifact.v1alpha.ExecuteKnowledgeBaseUpdateAdminRequest
	(*ExecuteKnowledgeBaseUpdateAdminResponse)(nil),   // 12: artifact.artifact.v1alpha.ExecuteKnowledgeBaseUpdateAdminResponse
	(*AbortKnowledgeBaseUpdateAdminRequest)(nil),      // 13: artifact.artifact.v1alpha.AbortKnowledgeBaseUpdateAdminRequest
	(*AbortKnowledgeBaseUpdateAdminResponse)(nil),     // 14: artifact.artifact.v1alpha.AbortKnowledgeBaseUpdateAdminResponse
	(*Catalog)(nil), // 15: artifact.artifact.v1alpha.Catalog
}
var file_artifact_artifact_v1alpha_update_proto_depIdxs = []int32{
	0,  // 0: artifact.artifact.v1alpha.KnowledgeBaseUpdateDetails.status:type_name -> artifact.artifact.v1alpha.KnowledgeBaseUpdateStatus
	15, // 1: artifact.artifact.v1alpha.RollbackAdminResponse.catalog:type_name -> artifact.artifact.v1alpha.Catalog
	1,  // 2: artifact.artifact.v1alpha.SetRollbackRetentionAdminRequest.time_unit:type_name -> artifact.artifact.v1alpha.SetRollbackRetentionAdminRequest.TimeUnit
	2,  // 3: artifact.artifact.v1alpha.GetKnowledgeBaseUpdateStatusAdminResponse.details:type_name -> artifact.artifact.v1alpha.KnowledgeBaseUpdateDetails
	2,  // 4: artifact.artifact.v1alpha.ExecuteKnowledgeBaseUpdateAdminResponse.details:type_name -> artifact.artifact.v1alpha.KnowledgeBaseUpdateDetails
	2,  // 5: artifact.artifact.v1alpha.AbortKnowledgeBaseUpdateAdminResponse.details:type_name -> artifact.artifact.v1alpha.KnowledgeBaseUpdateDetails
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_artifact_artifact_v1alpha_update_proto_init() }
func file_artifact_artifact_v1alpha_update_proto_init() {
	if File_artifact_artifact_v1alpha_update_proto != nil {
		return
	}
	file_artifact_artifact_v1alpha_artifact_proto_init()
	file_artifact_artifact_v1alpha_update_proto_msgTypes[9].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_artifact_artifact_v1alpha_update_proto_rawDesc), len(file_artifact_artifact_v1alpha_update_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_artifact_artifact_v1alpha_update_proto_goTypes,
		DependencyIndexes: file_artifact_artifact_v1alpha_update_proto_depIdxs,
		EnumInfos:         file_artifact_artifact_v1alpha_update_proto_enumTypes,
		MessageInfos:      file_artifact_artifact_v1alpha_update_proto_msgTypes,
	}.Build()
	File_artifact_artifact_v1alpha_update_proto = out.File
	file_artifact_artifact_v1alpha_update_proto_goTypes = nil
	file_artifact_artifact_v1alpha_update_proto_depIdxs = nil
}
