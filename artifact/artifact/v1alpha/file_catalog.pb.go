// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: artifact/artifact/v1alpha/file_catalog.proto

package artifactv1alpha

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChunkType contains the different types of a chunk.
type GetFileCatalogResponse_ChunkType int32

const (
	// Unspecified.
	GetFileCatalogResponse_CHUNK_TYPE_UNSPECIFIED GetFileCatalogResponse_ChunkType = 0
	// Text.
	GetFileCatalogResponse_CHUNK_TYPE_TEXT GetFileCatalogResponse_ChunkType = 1
	// Image.
	GetFileCatalogResponse_CHUNK_TYPE_IMAGE GetFileCatalogResponse_ChunkType = 2
	// Audio.
	GetFileCatalogResponse_CHUNK_TYPE_AUDIO GetFileCatalogResponse_ChunkType = 3
	// Video.
	GetFileCatalogResponse_CHUNK_TYPE_VIDEO GetFileCatalogResponse_ChunkType = 4
)

// Enum value maps for GetFileCatalogResponse_ChunkType.
var (
	GetFileCatalogResponse_ChunkType_name = map[int32]string{
		0: "CHUNK_TYPE_UNSPECIFIED",
		1: "CHUNK_TYPE_TEXT",
		2: "CHUNK_TYPE_IMAGE",
		3: "CHUNK_TYPE_AUDIO",
		4: "CHUNK_TYPE_VIDEO",
	}
	GetFileCatalogResponse_ChunkType_value = map[string]int32{
		"CHUNK_TYPE_UNSPECIFIED": 0,
		"CHUNK_TYPE_TEXT":        1,
		"CHUNK_TYPE_IMAGE":       2,
		"CHUNK_TYPE_AUDIO":       3,
		"CHUNK_TYPE_VIDEO":       4,
	}
)

func (x GetFileCatalogResponse_ChunkType) Enum() *GetFileCatalogResponse_ChunkType {
	p := new(GetFileCatalogResponse_ChunkType)
	*p = x
	return p
}

func (x GetFileCatalogResponse_ChunkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetFileCatalogResponse_ChunkType) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_artifact_v1alpha_file_catalog_proto_enumTypes[0].Descriptor()
}

func (GetFileCatalogResponse_ChunkType) Type() protoreflect.EnumType {
	return &file_artifact_artifact_v1alpha_file_catalog_proto_enumTypes[0]
}

func (x GetFileCatalogResponse_ChunkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetFileCatalogResponse_ChunkType.Descriptor instead.
func (GetFileCatalogResponse_ChunkType) EnumDescriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{1, 0}
}

// GetFileCatalogRequest represents a request to view the processing outputs of
// a file in a catalog.
type GetFileCatalogRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace ID.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// Catalog ID.
	CatalogId string `protobuf:"bytes,2,opt,name=catalog_id,json=catalogId,proto3" json:"catalog_id,omitempty"`
	// File UID.
	FileUid       string `protobuf:"bytes,3,opt,name=file_uid,json=fileUid,proto3" json:"file_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileCatalogRequest) Reset() {
	*x = GetFileCatalogRequest{}
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileCatalogRequest) ProtoMessage() {}

func (x *GetFileCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileCatalogRequest.ProtoReflect.Descriptor instead.
func (*GetFileCatalogRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{0}
}

func (x *GetFileCatalogRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *GetFileCatalogRequest) GetCatalogId() string {
	if x != nil {
		return x.CatalogId
	}
	return ""
}

func (x *GetFileCatalogRequest) GetFileUid() string {
	if x != nil {
		return x.FileUid
	}
	return ""
}

// GetFileCatalogResponse contains the processing outputs of a file in a
// catalog.
type GetFileCatalogResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Base-64 representation of the original file contents.
	OriginalData string `protobuf:"bytes,1,opt,name=original_data,json=originalData,proto3" json:"original_data,omitempty"`
	// File metadata.
	FileMetadata *GetFileCatalogResponse_FileMetadata `protobuf:"bytes,2,opt,name=file_metadata,json=fileMetadata,proto3" json:"file_metadata,omitempty"`
	// Converted text.
	Text *GetFileCatalogResponse_Text `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// Chunks.
	Chunks        []*GetFileCatalogResponse_Chunk `protobuf:"bytes,4,rep,name=chunks,proto3" json:"chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileCatalogResponse) Reset() {
	*x = GetFileCatalogResponse{}
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileCatalogResponse) ProtoMessage() {}

func (x *GetFileCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileCatalogResponse.ProtoReflect.Descriptor instead.
func (*GetFileCatalogResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{1}
}

func (x *GetFileCatalogResponse) GetOriginalData() string {
	if x != nil {
		return x.OriginalData
	}
	return ""
}

func (x *GetFileCatalogResponse) GetFileMetadata() *GetFileCatalogResponse_FileMetadata {
	if x != nil {
		return x.FileMetadata
	}
	return nil
}

func (x *GetFileCatalogResponse) GetText() *GetFileCatalogResponse_Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *GetFileCatalogResponse) GetChunks() []*GetFileCatalogResponse_Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

// GetFileAsMarkdownRequest represents a request to fetch the Markdown
// representation of a file.
type GetFileAsMarkdownRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// File UID.
	FileUid       string `protobuf:"bytes,1,opt,name=file_uid,json=fileUid,proto3" json:"file_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileAsMarkdownRequest) Reset() {
	*x = GetFileAsMarkdownRequest{}
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileAsMarkdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileAsMarkdownRequest) ProtoMessage() {}

func (x *GetFileAsMarkdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileAsMarkdownRequest.ProtoReflect.Descriptor instead.
func (*GetFileAsMarkdownRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{2}
}

func (x *GetFileAsMarkdownRequest) GetFileUid() string {
	if x != nil {
		return x.FileUid
	}
	return ""
}

// GetFileAsMarkdownResponse contains a blob with the Markdown representation
// of a file.
type GetFileAsMarkdownResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Markdown representation of a file.
	Markdown      string `protobuf:"bytes,1,opt,name=markdown,proto3" json:"markdown,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileAsMarkdownResponse) Reset() {
	*x = GetFileAsMarkdownResponse{}
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileAsMarkdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileAsMarkdownResponse) ProtoMessage() {}

func (x *GetFileAsMarkdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileAsMarkdownResponse.ProtoReflect.Descriptor instead.
func (*GetFileAsMarkdownResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{3}
}

func (x *GetFileAsMarkdownResponse) GetMarkdown() string {
	if x != nil {
		return x.Markdown
	}
	return ""
}

// GetChatFileRequest ...
//
// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/file_catalog.proto.
type GetChatFileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of the namespace
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// id of the catalog
	CatalogId string `protobuf:"bytes,2,opt,name=catalog_id,json=catalogId,proto3" json:"catalog_id,omitempty"`
	// id of the file(i.e. file name)
	FileId        string `protobuf:"bytes,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChatFileRequest) Reset() {
	*x = GetChatFileRequest{}
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatFileRequest) ProtoMessage() {}

func (x *GetChatFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatFileRequest.ProtoReflect.Descriptor instead.
func (*GetChatFileRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{4}
}

func (x *GetChatFileRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *GetChatFileRequest) GetCatalogId() string {
	if x != nil {
		return x.CatalogId
	}
	return ""
}

func (x *GetChatFileRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

// GetChatFileResponse ...
//
// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/file_catalog.proto.
type GetChatFileResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// converted markdown content
	Markdown      []byte `protobuf:"bytes,1,opt,name=markdown,proto3" json:"markdown,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChatFileResponse) Reset() {
	*x = GetChatFileResponse{}
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatFileResponse) ProtoMessage() {}

func (x *GetChatFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatFileResponse.ProtoReflect.Descriptor instead.
func (*GetChatFileResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{5}
}

func (x *GetChatFileResponse) GetMarkdown() []byte {
	if x != nil {
		return x.Markdown
	}
	return nil
}

// GetFileAsMarkdownAdminRequest represents a request to fetch the Markdown
// representation of a file (admin only).
type GetFileAsMarkdownAdminRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// File UID.
	FileUid       string `protobuf:"bytes,1,opt,name=file_uid,json=fileUid,proto3" json:"file_uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileAsMarkdownAdminRequest) Reset() {
	*x = GetFileAsMarkdownAdminRequest{}
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileAsMarkdownAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileAsMarkdownAdminRequest) ProtoMessage() {}

func (x *GetFileAsMarkdownAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileAsMarkdownAdminRequest.ProtoReflect.Descriptor instead.
func (*GetFileAsMarkdownAdminRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{6}
}

func (x *GetFileAsMarkdownAdminRequest) GetFileUid() string {
	if x != nil {
		return x.FileUid
	}
	return ""
}

// GetFileAsMarkdownAdminResponse contains a blob with the Markdown representation
// of a file (admin only).
type GetFileAsMarkdownAdminResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The Markdown representation of a file.
	Markdown      string `protobuf:"bytes,1,opt,name=markdown,proto3" json:"markdown,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileAsMarkdownAdminResponse) Reset() {
	*x = GetFileAsMarkdownAdminResponse{}
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileAsMarkdownAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileAsMarkdownAdminResponse) ProtoMessage() {}

func (x *GetFileAsMarkdownAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileAsMarkdownAdminResponse.ProtoReflect.Descriptor instead.
func (*GetFileAsMarkdownAdminResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{7}
}

func (x *GetFileAsMarkdownAdminResponse) GetMarkdown() string {
	if x != nil {
		return x.Markdown
	}
	return ""
}

// GetChatFileAdminRequest (admin only, deprecated)
//
// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/file_catalog.proto.
type GetChatFileAdminRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id of the namespace
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// id of the catalog
	CatalogId string `protobuf:"bytes,2,opt,name=catalog_id,json=catalogId,proto3" json:"catalog_id,omitempty"`
	// id of the file
	FileId        string `protobuf:"bytes,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChatFileAdminRequest) Reset() {
	*x = GetChatFileAdminRequest{}
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatFileAdminRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatFileAdminRequest) ProtoMessage() {}

func (x *GetChatFileAdminRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatFileAdminRequest.ProtoReflect.Descriptor instead.
func (*GetChatFileAdminRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{8}
}

func (x *GetChatFileAdminRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *GetChatFileAdminRequest) GetCatalogId() string {
	if x != nil {
		return x.CatalogId
	}
	return ""
}

func (x *GetChatFileAdminRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

// GetChatFileAdminResponse (admin only, deprecated)
//
// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/file_catalog.proto.
type GetChatFileAdminResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// converted markdown content
	Markdown      []byte `protobuf:"bytes,1,opt,name=markdown,proto3" json:"markdown,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChatFileAdminResponse) Reset() {
	*x = GetChatFileAdminResponse{}
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChatFileAdminResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatFileAdminResponse) ProtoMessage() {}

func (x *GetChatFileAdminResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatFileAdminResponse.ProtoReflect.Descriptor instead.
func (*GetChatFileAdminResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{9}
}

func (x *GetChatFileAdminResponse) GetMarkdown() []byte {
	if x != nil {
		return x.Markdown
	}
	return nil
}

// FileMetadata contains information about the file.
type GetFileCatalogResponse_FileMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// File UID.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Filename
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	// File Type.
	FileType File_Type `protobuf:"varint,3,opt,name=file_type,json=fileType,proto3,enum=artifact.artifact.v1alpha.File_Type" json:"file_type,omitempty"`
	// Size.
	Size int64 `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	// Creation timestamp
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Processing status of the file.
	ProcessStatus FileProcessStatus `protobuf:"varint,6,opt,name=process_status,json=processStatus,proto3,enum=artifact.artifact.v1alpha.FileProcessStatus" json:"process_status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileCatalogResponse_FileMetadata) Reset() {
	*x = GetFileCatalogResponse_FileMetadata{}
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileCatalogResponse_FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileCatalogResponse_FileMetadata) ProtoMessage() {}

func (x *GetFileCatalogResponse_FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileCatalogResponse_FileMetadata.ProtoReflect.Descriptor instead.
func (*GetFileCatalogResponse_FileMetadata) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetFileCatalogResponse_FileMetadata) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetFileCatalogResponse_FileMetadata) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *GetFileCatalogResponse_FileMetadata) GetFileType() File_Type {
	if x != nil {
		return x.FileType
	}
	return File_TYPE_UNSPECIFIED
}

func (x *GetFileCatalogResponse_FileMetadata) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetFileCatalogResponse_FileMetadata) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *GetFileCatalogResponse_FileMetadata) GetProcessStatus() FileProcessStatus {
	if x != nil {
		return x.ProcessStatus
	}
	return FileProcessStatus_FILE_PROCESS_STATUS_UNSPECIFIED
}

// Text contains the text representation of the file.
type GetFileCatalogResponse_Text struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Pipelines used to process the file.
	Pipelines []string `protobuf:"bytes,1,rep,name=pipelines,proto3" json:"pipelines,omitempty"`
	// Text representation of the file.
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// Chunk count in the text.
	ChunkCount int32 `protobuf:"varint,3,opt,name=chunk_count,json=chunkCount,proto3" json:"chunk_count,omitempty"`
	// Token count in the text
	TokenCount int32 `protobuf:"varint,4,opt,name=token_count,json=tokenCount,proto3" json:"token_count,omitempty"`
	// Last update timestamp for the text.
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileCatalogResponse_Text) Reset() {
	*x = GetFileCatalogResponse_Text{}
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileCatalogResponse_Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileCatalogResponse_Text) ProtoMessage() {}

func (x *GetFileCatalogResponse_Text) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileCatalogResponse_Text.ProtoReflect.Descriptor instead.
func (*GetFileCatalogResponse_Text) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{1, 1}
}

func (x *GetFileCatalogResponse_Text) GetPipelines() []string {
	if x != nil {
		return x.Pipelines
	}
	return nil
}

func (x *GetFileCatalogResponse_Text) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetFileCatalogResponse_Text) GetChunkCount() int32 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

func (x *GetFileCatalogResponse_Text) GetTokenCount() int32 {
	if x != nil {
		return x.TokenCount
	}
	return 0
}

func (x *GetFileCatalogResponse_Text) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// Chunk is a delimited part of the converted text.
type GetFileCatalogResponse_Chunk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Chunk UID.
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Chunk type. I.e: text, image, audio, video.
	Type GetFileCatalogResponse_ChunkType `protobuf:"varint,2,opt,name=type,proto3,enum=artifact.artifact.v1alpha.GetFileCatalogResponse_ChunkType" json:"type,omitempty"`
	// Start position in the text.
	StartPosition int32 `protobuf:"varint,3,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	// End position in the text.
	EndPosition int32 `protobuf:"varint,4,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	// Content.
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// Token count in the chunk.
	TokenCount int32 `protobuf:"varint,6,opt,name=token_count,json=tokenCount,proto3" json:"token_count,omitempty"`
	// Chunk embedding.
	Embedding []float32 `protobuf:"fixed32,7,rep,packed,name=embedding,proto3" json:"embedding,omitempty"`
	// Creation time of the chunk.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Retrievability of the chunk.
	Retrievable   bool `protobuf:"varint,9,opt,name=retrievable,proto3" json:"retrievable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileCatalogResponse_Chunk) Reset() {
	*x = GetFileCatalogResponse_Chunk{}
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileCatalogResponse_Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileCatalogResponse_Chunk) ProtoMessage() {}

func (x *GetFileCatalogResponse_Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileCatalogResponse_Chunk.ProtoReflect.Descriptor instead.
func (*GetFileCatalogResponse_Chunk) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{1, 2}
}

func (x *GetFileCatalogResponse_Chunk) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetFileCatalogResponse_Chunk) GetType() GetFileCatalogResponse_ChunkType {
	if x != nil {
		return x.Type
	}
	return GetFileCatalogResponse_CHUNK_TYPE_UNSPECIFIED
}

func (x *GetFileCatalogResponse_Chunk) GetStartPosition() int32 {
	if x != nil {
		return x.StartPosition
	}
	return 0
}

func (x *GetFileCatalogResponse_Chunk) GetEndPosition() int32 {
	if x != nil {
		return x.EndPosition
	}
	return 0
}

func (x *GetFileCatalogResponse_Chunk) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetFileCatalogResponse_Chunk) GetTokenCount() int32 {
	if x != nil {
		return x.TokenCount
	}
	return 0
}

func (x *GetFileCatalogResponse_Chunk) GetEmbedding() []float32 {
	if x != nil {
		return x.Embedding
	}
	return nil
}

func (x *GetFileCatalogResponse_Chunk) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *GetFileCatalogResponse_Chunk) GetRetrievable() bool {
	if x != nil {
		return x.Retrievable
	}
	return false
}

var File_artifact_artifact_v1alpha_file_catalog_proto protoreflect.FileDescriptor

const file_artifact_artifact_v1alpha_file_catalog_proto_rawDesc = "" +
	"\n" +
	",artifact/artifact/v1alpha/file_catalog.proto\x12\x19artifact.artifact.v1alpha\x1a(artifact/artifact/v1alpha/artifact.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x83\x01\n" +
	"\x15GetFileCatalogRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12\"\n" +
	"\n" +
	"catalog_id\x18\x02 \x01(\tB\x03\xe0A\x02R\tcatalogId\x12\x1e\n" +
	"\bfile_uid\x18\x03 \x01(\tB\x03\xe0A\x02R\afileUid\"\x8e\v\n" +
	"\x16GetFileCatalogResponse\x12(\n" +
	"\roriginal_data\x18\x01 \x01(\tB\x03\xe0A\x03R\foriginalData\x12h\n" +
	"\rfile_metadata\x18\x02 \x01(\v2>.artifact.artifact.v1alpha.GetFileCatalogResponse.FileMetadataB\x03\xe0A\x03R\ffileMetadata\x12O\n" +
	"\x04text\x18\x03 \x01(\v26.artifact.artifact.v1alpha.GetFileCatalogResponse.TextB\x03\xe0A\x03R\x04text\x12T\n" +
	"\x06chunks\x18\x04 \x03(\v27.artifact.artifact.v1alpha.GetFileCatalogResponse.ChunkB\x03\xe0A\x03R\x06chunks\x1a\xc3\x02\n" +
	"\fFileMetadata\x12\x15\n" +
	"\x03uid\x18\x01 \x01(\tB\x03\xe0A\x03R\x03uid\x12\x1f\n" +
	"\bfilename\x18\x02 \x01(\tB\x03\xe0A\x03R\bfilename\x12F\n" +
	"\tfile_type\x18\x03 \x01(\x0e2$.artifact.artifact.v1alpha.File.TypeB\x03\xe0A\x03R\bfileType\x12\x17\n" +
	"\x04size\x18\x04 \x01(\x03B\x03\xe0A\x03R\x04size\x12@\n" +
	"\vcreate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\x03\xe0A\x03R\n" +
	"createTime\x12X\n" +
	"\x0eprocess_status\x18\x06 \x01(\x0e2,.artifact.artifact.v1alpha.FileProcessStatusB\x03\xe0A\x03R\rprocessStatus\x1a\xd6\x01\n" +
	"\x04Text\x12!\n" +
	"\tpipelines\x18\x01 \x03(\tB\x03\xe0A\x03R\tpipelines\x12\x1d\n" +
	"\acontent\x18\x02 \x01(\tB\x03\xe0A\x03R\acontent\x12$\n" +
	"\vchunk_count\x18\x03 \x01(\x05B\x03\xe0A\x03R\n" +
	"chunkCount\x12$\n" +
	"\vtoken_count\x18\x04 \x01(\x05B\x03\xe0A\x03R\n" +
	"tokenCount\x12@\n" +
	"\vupdate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\x03\xe0A\x03R\n" +
	"updateTime\x1a\x99\x03\n" +
	"\x05Chunk\x12\x15\n" +
	"\x03uid\x18\x01 \x01(\tB\x03\xe0A\x03R\x03uid\x12T\n" +
	"\x04type\x18\x02 \x01(\x0e2;.artifact.artifact.v1alpha.GetFileCatalogResponse.ChunkTypeB\x03\xe0A\x03R\x04type\x12*\n" +
	"\x0estart_position\x18\x03 \x01(\x05B\x03\xe0A\x03R\rstartPosition\x12&\n" +
	"\fend_position\x18\x04 \x01(\x05B\x03\xe0A\x03R\vendPosition\x12\x1d\n" +
	"\acontent\x18\x05 \x01(\tB\x03\xe0A\x03R\acontent\x12$\n" +
	"\vtoken_count\x18\x06 \x01(\x05B\x03\xe0A\x03R\n" +
	"tokenCount\x12!\n" +
	"\tembedding\x18\a \x03(\x02B\x03\xe0A\x03R\tembedding\x12@\n" +
	"\vcreate_time\x18\b \x01(\v2\x1a.google.protobuf.TimestampB\x03\xe0A\x03R\n" +
	"createTime\x12%\n" +
	"\vretrievable\x18\t \x01(\bB\x03\xe0A\x03R\vretrievable\"~\n" +
	"\tChunkType\x12\x1a\n" +
	"\x16CHUNK_TYPE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fCHUNK_TYPE_TEXT\x10\x01\x12\x14\n" +
	"\x10CHUNK_TYPE_IMAGE\x10\x02\x12\x14\n" +
	"\x10CHUNK_TYPE_AUDIO\x10\x03\x12\x14\n" +
	"\x10CHUNK_TYPE_VIDEO\x10\x04\":\n" +
	"\x18GetFileAsMarkdownRequest\x12\x1e\n" +
	"\bfile_uid\x18\x01 \x01(\tB\x03\xe0A\x02R\afileUid\"<\n" +
	"\x19GetFileAsMarkdownResponse\x12\x1f\n" +
	"\bmarkdown\x18\x01 \x01(\tB\x03\xe0A\x03R\bmarkdown\"s\n" +
	"\x12GetChatFileRequest\x12!\n" +
	"\fnamespace_id\x18\x01 \x01(\tR\vnamespaceId\x12\x1d\n" +
	"\n" +
	"catalog_id\x18\x02 \x01(\tR\tcatalogId\x12\x17\n" +
	"\afile_id\x18\x03 \x01(\tR\x06fileId:\x02\x18\x01\"5\n" +
	"\x13GetChatFileResponse\x12\x1a\n" +
	"\bmarkdown\x18\x01 \x01(\fR\bmarkdown:\x02\x18\x01\"?\n" +
	"\x1dGetFileAsMarkdownAdminRequest\x12\x1e\n" +
	"\bfile_uid\x18\x01 \x01(\tB\x03\xe0A\x02R\afileUid\"A\n" +
	"\x1eGetFileAsMarkdownAdminResponse\x12\x1f\n" +
	"\bmarkdown\x18\x01 \x01(\tB\x03\xe0A\x03R\bmarkdown\"x\n" +
	"\x17GetChatFileAdminRequest\x12!\n" +
	"\fnamespace_id\x18\x01 \x01(\tR\vnamespaceId\x12\x1d\n" +
	"\n" +
	"catalog_id\x18\x02 \x01(\tR\tcatalogId\x12\x17\n" +
	"\afile_id\x18\x03 \x01(\tR\x06fileId:\x02\x18\x01\":\n" +
	"\x18GetChatFileAdminResponse\x12\x1a\n" +
	"\bmarkdown\x18\x01 \x01(\fR\bmarkdown:\x02\x18\x01B\x84\x02\n" +
	"\x1dcom.artifact.artifact.v1alphaB\x10FileCatalogProtoP\x01ZKgithub.com/instill-ai/protogen-go/artifact/artifact/v1alpha;artifactv1alpha\xa2\x02\x03AAX\xaa\x02\x19Artifact.Artifact.V1alpha\xca\x02\x19Artifact\\Artifact\\V1alpha\xe2\x02%Artifact\\Artifact\\V1alpha\\GPBMetadata\xea\x02\x1bArtifact::Artifact::V1alphab\x06proto3"

var (
	file_artifact_artifact_v1alpha_file_catalog_proto_rawDescOnce sync.Once
	file_artifact_artifact_v1alpha_file_catalog_proto_rawDescData []byte
)

func file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP() []byte {
	file_artifact_artifact_v1alpha_file_catalog_proto_rawDescOnce.Do(func() {
		file_artifact_artifact_v1alpha_file_catalog_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_artifact_artifact_v1alpha_file_catalog_proto_rawDesc), len(file_artifact_artifact_v1alpha_file_catalog_proto_rawDesc)))
	})
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescData
}

var file_artifact_artifact_v1alpha_file_catalog_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_artifact_artifact_v1alpha_file_catalog_proto_goTypes = []any{
	(GetFileCatalogResponse_ChunkType)(0),       // 0: artifact.artifact.v1alpha.GetFileCatalogResponse.ChunkType
	(*GetFileCatalogRequest)(nil),               // 1: artifact.artifact.v1alpha.GetFileCatalogRequest
	(*GetFileCatalogResponse)(nil),              // 2: artifact.artifact.v1alpha.GetFileCatalogResponse
	(*GetFileAsMarkdownRequest)(nil),            // 3: artifact.artifact.v1alpha.GetFileAsMarkdownRequest
	(*GetFileAsMarkdownResponse)(nil),           // 4: artifact.artifact.v1alpha.GetFileAsMarkdownResponse
	(*GetChatFileRequest)(nil),                  // 5: artifact.artifact.v1alpha.GetChatFileRequest
	(*GetChatFileResponse)(nil),                 // 6: artifact.artifact.v1alpha.GetChatFileResponse
	(*GetFileAsMarkdownAdminRequest)(nil),       // 7: artifact.artifact.v1alpha.GetFileAsMarkdownAdminRequest
	(*GetFileAsMarkdownAdminResponse)(nil),      // 8: artifact.artifact.v1alpha.GetFileAsMarkdownAdminResponse
	(*GetChatFileAdminRequest)(nil),             // 9: artifact.artifact.v1alpha.GetChatFileAdminRequest
	(*GetChatFileAdminResponse)(nil),            // 10: artifact.artifact.v1alpha.GetChatFileAdminResponse
	(*GetFileCatalogResponse_FileMetadata)(nil), // 11: artifact.artifact.v1alpha.GetFileCatalogResponse.FileMetadata
	(*GetFileCatalogResponse_Text)(nil),         // 12: artifact.artifact.v1alpha.GetFileCatalogResponse.Text
	(*GetFileCatalogResponse_Chunk)(nil),        // 13: artifact.artifact.v1alpha.GetFileCatalogResponse.Chunk
	(File_Type)(0),                              // 14: artifact.artifact.v1alpha.File.Type
	(*timestamppb.Timestamp)(nil),               // 15: google.protobuf.Timestamp
	(FileProcessStatus)(0),                      // 16: artifact.artifact.v1alpha.FileProcessStatus
}
var file_artifact_artifact_v1alpha_file_catalog_proto_depIdxs = []int32{
	11, // 0: artifact.artifact.v1alpha.GetFileCatalogResponse.file_metadata:type_name -> artifact.artifact.v1alpha.GetFileCatalogResponse.FileMetadata
	12, // 1: artifact.artifact.v1alpha.GetFileCatalogResponse.text:type_name -> artifact.artifact.v1alpha.GetFileCatalogResponse.Text
	13, // 2: artifact.artifact.v1alpha.GetFileCatalogResponse.chunks:type_name -> artifact.artifact.v1alpha.GetFileCatalogResponse.Chunk
	14, // 3: artifact.artifact.v1alpha.GetFileCatalogResponse.FileMetadata.file_type:type_name -> artifact.artifact.v1alpha.File.Type
	15, // 4: artifact.artifact.v1alpha.GetFileCatalogResponse.FileMetadata.create_time:type_name -> google.protobuf.Timestamp
	16, // 5: artifact.artifact.v1alpha.GetFileCatalogResponse.FileMetadata.process_status:type_name -> artifact.artifact.v1alpha.FileProcessStatus
	15, // 6: artifact.artifact.v1alpha.GetFileCatalogResponse.Text.update_time:type_name -> google.protobuf.Timestamp
	0,  // 7: artifact.artifact.v1alpha.GetFileCatalogResponse.Chunk.type:type_name -> artifact.artifact.v1alpha.GetFileCatalogResponse.ChunkType
	15, // 8: artifact.artifact.v1alpha.GetFileCatalogResponse.Chunk.create_time:type_name -> google.protobuf.Timestamp
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_artifact_artifact_v1alpha_file_catalog_proto_init() }
func file_artifact_artifact_v1alpha_file_catalog_proto_init() {
	if File_artifact_artifact_v1alpha_file_catalog_proto != nil {
		return
	}
	file_artifact_artifact_v1alpha_artifact_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_artifact_artifact_v1alpha_file_catalog_proto_rawDesc), len(file_artifact_artifact_v1alpha_file_catalog_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_artifact_artifact_v1alpha_file_catalog_proto_goTypes,
		DependencyIndexes: file_artifact_artifact_v1alpha_file_catalog_proto_depIdxs,
		EnumInfos:         file_artifact_artifact_v1alpha_file_catalog_proto_enumTypes,
		MessageInfos:      file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes,
	}.Build()
	File_artifact_artifact_v1alpha_file_catalog_proto = out.File
	file_artifact_artifact_v1alpha_file_catalog_proto_goTypes = nil
	file_artifact_artifact_v1alpha_file_catalog_proto_depIdxs = nil
}
