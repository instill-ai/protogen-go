// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: artifact/artifact/v1alpha/file_catalog.proto

package artifactv1alpha

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// chunk type
type GetFileCatalogResponse_ChunkType int32

const (
	// unspecified
	GetFileCatalogResponse_CHUNK_TYPE_UNSPECIFIED GetFileCatalogResponse_ChunkType = 0
	// text
	GetFileCatalogResponse_CHUNK_TYPE_TEXT GetFileCatalogResponse_ChunkType = 1
	// image
	GetFileCatalogResponse_CHUNK_TYPE_IMAGE GetFileCatalogResponse_ChunkType = 2
	// audio
	GetFileCatalogResponse_CHUNK_TYPE_AUDIO GetFileCatalogResponse_ChunkType = 3
	// video
	GetFileCatalogResponse_CHUNK_TYPE_VIDEO GetFileCatalogResponse_ChunkType = 4
)

// Enum value maps for GetFileCatalogResponse_ChunkType.
var (
	GetFileCatalogResponse_ChunkType_name = map[int32]string{
		0: "CHUNK_TYPE_UNSPECIFIED",
		1: "CHUNK_TYPE_TEXT",
		2: "CHUNK_TYPE_IMAGE",
		3: "CHUNK_TYPE_AUDIO",
		4: "CHUNK_TYPE_VIDEO",
	}
	GetFileCatalogResponse_ChunkType_value = map[string]int32{
		"CHUNK_TYPE_UNSPECIFIED": 0,
		"CHUNK_TYPE_TEXT":        1,
		"CHUNK_TYPE_IMAGE":       2,
		"CHUNK_TYPE_AUDIO":       3,
		"CHUNK_TYPE_VIDEO":       4,
	}
)

func (x GetFileCatalogResponse_ChunkType) Enum() *GetFileCatalogResponse_ChunkType {
	p := new(GetFileCatalogResponse_ChunkType)
	*p = x
	return p
}

func (x GetFileCatalogResponse_ChunkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetFileCatalogResponse_ChunkType) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_artifact_v1alpha_file_catalog_proto_enumTypes[0].Descriptor()
}

func (GetFileCatalogResponse_ChunkType) Type() protoreflect.EnumType {
	return &file_artifact_artifact_v1alpha_file_catalog_proto_enumTypes[0]
}

func (x GetFileCatalogResponse_ChunkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetFileCatalogResponse_ChunkType.Descriptor instead.
func (GetFileCatalogResponse_ChunkType) EnumDescriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{1, 0}
}

// GetFileCatalogRequest
type GetFileCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the namespace
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// id of the catalog
	CatalogId string `protobuf:"bytes,2,opt,name=catalog_id,json=catalogId,proto3" json:"catalog_id,omitempty"`
	// id of the file(i.e. file name)
	FileId string `protobuf:"bytes,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	// Uid of the file
	FileUid string `protobuf:"bytes,4,opt,name=file_uid,json=fileUid,proto3" json:"file_uid,omitempty"`
}

func (x *GetFileCatalogRequest) Reset() {
	*x = GetFileCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileCatalogRequest) ProtoMessage() {}

func (x *GetFileCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileCatalogRequest.ProtoReflect.Descriptor instead.
func (*GetFileCatalogRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{0}
}

func (x *GetFileCatalogRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *GetFileCatalogRequest) GetCatalogId() string {
	if x != nil {
		return x.CatalogId
	}
	return ""
}

func (x *GetFileCatalogRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *GetFileCatalogRequest) GetFileUid() string {
	if x != nil {
		return x.FileUid
	}
	return ""
}

// GetFileCatalogResponse
type GetFileCatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// original data is encoded in base64
	OriginalData string `protobuf:"bytes,1,opt,name=original_data,json=originalData,proto3" json:"original_data,omitempty"`
	// file catalog
	Metadata *GetFileCatalogResponse_Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// text
	Text *GetFileCatalogResponse_Text `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// chunks
	Chunks []*GetFileCatalogResponse_Chunk `protobuf:"bytes,4,rep,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *GetFileCatalogResponse) Reset() {
	*x = GetFileCatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileCatalogResponse) ProtoMessage() {}

func (x *GetFileCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileCatalogResponse.ProtoReflect.Descriptor instead.
func (*GetFileCatalogResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{1}
}

func (x *GetFileCatalogResponse) GetOriginalData() string {
	if x != nil {
		return x.OriginalData
	}
	return ""
}

func (x *GetFileCatalogResponse) GetMetadata() *GetFileCatalogResponse_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetFileCatalogResponse) GetText() *GetFileCatalogResponse_Text {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *GetFileCatalogResponse) GetChunks() []*GetFileCatalogResponse_Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

// GetChatFileRequest
type GetChatFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the namespace
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// id of the catalog
	CatalogId string `protobuf:"bytes,2,opt,name=catalog_id,json=catalogId,proto3" json:"catalog_id,omitempty"`
	// id of the file(i.e. file name)
	FileId string `protobuf:"bytes,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
}

func (x *GetChatFileRequest) Reset() {
	*x = GetChatFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatFileRequest) ProtoMessage() {}

func (x *GetChatFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatFileRequest.ProtoReflect.Descriptor instead.
func (*GetChatFileRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{2}
}

func (x *GetChatFileRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *GetChatFileRequest) GetCatalogId() string {
	if x != nil {
		return x.CatalogId
	}
	return ""
}

func (x *GetChatFileRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

// GetChatFileResponse
type GetChatFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// converted markdown content
	Markdown string `protobuf:"bytes,1,opt,name=markdown,proto3" json:"markdown,omitempty"`
}

func (x *GetChatFileResponse) Reset() {
	*x = GetChatFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChatFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChatFileResponse) ProtoMessage() {}

func (x *GetChatFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChatFileResponse.ProtoReflect.Descriptor instead.
func (*GetChatFileResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{3}
}

func (x *GetChatFileResponse) GetMarkdown() string {
	if x != nil {
		return x.Markdown
	}
	return ""
}

// metadata
type GetFileCatalogResponse_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// file uid
	FileUid string `protobuf:"bytes,1,opt,name=file_uid,json=fileUid,proto3" json:"file_uid,omitempty"`
	// file id
	FileId string `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	// file type
	FileType FileType `protobuf:"varint,3,opt,name=file_type,json=fileType,proto3,enum=artifact.artifact.v1alpha.FileType" json:"file_type,omitempty"`
	// file size in bytes
	FileSize int64 `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	// upload time
	FileUploadTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=file_upload_time,json=fileUploadTime,proto3" json:"file_upload_time,omitempty"`
	// file process status
	FileProcessStatus FileProcessStatus `protobuf:"varint,6,opt,name=file_process_status,json=fileProcessStatus,proto3,enum=artifact.artifact.v1alpha.FileProcessStatus" json:"file_process_status,omitempty"`
}

func (x *GetFileCatalogResponse_Metadata) Reset() {
	*x = GetFileCatalogResponse_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileCatalogResponse_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileCatalogResponse_Metadata) ProtoMessage() {}

func (x *GetFileCatalogResponse_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileCatalogResponse_Metadata.ProtoReflect.Descriptor instead.
func (*GetFileCatalogResponse_Metadata) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetFileCatalogResponse_Metadata) GetFileUid() string {
	if x != nil {
		return x.FileUid
	}
	return ""
}

func (x *GetFileCatalogResponse_Metadata) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *GetFileCatalogResponse_Metadata) GetFileType() FileType {
	if x != nil {
		return x.FileType
	}
	return FileType_FILE_TYPE_UNSPECIFIED
}

func (x *GetFileCatalogResponse_Metadata) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *GetFileCatalogResponse_Metadata) GetFileUploadTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FileUploadTime
	}
	return nil
}

func (x *GetFileCatalogResponse_Metadata) GetFileProcessStatus() FileProcessStatus {
	if x != nil {
		return x.FileProcessStatus
	}
	return FileProcessStatus_FILE_PROCESS_STATUS_UNSPECIFIED
}

// text message
type GetFileCatalogResponse_Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pipelines
	PipelineIds []string `protobuf:"bytes,1,rep,name=pipeline_ids,json=pipelineIds,proto3" json:"pipeline_ids,omitempty"`
	// transformed content
	TransformedContent string `protobuf:"bytes,2,opt,name=transformed_content,json=transformedContent,proto3" json:"transformed_content,omitempty"`
	// transformed content chunk number
	TransformedContentChunkNum int32 `protobuf:"varint,3,opt,name=transformed_content_chunk_num,json=transformedContentChunkNum,proto3" json:"transformed_content_chunk_num,omitempty"`
	// transformed content token number
	TransformedContentTokenNum int32 `protobuf:"varint,4,opt,name=transformed_content_token_num,json=transformedContentTokenNum,proto3" json:"transformed_content_token_num,omitempty"`
	// transformed content update time
	TransformedContentUpdateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=transformed_content_update_time,json=transformedContentUpdateTime,proto3" json:"transformed_content_update_time,omitempty"`
}

func (x *GetFileCatalogResponse_Text) Reset() {
	*x = GetFileCatalogResponse_Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileCatalogResponse_Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileCatalogResponse_Text) ProtoMessage() {}

func (x *GetFileCatalogResponse_Text) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileCatalogResponse_Text.ProtoReflect.Descriptor instead.
func (*GetFileCatalogResponse_Text) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{1, 1}
}

func (x *GetFileCatalogResponse_Text) GetPipelineIds() []string {
	if x != nil {
		return x.PipelineIds
	}
	return nil
}

func (x *GetFileCatalogResponse_Text) GetTransformedContent() string {
	if x != nil {
		return x.TransformedContent
	}
	return ""
}

func (x *GetFileCatalogResponse_Text) GetTransformedContentChunkNum() int32 {
	if x != nil {
		return x.TransformedContentChunkNum
	}
	return 0
}

func (x *GetFileCatalogResponse_Text) GetTransformedContentTokenNum() int32 {
	if x != nil {
		return x.TransformedContentTokenNum
	}
	return 0
}

func (x *GetFileCatalogResponse_Text) GetTransformedContentUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransformedContentUpdateTime
	}
	return nil
}

// chunk message
type GetFileCatalogResponse_Chunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// chunk uid
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// chunk type. i.e. text, image, audio, and video
	Type GetFileCatalogResponse_ChunkType `protobuf:"varint,2,opt,name=type,proto3,enum=artifact.artifact.v1alpha.GetFileCatalogResponse_ChunkType" json:"type,omitempty"`
	// chunk start position
	StartPos int32 `protobuf:"varint,3,opt,name=start_pos,json=startPos,proto3" json:"start_pos,omitempty"`
	// chunk end position
	EndPos int32 `protobuf:"varint,4,opt,name=end_pos,json=endPos,proto3" json:"end_pos,omitempty"`
	// chunk content
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	// chunk tokens num
	TokensNum int32 `protobuf:"varint,6,opt,name=tokens_num,json=tokensNum,proto3" json:"tokens_num,omitempty"`
	// embedding. float32 array
	Embedding []float32 `protobuf:"fixed32,7,rep,packed,name=embedding,proto3" json:"embedding,omitempty"`
	// chunk create time
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// chunk retrievable
	Retrievable bool `protobuf:"varint,9,opt,name=retrievable,proto3" json:"retrievable,omitempty"`
}

func (x *GetFileCatalogResponse_Chunk) Reset() {
	*x = GetFileCatalogResponse_Chunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileCatalogResponse_Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileCatalogResponse_Chunk) ProtoMessage() {}

func (x *GetFileCatalogResponse_Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileCatalogResponse_Chunk.ProtoReflect.Descriptor instead.
func (*GetFileCatalogResponse_Chunk) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP(), []int{1, 2}
}

func (x *GetFileCatalogResponse_Chunk) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *GetFileCatalogResponse_Chunk) GetType() GetFileCatalogResponse_ChunkType {
	if x != nil {
		return x.Type
	}
	return GetFileCatalogResponse_CHUNK_TYPE_UNSPECIFIED
}

func (x *GetFileCatalogResponse_Chunk) GetStartPos() int32 {
	if x != nil {
		return x.StartPos
	}
	return 0
}

func (x *GetFileCatalogResponse_Chunk) GetEndPos() int32 {
	if x != nil {
		return x.EndPos
	}
	return 0
}

func (x *GetFileCatalogResponse_Chunk) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetFileCatalogResponse_Chunk) GetTokensNum() int32 {
	if x != nil {
		return x.TokensNum
	}
	return 0
}

func (x *GetFileCatalogResponse_Chunk) GetEmbedding() []float32 {
	if x != nil {
		return x.Embedding
	}
	return nil
}

func (x *GetFileCatalogResponse_Chunk) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *GetFileCatalogResponse_Chunk) GetRetrievable() bool {
	if x != nil {
		return x.Retrievable
	}
	return false
}

var File_artifact_artifact_v1alpha_file_catalog_proto protoreflect.FileDescriptor

var file_artifact_artifact_v1alpha_file_catalog_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x28, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c,
	0x65, 0x55, 0x69, 0x64, 0x22, 0x95, 0x0b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x1a, 0xc1, 0x02, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x5c, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xc3, 0x02,
	0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x41, 0x0a,
	0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x75, 0x6d,
	0x12, 0x61, 0x0a, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x1a, 0xd6, 0x02, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x4f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x65, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4e, 0x75, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x7e, 0x0a, 0x09,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x55,
	0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48,
	0x55, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x55, 0x44, 0x49, 0x4f, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x04, 0x22, 0x6f, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x31, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x42, 0x84, 0x02, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x42, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2d, 0x61, 0x69, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x3b, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0xa2, 0x02, 0x03, 0x41, 0x41, 0x58, 0xaa, 0x02, 0x19, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0xca, 0x02, 0x19, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x5c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0xe2, 0x02, 0x25, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5c, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x3a, 0x3a, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x3a, 0x3a,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_artifact_artifact_v1alpha_file_catalog_proto_rawDescOnce sync.Once
	file_artifact_artifact_v1alpha_file_catalog_proto_rawDescData = file_artifact_artifact_v1alpha_file_catalog_proto_rawDesc
)

func file_artifact_artifact_v1alpha_file_catalog_proto_rawDescGZIP() []byte {
	file_artifact_artifact_v1alpha_file_catalog_proto_rawDescOnce.Do(func() {
		file_artifact_artifact_v1alpha_file_catalog_proto_rawDescData = protoimpl.X.CompressGZIP(file_artifact_artifact_v1alpha_file_catalog_proto_rawDescData)
	})
	return file_artifact_artifact_v1alpha_file_catalog_proto_rawDescData
}

var file_artifact_artifact_v1alpha_file_catalog_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_artifact_artifact_v1alpha_file_catalog_proto_goTypes = []interface{}{
	(GetFileCatalogResponse_ChunkType)(0),   // 0: artifact.artifact.v1alpha.GetFileCatalogResponse.ChunkType
	(*GetFileCatalogRequest)(nil),           // 1: artifact.artifact.v1alpha.GetFileCatalogRequest
	(*GetFileCatalogResponse)(nil),          // 2: artifact.artifact.v1alpha.GetFileCatalogResponse
	(*GetChatFileRequest)(nil),              // 3: artifact.artifact.v1alpha.GetChatFileRequest
	(*GetChatFileResponse)(nil),             // 4: artifact.artifact.v1alpha.GetChatFileResponse
	(*GetFileCatalogResponse_Metadata)(nil), // 5: artifact.artifact.v1alpha.GetFileCatalogResponse.Metadata
	(*GetFileCatalogResponse_Text)(nil),     // 6: artifact.artifact.v1alpha.GetFileCatalogResponse.Text
	(*GetFileCatalogResponse_Chunk)(nil),    // 7: artifact.artifact.v1alpha.GetFileCatalogResponse.Chunk
	(FileType)(0),                           // 8: artifact.artifact.v1alpha.FileType
	(*timestamppb.Timestamp)(nil),           // 9: google.protobuf.Timestamp
	(FileProcessStatus)(0),                  // 10: artifact.artifact.v1alpha.FileProcessStatus
}
var file_artifact_artifact_v1alpha_file_catalog_proto_depIdxs = []int32{
	5,  // 0: artifact.artifact.v1alpha.GetFileCatalogResponse.metadata:type_name -> artifact.artifact.v1alpha.GetFileCatalogResponse.Metadata
	6,  // 1: artifact.artifact.v1alpha.GetFileCatalogResponse.text:type_name -> artifact.artifact.v1alpha.GetFileCatalogResponse.Text
	7,  // 2: artifact.artifact.v1alpha.GetFileCatalogResponse.chunks:type_name -> artifact.artifact.v1alpha.GetFileCatalogResponse.Chunk
	8,  // 3: artifact.artifact.v1alpha.GetFileCatalogResponse.Metadata.file_type:type_name -> artifact.artifact.v1alpha.FileType
	9,  // 4: artifact.artifact.v1alpha.GetFileCatalogResponse.Metadata.file_upload_time:type_name -> google.protobuf.Timestamp
	10, // 5: artifact.artifact.v1alpha.GetFileCatalogResponse.Metadata.file_process_status:type_name -> artifact.artifact.v1alpha.FileProcessStatus
	9,  // 6: artifact.artifact.v1alpha.GetFileCatalogResponse.Text.transformed_content_update_time:type_name -> google.protobuf.Timestamp
	0,  // 7: artifact.artifact.v1alpha.GetFileCatalogResponse.Chunk.type:type_name -> artifact.artifact.v1alpha.GetFileCatalogResponse.ChunkType
	9,  // 8: artifact.artifact.v1alpha.GetFileCatalogResponse.Chunk.create_time:type_name -> google.protobuf.Timestamp
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_artifact_artifact_v1alpha_file_catalog_proto_init() }
func file_artifact_artifact_v1alpha_file_catalog_proto_init() {
	if File_artifact_artifact_v1alpha_file_catalog_proto != nil {
		return
	}
	file_artifact_artifact_v1alpha_artifact_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileCatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChatFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileCatalogResponse_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileCatalogResponse_Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileCatalogResponse_Chunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_artifact_artifact_v1alpha_file_catalog_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_artifact_artifact_v1alpha_file_catalog_proto_goTypes,
		DependencyIndexes: file_artifact_artifact_v1alpha_file_catalog_proto_depIdxs,
		EnumInfos:         file_artifact_artifact_v1alpha_file_catalog_proto_enumTypes,
		MessageInfos:      file_artifact_artifact_v1alpha_file_catalog_proto_msgTypes,
	}.Build()
	File_artifact_artifact_v1alpha_file_catalog_proto = out.File
	file_artifact_artifact_v1alpha_file_catalog_proto_rawDesc = nil
	file_artifact_artifact_v1alpha_file_catalog_proto_goTypes = nil
	file_artifact_artifact_v1alpha_file_catalog_proto_depIdxs = nil
}
