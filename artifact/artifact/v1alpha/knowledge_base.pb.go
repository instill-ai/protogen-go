// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: artifact/artifact/v1alpha/knowledge_base.proto

package artifactv1alpha

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Knowledge Base Type. e.g. "persistent" or "ephemeral"
type KnowledgeBaseType int32

const (
	// UNSPECIFIED
	KnowledgeBaseType_KNOWLEDGE_BASE_TYPE_UNSPECIFIED KnowledgeBaseType = 0
	// PERSISTENT
	KnowledgeBaseType_KNOWLEDGE_BASE_TYPE_PERSISTENT KnowledgeBaseType = 1
	// EPHEMERAL
	KnowledgeBaseType_KNOWLEDGE_BASE_TYPE_EPHEMERAL KnowledgeBaseType = 2
)

// Enum value maps for KnowledgeBaseType.
var (
	KnowledgeBaseType_name = map[int32]string{
		0: "KNOWLEDGE_BASE_TYPE_UNSPECIFIED",
		1: "KNOWLEDGE_BASE_TYPE_PERSISTENT",
		2: "KNOWLEDGE_BASE_TYPE_EPHEMERAL",
	}
	KnowledgeBaseType_value = map[string]int32{
		"KNOWLEDGE_BASE_TYPE_UNSPECIFIED": 0,
		"KNOWLEDGE_BASE_TYPE_PERSISTENT":  1,
		"KNOWLEDGE_BASE_TYPE_EPHEMERAL":   2,
	}
)

func (x KnowledgeBaseType) Enum() *KnowledgeBaseType {
	p := new(KnowledgeBaseType)
	*p = x
	return p
}

func (x KnowledgeBaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KnowledgeBaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_artifact_v1alpha_knowledge_base_proto_enumTypes[0].Descriptor()
}

func (KnowledgeBaseType) Type() protoreflect.EnumType {
	return &file_artifact_artifact_v1alpha_knowledge_base_proto_enumTypes[0]
}

func (x KnowledgeBaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KnowledgeBaseType.Descriptor instead.
func (KnowledgeBaseType) EnumDescriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescGZIP(), []int{0}
}

// KnowledgeBase represents a knowledge base.
type KnowledgeBase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The knowledge base uid (internal UUID).
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// The knowledge base id (user-provided or system-generated).
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The resource name of the knowledge base.
	// Format: `namespaces/{namespace}/knowledge-bases/{knowledge_base}`.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The knowledge base description.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// The creation time of the knowledge base.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The last update time of the knowledge base.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The owner/namespace of the knowledge base.
	OwnerName string `protobuf:"bytes,7,opt,name=owner_name,json=ownerName,proto3" json:"owner_name,omitempty"`
	// The knowledge base tags.
	Tags []string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	// The knowledge base converting pipelines.
	// Deprecated: Conversion is now handled by AI providers.
	//
	// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/knowledge_base.proto.
	ConvertingPipelines []string `protobuf:"bytes,9,rep,name=converting_pipelines,json=convertingPipelines,proto3" json:"converting_pipelines,omitempty"`
	// The knowledge base splitting pipelines.
	// Deprecated: Chunking is now handled internally.
	//
	// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/knowledge_base.proto.
	SplittingPipelines []string `protobuf:"bytes,10,rep,name=splitting_pipelines,json=splittingPipelines,proto3" json:"splitting_pipelines,omitempty"`
	// The knowledge base embedding pipelines.
	// Deprecated: Use embedding_config instead.
	//
	// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/knowledge_base.proto.
	EmbeddingPipelines []string `protobuf:"bytes,11,rep,name=embedding_pipelines,json=embeddingPipelines,proto3" json:"embedding_pipelines,omitempty"`
	// The downstream apps
	DownstreamApps []string `protobuf:"bytes,12,rep,name=downstream_apps,json=downstreamApps,proto3" json:"downstream_apps,omitempty"`
	// The total files in knowledge base.
	TotalFiles uint32 `protobuf:"varint,13,opt,name=total_files,json=totalFiles,proto3" json:"total_files,omitempty"`
	// The total tokens in knowledge base.
	TotalTokens uint32 `protobuf:"varint,14,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	// The current used storage in knowledge base.
	UsedStorage uint64 `protobuf:"varint,15,opt,name=used_storage,json=usedStorage,proto3" json:"used_storage,omitempty"`
	// The knowledge base summarizing pipelines.
	// Deprecated: Summarization is now handled by AI providers.
	//
	// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/knowledge_base.proto.
	SummarizingPipelines []string `protobuf:"bytes,16,rep,name=summarizing_pipelines,json=summarizingPipelines,proto3" json:"summarizing_pipelines,omitempty"`
	// The embedding configuration for the knowledge base.
	EmbeddingConfig *KnowledgeBase_EmbeddingConfig `protobuf:"bytes,17,opt,name=embedding_config,json=embeddingConfig,proto3" json:"embedding_config,omitempty"`
	// The UID of the active Milvus collection for this knowledge base.
	// This supports collection versioning for embedding dimension changes.
	ActiveCollectionUid string `protobuf:"bytes,18,opt,name=active_collection_uid,json=activeCollectionUid,proto3" json:"active_collection_uid,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *KnowledgeBase) Reset() {
	*x = KnowledgeBase{}
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase) ProtoMessage() {}

func (x *KnowledgeBase) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase.ProtoReflect.Descriptor instead.
func (*KnowledgeBase) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescGZIP(), []int{0}
}

func (x *KnowledgeBase) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *KnowledgeBase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *KnowledgeBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KnowledgeBase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KnowledgeBase) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *KnowledgeBase) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *KnowledgeBase) GetOwnerName() string {
	if x != nil {
		return x.OwnerName
	}
	return ""
}

func (x *KnowledgeBase) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/knowledge_base.proto.
func (x *KnowledgeBase) GetConvertingPipelines() []string {
	if x != nil {
		return x.ConvertingPipelines
	}
	return nil
}

// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/knowledge_base.proto.
func (x *KnowledgeBase) GetSplittingPipelines() []string {
	if x != nil {
		return x.SplittingPipelines
	}
	return nil
}

// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/knowledge_base.proto.
func (x *KnowledgeBase) GetEmbeddingPipelines() []string {
	if x != nil {
		return x.EmbeddingPipelines
	}
	return nil
}

func (x *KnowledgeBase) GetDownstreamApps() []string {
	if x != nil {
		return x.DownstreamApps
	}
	return nil
}

func (x *KnowledgeBase) GetTotalFiles() uint32 {
	if x != nil {
		return x.TotalFiles
	}
	return 0
}

func (x *KnowledgeBase) GetTotalTokens() uint32 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *KnowledgeBase) GetUsedStorage() uint64 {
	if x != nil {
		return x.UsedStorage
	}
	return 0
}

// Deprecated: Marked as deprecated in artifact/artifact/v1alpha/knowledge_base.proto.
func (x *KnowledgeBase) GetSummarizingPipelines() []string {
	if x != nil {
		return x.SummarizingPipelines
	}
	return nil
}

func (x *KnowledgeBase) GetEmbeddingConfig() *KnowledgeBase_EmbeddingConfig {
	if x != nil {
		return x.EmbeddingConfig
	}
	return nil
}

func (x *KnowledgeBase) GetActiveCollectionUid() string {
	if x != nil {
		return x.ActiveCollectionUid
	}
	return ""
}

// CreateKnowledgeBaseRequest represents a request to create a knowledge base.
type CreateKnowledgeBaseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The knowledge base's owner(namespaces).
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The knowledge base id (user-provided or auto-generated).
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The knowledge base description.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The knowledge base tags.
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// The knowledge base type. default is PERSISTENT
	Type KnowledgeBaseType `protobuf:"varint,5,opt,name=type,proto3,enum=artifact.artifact.v1alpha.KnowledgeBaseType" json:"type,omitempty"`
	// Pipelines used for converting page-based documents (i.e., files with pdf,
	// doc[x] or ppt[x] extension) to Markdown. The strings in the list identify
	// the pipelines and MUST have the format
	// `{namespaceID}/{pipelineID}@{version}`. The pipeline recipes MUST have the
	// following variable and output fields:
	// ```yaml variable
	// variable:
	//
	//	document_input:
	//	  title: document-input
	//	  description: Upload a document (PDF/DOCX/DOC/PPTX/PPT)
	//	  type: file
	//
	// ```
	// The `convert_result` output should be a list of strings, one per page.
	// ```yaml output
	// output:
	//
	//	convert_result:
	//	  title: convert-result
	//	  value: ${merge-markdown-refinement.output.results[0]}
	//
	// ```
	// Other variable and output fields will be ignored.
	//
	// The pipelines will be executed in order until one produces a successful,
	// non-empty result.
	//
	// If no pipelines are provided, a default pipeline will be used. For
	// non-document knowledge base files, the conversion pipeline is deterministic (such
	// files are typically trivial to convert and don't require a dedicated
	// pipeline to improve the conversion performance).
	ConvertingPipelines []string `protobuf:"bytes,6,rep,name=converting_pipelines,json=convertingPipelines,proto3" json:"converting_pipelines,omitempty"`
	// System ID to use for this knowledge base.
	// References a system configuration in the system table that defines how the knowledge base
	// will be created based on the system's RAG configurations including:
	// - AI model family (e.g., "openai", "gemini")
	// - Embedding vector dimensionality (e.g., 1536 for OpenAI, 3072 for Gemini)
	// - Chunking method
	// - Other RAG-related settings
	//
	// Available systems: "openai", "gemini", or custom systems defined in the system table.
	// If not specified, defaults to "openai" system.
	SystemId      *string `protobuf:"bytes,7,opt,name=system_id,json=systemId,proto3,oneof" json:"system_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateKnowledgeBaseRequest) Reset() {
	*x = CreateKnowledgeBaseRequest{}
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeBaseRequest) ProtoMessage() {}

func (x *CreateKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescGZIP(), []int{1}
}

func (x *CreateKnowledgeBaseRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *CreateKnowledgeBaseRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateKnowledgeBaseRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateKnowledgeBaseRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateKnowledgeBaseRequest) GetType() KnowledgeBaseType {
	if x != nil {
		return x.Type
	}
	return KnowledgeBaseType_KNOWLEDGE_BASE_TYPE_UNSPECIFIED
}

func (x *CreateKnowledgeBaseRequest) GetConvertingPipelines() []string {
	if x != nil {
		return x.ConvertingPipelines
	}
	return nil
}

func (x *CreateKnowledgeBaseRequest) GetSystemId() string {
	if x != nil && x.SystemId != nil {
		return *x.SystemId
	}
	return ""
}

// CreateKnowledgeBaseResponse represents a response for creating a knowledge base.
type CreateKnowledgeBaseResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The created knowledge base.
	KnowledgeBase *KnowledgeBase `protobuf:"bytes,1,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateKnowledgeBaseResponse) Reset() {
	*x = CreateKnowledgeBaseResponse{}
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKnowledgeBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeBaseResponse) ProtoMessage() {}

func (x *CreateKnowledgeBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeBaseResponse.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeBaseResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescGZIP(), []int{2}
}

func (x *CreateKnowledgeBaseResponse) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

// GetKnowledgeBaseRequest represents a request to get a knowledge base.
type GetKnowledgeBaseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace ID.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// Knowledge Base ID.
	KnowledgeBaseId string `protobuf:"bytes,2,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetKnowledgeBaseRequest) Reset() {
	*x = GetKnowledgeBaseRequest{}
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseRequest) ProtoMessage() {}

func (x *GetKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescGZIP(), []int{3}
}

func (x *GetKnowledgeBaseRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *GetKnowledgeBaseRequest) GetKnowledgeBaseId() string {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return ""
}

// GetKnowledgeBaseResponse represents a response for getting a knowledge base.
type GetKnowledgeBaseResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The knowledge base resource.
	KnowledgeBase *KnowledgeBase `protobuf:"bytes,1,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKnowledgeBaseResponse) Reset() {
	*x = GetKnowledgeBaseResponse{}
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseResponse) ProtoMessage() {}

func (x *GetKnowledgeBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseResponse.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescGZIP(), []int{4}
}

func (x *GetKnowledgeBaseResponse) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

// Request message for ListKnowledgeBases(not include the ephemeral knowledge bases)
type ListKnowledgeBasesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User ID for which to list the knowledge bases
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The maximum number of knowledge bases to return. If this parameter is unspecified,
	// at most 10 knowledge bases will be returned. The cap value for this parameter
	// is 100 (i.e. any value above that will be coerced to 100).
	PageSize *int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token.
	PageToken *string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
	// - `id="<knowledge_base_id>"` or `uid="<uuid>"` - Filter by specific knowledge base ID/UID
	// - `q="<text>"` - Fuzzy search on knowledge base ID and description
	//
	// **Examples**:
	// - Filter by ID: `id="my-knowledge-base"`
	// - Search knowledge bases: `q="my-knowledge-base"`
	Filter        *string `protobuf:"bytes,4,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListKnowledgeBasesRequest) Reset() {
	*x = ListKnowledgeBasesRequest{}
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKnowledgeBasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKnowledgeBasesRequest) ProtoMessage() {}

func (x *ListKnowledgeBasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKnowledgeBasesRequest.ProtoReflect.Descriptor instead.
func (*ListKnowledgeBasesRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescGZIP(), []int{5}
}

func (x *ListKnowledgeBasesRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *ListKnowledgeBasesRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListKnowledgeBasesRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListKnowledgeBasesRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

// ListKnowledgeBasesResponse represents a response for getting all knowledge bases from users.
type ListKnowledgeBasesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The knowledge bases container.
	KnowledgeBases []*KnowledgeBase `protobuf:"bytes,1,rep,name=knowledge_bases,json=knowledgeBases,proto3" json:"knowledge_bases,omitempty"`
	// Next page token.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// Total number of knowledge bases.
	TotalSize     int32 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListKnowledgeBasesResponse) Reset() {
	*x = ListKnowledgeBasesResponse{}
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKnowledgeBasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKnowledgeBasesResponse) ProtoMessage() {}

func (x *ListKnowledgeBasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKnowledgeBasesResponse.ProtoReflect.Descriptor instead.
func (*ListKnowledgeBasesResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescGZIP(), []int{6}
}

func (x *ListKnowledgeBasesResponse) GetKnowledgeBases() []*KnowledgeBase {
	if x != nil {
		return x.KnowledgeBases
	}
	return nil
}

func (x *ListKnowledgeBasesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListKnowledgeBasesResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

// UpdateKnowledgeBaseRequest represents a request to update a knowledge base.
type UpdateKnowledgeBaseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace ID.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// Knowledge Base ID.
	KnowledgeBaseId string `protobuf:"bytes,2,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"`
	// The knowledge base fields that will replace the existing ones.
	KnowledgeBase *KnowledgeBase `protobuf:"bytes,3,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"`
	// The update mask specifies the subset of fields that should be modified.
	//
	// For more information about this field, see
	// https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#field-mask.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateKnowledgeBaseRequest) Reset() {
	*x = UpdateKnowledgeBaseRequest{}
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeBaseRequest) ProtoMessage() {}

func (x *UpdateKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateKnowledgeBaseRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *UpdateKnowledgeBaseRequest) GetKnowledgeBaseId() string {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return ""
}

func (x *UpdateKnowledgeBaseRequest) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

func (x *UpdateKnowledgeBaseRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// UpdateKnowledgeBaseResponse represents a response for updating a knowledge base.
type UpdateKnowledgeBaseResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The updated knowledge base.
	KnowledgeBase *KnowledgeBase `protobuf:"bytes,1,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateKnowledgeBaseResponse) Reset() {
	*x = UpdateKnowledgeBaseResponse{}
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeBaseResponse) ProtoMessage() {}

func (x *UpdateKnowledgeBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeBaseResponse.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeBaseResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateKnowledgeBaseResponse) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

// DeleteKnowledgeBaseRequest represents a request to delete a knowledge base.
type DeleteKnowledgeBaseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The owner's id. i.e. namespace.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// The knowledge base id.
	KnowledgeBaseId string `protobuf:"bytes,2,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeleteKnowledgeBaseRequest) Reset() {
	*x = DeleteKnowledgeBaseRequest{}
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKnowledgeBaseRequest) ProtoMessage() {}

func (x *DeleteKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteKnowledgeBaseRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *DeleteKnowledgeBaseRequest) GetKnowledgeBaseId() string {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return ""
}

// DeleteKnowledgeBaseResponse represents a response for deleting a knowledge base.
type DeleteKnowledgeBaseResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The knowledge base identifier.
	KnowledgeBase *KnowledgeBase `protobuf:"bytes,1,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKnowledgeBaseResponse) Reset() {
	*x = DeleteKnowledgeBaseResponse{}
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKnowledgeBaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKnowledgeBaseResponse) ProtoMessage() {}

func (x *DeleteKnowledgeBaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKnowledgeBaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteKnowledgeBaseResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteKnowledgeBaseResponse) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

// EmbeddingConfig defines the embedding configuration for a knowledge base
type KnowledgeBase_EmbeddingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The AI model family used for embeddings (e.g., "gemini", "openai")
	ModelFamily string `protobuf:"bytes,1,opt,name=model_family,json=modelFamily,proto3" json:"model_family,omitempty"`
	// The dimensionality of the embedding vectors
	Dimensionality uint32 `protobuf:"varint,2,opt,name=dimensionality,proto3" json:"dimensionality,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *KnowledgeBase_EmbeddingConfig) Reset() {
	*x = KnowledgeBase_EmbeddingConfig{}
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase_EmbeddingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase_EmbeddingConfig) ProtoMessage() {}

func (x *KnowledgeBase_EmbeddingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase_EmbeddingConfig.ProtoReflect.Descriptor instead.
func (*KnowledgeBase_EmbeddingConfig) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescGZIP(), []int{0, 0}
}

func (x *KnowledgeBase_EmbeddingConfig) GetModelFamily() string {
	if x != nil {
		return x.ModelFamily
	}
	return ""
}

func (x *KnowledgeBase_EmbeddingConfig) GetDimensionality() uint32 {
	if x != nil {
		return x.Dimensionality
	}
	return 0
}

var File_artifact_artifact_v1alpha_knowledge_base_proto protoreflect.FileDescriptor

const file_artifact_artifact_v1alpha_knowledge_base_proto_rawDesc = "" +
	"\n" +
	".artifact/artifact/v1alpha/knowledge_base.proto\x12\x19artifact.artifact.v1alpha\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x85\b\n" +
	"\rKnowledgeBase\x12\x15\n" +
	"\x03uid\x18\x01 \x01(\tB\x03\xe0A\x03R\x03uid\x12\x13\n" +
	"\x02id\x18\x02 \x01(\tB\x03\xe0A\x05R\x02id\x12\x17\n" +
	"\x04name\x18\x03 \x01(\tB\x03\xe0A\x03R\x04name\x12%\n" +
	"\vdescription\x18\x04 \x01(\tB\x03\xe0A\x01R\vdescription\x12@\n" +
	"\vcreate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\x03\xe0A\x03R\n" +
	"createTime\x12@\n" +
	"\vupdate_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\x03\xe0A\x03R\n" +
	"updateTime\x12\"\n" +
	"\n" +
	"owner_name\x18\a \x01(\tB\x03\xe0A\x03R\townerName\x12\x17\n" +
	"\x04tags\x18\b \x03(\tB\x03\xe0A\x01R\x04tags\x128\n" +
	"\x14converting_pipelines\x18\t \x03(\tB\x05\xe0A\x01\x18\x01R\x13convertingPipelines\x126\n" +
	"\x13splitting_pipelines\x18\n" +
	" \x03(\tB\x05\xe0A\x01\x18\x01R\x12splittingPipelines\x126\n" +
	"\x13embedding_pipelines\x18\v \x03(\tB\x05\xe0A\x01\x18\x01R\x12embeddingPipelines\x12,\n" +
	"\x0fdownstream_apps\x18\f \x03(\tB\x03\xe0A\x03R\x0edownstreamApps\x12$\n" +
	"\vtotal_files\x18\r \x01(\rB\x03\xe0A\x03R\n" +
	"totalFiles\x12&\n" +
	"\ftotal_tokens\x18\x0e \x01(\rB\x03\xe0A\x03R\vtotalTokens\x12&\n" +
	"\fused_storage\x18\x0f \x01(\x04B\x03\xe0A\x03R\vusedStorage\x12:\n" +
	"\x15summarizing_pipelines\x18\x10 \x03(\tB\x05\xe0A\x01\x18\x01R\x14summarizingPipelines\x12h\n" +
	"\x10embedding_config\x18\x11 \x01(\v28.artifact.artifact.v1alpha.KnowledgeBase.EmbeddingConfigB\x03\xe0A\x01R\x0fembeddingConfig\x127\n" +
	"\x15active_collection_uid\x18\x12 \x01(\tB\x03\xe0A\x03R\x13activeCollectionUid\x1a\\\n" +
	"\x0fEmbeddingConfig\x12!\n" +
	"\fmodel_family\x18\x01 \x01(\tR\vmodelFamily\x12&\n" +
	"\x0edimensionality\x18\x02 \x01(\rR\x0edimensionality:<\xeaA9\x127namespaces/{namespace}/knowledge-bases/{knowledge_base}\"\xcd\x02\n" +
	"\x1aCreateKnowledgeBaseRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12\x13\n" +
	"\x02id\x18\x02 \x01(\tB\x03\xe0A\x01R\x02id\x12%\n" +
	"\vdescription\x18\x03 \x01(\tB\x03\xe0A\x01R\vdescription\x12\x17\n" +
	"\x04tags\x18\x04 \x03(\tB\x03\xe0A\x01R\x04tags\x12E\n" +
	"\x04type\x18\x05 \x01(\x0e2,.artifact.artifact.v1alpha.KnowledgeBaseTypeB\x03\xe0A\x01R\x04type\x126\n" +
	"\x14converting_pipelines\x18\x06 \x03(\tB\x03\xe0A\x01R\x13convertingPipelines\x12%\n" +
	"\tsystem_id\x18\a \x01(\tB\x03\xe0A\x01H\x00R\bsystemId\x88\x01\x01B\f\n" +
	"\n" +
	"_system_id\"s\n" +
	"\x1bCreateKnowledgeBaseResponse\x12T\n" +
	"\x0eknowledge_base\x18\x01 \x01(\v2(.artifact.artifact.v1alpha.KnowledgeBaseB\x03\xe0A\x03R\rknowledgeBase\"r\n" +
	"\x17GetKnowledgeBaseRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12/\n" +
	"\x11knowledge_base_id\x18\x02 \x01(\tB\x03\xe0A\x02R\x0fknowledgeBaseId\"p\n" +
	"\x18GetKnowledgeBaseResponse\x12T\n" +
	"\x0eknowledge_base\x18\x01 \x01(\v2(.artifact.artifact.v1alpha.KnowledgeBaseB\x03\xe0A\x03R\rknowledgeBase\"\xdd\x01\n" +
	"\x19ListKnowledgeBasesRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12%\n" +
	"\tpage_size\x18\x02 \x01(\x05B\x03\xe0A\x01H\x00R\bpageSize\x88\x01\x01\x12'\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tB\x03\xe0A\x01H\x01R\tpageToken\x88\x01\x01\x12 \n" +
	"\x06filter\x18\x04 \x01(\tB\x03\xe0A\x01H\x02R\x06filter\x88\x01\x01B\f\n" +
	"\n" +
	"_page_sizeB\r\n" +
	"\v_page_tokenB\t\n" +
	"\a_filter\"\xc5\x01\n" +
	"\x1aListKnowledgeBasesResponse\x12V\n" +
	"\x0fknowledge_bases\x18\x01 \x03(\v2(.artifact.artifact.v1alpha.KnowledgeBaseB\x03\xe0A\x03R\x0eknowledgeBases\x12+\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tB\x03\xe0A\x03R\rnextPageToken\x12\"\n" +
	"\n" +
	"total_size\x18\x03 \x01(\x05B\x03\xe0A\x03R\ttotalSize\"\x8d\x02\n" +
	"\x1aUpdateKnowledgeBaseRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12/\n" +
	"\x11knowledge_base_id\x18\x02 \x01(\tB\x03\xe0A\x02R\x0fknowledgeBaseId\x12T\n" +
	"\x0eknowledge_base\x18\x03 \x01(\v2(.artifact.artifact.v1alpha.KnowledgeBaseB\x03\xe0A\x02R\rknowledgeBase\x12@\n" +
	"\vupdate_mask\x18\x04 \x01(\v2\x1a.google.protobuf.FieldMaskB\x03\xe0A\x02R\n" +
	"updateMask\"s\n" +
	"\x1bUpdateKnowledgeBaseResponse\x12T\n" +
	"\x0eknowledge_base\x18\x01 \x01(\v2(.artifact.artifact.v1alpha.KnowledgeBaseB\x03\xe0A\x03R\rknowledgeBase\"u\n" +
	"\x1aDeleteKnowledgeBaseRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12/\n" +
	"\x11knowledge_base_id\x18\x02 \x01(\tB\x03\xe0A\x02R\x0fknowledgeBaseId\"s\n" +
	"\x1bDeleteKnowledgeBaseResponse\x12T\n" +
	"\x0eknowledge_base\x18\x01 \x01(\v2(.artifact.artifact.v1alpha.KnowledgeBaseB\x03\xe0A\x03R\rknowledgeBase*\x7f\n" +
	"\x11KnowledgeBaseType\x12#\n" +
	"\x1fKNOWLEDGE_BASE_TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eKNOWLEDGE_BASE_TYPE_PERSISTENT\x10\x01\x12!\n" +
	"\x1dKNOWLEDGE_BASE_TYPE_EPHEMERAL\x10\x02B\x86\x02\n" +
	"\x1dcom.artifact.artifact.v1alphaB\x12KnowledgeBaseProtoP\x01ZKgithub.com/instill-ai/protogen-go/artifact/artifact/v1alpha;artifactv1alpha\xa2\x02\x03AAX\xaa\x02\x19Artifact.Artifact.V1alpha\xca\x02\x19Artifact\\Artifact\\V1alpha\xe2\x02%Artifact\\Artifact\\V1alpha\\GPBMetadata\xea\x02\x1bArtifact::Artifact::V1alphab\x06proto3"

var (
	file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescOnce sync.Once
	file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescData []byte
)

func file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescGZIP() []byte {
	file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescOnce.Do(func() {
		file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_artifact_artifact_v1alpha_knowledge_base_proto_rawDesc), len(file_artifact_artifact_v1alpha_knowledge_base_proto_rawDesc)))
	})
	return file_artifact_artifact_v1alpha_knowledge_base_proto_rawDescData
}

var file_artifact_artifact_v1alpha_knowledge_base_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_artifact_artifact_v1alpha_knowledge_base_proto_goTypes = []any{
	(KnowledgeBaseType)(0),                // 0: artifact.artifact.v1alpha.KnowledgeBaseType
	(*KnowledgeBase)(nil),                 // 1: artifact.artifact.v1alpha.KnowledgeBase
	(*CreateKnowledgeBaseRequest)(nil),    // 2: artifact.artifact.v1alpha.CreateKnowledgeBaseRequest
	(*CreateKnowledgeBaseResponse)(nil),   // 3: artifact.artifact.v1alpha.CreateKnowledgeBaseResponse
	(*GetKnowledgeBaseRequest)(nil),       // 4: artifact.artifact.v1alpha.GetKnowledgeBaseRequest
	(*GetKnowledgeBaseResponse)(nil),      // 5: artifact.artifact.v1alpha.GetKnowledgeBaseResponse
	(*ListKnowledgeBasesRequest)(nil),     // 6: artifact.artifact.v1alpha.ListKnowledgeBasesRequest
	(*ListKnowledgeBasesResponse)(nil),    // 7: artifact.artifact.v1alpha.ListKnowledgeBasesResponse
	(*UpdateKnowledgeBaseRequest)(nil),    // 8: artifact.artifact.v1alpha.UpdateKnowledgeBaseRequest
	(*UpdateKnowledgeBaseResponse)(nil),   // 9: artifact.artifact.v1alpha.UpdateKnowledgeBaseResponse
	(*DeleteKnowledgeBaseRequest)(nil),    // 10: artifact.artifact.v1alpha.DeleteKnowledgeBaseRequest
	(*DeleteKnowledgeBaseResponse)(nil),   // 11: artifact.artifact.v1alpha.DeleteKnowledgeBaseResponse
	(*KnowledgeBase_EmbeddingConfig)(nil), // 12: artifact.artifact.v1alpha.KnowledgeBase.EmbeddingConfig
	(*timestamppb.Timestamp)(nil),         // 13: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),         // 14: google.protobuf.FieldMask
}
var file_artifact_artifact_v1alpha_knowledge_base_proto_depIdxs = []int32{
	13, // 0: artifact.artifact.v1alpha.KnowledgeBase.create_time:type_name -> google.protobuf.Timestamp
	13, // 1: artifact.artifact.v1alpha.KnowledgeBase.update_time:type_name -> google.protobuf.Timestamp
	12, // 2: artifact.artifact.v1alpha.KnowledgeBase.embedding_config:type_name -> artifact.artifact.v1alpha.KnowledgeBase.EmbeddingConfig
	0,  // 3: artifact.artifact.v1alpha.CreateKnowledgeBaseRequest.type:type_name -> artifact.artifact.v1alpha.KnowledgeBaseType
	1,  // 4: artifact.artifact.v1alpha.CreateKnowledgeBaseResponse.knowledge_base:type_name -> artifact.artifact.v1alpha.KnowledgeBase
	1,  // 5: artifact.artifact.v1alpha.GetKnowledgeBaseResponse.knowledge_base:type_name -> artifact.artifact.v1alpha.KnowledgeBase
	1,  // 6: artifact.artifact.v1alpha.ListKnowledgeBasesResponse.knowledge_bases:type_name -> artifact.artifact.v1alpha.KnowledgeBase
	1,  // 7: artifact.artifact.v1alpha.UpdateKnowledgeBaseRequest.knowledge_base:type_name -> artifact.artifact.v1alpha.KnowledgeBase
	14, // 8: artifact.artifact.v1alpha.UpdateKnowledgeBaseRequest.update_mask:type_name -> google.protobuf.FieldMask
	1,  // 9: artifact.artifact.v1alpha.UpdateKnowledgeBaseResponse.knowledge_base:type_name -> artifact.artifact.v1alpha.KnowledgeBase
	1,  // 10: artifact.artifact.v1alpha.DeleteKnowledgeBaseResponse.knowledge_base:type_name -> artifact.artifact.v1alpha.KnowledgeBase
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_artifact_artifact_v1alpha_knowledge_base_proto_init() }
func file_artifact_artifact_v1alpha_knowledge_base_proto_init() {
	if File_artifact_artifact_v1alpha_knowledge_base_proto != nil {
		return
	}
	file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[1].OneofWrappers = []any{}
	file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_artifact_artifact_v1alpha_knowledge_base_proto_rawDesc), len(file_artifact_artifact_v1alpha_knowledge_base_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_artifact_artifact_v1alpha_knowledge_base_proto_goTypes,
		DependencyIndexes: file_artifact_artifact_v1alpha_knowledge_base_proto_depIdxs,
		EnumInfos:         file_artifact_artifact_v1alpha_knowledge_base_proto_enumTypes,
		MessageInfos:      file_artifact_artifact_v1alpha_knowledge_base_proto_msgTypes,
	}.Build()
	File_artifact_artifact_v1alpha_knowledge_base_proto = out.File
	file_artifact_artifact_v1alpha_knowledge_base_proto_goTypes = nil
	file_artifact_artifact_v1alpha_knowledge_base_proto_depIdxs = nil
}
