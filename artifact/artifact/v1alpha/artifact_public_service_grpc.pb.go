// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: artifact/artifact/v1alpha/artifact_public_service.proto

package artifactv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArtifactPublicService_Liveness_FullMethodName             = "/artifact.artifact.v1alpha.ArtifactPublicService/Liveness"
	ArtifactPublicService_Readiness_FullMethodName            = "/artifact.artifact.v1alpha.ArtifactPublicService/Readiness"
	ArtifactPublicService_CreateCatalog_FullMethodName        = "/artifact.artifact.v1alpha.ArtifactPublicService/CreateCatalog"
	ArtifactPublicService_GetCatalog_FullMethodName           = "/artifact.artifact.v1alpha.ArtifactPublicService/GetCatalog"
	ArtifactPublicService_ListCatalogs_FullMethodName         = "/artifact.artifact.v1alpha.ArtifactPublicService/ListCatalogs"
	ArtifactPublicService_UpdateCatalog_FullMethodName        = "/artifact.artifact.v1alpha.ArtifactPublicService/UpdateCatalog"
	ArtifactPublicService_DeleteCatalog_FullMethodName        = "/artifact.artifact.v1alpha.ArtifactPublicService/DeleteCatalog"
	ArtifactPublicService_CreateFile_FullMethodName           = "/artifact.artifact.v1alpha.ArtifactPublicService/CreateFile"
	ArtifactPublicService_GetFile_FullMethodName              = "/artifact.artifact.v1alpha.ArtifactPublicService/GetFile"
	ArtifactPublicService_ListFiles_FullMethodName            = "/artifact.artifact.v1alpha.ArtifactPublicService/ListFiles"
	ArtifactPublicService_UpdateFile_FullMethodName           = "/artifact.artifact.v1alpha.ArtifactPublicService/UpdateFile"
	ArtifactPublicService_DeleteFile_FullMethodName           = "/artifact.artifact.v1alpha.ArtifactPublicService/DeleteFile"
	ArtifactPublicService_GetChunk_FullMethodName             = "/artifact.artifact.v1alpha.ArtifactPublicService/GetChunk"
	ArtifactPublicService_ListChunks_FullMethodName           = "/artifact.artifact.v1alpha.ArtifactPublicService/ListChunks"
	ArtifactPublicService_UpdateChunk_FullMethodName          = "/artifact.artifact.v1alpha.ArtifactPublicService/UpdateChunk"
	ArtifactPublicService_SearchChunks_FullMethodName         = "/artifact.artifact.v1alpha.ArtifactPublicService/SearchChunks"
	ArtifactPublicService_ListCatalogRuns_FullMethodName      = "/artifact.artifact.v1alpha.ArtifactPublicService/ListCatalogRuns"
	ArtifactPublicService_GetObjectUploadURL_FullMethodName   = "/artifact.artifact.v1alpha.ArtifactPublicService/GetObjectUploadURL"
	ArtifactPublicService_GetObjectDownloadURL_FullMethodName = "/artifact.artifact.v1alpha.ArtifactPublicService/GetObjectDownloadURL"
)

// ArtifactPublicServiceClient is the client API for ArtifactPublicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ArtifactPublicService exposes the public endpoints that allow clients to
// manage artifacts.
type ArtifactPublicServiceClient interface {
	// Check if the artifact server is alive
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Check if the artifact server is ready
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// Create a catalog
	//
	// Creates a catalog.
	CreateCatalog(ctx context.Context, in *CreateCatalogRequest, opts ...grpc.CallOption) (*CreateCatalogResponse, error)
	// Get a catalog
	//
	// Returns the details of a catalog.
	GetCatalog(ctx context.Context, in *GetCatalogRequest, opts ...grpc.CallOption) (*GetCatalogResponse, error)
	// Get all catalogs info
	//
	// Returns a paginated list of catalogs.
	ListCatalogs(ctx context.Context, in *ListCatalogsRequest, opts ...grpc.CallOption) (*ListCatalogsResponse, error)
	// Update a catalog info
	//
	// Updates the information of a catalog.
	UpdateCatalog(ctx context.Context, in *UpdateCatalogRequest, opts ...grpc.CallOption) (*UpdateCatalogResponse, error)
	// Delete a catalog
	//
	// Deletes a catalog.
	DeleteCatalog(ctx context.Context, in *DeleteCatalogRequest, opts ...grpc.CallOption) (*DeleteCatalogResponse, error)
	// Create a file
	//
	// Uploads and converts a file to a catalog.
	CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error)
	// Get a file
	//
	// Returns the details of a file.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	// List files
	//
	// Returns a paginated list of files.
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	// Update a file
	//
	// Updates a file.
	UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*UpdateFileResponse, error)
	// Delete a file
	//
	// Deletes a file.
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	// Get a chunk
	//
	// Returns the details of a chunk.
	GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error)
	// List chunks
	//
	// Returns a paginated list of chunks.
	ListChunks(ctx context.Context, in *ListChunksRequest, opts ...grpc.CallOption) (*ListChunksResponse, error)
	// Update a chunk
	//
	// Updates a chunk.
	UpdateChunk(ctx context.Context, in *UpdateChunkRequest, opts ...grpc.CallOption) (*UpdateChunkResponse, error)
	// Search chunks
	//
	// Returns the top-K most similar chunks to a text prompt.
	SearchChunks(ctx context.Context, in *SearchChunksRequest, opts ...grpc.CallOption) (*SearchChunksResponse, error)
	// List Catalog Runs
	//
	// Returns a paginated list of catalog runs.
	ListCatalogRuns(ctx context.Context, in *ListCatalogRunsRequest, opts ...grpc.CallOption) (*ListCatalogRunsResponse, error)
	// Get Object Upload URL
	//
	// Returns the upload URL of an object.
	GetObjectUploadURL(ctx context.Context, in *GetObjectUploadURLRequest, opts ...grpc.CallOption) (*GetObjectUploadURLResponse, error)
	// Get Object Download URL
	//
	// Returns the download URL of an object.
	GetObjectDownloadURL(ctx context.Context, in *GetObjectDownloadURLRequest, opts ...grpc.CallOption) (*GetObjectDownloadURLResponse, error)
}

type artifactPublicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtifactPublicServiceClient(cc grpc.ClientConnInterface) ArtifactPublicServiceClient {
	return &artifactPublicServiceClient{cc}
}

func (c *artifactPublicServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_Liveness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_Readiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) CreateCatalog(ctx context.Context, in *CreateCatalogRequest, opts ...grpc.CallOption) (*CreateCatalogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCatalogResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_CreateCatalog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) GetCatalog(ctx context.Context, in *GetCatalogRequest, opts ...grpc.CallOption) (*GetCatalogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCatalogResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_GetCatalog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) ListCatalogs(ctx context.Context, in *ListCatalogsRequest, opts ...grpc.CallOption) (*ListCatalogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCatalogsResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_ListCatalogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) UpdateCatalog(ctx context.Context, in *UpdateCatalogRequest, opts ...grpc.CallOption) (*UpdateCatalogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCatalogResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_UpdateCatalog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) DeleteCatalog(ctx context.Context, in *DeleteCatalogRequest, opts ...grpc.CallOption) (*DeleteCatalogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCatalogResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_DeleteCatalog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) CreateFile(ctx context.Context, in *CreateFileRequest, opts ...grpc.CallOption) (*CreateFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFileResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_CreateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_GetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_ListFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...grpc.CallOption) (*UpdateFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFileResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_UpdateFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) GetChunk(ctx context.Context, in *GetChunkRequest, opts ...grpc.CallOption) (*GetChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChunkResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_GetChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) ListChunks(ctx context.Context, in *ListChunksRequest, opts ...grpc.CallOption) (*ListChunksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChunksResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_ListChunks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) UpdateChunk(ctx context.Context, in *UpdateChunkRequest, opts ...grpc.CallOption) (*UpdateChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateChunkResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_UpdateChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) SearchChunks(ctx context.Context, in *SearchChunksRequest, opts ...grpc.CallOption) (*SearchChunksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchChunksResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_SearchChunks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) ListCatalogRuns(ctx context.Context, in *ListCatalogRunsRequest, opts ...grpc.CallOption) (*ListCatalogRunsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCatalogRunsResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_ListCatalogRuns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) GetObjectUploadURL(ctx context.Context, in *GetObjectUploadURLRequest, opts ...grpc.CallOption) (*GetObjectUploadURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObjectUploadURLResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_GetObjectUploadURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPublicServiceClient) GetObjectDownloadURL(ctx context.Context, in *GetObjectDownloadURLRequest, opts ...grpc.CallOption) (*GetObjectDownloadURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObjectDownloadURLResponse)
	err := c.cc.Invoke(ctx, ArtifactPublicService_GetObjectDownloadURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactPublicServiceServer is the server API for ArtifactPublicService service.
// All implementations should embed UnimplementedArtifactPublicServiceServer
// for forward compatibility.
//
// ArtifactPublicService exposes the public endpoints that allow clients to
// manage artifacts.
type ArtifactPublicServiceServer interface {
	// Check if the artifact server is alive
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Check if the artifact server is ready
	//
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// Create a catalog
	//
	// Creates a catalog.
	CreateCatalog(context.Context, *CreateCatalogRequest) (*CreateCatalogResponse, error)
	// Get a catalog
	//
	// Returns the details of a catalog.
	GetCatalog(context.Context, *GetCatalogRequest) (*GetCatalogResponse, error)
	// Get all catalogs info
	//
	// Returns a paginated list of catalogs.
	ListCatalogs(context.Context, *ListCatalogsRequest) (*ListCatalogsResponse, error)
	// Update a catalog info
	//
	// Updates the information of a catalog.
	UpdateCatalog(context.Context, *UpdateCatalogRequest) (*UpdateCatalogResponse, error)
	// Delete a catalog
	//
	// Deletes a catalog.
	DeleteCatalog(context.Context, *DeleteCatalogRequest) (*DeleteCatalogResponse, error)
	// Create a file
	//
	// Uploads and converts a file to a catalog.
	CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error)
	// Get a file
	//
	// Returns the details of a file.
	GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	// List files
	//
	// Returns a paginated list of files.
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	// Update a file
	//
	// Updates a file.
	UpdateFile(context.Context, *UpdateFileRequest) (*UpdateFileResponse, error)
	// Delete a file
	//
	// Deletes a file.
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	// Get a chunk
	//
	// Returns the details of a chunk.
	GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error)
	// List chunks
	//
	// Returns a paginated list of chunks.
	ListChunks(context.Context, *ListChunksRequest) (*ListChunksResponse, error)
	// Update a chunk
	//
	// Updates a chunk.
	UpdateChunk(context.Context, *UpdateChunkRequest) (*UpdateChunkResponse, error)
	// Search chunks
	//
	// Returns the top-K most similar chunks to a text prompt.
	SearchChunks(context.Context, *SearchChunksRequest) (*SearchChunksResponse, error)
	// List Catalog Runs
	//
	// Returns a paginated list of catalog runs.
	ListCatalogRuns(context.Context, *ListCatalogRunsRequest) (*ListCatalogRunsResponse, error)
	// Get Object Upload URL
	//
	// Returns the upload URL of an object.
	GetObjectUploadURL(context.Context, *GetObjectUploadURLRequest) (*GetObjectUploadURLResponse, error)
	// Get Object Download URL
	//
	// Returns the download URL of an object.
	GetObjectDownloadURL(context.Context, *GetObjectDownloadURLRequest) (*GetObjectDownloadURLResponse, error)
}

// UnimplementedArtifactPublicServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArtifactPublicServiceServer struct{}

func (UnimplementedArtifactPublicServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedArtifactPublicServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedArtifactPublicServiceServer) CreateCatalog(context.Context, *CreateCatalogRequest) (*CreateCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCatalog not implemented")
}
func (UnimplementedArtifactPublicServiceServer) GetCatalog(context.Context, *GetCatalogRequest) (*GetCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalog not implemented")
}
func (UnimplementedArtifactPublicServiceServer) ListCatalogs(context.Context, *ListCatalogsRequest) (*ListCatalogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCatalogs not implemented")
}
func (UnimplementedArtifactPublicServiceServer) UpdateCatalog(context.Context, *UpdateCatalogRequest) (*UpdateCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCatalog not implemented")
}
func (UnimplementedArtifactPublicServiceServer) DeleteCatalog(context.Context, *DeleteCatalogRequest) (*DeleteCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCatalog not implemented")
}
func (UnimplementedArtifactPublicServiceServer) CreateFile(context.Context, *CreateFileRequest) (*CreateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedArtifactPublicServiceServer) GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedArtifactPublicServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedArtifactPublicServiceServer) UpdateFile(context.Context, *UpdateFileRequest) (*UpdateFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedArtifactPublicServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedArtifactPublicServiceServer) GetChunk(context.Context, *GetChunkRequest) (*GetChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (UnimplementedArtifactPublicServiceServer) ListChunks(context.Context, *ListChunksRequest) (*ListChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChunks not implemented")
}
func (UnimplementedArtifactPublicServiceServer) UpdateChunk(context.Context, *UpdateChunkRequest) (*UpdateChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChunk not implemented")
}
func (UnimplementedArtifactPublicServiceServer) SearchChunks(context.Context, *SearchChunksRequest) (*SearchChunksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChunks not implemented")
}
func (UnimplementedArtifactPublicServiceServer) ListCatalogRuns(context.Context, *ListCatalogRunsRequest) (*ListCatalogRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCatalogRuns not implemented")
}
func (UnimplementedArtifactPublicServiceServer) GetObjectUploadURL(context.Context, *GetObjectUploadURLRequest) (*GetObjectUploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectUploadURL not implemented")
}
func (UnimplementedArtifactPublicServiceServer) GetObjectDownloadURL(context.Context, *GetObjectDownloadURLRequest) (*GetObjectDownloadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectDownloadURL not implemented")
}
func (UnimplementedArtifactPublicServiceServer) testEmbeddedByValue() {}

// UnsafeArtifactPublicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtifactPublicServiceServer will
// result in compilation errors.
type UnsafeArtifactPublicServiceServer interface {
	mustEmbedUnimplementedArtifactPublicServiceServer()
}

func RegisterArtifactPublicServiceServer(s grpc.ServiceRegistrar, srv ArtifactPublicServiceServer) {
	// If the following call pancis, it indicates UnimplementedArtifactPublicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArtifactPublicService_ServiceDesc, srv)
}

func _ArtifactPublicService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_Liveness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_Readiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_CreateCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).CreateCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_CreateCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).CreateCatalog(ctx, req.(*CreateCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_GetCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).GetCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_GetCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).GetCatalog(ctx, req.(*GetCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_ListCatalogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCatalogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).ListCatalogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_ListCatalogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).ListCatalogs(ctx, req.(*ListCatalogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_UpdateCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).UpdateCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_UpdateCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).UpdateCatalog(ctx, req.(*UpdateCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_DeleteCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).DeleteCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_DeleteCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).DeleteCatalog(ctx, req.(*DeleteCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_CreateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).CreateFile(ctx, req.(*CreateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_UpdateFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).UpdateFile(ctx, req.(*UpdateFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_GetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).GetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_GetChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).GetChunk(ctx, req.(*GetChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_ListChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).ListChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_ListChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).ListChunks(ctx, req.(*ListChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_UpdateChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).UpdateChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_UpdateChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).UpdateChunk(ctx, req.(*UpdateChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_SearchChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).SearchChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_SearchChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).SearchChunks(ctx, req.(*SearchChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_ListCatalogRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCatalogRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).ListCatalogRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_ListCatalogRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).ListCatalogRuns(ctx, req.(*ListCatalogRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_GetObjectUploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectUploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).GetObjectUploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_GetObjectUploadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).GetObjectUploadURL(ctx, req.(*GetObjectUploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPublicService_GetObjectDownloadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectDownloadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPublicServiceServer).GetObjectDownloadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPublicService_GetObjectDownloadURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPublicServiceServer).GetObjectDownloadURL(ctx, req.(*GetObjectDownloadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtifactPublicService_ServiceDesc is the grpc.ServiceDesc for ArtifactPublicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtifactPublicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "artifact.artifact.v1alpha.ArtifactPublicService",
	HandlerType: (*ArtifactPublicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _ArtifactPublicService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _ArtifactPublicService_Readiness_Handler,
		},
		{
			MethodName: "CreateCatalog",
			Handler:    _ArtifactPublicService_CreateCatalog_Handler,
		},
		{
			MethodName: "GetCatalog",
			Handler:    _ArtifactPublicService_GetCatalog_Handler,
		},
		{
			MethodName: "ListCatalogs",
			Handler:    _ArtifactPublicService_ListCatalogs_Handler,
		},
		{
			MethodName: "UpdateCatalog",
			Handler:    _ArtifactPublicService_UpdateCatalog_Handler,
		},
		{
			MethodName: "DeleteCatalog",
			Handler:    _ArtifactPublicService_DeleteCatalog_Handler,
		},
		{
			MethodName: "CreateFile",
			Handler:    _ArtifactPublicService_CreateFile_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _ArtifactPublicService_GetFile_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _ArtifactPublicService_ListFiles_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _ArtifactPublicService_UpdateFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _ArtifactPublicService_DeleteFile_Handler,
		},
		{
			MethodName: "GetChunk",
			Handler:    _ArtifactPublicService_GetChunk_Handler,
		},
		{
			MethodName: "ListChunks",
			Handler:    _ArtifactPublicService_ListChunks_Handler,
		},
		{
			MethodName: "UpdateChunk",
			Handler:    _ArtifactPublicService_UpdateChunk_Handler,
		},
		{
			MethodName: "SearchChunks",
			Handler:    _ArtifactPublicService_SearchChunks_Handler,
		},
		{
			MethodName: "ListCatalogRuns",
			Handler:    _ArtifactPublicService_ListCatalogRuns_Handler,
		},
		{
			MethodName: "GetObjectUploadURL",
			Handler:    _ArtifactPublicService_GetObjectUploadURL_Handler,
		},
		{
			MethodName: "GetObjectDownloadURL",
			Handler:    _ArtifactPublicService_GetObjectDownloadURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "artifact/artifact/v1alpha/artifact_public_service.proto",
}
