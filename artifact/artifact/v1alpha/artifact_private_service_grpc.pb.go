// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: artifact/artifact/v1alpha/artifact_private_service.proto

package artifactv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArtifactPrivateService_ListRepositoryTagsAdmin_FullMethodName           = "/artifact.artifact.v1alpha.ArtifactPrivateService/ListRepositoryTagsAdmin"
	ArtifactPrivateService_GetRepositoryTagAdmin_FullMethodName             = "/artifact.artifact.v1alpha.ArtifactPrivateService/GetRepositoryTagAdmin"
	ArtifactPrivateService_CreateRepositoryTagAdmin_FullMethodName          = "/artifact.artifact.v1alpha.ArtifactPrivateService/CreateRepositoryTagAdmin"
	ArtifactPrivateService_DeleteRepositoryTagAdmin_FullMethodName          = "/artifact.artifact.v1alpha.ArtifactPrivateService/DeleteRepositoryTagAdmin"
	ArtifactPrivateService_GetObjectAdmin_FullMethodName                    = "/artifact.artifact.v1alpha.ArtifactPrivateService/GetObjectAdmin"
	ArtifactPrivateService_GetObjectURLAdmin_FullMethodName                 = "/artifact.artifact.v1alpha.ArtifactPrivateService/GetObjectURLAdmin"
	ArtifactPrivateService_UpdateObjectAdmin_FullMethodName                 = "/artifact.artifact.v1alpha.ArtifactPrivateService/UpdateObjectAdmin"
	ArtifactPrivateService_GetFileAsMarkdownAdmin_FullMethodName            = "/artifact.artifact.v1alpha.ArtifactPrivateService/GetFileAsMarkdownAdmin"
	ArtifactPrivateService_GetChatFileAdmin_FullMethodName                  = "/artifact.artifact.v1alpha.ArtifactPrivateService/GetChatFileAdmin"
	ArtifactPrivateService_DeleteCatalogFileAdmin_FullMethodName            = "/artifact.artifact.v1alpha.ArtifactPrivateService/DeleteCatalogFileAdmin"
	ArtifactPrivateService_ExecuteKnowledgeBaseUpdateAdmin_FullMethodName   = "/artifact.artifact.v1alpha.ArtifactPrivateService/ExecuteKnowledgeBaseUpdateAdmin"
	ArtifactPrivateService_AbortKnowledgeBaseUpdateAdmin_FullMethodName     = "/artifact.artifact.v1alpha.ArtifactPrivateService/AbortKnowledgeBaseUpdateAdmin"
	ArtifactPrivateService_RollbackAdmin_FullMethodName                     = "/artifact.artifact.v1alpha.ArtifactPrivateService/RollbackAdmin"
	ArtifactPrivateService_PurgeRollbackAdmin_FullMethodName                = "/artifact.artifact.v1alpha.ArtifactPrivateService/PurgeRollbackAdmin"
	ArtifactPrivateService_SetRollbackRetentionAdmin_FullMethodName         = "/artifact.artifact.v1alpha.ArtifactPrivateService/SetRollbackRetentionAdmin"
	ArtifactPrivateService_GetKnowledgeBaseUpdateStatusAdmin_FullMethodName = "/artifact.artifact.v1alpha.ArtifactPrivateService/GetKnowledgeBaseUpdateStatusAdmin"
	ArtifactPrivateService_GetSystemProfileAdmin_FullMethodName             = "/artifact.artifact.v1alpha.ArtifactPrivateService/GetSystemProfileAdmin"
	ArtifactPrivateService_UpdateSystemProfileAdmin_FullMethodName          = "/artifact.artifact.v1alpha.ArtifactPrivateService/UpdateSystemProfileAdmin"
	ArtifactPrivateService_ListSystemProfilesAdmin_FullMethodName           = "/artifact.artifact.v1alpha.ArtifactPrivateService/ListSystemProfilesAdmin"
	ArtifactPrivateService_DeleteSystemProfileAdmin_FullMethodName          = "/artifact.artifact.v1alpha.ArtifactPrivateService/DeleteSystemProfileAdmin"
)

// ArtifactPrivateServiceClient is the client API for ArtifactPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ArtifactPrivateService exposes the private endpoints that allow clients to
// manage artifacts.
type ArtifactPrivateServiceClient interface {
	// List the tags in a repository (admin only)
	//
	// Returns a portion of the versions that the specified repository holds.
	ListRepositoryTagsAdmin(ctx context.Context, in *ListRepositoryTagsAdminRequest, opts ...grpc.CallOption) (*ListRepositoryTagsAdminResponse, error)
	// Get details of repository tag (admin only)
	GetRepositoryTagAdmin(ctx context.Context, in *GetRepositoryTagAdminRequest, opts ...grpc.CallOption) (*GetRepositoryTagAdminResponse, error)
	// Create a new repository tag (admin only)
	//
	// Adds a tag to a given repository. Note that this operation is only
	// intended to register the information of an *already created* tag. This
	// method should be called as part of the content push operation, right after
	// the [PUT Manifest](https://distribution.github.io/distribution/#put-manifest) has
	// succeeded. The distribution registry won't hold data such as the push time
	// or the tag digest, so `artifact-backend` will hold this information locally.
	CreateRepositoryTagAdmin(ctx context.Context, in *CreateRepositoryTagAdminRequest, opts ...grpc.CallOption) (*CreateRepositoryTagAdminResponse, error)
	// Delete a repository tag (admin only)
	DeleteRepositoryTagAdmin(ctx context.Context, in *DeleteRepositoryTagAdminRequest, opts ...grpc.CallOption) (*DeleteRepositoryTagAdminResponse, error)
	// Get Object (admin only)
	GetObjectAdmin(ctx context.Context, in *GetObjectAdminRequest, opts ...grpc.CallOption) (*GetObjectAdminResponse, error)
	// Get Object URL (admin only)
	GetObjectURLAdmin(ctx context.Context, in *GetObjectURLAdminRequest, opts ...grpc.CallOption) (*GetObjectURLAdminResponse, error)
	// Update Object (admin only)
	UpdateObjectAdmin(ctx context.Context, in *UpdateObjectAdminRequest, opts ...grpc.CallOption) (*UpdateObjectAdminResponse, error)
	// Get file as Markdown (admin only)
	//
	// Returns the Markdown representation of a file.
	GetFileAsMarkdownAdmin(ctx context.Context, in *GetFileAsMarkdownAdminRequest, opts ...grpc.CallOption) (*GetFileAsMarkdownAdminResponse, error)
	// Deprecated: Do not use.
	// Get file as Markdown (deprecated, admin only)
	//
	// Returns the contents of a file conversion to Markdown as a binary blob.
	// This method is deprecated as it identifies the file by namespace and
	// filename instead of UID, which isn't a unique identifier anymore.
	GetChatFileAdmin(ctx context.Context, in *GetChatFileAdminRequest, opts ...grpc.CallOption) (*GetChatFileAdminResponse, error)
	// Delete a catalog file (admin only)
	//
	// Deletes a file from a catalog using only the file UID. Unlike the public
	// DeleteCatalogFile endpoint which requires namespace and catalog IDs, this
	// admin endpoint automatically looks up the file's catalog and owner to
	// perform the deletion. Primarily used for integration testing and internal
	// operations where the caller has a file UID but not the full resource path.
	// Authentication metadata is injected automatically based on the file owner.
	DeleteCatalogFileAdmin(ctx context.Context, in *DeleteCatalogFileAdminRequest, opts ...grpc.CallOption) (*DeleteCatalogFileAdminResponse, error)
	// Execute knowledge base update (admin only)
	ExecuteKnowledgeBaseUpdateAdmin(ctx context.Context, in *ExecuteKnowledgeBaseUpdateAdminRequest, opts ...grpc.CallOption) (*ExecuteKnowledgeBaseUpdateAdminResponse, error)
	// Abort knowledge base update (admin only)
	//
	// Cancels ongoing update workflows and cleans up staging KB resources
	// (both finished and unfinished). Can abort specific catalogs by ID or
	// all currently updating catalogs if no IDs provided. Sets catalog status
	// to 'aborted'.
	AbortKnowledgeBaseUpdateAdmin(ctx context.Context, in *AbortKnowledgeBaseUpdateAdminRequest, opts ...grpc.CallOption) (*AbortKnowledgeBaseUpdateAdminResponse, error)
	// Rollback a specific catalog to previous version (admin only)
	RollbackAdmin(ctx context.Context, in *RollbackAdminRequest, opts ...grpc.CallOption) (*RollbackAdminResponse, error)
	// Purge rollback immediately (admin only)
	PurgeRollbackAdmin(ctx context.Context, in *PurgeRollbackAdminRequest, opts ...grpc.CallOption) (*PurgeRollbackAdminResponse, error)
	// Set rollback retention period (admin only)
	SetRollbackRetentionAdmin(ctx context.Context, in *SetRollbackRetentionAdminRequest, opts ...grpc.CallOption) (*SetRollbackRetentionAdminResponse, error)
	// Get knowledge base update status (admin only)
	GetKnowledgeBaseUpdateStatusAdmin(ctx context.Context, in *GetKnowledgeBaseUpdateStatusAdminRequest, opts ...grpc.CallOption) (*GetKnowledgeBaseUpdateStatusAdminResponse, error)
	// Get a system configuration profile (admin only)
	GetSystemProfileAdmin(ctx context.Context, in *GetSystemProfileAdminRequest, opts ...grpc.CallOption) (*GetSystemProfileAdminResponse, error)
	// Update (create or update) a system configuration profile (admin only)
	UpdateSystemProfileAdmin(ctx context.Context, in *UpdateSystemProfileAdminRequest, opts ...grpc.CallOption) (*UpdateSystemProfileAdminResponse, error)
	// List all system configuration profiles (admin only)
	ListSystemProfilesAdmin(ctx context.Context, in *ListSystemProfilesAdminRequest, opts ...grpc.CallOption) (*ListSystemProfilesAdminResponse, error)
	// Delete a system configuration profile (admin only)
	DeleteSystemProfileAdmin(ctx context.Context, in *DeleteSystemProfileAdminRequest, opts ...grpc.CallOption) (*DeleteSystemProfileAdminResponse, error)
}

type artifactPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtifactPrivateServiceClient(cc grpc.ClientConnInterface) ArtifactPrivateServiceClient {
	return &artifactPrivateServiceClient{cc}
}

func (c *artifactPrivateServiceClient) ListRepositoryTagsAdmin(ctx context.Context, in *ListRepositoryTagsAdminRequest, opts ...grpc.CallOption) (*ListRepositoryTagsAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRepositoryTagsAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_ListRepositoryTagsAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) GetRepositoryTagAdmin(ctx context.Context, in *GetRepositoryTagAdminRequest, opts ...grpc.CallOption) (*GetRepositoryTagAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepositoryTagAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_GetRepositoryTagAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) CreateRepositoryTagAdmin(ctx context.Context, in *CreateRepositoryTagAdminRequest, opts ...grpc.CallOption) (*CreateRepositoryTagAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRepositoryTagAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_CreateRepositoryTagAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) DeleteRepositoryTagAdmin(ctx context.Context, in *DeleteRepositoryTagAdminRequest, opts ...grpc.CallOption) (*DeleteRepositoryTagAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRepositoryTagAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_DeleteRepositoryTagAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) GetObjectAdmin(ctx context.Context, in *GetObjectAdminRequest, opts ...grpc.CallOption) (*GetObjectAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObjectAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_GetObjectAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) GetObjectURLAdmin(ctx context.Context, in *GetObjectURLAdminRequest, opts ...grpc.CallOption) (*GetObjectURLAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObjectURLAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_GetObjectURLAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) UpdateObjectAdmin(ctx context.Context, in *UpdateObjectAdminRequest, opts ...grpc.CallOption) (*UpdateObjectAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateObjectAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_UpdateObjectAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) GetFileAsMarkdownAdmin(ctx context.Context, in *GetFileAsMarkdownAdminRequest, opts ...grpc.CallOption) (*GetFileAsMarkdownAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFileAsMarkdownAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_GetFileAsMarkdownAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *artifactPrivateServiceClient) GetChatFileAdmin(ctx context.Context, in *GetChatFileAdminRequest, opts ...grpc.CallOption) (*GetChatFileAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatFileAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_GetChatFileAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) DeleteCatalogFileAdmin(ctx context.Context, in *DeleteCatalogFileAdminRequest, opts ...grpc.CallOption) (*DeleteCatalogFileAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCatalogFileAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_DeleteCatalogFileAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) ExecuteKnowledgeBaseUpdateAdmin(ctx context.Context, in *ExecuteKnowledgeBaseUpdateAdminRequest, opts ...grpc.CallOption) (*ExecuteKnowledgeBaseUpdateAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteKnowledgeBaseUpdateAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_ExecuteKnowledgeBaseUpdateAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) AbortKnowledgeBaseUpdateAdmin(ctx context.Context, in *AbortKnowledgeBaseUpdateAdminRequest, opts ...grpc.CallOption) (*AbortKnowledgeBaseUpdateAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbortKnowledgeBaseUpdateAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_AbortKnowledgeBaseUpdateAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) RollbackAdmin(ctx context.Context, in *RollbackAdminRequest, opts ...grpc.CallOption) (*RollbackAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_RollbackAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) PurgeRollbackAdmin(ctx context.Context, in *PurgeRollbackAdminRequest, opts ...grpc.CallOption) (*PurgeRollbackAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurgeRollbackAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_PurgeRollbackAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) SetRollbackRetentionAdmin(ctx context.Context, in *SetRollbackRetentionAdminRequest, opts ...grpc.CallOption) (*SetRollbackRetentionAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRollbackRetentionAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_SetRollbackRetentionAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) GetKnowledgeBaseUpdateStatusAdmin(ctx context.Context, in *GetKnowledgeBaseUpdateStatusAdminRequest, opts ...grpc.CallOption) (*GetKnowledgeBaseUpdateStatusAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKnowledgeBaseUpdateStatusAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_GetKnowledgeBaseUpdateStatusAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) GetSystemProfileAdmin(ctx context.Context, in *GetSystemProfileAdminRequest, opts ...grpc.CallOption) (*GetSystemProfileAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemProfileAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_GetSystemProfileAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) UpdateSystemProfileAdmin(ctx context.Context, in *UpdateSystemProfileAdminRequest, opts ...grpc.CallOption) (*UpdateSystemProfileAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSystemProfileAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_UpdateSystemProfileAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) ListSystemProfilesAdmin(ctx context.Context, in *ListSystemProfilesAdminRequest, opts ...grpc.CallOption) (*ListSystemProfilesAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSystemProfilesAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_ListSystemProfilesAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) DeleteSystemProfileAdmin(ctx context.Context, in *DeleteSystemProfileAdminRequest, opts ...grpc.CallOption) (*DeleteSystemProfileAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSystemProfileAdminResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_DeleteSystemProfileAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactPrivateServiceServer is the server API for ArtifactPrivateService service.
// All implementations should embed UnimplementedArtifactPrivateServiceServer
// for forward compatibility.
//
// ArtifactPrivateService exposes the private endpoints that allow clients to
// manage artifacts.
type ArtifactPrivateServiceServer interface {
	// List the tags in a repository (admin only)
	//
	// Returns a portion of the versions that the specified repository holds.
	ListRepositoryTagsAdmin(context.Context, *ListRepositoryTagsAdminRequest) (*ListRepositoryTagsAdminResponse, error)
	// Get details of repository tag (admin only)
	GetRepositoryTagAdmin(context.Context, *GetRepositoryTagAdminRequest) (*GetRepositoryTagAdminResponse, error)
	// Create a new repository tag (admin only)
	//
	// Adds a tag to a given repository. Note that this operation is only
	// intended to register the information of an *already created* tag. This
	// method should be called as part of the content push operation, right after
	// the [PUT Manifest](https://distribution.github.io/distribution/#put-manifest) has
	// succeeded. The distribution registry won't hold data such as the push time
	// or the tag digest, so `artifact-backend` will hold this information locally.
	CreateRepositoryTagAdmin(context.Context, *CreateRepositoryTagAdminRequest) (*CreateRepositoryTagAdminResponse, error)
	// Delete a repository tag (admin only)
	DeleteRepositoryTagAdmin(context.Context, *DeleteRepositoryTagAdminRequest) (*DeleteRepositoryTagAdminResponse, error)
	// Get Object (admin only)
	GetObjectAdmin(context.Context, *GetObjectAdminRequest) (*GetObjectAdminResponse, error)
	// Get Object URL (admin only)
	GetObjectURLAdmin(context.Context, *GetObjectURLAdminRequest) (*GetObjectURLAdminResponse, error)
	// Update Object (admin only)
	UpdateObjectAdmin(context.Context, *UpdateObjectAdminRequest) (*UpdateObjectAdminResponse, error)
	// Get file as Markdown (admin only)
	//
	// Returns the Markdown representation of a file.
	GetFileAsMarkdownAdmin(context.Context, *GetFileAsMarkdownAdminRequest) (*GetFileAsMarkdownAdminResponse, error)
	// Deprecated: Do not use.
	// Get file as Markdown (deprecated, admin only)
	//
	// Returns the contents of a file conversion to Markdown as a binary blob.
	// This method is deprecated as it identifies the file by namespace and
	// filename instead of UID, which isn't a unique identifier anymore.
	GetChatFileAdmin(context.Context, *GetChatFileAdminRequest) (*GetChatFileAdminResponse, error)
	// Delete a catalog file (admin only)
	//
	// Deletes a file from a catalog using only the file UID. Unlike the public
	// DeleteCatalogFile endpoint which requires namespace and catalog IDs, this
	// admin endpoint automatically looks up the file's catalog and owner to
	// perform the deletion. Primarily used for integration testing and internal
	// operations where the caller has a file UID but not the full resource path.
	// Authentication metadata is injected automatically based on the file owner.
	DeleteCatalogFileAdmin(context.Context, *DeleteCatalogFileAdminRequest) (*DeleteCatalogFileAdminResponse, error)
	// Execute knowledge base update (admin only)
	ExecuteKnowledgeBaseUpdateAdmin(context.Context, *ExecuteKnowledgeBaseUpdateAdminRequest) (*ExecuteKnowledgeBaseUpdateAdminResponse, error)
	// Abort knowledge base update (admin only)
	//
	// Cancels ongoing update workflows and cleans up staging KB resources
	// (both finished and unfinished). Can abort specific catalogs by ID or
	// all currently updating catalogs if no IDs provided. Sets catalog status
	// to 'aborted'.
	AbortKnowledgeBaseUpdateAdmin(context.Context, *AbortKnowledgeBaseUpdateAdminRequest) (*AbortKnowledgeBaseUpdateAdminResponse, error)
	// Rollback a specific catalog to previous version (admin only)
	RollbackAdmin(context.Context, *RollbackAdminRequest) (*RollbackAdminResponse, error)
	// Purge rollback immediately (admin only)
	PurgeRollbackAdmin(context.Context, *PurgeRollbackAdminRequest) (*PurgeRollbackAdminResponse, error)
	// Set rollback retention period (admin only)
	SetRollbackRetentionAdmin(context.Context, *SetRollbackRetentionAdminRequest) (*SetRollbackRetentionAdminResponse, error)
	// Get knowledge base update status (admin only)
	GetKnowledgeBaseUpdateStatusAdmin(context.Context, *GetKnowledgeBaseUpdateStatusAdminRequest) (*GetKnowledgeBaseUpdateStatusAdminResponse, error)
	// Get a system configuration profile (admin only)
	GetSystemProfileAdmin(context.Context, *GetSystemProfileAdminRequest) (*GetSystemProfileAdminResponse, error)
	// Update (create or update) a system configuration profile (admin only)
	UpdateSystemProfileAdmin(context.Context, *UpdateSystemProfileAdminRequest) (*UpdateSystemProfileAdminResponse, error)
	// List all system configuration profiles (admin only)
	ListSystemProfilesAdmin(context.Context, *ListSystemProfilesAdminRequest) (*ListSystemProfilesAdminResponse, error)
	// Delete a system configuration profile (admin only)
	DeleteSystemProfileAdmin(context.Context, *DeleteSystemProfileAdminRequest) (*DeleteSystemProfileAdminResponse, error)
}

// UnimplementedArtifactPrivateServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArtifactPrivateServiceServer struct{}

func (UnimplementedArtifactPrivateServiceServer) ListRepositoryTagsAdmin(context.Context, *ListRepositoryTagsAdminRequest) (*ListRepositoryTagsAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositoryTagsAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) GetRepositoryTagAdmin(context.Context, *GetRepositoryTagAdminRequest) (*GetRepositoryTagAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryTagAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) CreateRepositoryTagAdmin(context.Context, *CreateRepositoryTagAdminRequest) (*CreateRepositoryTagAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepositoryTagAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) DeleteRepositoryTagAdmin(context.Context, *DeleteRepositoryTagAdminRequest) (*DeleteRepositoryTagAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepositoryTagAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) GetObjectAdmin(context.Context, *GetObjectAdminRequest) (*GetObjectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) GetObjectURLAdmin(context.Context, *GetObjectURLAdminRequest) (*GetObjectURLAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectURLAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) UpdateObjectAdmin(context.Context, *UpdateObjectAdminRequest) (*UpdateObjectAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) GetFileAsMarkdownAdmin(context.Context, *GetFileAsMarkdownAdminRequest) (*GetFileAsMarkdownAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileAsMarkdownAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) GetChatFileAdmin(context.Context, *GetChatFileAdminRequest) (*GetChatFileAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatFileAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) DeleteCatalogFileAdmin(context.Context, *DeleteCatalogFileAdminRequest) (*DeleteCatalogFileAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCatalogFileAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) ExecuteKnowledgeBaseUpdateAdmin(context.Context, *ExecuteKnowledgeBaseUpdateAdminRequest) (*ExecuteKnowledgeBaseUpdateAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteKnowledgeBaseUpdateAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) AbortKnowledgeBaseUpdateAdmin(context.Context, *AbortKnowledgeBaseUpdateAdminRequest) (*AbortKnowledgeBaseUpdateAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortKnowledgeBaseUpdateAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) RollbackAdmin(context.Context, *RollbackAdminRequest) (*RollbackAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) PurgeRollbackAdmin(context.Context, *PurgeRollbackAdminRequest) (*PurgeRollbackAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeRollbackAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) SetRollbackRetentionAdmin(context.Context, *SetRollbackRetentionAdminRequest) (*SetRollbackRetentionAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRollbackRetentionAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) GetKnowledgeBaseUpdateStatusAdmin(context.Context, *GetKnowledgeBaseUpdateStatusAdminRequest) (*GetKnowledgeBaseUpdateStatusAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledgeBaseUpdateStatusAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) GetSystemProfileAdmin(context.Context, *GetSystemProfileAdminRequest) (*GetSystemProfileAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemProfileAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) UpdateSystemProfileAdmin(context.Context, *UpdateSystemProfileAdminRequest) (*UpdateSystemProfileAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemProfileAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) ListSystemProfilesAdmin(context.Context, *ListSystemProfilesAdminRequest) (*ListSystemProfilesAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemProfilesAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) DeleteSystemProfileAdmin(context.Context, *DeleteSystemProfileAdminRequest) (*DeleteSystemProfileAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSystemProfileAdmin not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) testEmbeddedByValue() {}

// UnsafeArtifactPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtifactPrivateServiceServer will
// result in compilation errors.
type UnsafeArtifactPrivateServiceServer interface {
	mustEmbedUnimplementedArtifactPrivateServiceServer()
}

func RegisterArtifactPrivateServiceServer(s grpc.ServiceRegistrar, srv ArtifactPrivateServiceServer) {
	// If the following call pancis, it indicates UnimplementedArtifactPrivateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArtifactPrivateService_ServiceDesc, srv)
}

func _ArtifactPrivateService_ListRepositoryTagsAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoryTagsAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).ListRepositoryTagsAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_ListRepositoryTagsAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).ListRepositoryTagsAdmin(ctx, req.(*ListRepositoryTagsAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_GetRepositoryTagAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryTagAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).GetRepositoryTagAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_GetRepositoryTagAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).GetRepositoryTagAdmin(ctx, req.(*GetRepositoryTagAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_CreateRepositoryTagAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepositoryTagAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).CreateRepositoryTagAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_CreateRepositoryTagAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).CreateRepositoryTagAdmin(ctx, req.(*CreateRepositoryTagAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_DeleteRepositoryTagAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepositoryTagAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).DeleteRepositoryTagAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_DeleteRepositoryTagAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).DeleteRepositoryTagAdmin(ctx, req.(*DeleteRepositoryTagAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_GetObjectAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).GetObjectAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_GetObjectAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).GetObjectAdmin(ctx, req.(*GetObjectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_GetObjectURLAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectURLAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).GetObjectURLAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_GetObjectURLAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).GetObjectURLAdmin(ctx, req.(*GetObjectURLAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_UpdateObjectAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).UpdateObjectAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_UpdateObjectAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).UpdateObjectAdmin(ctx, req.(*UpdateObjectAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_GetFileAsMarkdownAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileAsMarkdownAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).GetFileAsMarkdownAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_GetFileAsMarkdownAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).GetFileAsMarkdownAdmin(ctx, req.(*GetFileAsMarkdownAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_GetChatFileAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatFileAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).GetChatFileAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_GetChatFileAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).GetChatFileAdmin(ctx, req.(*GetChatFileAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_DeleteCatalogFileAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCatalogFileAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).DeleteCatalogFileAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_DeleteCatalogFileAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).DeleteCatalogFileAdmin(ctx, req.(*DeleteCatalogFileAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_ExecuteKnowledgeBaseUpdateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteKnowledgeBaseUpdateAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).ExecuteKnowledgeBaseUpdateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_ExecuteKnowledgeBaseUpdateAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).ExecuteKnowledgeBaseUpdateAdmin(ctx, req.(*ExecuteKnowledgeBaseUpdateAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_AbortKnowledgeBaseUpdateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortKnowledgeBaseUpdateAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).AbortKnowledgeBaseUpdateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_AbortKnowledgeBaseUpdateAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).AbortKnowledgeBaseUpdateAdmin(ctx, req.(*AbortKnowledgeBaseUpdateAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_RollbackAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).RollbackAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_RollbackAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).RollbackAdmin(ctx, req.(*RollbackAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_PurgeRollbackAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeRollbackAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).PurgeRollbackAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_PurgeRollbackAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).PurgeRollbackAdmin(ctx, req.(*PurgeRollbackAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_SetRollbackRetentionAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRollbackRetentionAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).SetRollbackRetentionAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_SetRollbackRetentionAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).SetRollbackRetentionAdmin(ctx, req.(*SetRollbackRetentionAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_GetKnowledgeBaseUpdateStatusAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnowledgeBaseUpdateStatusAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).GetKnowledgeBaseUpdateStatusAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_GetKnowledgeBaseUpdateStatusAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).GetKnowledgeBaseUpdateStatusAdmin(ctx, req.(*GetKnowledgeBaseUpdateStatusAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_GetSystemProfileAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemProfileAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).GetSystemProfileAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_GetSystemProfileAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).GetSystemProfileAdmin(ctx, req.(*GetSystemProfileAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_UpdateSystemProfileAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemProfileAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).UpdateSystemProfileAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_UpdateSystemProfileAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).UpdateSystemProfileAdmin(ctx, req.(*UpdateSystemProfileAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_ListSystemProfilesAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemProfilesAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).ListSystemProfilesAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_ListSystemProfilesAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).ListSystemProfilesAdmin(ctx, req.(*ListSystemProfilesAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_DeleteSystemProfileAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSystemProfileAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).DeleteSystemProfileAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_DeleteSystemProfileAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).DeleteSystemProfileAdmin(ctx, req.(*DeleteSystemProfileAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtifactPrivateService_ServiceDesc is the grpc.ServiceDesc for ArtifactPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtifactPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "artifact.artifact.v1alpha.ArtifactPrivateService",
	HandlerType: (*ArtifactPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRepositoryTagsAdmin",
			Handler:    _ArtifactPrivateService_ListRepositoryTagsAdmin_Handler,
		},
		{
			MethodName: "GetRepositoryTagAdmin",
			Handler:    _ArtifactPrivateService_GetRepositoryTagAdmin_Handler,
		},
		{
			MethodName: "CreateRepositoryTagAdmin",
			Handler:    _ArtifactPrivateService_CreateRepositoryTagAdmin_Handler,
		},
		{
			MethodName: "DeleteRepositoryTagAdmin",
			Handler:    _ArtifactPrivateService_DeleteRepositoryTagAdmin_Handler,
		},
		{
			MethodName: "GetObjectAdmin",
			Handler:    _ArtifactPrivateService_GetObjectAdmin_Handler,
		},
		{
			MethodName: "GetObjectURLAdmin",
			Handler:    _ArtifactPrivateService_GetObjectURLAdmin_Handler,
		},
		{
			MethodName: "UpdateObjectAdmin",
			Handler:    _ArtifactPrivateService_UpdateObjectAdmin_Handler,
		},
		{
			MethodName: "GetFileAsMarkdownAdmin",
			Handler:    _ArtifactPrivateService_GetFileAsMarkdownAdmin_Handler,
		},
		{
			MethodName: "GetChatFileAdmin",
			Handler:    _ArtifactPrivateService_GetChatFileAdmin_Handler,
		},
		{
			MethodName: "DeleteCatalogFileAdmin",
			Handler:    _ArtifactPrivateService_DeleteCatalogFileAdmin_Handler,
		},
		{
			MethodName: "ExecuteKnowledgeBaseUpdateAdmin",
			Handler:    _ArtifactPrivateService_ExecuteKnowledgeBaseUpdateAdmin_Handler,
		},
		{
			MethodName: "AbortKnowledgeBaseUpdateAdmin",
			Handler:    _ArtifactPrivateService_AbortKnowledgeBaseUpdateAdmin_Handler,
		},
		{
			MethodName: "RollbackAdmin",
			Handler:    _ArtifactPrivateService_RollbackAdmin_Handler,
		},
		{
			MethodName: "PurgeRollbackAdmin",
			Handler:    _ArtifactPrivateService_PurgeRollbackAdmin_Handler,
		},
		{
			MethodName: "SetRollbackRetentionAdmin",
			Handler:    _ArtifactPrivateService_SetRollbackRetentionAdmin_Handler,
		},
		{
			MethodName: "GetKnowledgeBaseUpdateStatusAdmin",
			Handler:    _ArtifactPrivateService_GetKnowledgeBaseUpdateStatusAdmin_Handler,
		},
		{
			MethodName: "GetSystemProfileAdmin",
			Handler:    _ArtifactPrivateService_GetSystemProfileAdmin_Handler,
		},
		{
			MethodName: "UpdateSystemProfileAdmin",
			Handler:    _ArtifactPrivateService_UpdateSystemProfileAdmin_Handler,
		},
		{
			MethodName: "ListSystemProfilesAdmin",
			Handler:    _ArtifactPrivateService_ListSystemProfilesAdmin_Handler,
		},
		{
			MethodName: "DeleteSystemProfileAdmin",
			Handler:    _ArtifactPrivateService_DeleteSystemProfileAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "artifact/artifact/v1alpha/artifact_private_service.proto",
}
