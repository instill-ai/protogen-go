// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: artifact/artifact/v1alpha/artifact_private_service.proto

package artifactv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ArtifactPrivateService_ListRepositoryTags_FullMethodName  = "/artifact.artifact.v1alpha.ArtifactPrivateService/ListRepositoryTags"
	ArtifactPrivateService_GetRepositoryTag_FullMethodName    = "/artifact.artifact.v1alpha.ArtifactPrivateService/GetRepositoryTag"
	ArtifactPrivateService_CreateRepositoryTag_FullMethodName = "/artifact.artifact.v1alpha.ArtifactPrivateService/CreateRepositoryTag"
	ArtifactPrivateService_DeleteRepositoryTag_FullMethodName = "/artifact.artifact.v1alpha.ArtifactPrivateService/DeleteRepositoryTag"
	ArtifactPrivateService_GetObject_FullMethodName           = "/artifact.artifact.v1alpha.ArtifactPrivateService/GetObject"
	ArtifactPrivateService_GetObjectURL_FullMethodName        = "/artifact.artifact.v1alpha.ArtifactPrivateService/GetObjectURL"
	ArtifactPrivateService_UpdateObject_FullMethodName        = "/artifact.artifact.v1alpha.ArtifactPrivateService/UpdateObject"
	ArtifactPrivateService_GetChatFile_FullMethodName         = "/artifact.artifact.v1alpha.ArtifactPrivateService/GetChatFile"
)

// ArtifactPrivateServiceClient is the client API for ArtifactPrivateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ArtifactPrivateService exposes the private endpoints that allow clients to
// manage artifacts.
type ArtifactPrivateServiceClient interface {
	// List the tags in a repository.
	//
	// Returns a portion of the versions that the specified repository holds.
	ListRepositoryTags(ctx context.Context, in *ListRepositoryTagsRequest, opts ...grpc.CallOption) (*ListRepositoryTagsResponse, error)
	// Get details of repository tag.
	GetRepositoryTag(ctx context.Context, in *GetRepositoryTagRequest, opts ...grpc.CallOption) (*GetRepositoryTagResponse, error)
	// Create a new repository tag.
	//
	// Adds a tag to a given repository. Note that this operation is only
	// intended to register the information of an *already created* tag. This
	// method should be called as part of the content push operation, right after
	// the [PUT Manifest](https://distribution.github.io/distribution/#put-manifest) has
	// succeeded. The distribution registry won't hold data such as the push time
	// or the tag digest, so `artifact-backend` will hold this information locally.
	CreateRepositoryTag(ctx context.Context, in *CreateRepositoryTagRequest, opts ...grpc.CallOption) (*CreateRepositoryTagResponse, error)
	// Delete a repository tag.
	DeleteRepositoryTag(ctx context.Context, in *DeleteRepositoryTagRequest, opts ...grpc.CallOption) (*DeleteRepositoryTagResponse, error)
	// Get Object
	GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error)
	// Get Object URL
	GetObjectURL(ctx context.Context, in *GetObjectURLRequest, opts ...grpc.CallOption) (*GetObjectURLResponse, error)
	// Update Object
	UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...grpc.CallOption) (*UpdateObjectResponse, error)
	// Get Chat file
	GetChatFile(ctx context.Context, in *GetChatFileRequest, opts ...grpc.CallOption) (*GetChatFileResponse, error)
}

type artifactPrivateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtifactPrivateServiceClient(cc grpc.ClientConnInterface) ArtifactPrivateServiceClient {
	return &artifactPrivateServiceClient{cc}
}

func (c *artifactPrivateServiceClient) ListRepositoryTags(ctx context.Context, in *ListRepositoryTagsRequest, opts ...grpc.CallOption) (*ListRepositoryTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRepositoryTagsResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_ListRepositoryTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) GetRepositoryTag(ctx context.Context, in *GetRepositoryTagRequest, opts ...grpc.CallOption) (*GetRepositoryTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepositoryTagResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_GetRepositoryTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) CreateRepositoryTag(ctx context.Context, in *CreateRepositoryTagRequest, opts ...grpc.CallOption) (*CreateRepositoryTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRepositoryTagResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_CreateRepositoryTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) DeleteRepositoryTag(ctx context.Context, in *DeleteRepositoryTagRequest, opts ...grpc.CallOption) (*DeleteRepositoryTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRepositoryTagResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_DeleteRepositoryTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) GetObject(ctx context.Context, in *GetObjectRequest, opts ...grpc.CallOption) (*GetObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObjectResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_GetObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) GetObjectURL(ctx context.Context, in *GetObjectURLRequest, opts ...grpc.CallOption) (*GetObjectURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetObjectURLResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_GetObjectURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) UpdateObject(ctx context.Context, in *UpdateObjectRequest, opts ...grpc.CallOption) (*UpdateObjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateObjectResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_UpdateObject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactPrivateServiceClient) GetChatFile(ctx context.Context, in *GetChatFileRequest, opts ...grpc.CallOption) (*GetChatFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatFileResponse)
	err := c.cc.Invoke(ctx, ArtifactPrivateService_GetChatFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactPrivateServiceServer is the server API for ArtifactPrivateService service.
// All implementations should embed UnimplementedArtifactPrivateServiceServer
// for forward compatibility.
//
// ArtifactPrivateService exposes the private endpoints that allow clients to
// manage artifacts.
type ArtifactPrivateServiceServer interface {
	// List the tags in a repository.
	//
	// Returns a portion of the versions that the specified repository holds.
	ListRepositoryTags(context.Context, *ListRepositoryTagsRequest) (*ListRepositoryTagsResponse, error)
	// Get details of repository tag.
	GetRepositoryTag(context.Context, *GetRepositoryTagRequest) (*GetRepositoryTagResponse, error)
	// Create a new repository tag.
	//
	// Adds a tag to a given repository. Note that this operation is only
	// intended to register the information of an *already created* tag. This
	// method should be called as part of the content push operation, right after
	// the [PUT Manifest](https://distribution.github.io/distribution/#put-manifest) has
	// succeeded. The distribution registry won't hold data such as the push time
	// or the tag digest, so `artifact-backend` will hold this information locally.
	CreateRepositoryTag(context.Context, *CreateRepositoryTagRequest) (*CreateRepositoryTagResponse, error)
	// Delete a repository tag.
	DeleteRepositoryTag(context.Context, *DeleteRepositoryTagRequest) (*DeleteRepositoryTagResponse, error)
	// Get Object
	GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error)
	// Get Object URL
	GetObjectURL(context.Context, *GetObjectURLRequest) (*GetObjectURLResponse, error)
	// Update Object
	UpdateObject(context.Context, *UpdateObjectRequest) (*UpdateObjectResponse, error)
	// Get Chat file
	GetChatFile(context.Context, *GetChatFileRequest) (*GetChatFileResponse, error)
}

// UnimplementedArtifactPrivateServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedArtifactPrivateServiceServer struct{}

func (UnimplementedArtifactPrivateServiceServer) ListRepositoryTags(context.Context, *ListRepositoryTagsRequest) (*ListRepositoryTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositoryTags not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) GetRepositoryTag(context.Context, *GetRepositoryTagRequest) (*GetRepositoryTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryTag not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) CreateRepositoryTag(context.Context, *CreateRepositoryTagRequest) (*CreateRepositoryTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepositoryTag not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) DeleteRepositoryTag(context.Context, *DeleteRepositoryTagRequest) (*DeleteRepositoryTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepositoryTag not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) GetObject(context.Context, *GetObjectRequest) (*GetObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObject not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) GetObjectURL(context.Context, *GetObjectURLRequest) (*GetObjectURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectURL not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) UpdateObject(context.Context, *UpdateObjectRequest) (*UpdateObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObject not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) GetChatFile(context.Context, *GetChatFileRequest) (*GetChatFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatFile not implemented")
}
func (UnimplementedArtifactPrivateServiceServer) testEmbeddedByValue() {}

// UnsafeArtifactPrivateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtifactPrivateServiceServer will
// result in compilation errors.
type UnsafeArtifactPrivateServiceServer interface {
	mustEmbedUnimplementedArtifactPrivateServiceServer()
}

func RegisterArtifactPrivateServiceServer(s grpc.ServiceRegistrar, srv ArtifactPrivateServiceServer) {
	// If the following call pancis, it indicates UnimplementedArtifactPrivateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ArtifactPrivateService_ServiceDesc, srv)
}

func _ArtifactPrivateService_ListRepositoryTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoryTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).ListRepositoryTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_ListRepositoryTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).ListRepositoryTags(ctx, req.(*ListRepositoryTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_GetRepositoryTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).GetRepositoryTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_GetRepositoryTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).GetRepositoryTag(ctx, req.(*GetRepositoryTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_CreateRepositoryTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepositoryTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).CreateRepositoryTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_CreateRepositoryTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).CreateRepositoryTag(ctx, req.(*CreateRepositoryTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_DeleteRepositoryTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepositoryTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).DeleteRepositoryTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_DeleteRepositoryTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).DeleteRepositoryTag(ctx, req.(*DeleteRepositoryTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_GetObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).GetObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_GetObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).GetObject(ctx, req.(*GetObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_GetObjectURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObjectURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).GetObjectURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_GetObjectURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).GetObjectURL(ctx, req.(*GetObjectURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_UpdateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).UpdateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_UpdateObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).UpdateObject(ctx, req.(*UpdateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactPrivateService_GetChatFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactPrivateServiceServer).GetChatFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactPrivateService_GetChatFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactPrivateServiceServer).GetChatFile(ctx, req.(*GetChatFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtifactPrivateService_ServiceDesc is the grpc.ServiceDesc for ArtifactPrivateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtifactPrivateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "artifact.artifact.v1alpha.ArtifactPrivateService",
	HandlerType: (*ArtifactPrivateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRepositoryTags",
			Handler:    _ArtifactPrivateService_ListRepositoryTags_Handler,
		},
		{
			MethodName: "GetRepositoryTag",
			Handler:    _ArtifactPrivateService_GetRepositoryTag_Handler,
		},
		{
			MethodName: "CreateRepositoryTag",
			Handler:    _ArtifactPrivateService_CreateRepositoryTag_Handler,
		},
		{
			MethodName: "DeleteRepositoryTag",
			Handler:    _ArtifactPrivateService_DeleteRepositoryTag_Handler,
		},
		{
			MethodName: "GetObject",
			Handler:    _ArtifactPrivateService_GetObject_Handler,
		},
		{
			MethodName: "GetObjectURL",
			Handler:    _ArtifactPrivateService_GetObjectURL_Handler,
		},
		{
			MethodName: "UpdateObject",
			Handler:    _ArtifactPrivateService_UpdateObject_Handler,
		},
		{
			MethodName: "GetChatFile",
			Handler:    _ArtifactPrivateService_GetChatFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "artifact/artifact/v1alpha/artifact_private_service.proto",
}
