// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: artifact/artifact/v1alpha/chunk.proto

package artifactv1alpha

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type describes the type of a chunk content.
type Chunk_Type int32

const (
	// Unspecified.
	Chunk_TYPE_UNSPECIFIED Chunk_Type = 0
	// Content.
	Chunk_TYPE_CONTENT Chunk_Type = 1
	// Summary.
	Chunk_TYPE_SUMMARY Chunk_Type = 2
	// Augmented.
	Chunk_TYPE_AUGMENTED Chunk_Type = 3
)

// Enum value maps for Chunk_Type.
var (
	Chunk_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_CONTENT",
		2: "TYPE_SUMMARY",
		3: "TYPE_AUGMENTED",
	}
	Chunk_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_CONTENT":     1,
		"TYPE_SUMMARY":     2,
		"TYPE_AUGMENTED":   3,
	}
)

func (x Chunk_Type) Enum() *Chunk_Type {
	p := new(Chunk_Type)
	*p = x
	return p
}

func (x Chunk_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Chunk_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_artifact_v1alpha_chunk_proto_enumTypes[0].Descriptor()
}

func (Chunk_Type) Type() protoreflect.EnumType {
	return &file_artifact_artifact_v1alpha_chunk_proto_enumTypes[0]
}

func (x Chunk_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Chunk_Type.Descriptor instead.
func (Chunk_Type) EnumDescriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_chunk_proto_rawDescGZIP(), []int{0, 0}
}

// The Chunk message represents a chunk of data in the artifact system.
type Chunk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The chunk uid (internal UUID, also used as id).
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// The chunk id (same as uid).
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The resource name of the chunk.
	// Format: `namespaces/{namespace}/knowledge-bases/{knowledge_base}/files/{file}/chunks/{chunk}`.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// whether the chunk is retrievable
	Retrievable bool `protobuf:"varint,4,opt,name=retrievable,proto3" json:"retrievable,omitempty"`
	// tokens of the chunk
	Tokens uint32 `protobuf:"varint,5,opt,name=tokens,proto3" json:"tokens,omitempty"`
	// creation time of the chunk
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// original file unique identifier
	OriginalFileId string `protobuf:"bytes,7,opt,name=original_file_id,json=originalFileId,proto3" json:"original_file_id,omitempty"`
	// chunk type
	Type Chunk_Type `protobuf:"varint,8,opt,name=type,proto3,enum=artifact.artifact.v1alpha.Chunk_Type" json:"type,omitempty"`
	// Reference to the position of the chunk within the original file.
	Reference *Chunk_Reference `protobuf:"bytes,9,opt,name=reference,proto3" json:"reference,omitempty"`
	// Reference to the position of the chunk within the Markdown (source) file.
	MarkdownReference *Chunk_Reference `protobuf:"bytes,10,opt,name=markdown_reference,json=markdownReference,proto3" json:"markdown_reference,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Chunk) Reset() {
	*x = Chunk{}
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk) ProtoMessage() {}

func (x *Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk.ProtoReflect.Descriptor instead.
func (*Chunk) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_chunk_proto_rawDescGZIP(), []int{0}
}

func (x *Chunk) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Chunk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Chunk) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Chunk) GetRetrievable() bool {
	if x != nil {
		return x.Retrievable
	}
	return false
}

func (x *Chunk) GetTokens() uint32 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

func (x *Chunk) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Chunk) GetOriginalFileId() string {
	if x != nil {
		return x.OriginalFileId
	}
	return ""
}

func (x *Chunk) GetType() Chunk_Type {
	if x != nil {
		return x.Type
	}
	return Chunk_TYPE_UNSPECIFIED
}

func (x *Chunk) GetReference() *Chunk_Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Chunk) GetMarkdownReference() *Chunk_Reference {
	if x != nil {
		return x.MarkdownReference
	}
	return nil
}

// ListChunksRequest represents a request to list chunks in the artifact system.
// The response will be a list of chunks based on the request, i.e., response will
// have chunks of the file with file_id and chunks specified in chunk_ids.
type ListChunksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// owner/namespace id
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// knowledge base id
	KnowledgeBaseId string `protobuf:"bytes,2,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"`
	// file id
	FileId string `protobuf:"bytes,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	// The maximum number of chunks to return. If this parameter is unspecified,
	// at most 100 chunks will be returned. The cap value for this parameter
	// is 1000 (i.e. any value above that will be coerced to 1000).
	PageSize *int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3,oneof" json:"page_size,omitempty"`
	// Page token.
	PageToken *string `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3,oneof" json:"page_token,omitempty"`
	// Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
	// - `id="<uuid>"` or `uid="<uuid>"` - Filter by specific chunk ID/UID
	// - `chunk_type="CHUNK_TYPE_TEXT"` - Filter by chunk type
	// - `retrievable=true` - Filter by retrievable status
	//
	// **Examples**:
	// - List specific chunks: `id="uuid1" OR id="uuid2"`
	// - List text chunks: `chunk_type="CHUNK_TYPE_TEXT"`
	// - List retrievable chunks: `retrievable=true`
	Filter        *string `protobuf:"bytes,6,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListChunksRequest) Reset() {
	*x = ListChunksRequest{}
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChunksRequest) ProtoMessage() {}

func (x *ListChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChunksRequest.ProtoReflect.Descriptor instead.
func (*ListChunksRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_chunk_proto_rawDescGZIP(), []int{1}
}

func (x *ListChunksRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *ListChunksRequest) GetKnowledgeBaseId() string {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return ""
}

func (x *ListChunksRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *ListChunksRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *ListChunksRequest) GetPageToken() string {
	if x != nil && x.PageToken != nil {
		return *x.PageToken
	}
	return ""
}

func (x *ListChunksRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

// ListChunksResponse represents a response containing a list of chunks in the artifact system.
type ListChunksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// repeated chunks
	Chunks        []*Chunk `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListChunksResponse) Reset() {
	*x = ListChunksResponse{}
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListChunksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChunksResponse) ProtoMessage() {}

func (x *ListChunksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChunksResponse.ProtoReflect.Descriptor instead.
func (*ListChunksResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_chunk_proto_rawDescGZIP(), []int{2}
}

func (x *ListChunksResponse) GetChunks() []*Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

// GetChunkRequest represents a request to get a chunk.
type GetChunkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace ID.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// Knowledge Base ID.
	KnowledgeBaseId string `protobuf:"bytes,2,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"`
	// File ID.
	FileId string `protobuf:"bytes,3,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	// Chunk ID.
	ChunkId string `protobuf:"bytes,4,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	// Optional chunk type filter. If specified, returns a chunk of this type
	// from the same file. If not specified, returns the chunk identified by chunk_id.
	ChunkType     *Chunk_Type `protobuf:"varint,5,opt,name=chunk_type,json=chunkType,proto3,enum=artifact.artifact.v1alpha.Chunk_Type,oneof" json:"chunk_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChunkRequest) Reset() {
	*x = GetChunkRequest{}
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkRequest) ProtoMessage() {}

func (x *GetChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkRequest.ProtoReflect.Descriptor instead.
func (*GetChunkRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_chunk_proto_rawDescGZIP(), []int{3}
}

func (x *GetChunkRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *GetChunkRequest) GetKnowledgeBaseId() string {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return ""
}

func (x *GetChunkRequest) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *GetChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *GetChunkRequest) GetChunkType() Chunk_Type {
	if x != nil && x.ChunkType != nil {
		return *x.ChunkType
	}
	return Chunk_TYPE_UNSPECIFIED
}

// GetChunkResponse represents a response for getting a chunk.
type GetChunkResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The chunk metadata, including markdown_reference for extracting content.
	// Clients should use GetFile to fetch the full content/summary markdown,
	// then use markdown_reference coordinates to extract the specific chunk text.
	Chunk         *Chunk `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetChunkResponse) Reset() {
	*x = GetChunkResponse{}
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChunkResponse) ProtoMessage() {}

func (x *GetChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChunkResponse.ProtoReflect.Descriptor instead.
func (*GetChunkResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_chunk_proto_rawDescGZIP(), []int{4}
}

func (x *GetChunkResponse) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

// UpdateChunkRequest represents a request to update a chunk.
type UpdateChunkRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace ID.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// Knowledge Base ID.
	KnowledgeBaseId string `protobuf:"bytes,2,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"`
	// Chunk ID.
	ChunkId string `protobuf:"bytes,3,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	// whether the chunk is retrievable
	Retrievable   bool `protobuf:"varint,4,opt,name=retrievable,proto3" json:"retrievable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChunkRequest) Reset() {
	*x = UpdateChunkRequest{}
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChunkRequest) ProtoMessage() {}

func (x *UpdateChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChunkRequest.ProtoReflect.Descriptor instead.
func (*UpdateChunkRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_chunk_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateChunkRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *UpdateChunkRequest) GetKnowledgeBaseId() string {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return ""
}

func (x *UpdateChunkRequest) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *UpdateChunkRequest) GetRetrievable() bool {
	if x != nil {
		return x.Retrievable
	}
	return false
}

// UpdateChunkResponse represents a response for updating a chunk.
type UpdateChunkResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// chunk
	Chunk         *Chunk `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateChunkResponse) Reset() {
	*x = UpdateChunkResponse{}
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChunkResponse) ProtoMessage() {}

func (x *UpdateChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChunkResponse.ProtoReflect.Descriptor instead.
func (*UpdateChunkResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_chunk_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateChunkResponse) GetChunk() *Chunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

// SearchChunksRequest represents a request to search for similar chunks.
type SearchChunksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the namespace owning the knowledge base.
	NamespaceId string `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId,proto3" json:"namespace_id,omitempty"`
	// ID of the knowledge base.
	KnowledgeBaseId string `protobuf:"bytes,2,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"`
	// Text prompt to look for similarities.
	TextPrompt string `protobuf:"bytes,3,opt,name=text_prompt,json=textPrompt,proto3" json:"text_prompt,omitempty"`
	// Top K. Default value: 5.
	TopK uint32 `protobuf:"varint,4,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	// Chunk type.
	Type Chunk_Type `protobuf:"varint,6,opt,name=type,proto3,enum=artifact.artifact.v1alpha.Chunk_Type" json:"type,omitempty"`
	// File media type.
	FileMediaType File_FileMediaType `protobuf:"varint,7,opt,name=file_media_type,json=fileMediaType,proto3,enum=artifact.artifact.v1alpha.File_FileMediaType" json:"file_media_type,omitempty"`
	// File IDs. When this field is provided, the response will return only
	// chunks that belong to the specified file IDs.
	FileIds []string `protobuf:"bytes,9,rep,name=file_ids,json=fileIds,proto3" json:"file_ids,omitempty"`
	// Tags to filter by. When multiple tags are provided, OR logic is applied.
	// Note: File ID filter takes precedence over tags, as tags apply to files.
	Tags          []string `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchChunksRequest) Reset() {
	*x = SearchChunksRequest{}
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchChunksRequest) ProtoMessage() {}

func (x *SearchChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchChunksRequest.ProtoReflect.Descriptor instead.
func (*SearchChunksRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_chunk_proto_rawDescGZIP(), []int{7}
}

func (x *SearchChunksRequest) GetNamespaceId() string {
	if x != nil {
		return x.NamespaceId
	}
	return ""
}

func (x *SearchChunksRequest) GetKnowledgeBaseId() string {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return ""
}

func (x *SearchChunksRequest) GetTextPrompt() string {
	if x != nil {
		return x.TextPrompt
	}
	return ""
}

func (x *SearchChunksRequest) GetTopK() uint32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *SearchChunksRequest) GetType() Chunk_Type {
	if x != nil {
		return x.Type
	}
	return Chunk_TYPE_UNSPECIFIED
}

func (x *SearchChunksRequest) GetFileMediaType() File_FileMediaType {
	if x != nil {
		return x.FileMediaType
	}
	return File_FILE_MEDIA_TYPE_UNSPECIFIED
}

func (x *SearchChunksRequest) GetFileIds() []string {
	if x != nil {
		return x.FileIds
	}
	return nil
}

func (x *SearchChunksRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// SearchChunksResponse represents a response for searching similar chunks.
type SearchChunksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// chunks
	SimilarChunks []*SimilarityChunk `protobuf:"bytes,1,rep,name=similar_chunks,json=similarChunks,proto3" json:"similar_chunks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchChunksResponse) Reset() {
	*x = SearchChunksResponse{}
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchChunksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchChunksResponse) ProtoMessage() {}

func (x *SearchChunksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchChunksResponse.ProtoReflect.Descriptor instead.
func (*SearchChunksResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_chunk_proto_rawDescGZIP(), []int{8}
}

func (x *SearchChunksResponse) GetSimilarChunks() []*SimilarityChunk {
	if x != nil {
		return x.SimilarChunks
	}
	return nil
}

// SimilarityChunk represents a chunk with similarity score.
type SimilarityChunk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// chunk id
	ChunkId string `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	// similarity score
	SimilarityScore float32 `protobuf:"fixed32,2,opt,name=similarity_score,json=similarityScore,proto3" json:"similarity_score,omitempty"`
	// content
	TextContent string `protobuf:"bytes,3,opt,name=text_content,json=textContent,proto3" json:"text_content,omitempty"`
	// source file's name
	SourceFile string `protobuf:"bytes,4,opt,name=source_file,json=sourceFile,proto3" json:"source_file,omitempty"`
	// chunk metadata
	ChunkMetadata *Chunk `protobuf:"bytes,5,opt,name=chunk_metadata,json=chunkMetadata,proto3" json:"chunk_metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimilarityChunk) Reset() {
	*x = SimilarityChunk{}
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimilarityChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimilarityChunk) ProtoMessage() {}

func (x *SimilarityChunk) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimilarityChunk.ProtoReflect.Descriptor instead.
func (*SimilarityChunk) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_chunk_proto_rawDescGZIP(), []int{9}
}

func (x *SimilarityChunk) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *SimilarityChunk) GetSimilarityScore() float32 {
	if x != nil {
		return x.SimilarityScore
	}
	return 0
}

func (x *SimilarityChunk) GetTextContent() string {
	if x != nil {
		return x.TextContent
	}
	return ""
}

func (x *SimilarityChunk) GetSourceFile() string {
	if x != nil {
		return x.SourceFile
	}
	return ""
}

func (x *SimilarityChunk) GetChunkMetadata() *Chunk {
	if x != nil {
		return x.ChunkMetadata
	}
	return nil
}

// Reference represents the position of a chunk within a file.
type Chunk_Reference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Start position of the chunk within the file.
	Start *File_Position `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// End position of the chunk within the file.
	End           *File_Position `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Chunk_Reference) Reset() {
	*x = Chunk_Reference{}
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chunk_Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunk_Reference) ProtoMessage() {}

func (x *Chunk_Reference) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_v1alpha_chunk_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunk_Reference.ProtoReflect.Descriptor instead.
func (*Chunk_Reference) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_v1alpha_chunk_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Chunk_Reference) GetStart() *File_Position {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Chunk_Reference) GetEnd() *File_Position {
	if x != nil {
		return x.End
	}
	return nil
}

var File_artifact_artifact_v1alpha_chunk_proto protoreflect.FileDescriptor

const file_artifact_artifact_v1alpha_chunk_proto_rawDesc = "" +
	"\n" +
	"%artifact/artifact/v1alpha/chunk.proto\x12\x19artifact.artifact.v1alpha\x1a$artifact/artifact/v1alpha/file.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xb4\x06\n" +
	"\x05Chunk\x12\x15\n" +
	"\x03uid\x18\x01 \x01(\tB\x03\xe0A\x03R\x03uid\x12\x13\n" +
	"\x02id\x18\x02 \x01(\tB\x03\xe0A\x03R\x02id\x12\x17\n" +
	"\x04name\x18\x03 \x01(\tB\x03\xe0A\x03R\x04name\x12%\n" +
	"\vretrievable\x18\x04 \x01(\bB\x03\xe0A\x03R\vretrievable\x12\x1b\n" +
	"\x06tokens\x18\x05 \x01(\rB\x03\xe0A\x03R\x06tokens\x12@\n" +
	"\vcreate_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\x03\xe0A\x03R\n" +
	"createTime\x12-\n" +
	"\x10original_file_id\x18\a \x01(\tB\x03\xe0A\x03R\x0eoriginalFileId\x12>\n" +
	"\x04type\x18\b \x01(\x0e2%.artifact.artifact.v1alpha.Chunk.TypeB\x03\xe0A\x03R\x04type\x12M\n" +
	"\treference\x18\t \x01(\v2*.artifact.artifact.v1alpha.Chunk.ReferenceB\x03\xe0A\x03R\treference\x12^\n" +
	"\x12markdown_reference\x18\n" +
	" \x01(\v2*.artifact.artifact.v1alpha.Chunk.ReferenceB\x03\xe0A\x03R\x11markdownReference\x1a\x91\x01\n" +
	"\tReference\x12C\n" +
	"\x05start\x18\x01 \x01(\v2(.artifact.artifact.v1alpha.File.PositionB\x03\xe0A\x03R\x05start\x12?\n" +
	"\x03end\x18\x02 \x01(\v2(.artifact.artifact.v1alpha.File.PositionB\x03\xe0A\x03R\x03end\"T\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fTYPE_CONTENT\x10\x01\x12\x10\n" +
	"\fTYPE_SUMMARY\x10\x02\x12\x12\n" +
	"\x0eTYPE_AUGMENTED\x10\x03:X\xeaAU\x12Snamespaces/{namespace}/knowledge-bases/{knowledge_base}/files/{file}/chunks/{chunk}\"\xa4\x02\n" +
	"\x11ListChunksRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12/\n" +
	"\x11knowledge_base_id\x18\x02 \x01(\tB\x03\xe0A\x02R\x0fknowledgeBaseId\x12\x1c\n" +
	"\afile_id\x18\x03 \x01(\tB\x03\xe0A\x02R\x06fileId\x12%\n" +
	"\tpage_size\x18\x04 \x01(\x05B\x03\xe0A\x01H\x00R\bpageSize\x88\x01\x01\x12'\n" +
	"\n" +
	"page_token\x18\x05 \x01(\tB\x03\xe0A\x01H\x01R\tpageToken\x88\x01\x01\x12 \n" +
	"\x06filter\x18\x06 \x01(\tB\x03\xe0A\x01H\x02R\x06filter\x88\x01\x01B\f\n" +
	"\n" +
	"_page_sizeB\r\n" +
	"\v_page_tokenB\t\n" +
	"\a_filter\"S\n" +
	"\x12ListChunksResponse\x12=\n" +
	"\x06chunks\x18\x01 \x03(\v2 .artifact.artifact.v1alpha.ChunkB\x03\xe0A\x03R\x06chunks\"\x87\x02\n" +
	"\x0fGetChunkRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12/\n" +
	"\x11knowledge_base_id\x18\x02 \x01(\tB\x03\xe0A\x02R\x0fknowledgeBaseId\x12\x1c\n" +
	"\afile_id\x18\x03 \x01(\tB\x03\xe0A\x02R\x06fileId\x12\x1e\n" +
	"\bchunk_id\x18\x04 \x01(\tB\x03\xe0A\x02R\achunkId\x12N\n" +
	"\n" +
	"chunk_type\x18\x05 \x01(\x0e2%.artifact.artifact.v1alpha.Chunk.TypeB\x03\xe0A\x01H\x00R\tchunkType\x88\x01\x01B\r\n" +
	"\v_chunk_type\"O\n" +
	"\x10GetChunkResponse\x12;\n" +
	"\x05chunk\x18\x01 \x01(\v2 .artifact.artifact.v1alpha.ChunkB\x03\xe0A\x03R\x05chunk\"\xb4\x01\n" +
	"\x12UpdateChunkRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12/\n" +
	"\x11knowledge_base_id\x18\x02 \x01(\tB\x03\xe0A\x02R\x0fknowledgeBaseId\x12\x1e\n" +
	"\bchunk_id\x18\x03 \x01(\tB\x03\xe0A\x02R\achunkId\x12%\n" +
	"\vretrievable\x18\x04 \x01(\bB\x03\xe0A\x02R\vretrievable\"R\n" +
	"\x13UpdateChunkResponse\x12;\n" +
	"\x05chunk\x18\x01 \x01(\v2 .artifact.artifact.v1alpha.ChunkB\x03\xe0A\x03R\x05chunk\"\x8f\x03\n" +
	"\x13SearchChunksRequest\x12&\n" +
	"\fnamespace_id\x18\x01 \x01(\tB\x03\xe0A\x02R\vnamespaceId\x12/\n" +
	"\x11knowledge_base_id\x18\x02 \x01(\tB\x03\xe0A\x02R\x0fknowledgeBaseId\x12$\n" +
	"\vtext_prompt\x18\x03 \x01(\tB\x03\xe0A\x02R\n" +
	"textPrompt\x12\x18\n" +
	"\x05top_k\x18\x04 \x01(\rB\x03\xe0A\x01R\x04topK\x12>\n" +
	"\x04type\x18\x06 \x01(\x0e2%.artifact.artifact.v1alpha.Chunk.TypeB\x03\xe0A\x01R\x04type\x12Z\n" +
	"\x0ffile_media_type\x18\a \x01(\x0e2-.artifact.artifact.v1alpha.File.FileMediaTypeB\x03\xe0A\x01R\rfileMediaType\x12\x1e\n" +
	"\bfile_ids\x18\t \x03(\tB\x03\xe0A\x01R\afileIds\x12\x17\n" +
	"\x04tags\x18\n" +
	" \x03(\tB\x03\xe0A\x01R\x04tagsJ\x04\b\x05\x10\x06J\x04\b\b\x10\t\"n\n" +
	"\x14SearchChunksResponse\x12V\n" +
	"\x0esimilar_chunks\x18\x01 \x03(\v2*.artifact.artifact.v1alpha.SimilarityChunkB\x03\xe0A\x03R\rsimilarChunks\"\xfd\x01\n" +
	"\x0fSimilarityChunk\x12\x1e\n" +
	"\bchunk_id\x18\x01 \x01(\tB\x03\xe0A\x03R\achunkId\x12.\n" +
	"\x10similarity_score\x18\x02 \x01(\x02B\x03\xe0A\x03R\x0fsimilarityScore\x12&\n" +
	"\ftext_content\x18\x03 \x01(\tB\x03\xe0A\x03R\vtextContent\x12$\n" +
	"\vsource_file\x18\x04 \x01(\tB\x03\xe0A\x03R\n" +
	"sourceFile\x12L\n" +
	"\x0echunk_metadata\x18\x05 \x01(\v2 .artifact.artifact.v1alpha.ChunkB\x03\xe0A\x03R\rchunkMetadataB\xfe\x01\n" +
	"\x1dcom.artifact.artifact.v1alphaB\n" +
	"ChunkProtoP\x01ZKgithub.com/instill-ai/protogen-go/artifact/artifact/v1alpha;artifactv1alpha\xa2\x02\x03AAX\xaa\x02\x19Artifact.Artifact.V1alpha\xca\x02\x19Artifact\\Artifact\\V1alpha\xe2\x02%Artifact\\Artifact\\V1alpha\\GPBMetadata\xea\x02\x1bArtifact::Artifact::V1alphab\x06proto3"

var (
	file_artifact_artifact_v1alpha_chunk_proto_rawDescOnce sync.Once
	file_artifact_artifact_v1alpha_chunk_proto_rawDescData []byte
)

func file_artifact_artifact_v1alpha_chunk_proto_rawDescGZIP() []byte {
	file_artifact_artifact_v1alpha_chunk_proto_rawDescOnce.Do(func() {
		file_artifact_artifact_v1alpha_chunk_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_artifact_artifact_v1alpha_chunk_proto_rawDesc), len(file_artifact_artifact_v1alpha_chunk_proto_rawDesc)))
	})
	return file_artifact_artifact_v1alpha_chunk_proto_rawDescData
}

var file_artifact_artifact_v1alpha_chunk_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_artifact_artifact_v1alpha_chunk_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_artifact_artifact_v1alpha_chunk_proto_goTypes = []any{
	(Chunk_Type)(0),               // 0: artifact.artifact.v1alpha.Chunk.Type
	(*Chunk)(nil),                 // 1: artifact.artifact.v1alpha.Chunk
	(*ListChunksRequest)(nil),     // 2: artifact.artifact.v1alpha.ListChunksRequest
	(*ListChunksResponse)(nil),    // 3: artifact.artifact.v1alpha.ListChunksResponse
	(*GetChunkRequest)(nil),       // 4: artifact.artifact.v1alpha.GetChunkRequest
	(*GetChunkResponse)(nil),      // 5: artifact.artifact.v1alpha.GetChunkResponse
	(*UpdateChunkRequest)(nil),    // 6: artifact.artifact.v1alpha.UpdateChunkRequest
	(*UpdateChunkResponse)(nil),   // 7: artifact.artifact.v1alpha.UpdateChunkResponse
	(*SearchChunksRequest)(nil),   // 8: artifact.artifact.v1alpha.SearchChunksRequest
	(*SearchChunksResponse)(nil),  // 9: artifact.artifact.v1alpha.SearchChunksResponse
	(*SimilarityChunk)(nil),       // 10: artifact.artifact.v1alpha.SimilarityChunk
	(*Chunk_Reference)(nil),       // 11: artifact.artifact.v1alpha.Chunk.Reference
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	(File_FileMediaType)(0),       // 13: artifact.artifact.v1alpha.File.FileMediaType
	(*File_Position)(nil),         // 14: artifact.artifact.v1alpha.File.Position
}
var file_artifact_artifact_v1alpha_chunk_proto_depIdxs = []int32{
	12, // 0: artifact.artifact.v1alpha.Chunk.create_time:type_name -> google.protobuf.Timestamp
	0,  // 1: artifact.artifact.v1alpha.Chunk.type:type_name -> artifact.artifact.v1alpha.Chunk.Type
	11, // 2: artifact.artifact.v1alpha.Chunk.reference:type_name -> artifact.artifact.v1alpha.Chunk.Reference
	11, // 3: artifact.artifact.v1alpha.Chunk.markdown_reference:type_name -> artifact.artifact.v1alpha.Chunk.Reference
	1,  // 4: artifact.artifact.v1alpha.ListChunksResponse.chunks:type_name -> artifact.artifact.v1alpha.Chunk
	0,  // 5: artifact.artifact.v1alpha.GetChunkRequest.chunk_type:type_name -> artifact.artifact.v1alpha.Chunk.Type
	1,  // 6: artifact.artifact.v1alpha.GetChunkResponse.chunk:type_name -> artifact.artifact.v1alpha.Chunk
	1,  // 7: artifact.artifact.v1alpha.UpdateChunkResponse.chunk:type_name -> artifact.artifact.v1alpha.Chunk
	0,  // 8: artifact.artifact.v1alpha.SearchChunksRequest.type:type_name -> artifact.artifact.v1alpha.Chunk.Type
	13, // 9: artifact.artifact.v1alpha.SearchChunksRequest.file_media_type:type_name -> artifact.artifact.v1alpha.File.FileMediaType
	10, // 10: artifact.artifact.v1alpha.SearchChunksResponse.similar_chunks:type_name -> artifact.artifact.v1alpha.SimilarityChunk
	1,  // 11: artifact.artifact.v1alpha.SimilarityChunk.chunk_metadata:type_name -> artifact.artifact.v1alpha.Chunk
	14, // 12: artifact.artifact.v1alpha.Chunk.Reference.start:type_name -> artifact.artifact.v1alpha.File.Position
	14, // 13: artifact.artifact.v1alpha.Chunk.Reference.end:type_name -> artifact.artifact.v1alpha.File.Position
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_artifact_artifact_v1alpha_chunk_proto_init() }
func file_artifact_artifact_v1alpha_chunk_proto_init() {
	if File_artifact_artifact_v1alpha_chunk_proto != nil {
		return
	}
	file_artifact_artifact_v1alpha_file_proto_init()
	file_artifact_artifact_v1alpha_chunk_proto_msgTypes[1].OneofWrappers = []any{}
	file_artifact_artifact_v1alpha_chunk_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_artifact_artifact_v1alpha_chunk_proto_rawDesc), len(file_artifact_artifact_v1alpha_chunk_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_artifact_artifact_v1alpha_chunk_proto_goTypes,
		DependencyIndexes: file_artifact_artifact_v1alpha_chunk_proto_depIdxs,
		EnumInfos:         file_artifact_artifact_v1alpha_chunk_proto_enumTypes,
		MessageInfos:      file_artifact_artifact_v1alpha_chunk_proto_msgTypes,
	}.Build()
	File_artifact_artifact_v1alpha_chunk_proto = out.File
	file_artifact_artifact_v1alpha_chunk_proto_goTypes = nil
	file_artifact_artifact_v1alpha_chunk_proto_depIdxs = nil
}
