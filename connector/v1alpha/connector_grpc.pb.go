// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package connectorv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectorServiceClient is the client API for ConnectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectorServiceClient interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error)
	// ListSourceDefinition method receives a ListSourceDefinitionRequest message and returns
	// a ListSourceDefinitionResponse message.
	ListSourceDefinition(ctx context.Context, in *ListSourceDefinitionRequest, opts ...grpc.CallOption) (*ListSourceDefinitionResponse, error)
	// GetSourceDefinition method receives a GetSourceDefinitionRequest message and returns
	// a GetSourceDefinitionResponse message.
	GetSourceDefinition(ctx context.Context, in *GetSourceDefinitionRequest, opts ...grpc.CallOption) (*GetSourceDefinitionResponse, error)
	// ListDestinationDefinition method receives a ListDestinationDefinitionRequest message and returns
	// a ListDestinationDefinitionResponse message.
	ListDestinationDefinition(ctx context.Context, in *ListDestinationDefinitionRequest, opts ...grpc.CallOption) (*ListDestinationDefinitionResponse, error)
	// GetDestinationDefinition method receives a GetDestinationDefinitionRequest message and returns
	// a GetDestinationDefinitionResponse message.
	GetDestinationDefinition(ctx context.Context, in *GetDestinationDefinitionRequest, opts ...grpc.CallOption) (*GetDestinationDefinitionResponse, error)
	// CreateConnector method receives a CreateConnectorRequest message and returns
	// a CreateConnectorResponse message.
	CreateConnector(ctx context.Context, in *CreateConnectorRequest, opts ...grpc.CallOption) (*CreateConnectorResponse, error)
	// ListConnector method receives a ListConnectorRequest message and returns
	// a ListConnectorResponse message.
	ListConnector(ctx context.Context, in *ListConnectorRequest, opts ...grpc.CallOption) (*ListConnectorResponse, error)
	// GetConnector method receives a GetConnectorRequest message and returns
	// a GetConnectorResponse message.
	GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...grpc.CallOption) (*GetConnectorResponse, error)
	// UpdateConnector method receives a UpdateConnectorRequest message and returns
	// a UpdateConnectorResponse message.
	UpdateConnector(ctx context.Context, in *UpdateConnectorRequest, opts ...grpc.CallOption) (*UpdateConnectorResponse, error)
	// DeleteConnector method receives a DeleteConnectorRequest message and returns
	// a DeleteConnectorResponse message.
	DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...grpc.CallOption) (*DeleteConnectorResponse, error)
}

type connectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorServiceClient(cc grpc.ClientConnInterface) ConnectorServiceClient {
	return &connectorServiceClient{cc}
}

func (c *connectorServiceClient) Liveness(ctx context.Context, in *LivenessRequest, opts ...grpc.CallOption) (*LivenessResponse, error) {
	out := new(LivenessResponse)
	err := c.cc.Invoke(ctx, "/instill.connector.v1alpha.ConnectorService/Liveness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) Readiness(ctx context.Context, in *ReadinessRequest, opts ...grpc.CallOption) (*ReadinessResponse, error) {
	out := new(ReadinessResponse)
	err := c.cc.Invoke(ctx, "/instill.connector.v1alpha.ConnectorService/Readiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) ListSourceDefinition(ctx context.Context, in *ListSourceDefinitionRequest, opts ...grpc.CallOption) (*ListSourceDefinitionResponse, error) {
	out := new(ListSourceDefinitionResponse)
	err := c.cc.Invoke(ctx, "/instill.connector.v1alpha.ConnectorService/ListSourceDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) GetSourceDefinition(ctx context.Context, in *GetSourceDefinitionRequest, opts ...grpc.CallOption) (*GetSourceDefinitionResponse, error) {
	out := new(GetSourceDefinitionResponse)
	err := c.cc.Invoke(ctx, "/instill.connector.v1alpha.ConnectorService/GetSourceDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) ListDestinationDefinition(ctx context.Context, in *ListDestinationDefinitionRequest, opts ...grpc.CallOption) (*ListDestinationDefinitionResponse, error) {
	out := new(ListDestinationDefinitionResponse)
	err := c.cc.Invoke(ctx, "/instill.connector.v1alpha.ConnectorService/ListDestinationDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) GetDestinationDefinition(ctx context.Context, in *GetDestinationDefinitionRequest, opts ...grpc.CallOption) (*GetDestinationDefinitionResponse, error) {
	out := new(GetDestinationDefinitionResponse)
	err := c.cc.Invoke(ctx, "/instill.connector.v1alpha.ConnectorService/GetDestinationDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) CreateConnector(ctx context.Context, in *CreateConnectorRequest, opts ...grpc.CallOption) (*CreateConnectorResponse, error) {
	out := new(CreateConnectorResponse)
	err := c.cc.Invoke(ctx, "/instill.connector.v1alpha.ConnectorService/CreateConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) ListConnector(ctx context.Context, in *ListConnectorRequest, opts ...grpc.CallOption) (*ListConnectorResponse, error) {
	out := new(ListConnectorResponse)
	err := c.cc.Invoke(ctx, "/instill.connector.v1alpha.ConnectorService/ListConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) GetConnector(ctx context.Context, in *GetConnectorRequest, opts ...grpc.CallOption) (*GetConnectorResponse, error) {
	out := new(GetConnectorResponse)
	err := c.cc.Invoke(ctx, "/instill.connector.v1alpha.ConnectorService/GetConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) UpdateConnector(ctx context.Context, in *UpdateConnectorRequest, opts ...grpc.CallOption) (*UpdateConnectorResponse, error) {
	out := new(UpdateConnectorResponse)
	err := c.cc.Invoke(ctx, "/instill.connector.v1alpha.ConnectorService/UpdateConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorServiceClient) DeleteConnector(ctx context.Context, in *DeleteConnectorRequest, opts ...grpc.CallOption) (*DeleteConnectorResponse, error) {
	out := new(DeleteConnectorResponse)
	err := c.cc.Invoke(ctx, "/instill.connector.v1alpha.ConnectorService/DeleteConnector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorServiceServer is the server API for ConnectorService service.
// All implementations should embed UnimplementedConnectorServiceServer
// for forward compatibility
type ConnectorServiceServer interface {
	// Liveness method receives a LivenessRequest message and returns a
	// LivenessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error)
	// Readiness method receives a ReadinessRequest message and returns a
	// ReadinessResponse message.
	// See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
	Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error)
	// ListSourceDefinition method receives a ListSourceDefinitionRequest message and returns
	// a ListSourceDefinitionResponse message.
	ListSourceDefinition(context.Context, *ListSourceDefinitionRequest) (*ListSourceDefinitionResponse, error)
	// GetSourceDefinition method receives a GetSourceDefinitionRequest message and returns
	// a GetSourceDefinitionResponse message.
	GetSourceDefinition(context.Context, *GetSourceDefinitionRequest) (*GetSourceDefinitionResponse, error)
	// ListDestinationDefinition method receives a ListDestinationDefinitionRequest message and returns
	// a ListDestinationDefinitionResponse message.
	ListDestinationDefinition(context.Context, *ListDestinationDefinitionRequest) (*ListDestinationDefinitionResponse, error)
	// GetDestinationDefinition method receives a GetDestinationDefinitionRequest message and returns
	// a GetDestinationDefinitionResponse message.
	GetDestinationDefinition(context.Context, *GetDestinationDefinitionRequest) (*GetDestinationDefinitionResponse, error)
	// CreateConnector method receives a CreateConnectorRequest message and returns
	// a CreateConnectorResponse message.
	CreateConnector(context.Context, *CreateConnectorRequest) (*CreateConnectorResponse, error)
	// ListConnector method receives a ListConnectorRequest message and returns
	// a ListConnectorResponse message.
	ListConnector(context.Context, *ListConnectorRequest) (*ListConnectorResponse, error)
	// GetConnector method receives a GetConnectorRequest message and returns
	// a GetConnectorResponse message.
	GetConnector(context.Context, *GetConnectorRequest) (*GetConnectorResponse, error)
	// UpdateConnector method receives a UpdateConnectorRequest message and returns
	// a UpdateConnectorResponse message.
	UpdateConnector(context.Context, *UpdateConnectorRequest) (*UpdateConnectorResponse, error)
	// DeleteConnector method receives a DeleteConnectorRequest message and returns
	// a DeleteConnectorResponse message.
	DeleteConnector(context.Context, *DeleteConnectorRequest) (*DeleteConnectorResponse, error)
}

// UnimplementedConnectorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConnectorServiceServer struct {
}

func (UnimplementedConnectorServiceServer) Liveness(context.Context, *LivenessRequest) (*LivenessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (UnimplementedConnectorServiceServer) Readiness(context.Context, *ReadinessRequest) (*ReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}
func (UnimplementedConnectorServiceServer) ListSourceDefinition(context.Context, *ListSourceDefinitionRequest) (*ListSourceDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSourceDefinition not implemented")
}
func (UnimplementedConnectorServiceServer) GetSourceDefinition(context.Context, *GetSourceDefinitionRequest) (*GetSourceDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceDefinition not implemented")
}
func (UnimplementedConnectorServiceServer) ListDestinationDefinition(context.Context, *ListDestinationDefinitionRequest) (*ListDestinationDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDestinationDefinition not implemented")
}
func (UnimplementedConnectorServiceServer) GetDestinationDefinition(context.Context, *GetDestinationDefinitionRequest) (*GetDestinationDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDestinationDefinition not implemented")
}
func (UnimplementedConnectorServiceServer) CreateConnector(context.Context, *CreateConnectorRequest) (*CreateConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnector not implemented")
}
func (UnimplementedConnectorServiceServer) ListConnector(context.Context, *ListConnectorRequest) (*ListConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnector not implemented")
}
func (UnimplementedConnectorServiceServer) GetConnector(context.Context, *GetConnectorRequest) (*GetConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnector not implemented")
}
func (UnimplementedConnectorServiceServer) UpdateConnector(context.Context, *UpdateConnectorRequest) (*UpdateConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnector not implemented")
}
func (UnimplementedConnectorServiceServer) DeleteConnector(context.Context, *DeleteConnectorRequest) (*DeleteConnectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnector not implemented")
}

// UnsafeConnectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorServiceServer will
// result in compilation errors.
type UnsafeConnectorServiceServer interface {
	mustEmbedUnimplementedConnectorServiceServer()
}

func RegisterConnectorServiceServer(s grpc.ServiceRegistrar, srv ConnectorServiceServer) {
	s.RegisterService(&ConnectorService_ServiceDesc, srv)
}

func _ConnectorService_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LivenessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.connector.v1alpha.ConnectorService/Liveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).Liveness(ctx, req.(*LivenessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.connector.v1alpha.ConnectorService/Readiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).Readiness(ctx, req.(*ReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_ListSourceDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSourceDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).ListSourceDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.connector.v1alpha.ConnectorService/ListSourceDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).ListSourceDefinition(ctx, req.(*ListSourceDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_GetSourceDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSourceDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).GetSourceDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.connector.v1alpha.ConnectorService/GetSourceDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).GetSourceDefinition(ctx, req.(*GetSourceDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_ListDestinationDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDestinationDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).ListDestinationDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.connector.v1alpha.ConnectorService/ListDestinationDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).ListDestinationDefinition(ctx, req.(*ListDestinationDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_GetDestinationDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDestinationDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).GetDestinationDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.connector.v1alpha.ConnectorService/GetDestinationDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).GetDestinationDefinition(ctx, req.(*GetDestinationDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_CreateConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).CreateConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.connector.v1alpha.ConnectorService/CreateConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).CreateConnector(ctx, req.(*CreateConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_ListConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).ListConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.connector.v1alpha.ConnectorService/ListConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).ListConnector(ctx, req.(*ListConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_GetConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).GetConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.connector.v1alpha.ConnectorService/GetConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).GetConnector(ctx, req.(*GetConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_UpdateConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).UpdateConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.connector.v1alpha.ConnectorService/UpdateConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).UpdateConnector(ctx, req.(*UpdateConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectorService_DeleteConnector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConnectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).DeleteConnector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/instill.connector.v1alpha.ConnectorService/DeleteConnector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).DeleteConnector(ctx, req.(*DeleteConnectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorService_ServiceDesc is the grpc.ServiceDesc for ConnectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "instill.connector.v1alpha.ConnectorService",
	HandlerType: (*ConnectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _ConnectorService_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _ConnectorService_Readiness_Handler,
		},
		{
			MethodName: "ListSourceDefinition",
			Handler:    _ConnectorService_ListSourceDefinition_Handler,
		},
		{
			MethodName: "GetSourceDefinition",
			Handler:    _ConnectorService_GetSourceDefinition_Handler,
		},
		{
			MethodName: "ListDestinationDefinition",
			Handler:    _ConnectorService_ListDestinationDefinition_Handler,
		},
		{
			MethodName: "GetDestinationDefinition",
			Handler:    _ConnectorService_GetDestinationDefinition_Handler,
		},
		{
			MethodName: "CreateConnector",
			Handler:    _ConnectorService_CreateConnector_Handler,
		},
		{
			MethodName: "ListConnector",
			Handler:    _ConnectorService_ListConnector_Handler,
		},
		{
			MethodName: "GetConnector",
			Handler:    _ConnectorService_GetConnector_Handler,
		},
		{
			MethodName: "UpdateConnector",
			Handler:    _ConnectorService_UpdateConnector_Handler,
		},
		{
			MethodName: "DeleteConnector",
			Handler:    _ConnectorService_DeleteConnector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "instill/connector/v1alpha/connector.proto",
}
