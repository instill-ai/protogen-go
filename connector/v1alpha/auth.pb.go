// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: instill/connector/v1alpha/auth.proto

package connectorv1alpha

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AuthFlowType enumerates the type of auth
type AdvancedAuth_AuthFlowType int32

const (
	// AuthFlowType: AUTH_TYPE_UNSPECIFIED
	AdvancedAuth_AUTH_FLOW_TYPE_UNSPECIFIED AdvancedAuth_AuthFlowType = 0
	// AuthFlowType: AUTH_TYPE_OAUTH2_0
	AdvancedAuth_AUTH_FLOW_TYPE_OAUTH2_0 AdvancedAuth_AuthFlowType = 1
	// AuthFlowType: AUTH_TYPE_OAUTH1_0
	AdvancedAuth_AUTH_FLOW_TYPE_OAUTH1_0 AdvancedAuth_AuthFlowType = 2
)

// Enum value maps for AdvancedAuth_AuthFlowType.
var (
	AdvancedAuth_AuthFlowType_name = map[int32]string{
		0: "AUTH_FLOW_TYPE_UNSPECIFIED",
		1: "AUTH_FLOW_TYPE_OAUTH2_0",
		2: "AUTH_FLOW_TYPE_OAUTH1_0",
	}
	AdvancedAuth_AuthFlowType_value = map[string]int32{
		"AUTH_FLOW_TYPE_UNSPECIFIED": 0,
		"AUTH_FLOW_TYPE_OAUTH2_0":    1,
		"AUTH_FLOW_TYPE_OAUTH1_0":    2,
	}
)

func (x AdvancedAuth_AuthFlowType) Enum() *AdvancedAuth_AuthFlowType {
	p := new(AdvancedAuth_AuthFlowType)
	*p = x
	return p
}

func (x AdvancedAuth_AuthFlowType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdvancedAuth_AuthFlowType) Descriptor() protoreflect.EnumDescriptor {
	return file_instill_connector_v1alpha_auth_proto_enumTypes[0].Descriptor()
}

func (AdvancedAuth_AuthFlowType) Type() protoreflect.EnumType {
	return &file_instill_connector_v1alpha_auth_proto_enumTypes[0]
}

func (x AdvancedAuth_AuthFlowType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdvancedAuth_AuthFlowType.Descriptor instead.
func (AdvancedAuth_AuthFlowType) EnumDescriptor() ([]byte, []int) {
	return file_instill_connector_v1alpha_auth_proto_rawDescGZIP(), []int{1, 0}
}

// OauthConfigSpecification represents oauth config specification
type OauthConfigSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OAuth specific blob. This is a Json Schema used to validate Json configurations used as input to OAuth.
	// Must be a valid non-nested JSON that refers to properties from ConnectorSpecification.connectionSpecification
	// using special annotation 'path_in_connector_config'.
	// These are input values the user is entering through the UI to authenticate to the connector, that might also shared
	// as inputs for syncing data via the connector.
	//
	// Examples:
	//
	// if no connector values is shared during oauth flow, oauth_user_input_from_connector_config_specification=[]
	// if connector values such as 'app_id' inside the top level are used to generate the API url for the oauth flow,
	//   oauth_user_input_from_connector_config_specification={
	//     app_id: {
	//       type: string
	//       path_in_connector_config: ['app_id']
	//     }
	//   }
	//if connector values such as 'info.app_id' nested inside another object are used to generate the API url for the oauth flow,
	//  oauth_user_input_from_connector_config_specification={
	//    app_id: {
	//      type: string
	//      path_in_connector_config: ['info', 'app_id']
	//    }
	//  }
	OauthUserInputFromConnectorConfigSpecification *structpb.Struct `protobuf:"bytes,1,opt,name=oauth_user_input_from_connector_config_specification,json=oauthUserInputFromConnectorConfigSpecification,proto3" json:"oauth_user_input_from_connector_config_specification,omitempty"`
	// OAuth specific blob. This is a Json Schema used to validate Json configurations produced by the OAuth flows as they are
	// returned by the distant OAuth APIs.
	// Must be a valid JSON describing the fields to merge back to `ConnectorSpecification.connectionSpecification`.
	// For each field, a special annotation `path_in_connector_config` can be specified to determine where to merge it,
	//
	// Examples:
	//
	//     complete_oauth_output_specification={
	//       refresh_token: {
	//         type: string,
	//         path_in_connector_config: ['credentials', 'refresh_token']
	//       }
	//     }
	CompleteOauthOutputSpecification *structpb.Struct `protobuf:"bytes,2,opt,name=complete_oauth_output_specification,json=completeOauthOutputSpecification,proto3" json:"complete_oauth_output_specification,omitempty"`
	// OAuth specific blob. This is a Json Schema used to validate Json configurations persisted as Airbyte Server configurations.
	// Must be a valid non-nested JSON describing additional fields configured by the Airbyte Instance or Workspace Admins to be used by the
	// server when completing an OAuth flow (typically exchanging an auth code for refresh token).
	//
	// Examples:
	//
	//     complete_oauth_server_input_specification={
	//       client_id: {
	//         type: string
	//       },
	//       client_secret: {
	//         type: string
	//       }
	//     }
	CompleteOauthServerInputSpecification *structpb.Struct `protobuf:"bytes,3,opt,name=complete_oauth_server_input_specification,json=completeOauthServerInputSpecification,proto3" json:"complete_oauth_server_input_specification,omitempty"`
	// OAuth specific blob. This is a Json Schema used to validate Json configurations persisted as Airbyte Server configurations that
	// also need to be merged back into the connector configuration at runtime.
	// This is a subset configuration of `complete_oauth_server_input_specification` that filters fields out to retain only the ones that
	// are necessary for the connector to function with OAuth. (some fields could be used during oauth flows but not needed afterwards, therefore
	// they would be listed in the `complete_oauth_server_input_specification` but not `complete_oauth_server_output_specification`)
	// Must be a valid non-nested JSON describing additional fields configured by the Airbyte Instance or Workspace Admins to be used by the
	// connector when using OAuth flow APIs.
	// These fields are to be merged back to `ConnectorSpecification.connectionSpecification`.
	// For each field, a special annotation `path_in_connector_config` can be specified to determine where to merge it,
	//
	// Examples:
	//
	//       complete_oauth_server_output_specification={
	//         client_id: {
	//           type: string,
	//           path_in_connector_config: ['credentials', 'client_id']
	//         },
	//         client_secret: {
	//           type: string,
	//           path_in_connector_config: ['credentials', 'client_secret']
	//         }
	//       }
	CompleteOauthServerOutputSpecification *structpb.Struct `protobuf:"bytes,4,opt,name=complete_oauth_server_output_specification,json=completeOauthServerOutputSpecification,proto3" json:"complete_oauth_server_output_specification,omitempty"`
}

func (x *OauthConfigSpecification) Reset() {
	*x = OauthConfigSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instill_connector_v1alpha_auth_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OauthConfigSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OauthConfigSpecification) ProtoMessage() {}

func (x *OauthConfigSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_instill_connector_v1alpha_auth_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OauthConfigSpecification.ProtoReflect.Descriptor instead.
func (*OauthConfigSpecification) Descriptor() ([]byte, []int) {
	return file_instill_connector_v1alpha_auth_proto_rawDescGZIP(), []int{0}
}

func (x *OauthConfigSpecification) GetOauthUserInputFromConnectorConfigSpecification() *structpb.Struct {
	if x != nil {
		return x.OauthUserInputFromConnectorConfigSpecification
	}
	return nil
}

func (x *OauthConfigSpecification) GetCompleteOauthOutputSpecification() *structpb.Struct {
	if x != nil {
		return x.CompleteOauthOutputSpecification
	}
	return nil
}

func (x *OauthConfigSpecification) GetCompleteOauthServerInputSpecification() *structpb.Struct {
	if x != nil {
		return x.CompleteOauthServerInputSpecification
	}
	return nil
}

func (x *OauthConfigSpecification) GetCompleteOauthServerOutputSpecification() *structpb.Struct {
	if x != nil {
		return x.CompleteOauthServerOutputSpecification
	}
	return nil
}

// Additional and optional specification object to describe what an 'advanced' Auth flow would need to function.
// - A connector should be able to fully function with the configuration as described by the ConnectorSpecification in a 'basic' mode.
// - The 'advanced' mode provides easier UX for the user with UI improvements and automations. However, this requires further setup on the
// server side by instance or workspace admins beforehand. The trade-off is that the user does not have to provide as many technical
// inputs anymore and the auth process is faster and easier to complete.
type AdvancedAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AdvancedAuth auth flow type
	AuthFlowType AdvancedAuth_AuthFlowType `protobuf:"varint,1,opt,name=auth_flow_type,json=authFlowType,proto3,enum=instill.connector.v1alpha.AdvancedAuth_AuthFlowType" json:"auth_flow_type,omitempty"`
	// AdvancedAuth predicate key, i.e., the JSON Path to a field in the connectorSpecification that should exist for the advanced auth to be applicable
	PredicateKey []string `protobuf:"bytes,2,rep,name=predicate_key,json=predicateKey,proto3" json:"predicate_key,omitempty"`
	// AdvancedAuth predicate value, i.e., the value of the predicate key fields for the advanced auth to be applicable
	PredicateValue string `protobuf:"bytes,3,opt,name=predicate_value,json=predicateValue,proto3" json:"predicate_value,omitempty"`
	// OauthConfigSpecification represents OAuth config specification
	OauthConfigSpecification *OauthConfigSpecification `protobuf:"bytes,4,opt,name=oauth_config_specification,json=oauthConfigSpecification,proto3" json:"oauth_config_specification,omitempty"`
}

func (x *AdvancedAuth) Reset() {
	*x = AdvancedAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instill_connector_v1alpha_auth_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdvancedAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedAuth) ProtoMessage() {}

func (x *AdvancedAuth) ProtoReflect() protoreflect.Message {
	mi := &file_instill_connector_v1alpha_auth_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedAuth.ProtoReflect.Descriptor instead.
func (*AdvancedAuth) Descriptor() ([]byte, []int) {
	return file_instill_connector_v1alpha_auth_proto_rawDescGZIP(), []int{1}
}

func (x *AdvancedAuth) GetAuthFlowType() AdvancedAuth_AuthFlowType {
	if x != nil {
		return x.AuthFlowType
	}
	return AdvancedAuth_AUTH_FLOW_TYPE_UNSPECIFIED
}

func (x *AdvancedAuth) GetPredicateKey() []string {
	if x != nil {
		return x.PredicateKey
	}
	return nil
}

func (x *AdvancedAuth) GetPredicateValue() string {
	if x != nil {
		return x.PredicateValue
	}
	return ""
}

func (x *AdvancedAuth) GetOauthConfigSpecification() *OauthConfigSpecification {
	if x != nil {
		return x.OauthConfigSpecification
	}
	return nil
}

var File_instill_connector_v1alpha_auth_proto protoreflect.FileDescriptor

var file_instill_connector_v1alpha_auth_proto_rawDesc = []byte{
	0x0a, 0x24, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x86, 0x04, 0x0a, 0x18, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x01,
	0x0a, 0x34, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x2e, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b, 0x0a, 0x23, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x61, 0x75, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x29, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x25, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x78, 0x0a, 0x2a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x26, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x61, 0x75, 0x74, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x03, 0x0a, 0x0c, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41,
	0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x46, 0x6c,
	0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x71, 0x0a, 0x1a, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69,
	0x6c, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x46,
	0x6c, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32,
	0x5f, 0x30, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x46, 0x4c, 0x4f,
	0x57, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x31, 0x5f, 0x30, 0x10,
	0x02, 0x42, 0xfe, 0x01, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x42, 0x09, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x6c, 0x6c, 0x2d, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65, 0x6e,
	0x2d, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x02,
	0x03, 0x49, 0x43, 0x58, 0xaa, 0x02, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0xca, 0x02, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x25, 0x49,
	0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x3a, 0x3a,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_instill_connector_v1alpha_auth_proto_rawDescOnce sync.Once
	file_instill_connector_v1alpha_auth_proto_rawDescData = file_instill_connector_v1alpha_auth_proto_rawDesc
)

func file_instill_connector_v1alpha_auth_proto_rawDescGZIP() []byte {
	file_instill_connector_v1alpha_auth_proto_rawDescOnce.Do(func() {
		file_instill_connector_v1alpha_auth_proto_rawDescData = protoimpl.X.CompressGZIP(file_instill_connector_v1alpha_auth_proto_rawDescData)
	})
	return file_instill_connector_v1alpha_auth_proto_rawDescData
}

var file_instill_connector_v1alpha_auth_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_instill_connector_v1alpha_auth_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_instill_connector_v1alpha_auth_proto_goTypes = []interface{}{
	(AdvancedAuth_AuthFlowType)(0),   // 0: instill.connector.v1alpha.AdvancedAuth.AuthFlowType
	(*OauthConfigSpecification)(nil), // 1: instill.connector.v1alpha.OauthConfigSpecification
	(*AdvancedAuth)(nil),             // 2: instill.connector.v1alpha.AdvancedAuth
	(*structpb.Struct)(nil),          // 3: google.protobuf.Struct
}
var file_instill_connector_v1alpha_auth_proto_depIdxs = []int32{
	3, // 0: instill.connector.v1alpha.OauthConfigSpecification.oauth_user_input_from_connector_config_specification:type_name -> google.protobuf.Struct
	3, // 1: instill.connector.v1alpha.OauthConfigSpecification.complete_oauth_output_specification:type_name -> google.protobuf.Struct
	3, // 2: instill.connector.v1alpha.OauthConfigSpecification.complete_oauth_server_input_specification:type_name -> google.protobuf.Struct
	3, // 3: instill.connector.v1alpha.OauthConfigSpecification.complete_oauth_server_output_specification:type_name -> google.protobuf.Struct
	0, // 4: instill.connector.v1alpha.AdvancedAuth.auth_flow_type:type_name -> instill.connector.v1alpha.AdvancedAuth.AuthFlowType
	1, // 5: instill.connector.v1alpha.AdvancedAuth.oauth_config_specification:type_name -> instill.connector.v1alpha.OauthConfigSpecification
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_instill_connector_v1alpha_auth_proto_init() }
func file_instill_connector_v1alpha_auth_proto_init() {
	if File_instill_connector_v1alpha_auth_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_instill_connector_v1alpha_auth_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OauthConfigSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instill_connector_v1alpha_auth_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdvancedAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_instill_connector_v1alpha_auth_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_instill_connector_v1alpha_auth_proto_goTypes,
		DependencyIndexes: file_instill_connector_v1alpha_auth_proto_depIdxs,
		EnumInfos:         file_instill_connector_v1alpha_auth_proto_enumTypes,
		MessageInfos:      file_instill_connector_v1alpha_auth_proto_msgTypes,
	}.Build()
	File_instill_connector_v1alpha_auth_proto = out.File
	file_instill_connector_v1alpha_auth_proto_rawDesc = nil
	file_instill_connector_v1alpha_auth_proto_goTypes = nil
	file_instill_connector_v1alpha_auth_proto_depIdxs = nil
}
