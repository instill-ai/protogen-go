// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: instill/connector/v1alpha/definition.proto

package connectorv1alpha

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ReleaseStage enumerates the release stages
type ReleaseStage int32

const (
	// ReleaseStage: UNSPECIFIED
	ReleaseStage_RELEASE_STAGE_UNSPECIFIED ReleaseStage = 0
	// ReleaseStage: ALPHA
	ReleaseStage_RELEASE_STAGE_ALPHA ReleaseStage = 1
	// ReleaseStage: BETA
	ReleaseStage_RELEASE_STAGE_BETA ReleaseStage = 2
	// ReleaseStage: GENERALLY_AVAILABLE
	ReleaseStage_RELEASE_STAGE_GENERALLY_AVAILABLE ReleaseStage = 3
	// ReleaseStage: CUSTOM
	ReleaseStage_RELEASE_STAGE_CUSTOM ReleaseStage = 4
)

// Enum value maps for ReleaseStage.
var (
	ReleaseStage_name = map[int32]string{
		0: "RELEASE_STAGE_UNSPECIFIED",
		1: "RELEASE_STAGE_ALPHA",
		2: "RELEASE_STAGE_BETA",
		3: "RELEASE_STAGE_GENERALLY_AVAILABLE",
		4: "RELEASE_STAGE_CUSTOM",
	}
	ReleaseStage_value = map[string]int32{
		"RELEASE_STAGE_UNSPECIFIED":         0,
		"RELEASE_STAGE_ALPHA":               1,
		"RELEASE_STAGE_BETA":                2,
		"RELEASE_STAGE_GENERALLY_AVAILABLE": 3,
		"RELEASE_STAGE_CUSTOM":              4,
	}
)

func (x ReleaseStage) Enum() *ReleaseStage {
	p := new(ReleaseStage)
	*p = x
	return p
}

func (x ReleaseStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReleaseStage) Descriptor() protoreflect.EnumDescriptor {
	return file_instill_connector_v1alpha_definition_proto_enumTypes[0].Descriptor()
}

func (ReleaseStage) Type() protoreflect.EnumType {
	return &file_instill_connector_v1alpha_definition_proto_enumTypes[0]
}

func (x ReleaseStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReleaseStage.Descriptor instead.
func (ReleaseStage) EnumDescriptor() ([]byte, []int) {
	return file_instill_connector_v1alpha_definition_proto_rawDescGZIP(), []int{0}
}

// ConnectionType enumerates a connection type
type ConnectionType int32

const (
	// ConnectionType: UNSPECIFIED
	ConnectionType_CONNECTION_TYPE_UNSPECIFIED ConnectionType = 0
	// ConnectionType: DIRECTNESS
	ConnectionType_CONNECTION_TYPE_DIRECTNESS ConnectionType = 1
	// ConnectionType: API
	ConnectionType_CONNECTION_TYPE_API ConnectionType = 2
	// ConnectionType: FILE
	ConnectionType_CONNECTION_TYPE_FILE ConnectionType = 3
	// ConnectionType: DATABASE
	ConnectionType_CONNECTION_TYPE_DATABASE ConnectionType = 4
	// ConnectionType: CUSTOM
	ConnectionType_CONNECTION_TYPE_CUSTOM ConnectionType = 5
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "CONNECTION_TYPE_UNSPECIFIED",
		1: "CONNECTION_TYPE_DIRECTNESS",
		2: "CONNECTION_TYPE_API",
		3: "CONNECTION_TYPE_FILE",
		4: "CONNECTION_TYPE_DATABASE",
		5: "CONNECTION_TYPE_CUSTOM",
	}
	ConnectionType_value = map[string]int32{
		"CONNECTION_TYPE_UNSPECIFIED": 0,
		"CONNECTION_TYPE_DIRECTNESS":  1,
		"CONNECTION_TYPE_API":         2,
		"CONNECTION_TYPE_FILE":        3,
		"CONNECTION_TYPE_DATABASE":    4,
		"CONNECTION_TYPE_CUSTOM":      5,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_instill_connector_v1alpha_definition_proto_enumTypes[1].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_instill_connector_v1alpha_definition_proto_enumTypes[1]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_instill_connector_v1alpha_definition_proto_rawDescGZIP(), []int{1}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DockerImageSpec represents a docker image name and the connector
// specification associated with it
type DockerImageSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DockerImageSpec docker image
	DockerImage string `protobuf:"bytes,1,opt,name=docker_image,json=dockerImage,proto3" json:"docker_image,omitempty"`
	// DockerImageSpec spec data
	Spec *Spec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *DockerImageSpec) Reset() {
	*x = DockerImageSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instill_connector_v1alpha_definition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockerImageSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerImageSpec) ProtoMessage() {}

func (x *DockerImageSpec) ProtoReflect() protoreflect.Message {
	mi := &file_instill_connector_v1alpha_definition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerImageSpec.ProtoReflect.Descriptor instead.
func (*DockerImageSpec) Descriptor() ([]byte, []int) {
	return file_instill_connector_v1alpha_definition_proto_rawDescGZIP(), []int{0}
}

func (x *DockerImageSpec) GetDockerImage() string {
	if x != nil {
		return x.DockerImage
	}
	return ""
}

func (x *DockerImageSpec) GetSpec() *Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

///////////////////////////////////////////////////////////////////
// SourceDefinition represents the definition of a source connector
type SourceDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SourceDefinition UUID
	SourceDefinitionId string `protobuf:"bytes,1,opt,name=source_definition_id,json=sourceDefinitionId,proto3" json:"source_definition_id,omitempty"`
	// SourceDefinition name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// SourceDefinition Docker repository
	DockerRepository string `protobuf:"bytes,3,opt,name=docker_repository,json=dockerRepository,proto3" json:"docker_repository,omitempty"`
	// SourceDefinition Docker image tag
	DockerImageTag string `protobuf:"bytes,4,opt,name=docker_image_tag,json=dockerImageTag,proto3" json:"docker_image_tag,omitempty"`
	// SourceDefinition documentation URL
	DocumentationUrl string `protobuf:"bytes,5,opt,name=documentation_url,json=documentationUrl,proto3" json:"documentation_url,omitempty"`
	// SourceDefinition icon
	Icon string `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	// SourceDefinition connection type
	ConnectionType ConnectionType `protobuf:"varint,7,opt,name=connection_type,json=connectionType,proto3,enum=instill.connector.v1alpha.ConnectionType" json:"connection_type,omitempty"`
	// SourceDefinition spec (i.e.,
	// io.airbyte.protocol.models.ConnectorSpecification)
	Spec *Spec `protobuf:"bytes,8,opt,name=spec,proto3" json:"spec,omitempty"`
	// SourceDefinition tombstone, i.e., if not set or false, the
	// configuration is active, or otherwise, if true, this configuration is
	// permanently off
	Tombstone bool `protobuf:"varint,9,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	// SourceDefinition public flag, i.e., true if this connector definition
	// is available to all workspaces
	Public bool `protobuf:"varint,10,opt,name=public,proto3" json:"public,omitempty"`
	// SourceDefinition custom flag, i.e., whether this is a custom connector
	// definition
	Custom bool `protobuf:"varint,11,opt,name=custom,proto3" json:"custom,omitempty"`
	// SourceDefinition release stage
	ReleaseStage ReleaseStage `protobuf:"varint,12,opt,name=release_stage,json=releaseStage,proto3,enum=instill.connector.v1alpha.ReleaseStage" json:"release_stage,omitempty"`
	// SourceDefinition release date, i.e., the date when this connector was
	// first released, in yyyy-mm-dd format.
	ReleaseDate *date.Date `protobuf:"bytes,13,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	// SourceDefinition resource requirements
	ResourceRequirements *structpb.Struct `protobuf:"bytes,14,opt,name=resource_requirements,json=resourceRequirements,proto3" json:"resource_requirements,omitempty"`
	// SourceDefinition created time
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// SourceDefinition update time
	UpdateAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *SourceDefinition) Reset() {
	*x = SourceDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instill_connector_v1alpha_definition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceDefinition) ProtoMessage() {}

func (x *SourceDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_instill_connector_v1alpha_definition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceDefinition.ProtoReflect.Descriptor instead.
func (*SourceDefinition) Descriptor() ([]byte, []int) {
	return file_instill_connector_v1alpha_definition_proto_rawDescGZIP(), []int{1}
}

func (x *SourceDefinition) GetSourceDefinitionId() string {
	if x != nil {
		return x.SourceDefinitionId
	}
	return ""
}

func (x *SourceDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SourceDefinition) GetDockerRepository() string {
	if x != nil {
		return x.DockerRepository
	}
	return ""
}

func (x *SourceDefinition) GetDockerImageTag() string {
	if x != nil {
		return x.DockerImageTag
	}
	return ""
}

func (x *SourceDefinition) GetDocumentationUrl() string {
	if x != nil {
		return x.DocumentationUrl
	}
	return ""
}

func (x *SourceDefinition) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *SourceDefinition) GetConnectionType() ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return ConnectionType_CONNECTION_TYPE_UNSPECIFIED
}

func (x *SourceDefinition) GetSpec() *Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *SourceDefinition) GetTombstone() bool {
	if x != nil {
		return x.Tombstone
	}
	return false
}

func (x *SourceDefinition) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *SourceDefinition) GetCustom() bool {
	if x != nil {
		return x.Custom
	}
	return false
}

func (x *SourceDefinition) GetReleaseStage() ReleaseStage {
	if x != nil {
		return x.ReleaseStage
	}
	return ReleaseStage_RELEASE_STAGE_UNSPECIFIED
}

func (x *SourceDefinition) GetReleaseDate() *date.Date {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *SourceDefinition) GetResourceRequirements() *structpb.Struct {
	if x != nil {
		return x.ResourceRequirements
	}
	return nil
}

func (x *SourceDefinition) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SourceDefinition) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

/////////////////////////////////////////////////////////////////////////////
// DestinationDefinition represents the definition of a destination connector
type DestinationDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DestinationDefinition UUID
	DestinationDefinitionId string `protobuf:"bytes,1,opt,name=destination_definition_id,json=destinationDefinitionId,proto3" json:"destination_definition_id,omitempty"`
	// DestinationDefinition name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// DestinationDefinition Docker repository
	DockerRepository string `protobuf:"bytes,3,opt,name=docker_repository,json=dockerRepository,proto3" json:"docker_repository,omitempty"`
	// DestinationDefinition Docker image tag
	DockerImageTag string `protobuf:"bytes,4,opt,name=docker_image_tag,json=dockerImageTag,proto3" json:"docker_image_tag,omitempty"`
	// DestinationDefinition documentation URL
	DocumentationUrl string `protobuf:"bytes,5,opt,name=documentation_url,json=documentationUrl,proto3" json:"documentation_url,omitempty"`
	// DestinationDefinition icon
	Icon string `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	// DestinationDefinition connection type
	ConnectionType ConnectionType `protobuf:"varint,7,opt,name=connection_type,json=connectionType,proto3,enum=instill.connector.v1alpha.ConnectionType" json:"connection_type,omitempty"`
	// DestinationDefinition spec (i.e.,
	// io.airbyte.protocol.models.ConnectorSpecification)
	Spec *Spec `protobuf:"bytes,8,opt,name=spec,proto3" json:"spec,omitempty"`
	// DestinationDefinition tombstone, i.e., if not set or false, the
	// configuration is active, or otherwise, if true, this configuration is
	// permanently off
	Tombstone bool `protobuf:"varint,9,opt,name=tombstone,proto3" json:"tombstone,omitempty"`
	// DestinationDefinition public flag, i.e., true if this connector definition
	// is available to all workspaces
	Public bool `protobuf:"varint,10,opt,name=public,proto3" json:"public,omitempty"`
	// DestinationDefinition custom flag, i.e., whether this is a custom connector
	// definition
	Custom bool `protobuf:"varint,11,opt,name=custom,proto3" json:"custom,omitempty"`
	// DestinationDefinition release stage
	ReleaseStage ReleaseStage `protobuf:"varint,12,opt,name=release_stage,json=releaseStage,proto3,enum=instill.connector.v1alpha.ReleaseStage" json:"release_stage,omitempty"`
	// DestinationDefinition release date, i.e., the date when this connector was
	// first released, in yyyy-mm-dd format.
	ReleaseDate *date.Date `protobuf:"bytes,13,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	// DestinationDefinition resource requirements
	ResourceRequirements *structpb.Struct `protobuf:"bytes,14,opt,name=resource_requirements,json=resourceRequirements,proto3" json:"resource_requirements,omitempty"`
	// DestinationDefinition created time
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// DestinationDefinition update time
	UpdateAt *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *DestinationDefinition) Reset() {
	*x = DestinationDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_instill_connector_v1alpha_definition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestinationDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestinationDefinition) ProtoMessage() {}

func (x *DestinationDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_instill_connector_v1alpha_definition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestinationDefinition.ProtoReflect.Descriptor instead.
func (*DestinationDefinition) Descriptor() ([]byte, []int) {
	return file_instill_connector_v1alpha_definition_proto_rawDescGZIP(), []int{2}
}

func (x *DestinationDefinition) GetDestinationDefinitionId() string {
	if x != nil {
		return x.DestinationDefinitionId
	}
	return ""
}

func (x *DestinationDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DestinationDefinition) GetDockerRepository() string {
	if x != nil {
		return x.DockerRepository
	}
	return ""
}

func (x *DestinationDefinition) GetDockerImageTag() string {
	if x != nil {
		return x.DockerImageTag
	}
	return ""
}

func (x *DestinationDefinition) GetDocumentationUrl() string {
	if x != nil {
		return x.DocumentationUrl
	}
	return ""
}

func (x *DestinationDefinition) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *DestinationDefinition) GetConnectionType() ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return ConnectionType_CONNECTION_TYPE_UNSPECIFIED
}

func (x *DestinationDefinition) GetSpec() *Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *DestinationDefinition) GetTombstone() bool {
	if x != nil {
		return x.Tombstone
	}
	return false
}

func (x *DestinationDefinition) GetPublic() bool {
	if x != nil {
		return x.Public
	}
	return false
}

func (x *DestinationDefinition) GetCustom() bool {
	if x != nil {
		return x.Custom
	}
	return false
}

func (x *DestinationDefinition) GetReleaseStage() ReleaseStage {
	if x != nil {
		return x.ReleaseStage
	}
	return ReleaseStage_RELEASE_STAGE_UNSPECIFIED
}

func (x *DestinationDefinition) GetReleaseDate() *date.Date {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *DestinationDefinition) GetResourceRequirements() *structpb.Struct {
	if x != nil {
		return x.ResourceRequirements
	}
	return nil
}

func (x *DestinationDefinition) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DestinationDefinition) GetUpdateAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateAt
	}
	return nil
}

var File_instill_connector_v1alpha_definition_proto protoreflect.FileDescriptor

var file_instill_connector_v1alpha_definition_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x0f, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xdd, 0x06, 0x0a, 0x10, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x10, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67,
	0x12, 0x30, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x21,
	0x0a, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1b,
	0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x51, 0x0a, 0x0d, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x39,
	0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0xec, 0x06, 0x0a, 0x15, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x17, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x11, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x10,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x2d, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x12,
	0x30, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72,
	0x6c, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a,
	0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65,
	0x12, 0x1b, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1b, 0x0a,
	0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x51, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x2a, 0x9f, 0x01, 0x0a, 0x0c, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x4c,
	0x45, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x47, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x41, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x04, 0x2a, 0xbe, 0x01, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x50, 0x49, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x05, 0x42, 0x84, 0x02, 0x0a,
	0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x0f,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2d, 0x61, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x65,
	0x6e, 0x2d, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2,
	0x02, 0x03, 0x49, 0x43, 0x58, 0xaa, 0x02, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0xca, 0x02, 0x19, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xe2, 0x02, 0x25,
	0x49, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x5c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x6c, 0x6c, 0x3a,
	0x3a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_instill_connector_v1alpha_definition_proto_rawDescOnce sync.Once
	file_instill_connector_v1alpha_definition_proto_rawDescData = file_instill_connector_v1alpha_definition_proto_rawDesc
)

func file_instill_connector_v1alpha_definition_proto_rawDescGZIP() []byte {
	file_instill_connector_v1alpha_definition_proto_rawDescOnce.Do(func() {
		file_instill_connector_v1alpha_definition_proto_rawDescData = protoimpl.X.CompressGZIP(file_instill_connector_v1alpha_definition_proto_rawDescData)
	})
	return file_instill_connector_v1alpha_definition_proto_rawDescData
}

var file_instill_connector_v1alpha_definition_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_instill_connector_v1alpha_definition_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_instill_connector_v1alpha_definition_proto_goTypes = []interface{}{
	(ReleaseStage)(0),             // 0: instill.connector.v1alpha.ReleaseStage
	(ConnectionType)(0),           // 1: instill.connector.v1alpha.ConnectionType
	(*DockerImageSpec)(nil),       // 2: instill.connector.v1alpha.DockerImageSpec
	(*SourceDefinition)(nil),      // 3: instill.connector.v1alpha.SourceDefinition
	(*DestinationDefinition)(nil), // 4: instill.connector.v1alpha.DestinationDefinition
	(*Spec)(nil),                  // 5: instill.connector.v1alpha.Spec
	(*date.Date)(nil),             // 6: google.type.Date
	(*structpb.Struct)(nil),       // 7: google.protobuf.Struct
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_instill_connector_v1alpha_definition_proto_depIdxs = []int32{
	5,  // 0: instill.connector.v1alpha.DockerImageSpec.spec:type_name -> instill.connector.v1alpha.Spec
	1,  // 1: instill.connector.v1alpha.SourceDefinition.connection_type:type_name -> instill.connector.v1alpha.ConnectionType
	5,  // 2: instill.connector.v1alpha.SourceDefinition.spec:type_name -> instill.connector.v1alpha.Spec
	0,  // 3: instill.connector.v1alpha.SourceDefinition.release_stage:type_name -> instill.connector.v1alpha.ReleaseStage
	6,  // 4: instill.connector.v1alpha.SourceDefinition.release_date:type_name -> google.type.Date
	7,  // 5: instill.connector.v1alpha.SourceDefinition.resource_requirements:type_name -> google.protobuf.Struct
	8,  // 6: instill.connector.v1alpha.SourceDefinition.created_at:type_name -> google.protobuf.Timestamp
	8,  // 7: instill.connector.v1alpha.SourceDefinition.update_at:type_name -> google.protobuf.Timestamp
	1,  // 8: instill.connector.v1alpha.DestinationDefinition.connection_type:type_name -> instill.connector.v1alpha.ConnectionType
	5,  // 9: instill.connector.v1alpha.DestinationDefinition.spec:type_name -> instill.connector.v1alpha.Spec
	0,  // 10: instill.connector.v1alpha.DestinationDefinition.release_stage:type_name -> instill.connector.v1alpha.ReleaseStage
	6,  // 11: instill.connector.v1alpha.DestinationDefinition.release_date:type_name -> google.type.Date
	7,  // 12: instill.connector.v1alpha.DestinationDefinition.resource_requirements:type_name -> google.protobuf.Struct
	8,  // 13: instill.connector.v1alpha.DestinationDefinition.created_at:type_name -> google.protobuf.Timestamp
	8,  // 14: instill.connector.v1alpha.DestinationDefinition.update_at:type_name -> google.protobuf.Timestamp
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_instill_connector_v1alpha_definition_proto_init() }
func file_instill_connector_v1alpha_definition_proto_init() {
	if File_instill_connector_v1alpha_definition_proto != nil {
		return
	}
	file_instill_connector_v1alpha_spec_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_instill_connector_v1alpha_definition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockerImageSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instill_connector_v1alpha_definition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_instill_connector_v1alpha_definition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestinationDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_instill_connector_v1alpha_definition_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_instill_connector_v1alpha_definition_proto_goTypes,
		DependencyIndexes: file_instill_connector_v1alpha_definition_proto_depIdxs,
		EnumInfos:         file_instill_connector_v1alpha_definition_proto_enumTypes,
		MessageInfos:      file_instill_connector_v1alpha_definition_proto_msgTypes,
	}.Build()
	File_instill_connector_v1alpha_definition_proto = out.File
	file_instill_connector_v1alpha_definition_proto_rawDesc = nil
	file_instill_connector_v1alpha_definition_proto_goTypes = nil
	file_instill_connector_v1alpha_definition_proto_depIdxs = nil
}
