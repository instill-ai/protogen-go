//
//This is the POC for metric-backend service that supports
//1. receiving usage reports from pipeline-backend and model-backend clients
//2. uploading usage to InfluxDB
//3. uploading usage to Stripe
//4. responding usage/price enquiries from clients

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: base/metric/v1alpha/metric_service.proto

package metricv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PipelineService_GetPipelines_FullMethodName                            = "/base.metric.v1alpha.PipelineService/GetPipelines"
	PipelineService_ReportPipelineTrigger_FullMethodName                   = "/base.metric.v1alpha.PipelineService/ReportPipelineTrigger"
	PipelineService_ReportPipelineTriggers_FullMethodName                  = "/base.metric.v1alpha.PipelineService/ReportPipelineTriggers"
	PipelineService_GetPipelineTriggerRecords_FullMethodName               = "/base.metric.v1alpha.PipelineService/GetPipelineTriggerRecords"
	PipelineService_GetBulkPipelineTriggerRecords_FullMethodName           = "/base.metric.v1alpha.PipelineService/GetBulkPipelineTriggerRecords"
	PipelineService_GetCumulativePipelineTriggerRecords_FullMethodName     = "/base.metric.v1alpha.PipelineService/GetCumulativePipelineTriggerRecords"
	PipelineService_GetBulkCumulativePipelineTriggerRecords_FullMethodName = "/base.metric.v1alpha.PipelineService/GetBulkCumulativePipelineTriggerRecords"
	PipelineService_GetPipelineTriggerSummary_FullMethodName               = "/base.metric.v1alpha.PipelineService/GetPipelineTriggerSummary"
	PipelineService_GetBulkPipelineTriggerSummaries_FullMethodName         = "/base.metric.v1alpha.PipelineService/GetBulkPipelineTriggerSummaries"
	PipelineService_GetPipelineTriggerPrice_FullMethodName                 = "/base.metric.v1alpha.PipelineService/GetPipelineTriggerPrice"
	PipelineService_GetBulkPipelineTriggerPrice_FullMethodName             = "/base.metric.v1alpha.PipelineService/GetBulkPipelineTriggerPrice"
)

// PipelineServiceClient is the client API for PipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipelineServiceClient interface {
	// Get pipeline info
	GetPipelines(ctx context.Context, in *GetPipelinesRequest, opts ...grpc.CallOption) (*GetPipelinesResponse, error)
	// For pipeline-backend clients to report a pipeline trigger record
	ReportPipelineTrigger(ctx context.Context, in *ReportPipelineTriggerRequest, opts ...grpc.CallOption) (*ReportPipelineTriggerResponse, error)
	// For pipeline-backend clients to report pipeline trigger records
	ReportPipelineTriggers(ctx context.Context, in *ReportPipelineTriggersRequest, opts ...grpc.CallOption) (*ReportPipelineTriggersResponse, error)
	// Get pipeline trigger records
	GetPipelineTriggerRecords(ctx context.Context, in *GetPipelineTriggerRecordsRequest, opts ...grpc.CallOption) (*GetPipelineTriggerRecordsResponse, error)
	// Get pipeline trigger records in bulk
	GetBulkPipelineTriggerRecords(ctx context.Context, in *GetBulkPipelineTriggerRecordsRequest, opts ...grpc.CallOption) (*GetBulkPipelineTriggerRecordsResponse, error)
	// Get cumulative pipeline trigger records
	GetCumulativePipelineTriggerRecords(ctx context.Context, in *GetCumulativePipelineTriggerRecordsRequest, opts ...grpc.CallOption) (*GetCumulativePipelineTriggerRecordsResponse, error)
	// Get cumulative pipeline trigger records in bulk
	GetBulkCumulativePipelineTriggerRecords(ctx context.Context, in *GetBulkCumulativePipelineTriggerRecordsRequest, opts ...grpc.CallOption) (*GetBulkCumulativePipelineTriggerRecordsResponse, error)
	// Get pipeline trigger summary
	GetPipelineTriggerSummary(ctx context.Context, in *GetPipelineTriggerSummaryRequest, opts ...grpc.CallOption) (*GetPipelineTriggerSummaryResponse, error)
	// Get pipeline trigger summary in bulk
	GetBulkPipelineTriggerSummaries(ctx context.Context, in *GetBulkPipelineTriggerSummariesRequest, opts ...grpc.CallOption) (*GetBulkPipelineTriggerSummariesResponse, error)
	// Get pipeline trigger price
	GetPipelineTriggerPrice(ctx context.Context, in *GetPipelineTriggerPriceRequest, opts ...grpc.CallOption) (*GetPipelineTriggerPriceResponse, error)
	// Get pipeline trigger price in bulk
	GetBulkPipelineTriggerPrice(ctx context.Context, in *GetBulkPipelineTriggerPriceRequest, opts ...grpc.CallOption) (*GetBulkPipelineTriggerPriceResponse, error)
}

type pipelineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelineServiceClient(cc grpc.ClientConnInterface) PipelineServiceClient {
	return &pipelineServiceClient{cc}
}

func (c *pipelineServiceClient) GetPipelines(ctx context.Context, in *GetPipelinesRequest, opts ...grpc.CallOption) (*GetPipelinesResponse, error) {
	out := new(GetPipelinesResponse)
	err := c.cc.Invoke(ctx, PipelineService_GetPipelines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) ReportPipelineTrigger(ctx context.Context, in *ReportPipelineTriggerRequest, opts ...grpc.CallOption) (*ReportPipelineTriggerResponse, error) {
	out := new(ReportPipelineTriggerResponse)
	err := c.cc.Invoke(ctx, PipelineService_ReportPipelineTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) ReportPipelineTriggers(ctx context.Context, in *ReportPipelineTriggersRequest, opts ...grpc.CallOption) (*ReportPipelineTriggersResponse, error) {
	out := new(ReportPipelineTriggersResponse)
	err := c.cc.Invoke(ctx, PipelineService_ReportPipelineTriggers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetPipelineTriggerRecords(ctx context.Context, in *GetPipelineTriggerRecordsRequest, opts ...grpc.CallOption) (*GetPipelineTriggerRecordsResponse, error) {
	out := new(GetPipelineTriggerRecordsResponse)
	err := c.cc.Invoke(ctx, PipelineService_GetPipelineTriggerRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetBulkPipelineTriggerRecords(ctx context.Context, in *GetBulkPipelineTriggerRecordsRequest, opts ...grpc.CallOption) (*GetBulkPipelineTriggerRecordsResponse, error) {
	out := new(GetBulkPipelineTriggerRecordsResponse)
	err := c.cc.Invoke(ctx, PipelineService_GetBulkPipelineTriggerRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetCumulativePipelineTriggerRecords(ctx context.Context, in *GetCumulativePipelineTriggerRecordsRequest, opts ...grpc.CallOption) (*GetCumulativePipelineTriggerRecordsResponse, error) {
	out := new(GetCumulativePipelineTriggerRecordsResponse)
	err := c.cc.Invoke(ctx, PipelineService_GetCumulativePipelineTriggerRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetBulkCumulativePipelineTriggerRecords(ctx context.Context, in *GetBulkCumulativePipelineTriggerRecordsRequest, opts ...grpc.CallOption) (*GetBulkCumulativePipelineTriggerRecordsResponse, error) {
	out := new(GetBulkCumulativePipelineTriggerRecordsResponse)
	err := c.cc.Invoke(ctx, PipelineService_GetBulkCumulativePipelineTriggerRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetPipelineTriggerSummary(ctx context.Context, in *GetPipelineTriggerSummaryRequest, opts ...grpc.CallOption) (*GetPipelineTriggerSummaryResponse, error) {
	out := new(GetPipelineTriggerSummaryResponse)
	err := c.cc.Invoke(ctx, PipelineService_GetPipelineTriggerSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetBulkPipelineTriggerSummaries(ctx context.Context, in *GetBulkPipelineTriggerSummariesRequest, opts ...grpc.CallOption) (*GetBulkPipelineTriggerSummariesResponse, error) {
	out := new(GetBulkPipelineTriggerSummariesResponse)
	err := c.cc.Invoke(ctx, PipelineService_GetBulkPipelineTriggerSummaries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetPipelineTriggerPrice(ctx context.Context, in *GetPipelineTriggerPriceRequest, opts ...grpc.CallOption) (*GetPipelineTriggerPriceResponse, error) {
	out := new(GetPipelineTriggerPriceResponse)
	err := c.cc.Invoke(ctx, PipelineService_GetPipelineTriggerPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) GetBulkPipelineTriggerPrice(ctx context.Context, in *GetBulkPipelineTriggerPriceRequest, opts ...grpc.CallOption) (*GetBulkPipelineTriggerPriceResponse, error) {
	out := new(GetBulkPipelineTriggerPriceResponse)
	err := c.cc.Invoke(ctx, PipelineService_GetBulkPipelineTriggerPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineServiceServer is the server API for PipelineService service.
// All implementations should embed UnimplementedPipelineServiceServer
// for forward compatibility
type PipelineServiceServer interface {
	// Get pipeline info
	GetPipelines(context.Context, *GetPipelinesRequest) (*GetPipelinesResponse, error)
	// For pipeline-backend clients to report a pipeline trigger record
	ReportPipelineTrigger(context.Context, *ReportPipelineTriggerRequest) (*ReportPipelineTriggerResponse, error)
	// For pipeline-backend clients to report pipeline trigger records
	ReportPipelineTriggers(context.Context, *ReportPipelineTriggersRequest) (*ReportPipelineTriggersResponse, error)
	// Get pipeline trigger records
	GetPipelineTriggerRecords(context.Context, *GetPipelineTriggerRecordsRequest) (*GetPipelineTriggerRecordsResponse, error)
	// Get pipeline trigger records in bulk
	GetBulkPipelineTriggerRecords(context.Context, *GetBulkPipelineTriggerRecordsRequest) (*GetBulkPipelineTriggerRecordsResponse, error)
	// Get cumulative pipeline trigger records
	GetCumulativePipelineTriggerRecords(context.Context, *GetCumulativePipelineTriggerRecordsRequest) (*GetCumulativePipelineTriggerRecordsResponse, error)
	// Get cumulative pipeline trigger records in bulk
	GetBulkCumulativePipelineTriggerRecords(context.Context, *GetBulkCumulativePipelineTriggerRecordsRequest) (*GetBulkCumulativePipelineTriggerRecordsResponse, error)
	// Get pipeline trigger summary
	GetPipelineTriggerSummary(context.Context, *GetPipelineTriggerSummaryRequest) (*GetPipelineTriggerSummaryResponse, error)
	// Get pipeline trigger summary in bulk
	GetBulkPipelineTriggerSummaries(context.Context, *GetBulkPipelineTriggerSummariesRequest) (*GetBulkPipelineTriggerSummariesResponse, error)
	// Get pipeline trigger price
	GetPipelineTriggerPrice(context.Context, *GetPipelineTriggerPriceRequest) (*GetPipelineTriggerPriceResponse, error)
	// Get pipeline trigger price in bulk
	GetBulkPipelineTriggerPrice(context.Context, *GetBulkPipelineTriggerPriceRequest) (*GetBulkPipelineTriggerPriceResponse, error)
}

// UnimplementedPipelineServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPipelineServiceServer struct {
}

func (UnimplementedPipelineServiceServer) GetPipelines(context.Context, *GetPipelinesRequest) (*GetPipelinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelines not implemented")
}
func (UnimplementedPipelineServiceServer) ReportPipelineTrigger(context.Context, *ReportPipelineTriggerRequest) (*ReportPipelineTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportPipelineTrigger not implemented")
}
func (UnimplementedPipelineServiceServer) ReportPipelineTriggers(context.Context, *ReportPipelineTriggersRequest) (*ReportPipelineTriggersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportPipelineTriggers not implemented")
}
func (UnimplementedPipelineServiceServer) GetPipelineTriggerRecords(context.Context, *GetPipelineTriggerRecordsRequest) (*GetPipelineTriggerRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineTriggerRecords not implemented")
}
func (UnimplementedPipelineServiceServer) GetBulkPipelineTriggerRecords(context.Context, *GetBulkPipelineTriggerRecordsRequest) (*GetBulkPipelineTriggerRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkPipelineTriggerRecords not implemented")
}
func (UnimplementedPipelineServiceServer) GetCumulativePipelineTriggerRecords(context.Context, *GetCumulativePipelineTriggerRecordsRequest) (*GetCumulativePipelineTriggerRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCumulativePipelineTriggerRecords not implemented")
}
func (UnimplementedPipelineServiceServer) GetBulkCumulativePipelineTriggerRecords(context.Context, *GetBulkCumulativePipelineTriggerRecordsRequest) (*GetBulkCumulativePipelineTriggerRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkCumulativePipelineTriggerRecords not implemented")
}
func (UnimplementedPipelineServiceServer) GetPipelineTriggerSummary(context.Context, *GetPipelineTriggerSummaryRequest) (*GetPipelineTriggerSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineTriggerSummary not implemented")
}
func (UnimplementedPipelineServiceServer) GetBulkPipelineTriggerSummaries(context.Context, *GetBulkPipelineTriggerSummariesRequest) (*GetBulkPipelineTriggerSummariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkPipelineTriggerSummaries not implemented")
}
func (UnimplementedPipelineServiceServer) GetPipelineTriggerPrice(context.Context, *GetPipelineTriggerPriceRequest) (*GetPipelineTriggerPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPipelineTriggerPrice not implemented")
}
func (UnimplementedPipelineServiceServer) GetBulkPipelineTriggerPrice(context.Context, *GetBulkPipelineTriggerPriceRequest) (*GetBulkPipelineTriggerPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkPipelineTriggerPrice not implemented")
}

// UnsafePipelineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipelineServiceServer will
// result in compilation errors.
type UnsafePipelineServiceServer interface {
	mustEmbedUnimplementedPipelineServiceServer()
}

func RegisterPipelineServiceServer(s grpc.ServiceRegistrar, srv PipelineServiceServer) {
	s.RegisterService(&PipelineService_ServiceDesc, srv)
}

func _PipelineService_GetPipelines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetPipelines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_GetPipelines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetPipelines(ctx, req.(*GetPipelinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_ReportPipelineTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportPipelineTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).ReportPipelineTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_ReportPipelineTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).ReportPipelineTrigger(ctx, req.(*ReportPipelineTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_ReportPipelineTriggers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportPipelineTriggersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).ReportPipelineTriggers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_ReportPipelineTriggers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).ReportPipelineTriggers(ctx, req.(*ReportPipelineTriggersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetPipelineTriggerRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineTriggerRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetPipelineTriggerRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_GetPipelineTriggerRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetPipelineTriggerRecords(ctx, req.(*GetPipelineTriggerRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetBulkPipelineTriggerRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkPipelineTriggerRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetBulkPipelineTriggerRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_GetBulkPipelineTriggerRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetBulkPipelineTriggerRecords(ctx, req.(*GetBulkPipelineTriggerRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetCumulativePipelineTriggerRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCumulativePipelineTriggerRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetCumulativePipelineTriggerRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_GetCumulativePipelineTriggerRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetCumulativePipelineTriggerRecords(ctx, req.(*GetCumulativePipelineTriggerRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetBulkCumulativePipelineTriggerRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkCumulativePipelineTriggerRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetBulkCumulativePipelineTriggerRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_GetBulkCumulativePipelineTriggerRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetBulkCumulativePipelineTriggerRecords(ctx, req.(*GetBulkCumulativePipelineTriggerRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetPipelineTriggerSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineTriggerSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetPipelineTriggerSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_GetPipelineTriggerSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetPipelineTriggerSummary(ctx, req.(*GetPipelineTriggerSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetBulkPipelineTriggerSummaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkPipelineTriggerSummariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetBulkPipelineTriggerSummaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_GetBulkPipelineTriggerSummaries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetBulkPipelineTriggerSummaries(ctx, req.(*GetBulkPipelineTriggerSummariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetPipelineTriggerPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipelineTriggerPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetPipelineTriggerPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_GetPipelineTriggerPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetPipelineTriggerPrice(ctx, req.(*GetPipelineTriggerPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_GetBulkPipelineTriggerPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkPipelineTriggerPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).GetBulkPipelineTriggerPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_GetBulkPipelineTriggerPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).GetBulkPipelineTriggerPrice(ctx, req.(*GetBulkPipelineTriggerPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PipelineService_ServiceDesc is the grpc.ServiceDesc for PipelineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PipelineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.metric.v1alpha.PipelineService",
	HandlerType: (*PipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPipelines",
			Handler:    _PipelineService_GetPipelines_Handler,
		},
		{
			MethodName: "ReportPipelineTrigger",
			Handler:    _PipelineService_ReportPipelineTrigger_Handler,
		},
		{
			MethodName: "ReportPipelineTriggers",
			Handler:    _PipelineService_ReportPipelineTriggers_Handler,
		},
		{
			MethodName: "GetPipelineTriggerRecords",
			Handler:    _PipelineService_GetPipelineTriggerRecords_Handler,
		},
		{
			MethodName: "GetBulkPipelineTriggerRecords",
			Handler:    _PipelineService_GetBulkPipelineTriggerRecords_Handler,
		},
		{
			MethodName: "GetCumulativePipelineTriggerRecords",
			Handler:    _PipelineService_GetCumulativePipelineTriggerRecords_Handler,
		},
		{
			MethodName: "GetBulkCumulativePipelineTriggerRecords",
			Handler:    _PipelineService_GetBulkCumulativePipelineTriggerRecords_Handler,
		},
		{
			MethodName: "GetPipelineTriggerSummary",
			Handler:    _PipelineService_GetPipelineTriggerSummary_Handler,
		},
		{
			MethodName: "GetBulkPipelineTriggerSummaries",
			Handler:    _PipelineService_GetBulkPipelineTriggerSummaries_Handler,
		},
		{
			MethodName: "GetPipelineTriggerPrice",
			Handler:    _PipelineService_GetPipelineTriggerPrice_Handler,
		},
		{
			MethodName: "GetBulkPipelineTriggerPrice",
			Handler:    _PipelineService_GetBulkPipelineTriggerPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/metric/v1alpha/metric_service.proto",
}

const (
	ModelService_GetModels_FullMethodName                           = "/base.metric.v1alpha.ModelService/GetModels"
	ModelService_ReportModelOnline_FullMethodName                   = "/base.metric.v1alpha.ModelService/ReportModelOnline"
	ModelService_ReportModelOnlines_FullMethodName                  = "/base.metric.v1alpha.ModelService/ReportModelOnlines"
	ModelService_GetModelOnlineRecords_FullMethodName               = "/base.metric.v1alpha.ModelService/GetModelOnlineRecords"
	ModelService_GetBulkModelOnlineRecords_FullMethodName           = "/base.metric.v1alpha.ModelService/GetBulkModelOnlineRecords"
	ModelService_GetCumulativeModelOnlineRecords_FullMethodName     = "/base.metric.v1alpha.ModelService/GetCumulativeModelOnlineRecords"
	ModelService_GetBulkCumulativeModelOnlineRecords_FullMethodName = "/base.metric.v1alpha.ModelService/GetBulkCumulativeModelOnlineRecords"
	ModelService_GetModelOnlineSummary_FullMethodName               = "/base.metric.v1alpha.ModelService/GetModelOnlineSummary"
	ModelService_GetBulkModelOnlineSummary_FullMethodName           = "/base.metric.v1alpha.ModelService/GetBulkModelOnlineSummary"
	ModelService_GetModelOnlinePrice_FullMethodName                 = "/base.metric.v1alpha.ModelService/GetModelOnlinePrice"
	ModelService_GetBulkModelOnlinePrice_FullMethodName             = "/base.metric.v1alpha.ModelService/GetBulkModelOnlinePrice"
)

// ModelServiceClient is the client API for ModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelServiceClient interface {
	// Get Model info
	GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error)
	// For model-backend clients to report a model online record
	ReportModelOnline(ctx context.Context, in *ReportModelOnlineRequest, opts ...grpc.CallOption) (*ReportModelOnlineResponse, error)
	// For model-backend clients to report moel online records
	ReportModelOnlines(ctx context.Context, in *ReportModelOnlinesRequest, opts ...grpc.CallOption) (*ReportModelOnlinesResponse, error)
	// Get model online records
	GetModelOnlineRecords(ctx context.Context, in *GetModelOnlineRecordsRequest, opts ...grpc.CallOption) (*GetModelOnlineRecordsResponse, error)
	// Get model online records in bulk
	GetBulkModelOnlineRecords(ctx context.Context, in *GetBulkModelOnlineRecordsRequest, opts ...grpc.CallOption) (*GetBulkModelOnlineRecordsResponse, error)
	// Get cumulative model online records
	GetCumulativeModelOnlineRecords(ctx context.Context, in *GetCumulativeModelOnlineRecordsRequest, opts ...grpc.CallOption) (*GetCumulativeModelOnlineRecordsResponse, error)
	// Get cumulative model online records in bulk
	GetBulkCumulativeModelOnlineRecords(ctx context.Context, in *GetBulkCumulativeModelOnlineRecordsRequest, opts ...grpc.CallOption) (*GetBulkCumulativeModelOnlineRecordsResponse, error)
	// Get model online summary
	GetModelOnlineSummary(ctx context.Context, in *GetModelOnlineSummaryRequest, opts ...grpc.CallOption) (*GetModelOnlineSummaryResponse, error)
	// Get model online summary in bulk
	GetBulkModelOnlineSummary(ctx context.Context, in *GetBulkModelOnlineSummaryRequest, opts ...grpc.CallOption) (*GetBulkModelOnlineSummaryResponse, error)
	// Get model online price
	GetModelOnlinePrice(ctx context.Context, in *GetModelOnlinePriceRequest, opts ...grpc.CallOption) (*GetModelOnlinePriceResponse, error)
	// Get model online price in bulk
	GetBulkModelOnlinePrice(ctx context.Context, in *GetBulkModelOnlinePriceRequest, opts ...grpc.CallOption) (*GetBulkModelOnlinePriceResponse, error)
}

type modelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelServiceClient(cc grpc.ClientConnInterface) ModelServiceClient {
	return &modelServiceClient{cc}
}

func (c *modelServiceClient) GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error) {
	out := new(GetModelsResponse)
	err := c.cc.Invoke(ctx, ModelService_GetModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) ReportModelOnline(ctx context.Context, in *ReportModelOnlineRequest, opts ...grpc.CallOption) (*ReportModelOnlineResponse, error) {
	out := new(ReportModelOnlineResponse)
	err := c.cc.Invoke(ctx, ModelService_ReportModelOnline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) ReportModelOnlines(ctx context.Context, in *ReportModelOnlinesRequest, opts ...grpc.CallOption) (*ReportModelOnlinesResponse, error) {
	out := new(ReportModelOnlinesResponse)
	err := c.cc.Invoke(ctx, ModelService_ReportModelOnlines_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModelOnlineRecords(ctx context.Context, in *GetModelOnlineRecordsRequest, opts ...grpc.CallOption) (*GetModelOnlineRecordsResponse, error) {
	out := new(GetModelOnlineRecordsResponse)
	err := c.cc.Invoke(ctx, ModelService_GetModelOnlineRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetBulkModelOnlineRecords(ctx context.Context, in *GetBulkModelOnlineRecordsRequest, opts ...grpc.CallOption) (*GetBulkModelOnlineRecordsResponse, error) {
	out := new(GetBulkModelOnlineRecordsResponse)
	err := c.cc.Invoke(ctx, ModelService_GetBulkModelOnlineRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetCumulativeModelOnlineRecords(ctx context.Context, in *GetCumulativeModelOnlineRecordsRequest, opts ...grpc.CallOption) (*GetCumulativeModelOnlineRecordsResponse, error) {
	out := new(GetCumulativeModelOnlineRecordsResponse)
	err := c.cc.Invoke(ctx, ModelService_GetCumulativeModelOnlineRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetBulkCumulativeModelOnlineRecords(ctx context.Context, in *GetBulkCumulativeModelOnlineRecordsRequest, opts ...grpc.CallOption) (*GetBulkCumulativeModelOnlineRecordsResponse, error) {
	out := new(GetBulkCumulativeModelOnlineRecordsResponse)
	err := c.cc.Invoke(ctx, ModelService_GetBulkCumulativeModelOnlineRecords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModelOnlineSummary(ctx context.Context, in *GetModelOnlineSummaryRequest, opts ...grpc.CallOption) (*GetModelOnlineSummaryResponse, error) {
	out := new(GetModelOnlineSummaryResponse)
	err := c.cc.Invoke(ctx, ModelService_GetModelOnlineSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetBulkModelOnlineSummary(ctx context.Context, in *GetBulkModelOnlineSummaryRequest, opts ...grpc.CallOption) (*GetBulkModelOnlineSummaryResponse, error) {
	out := new(GetBulkModelOnlineSummaryResponse)
	err := c.cc.Invoke(ctx, ModelService_GetBulkModelOnlineSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetModelOnlinePrice(ctx context.Context, in *GetModelOnlinePriceRequest, opts ...grpc.CallOption) (*GetModelOnlinePriceResponse, error) {
	out := new(GetModelOnlinePriceResponse)
	err := c.cc.Invoke(ctx, ModelService_GetModelOnlinePrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) GetBulkModelOnlinePrice(ctx context.Context, in *GetBulkModelOnlinePriceRequest, opts ...grpc.CallOption) (*GetBulkModelOnlinePriceResponse, error) {
	out := new(GetBulkModelOnlinePriceResponse)
	err := c.cc.Invoke(ctx, ModelService_GetBulkModelOnlinePrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelServiceServer is the server API for ModelService service.
// All implementations should embed UnimplementedModelServiceServer
// for forward compatibility
type ModelServiceServer interface {
	// Get Model info
	GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error)
	// For model-backend clients to report a model online record
	ReportModelOnline(context.Context, *ReportModelOnlineRequest) (*ReportModelOnlineResponse, error)
	// For model-backend clients to report moel online records
	ReportModelOnlines(context.Context, *ReportModelOnlinesRequest) (*ReportModelOnlinesResponse, error)
	// Get model online records
	GetModelOnlineRecords(context.Context, *GetModelOnlineRecordsRequest) (*GetModelOnlineRecordsResponse, error)
	// Get model online records in bulk
	GetBulkModelOnlineRecords(context.Context, *GetBulkModelOnlineRecordsRequest) (*GetBulkModelOnlineRecordsResponse, error)
	// Get cumulative model online records
	GetCumulativeModelOnlineRecords(context.Context, *GetCumulativeModelOnlineRecordsRequest) (*GetCumulativeModelOnlineRecordsResponse, error)
	// Get cumulative model online records in bulk
	GetBulkCumulativeModelOnlineRecords(context.Context, *GetBulkCumulativeModelOnlineRecordsRequest) (*GetBulkCumulativeModelOnlineRecordsResponse, error)
	// Get model online summary
	GetModelOnlineSummary(context.Context, *GetModelOnlineSummaryRequest) (*GetModelOnlineSummaryResponse, error)
	// Get model online summary in bulk
	GetBulkModelOnlineSummary(context.Context, *GetBulkModelOnlineSummaryRequest) (*GetBulkModelOnlineSummaryResponse, error)
	// Get model online price
	GetModelOnlinePrice(context.Context, *GetModelOnlinePriceRequest) (*GetModelOnlinePriceResponse, error)
	// Get model online price in bulk
	GetBulkModelOnlinePrice(context.Context, *GetBulkModelOnlinePriceRequest) (*GetBulkModelOnlinePriceResponse, error)
}

// UnimplementedModelServiceServer should be embedded to have forward compatible implementations.
type UnimplementedModelServiceServer struct {
}

func (UnimplementedModelServiceServer) GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModels not implemented")
}
func (UnimplementedModelServiceServer) ReportModelOnline(context.Context, *ReportModelOnlineRequest) (*ReportModelOnlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportModelOnline not implemented")
}
func (UnimplementedModelServiceServer) ReportModelOnlines(context.Context, *ReportModelOnlinesRequest) (*ReportModelOnlinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportModelOnlines not implemented")
}
func (UnimplementedModelServiceServer) GetModelOnlineRecords(context.Context, *GetModelOnlineRecordsRequest) (*GetModelOnlineRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelOnlineRecords not implemented")
}
func (UnimplementedModelServiceServer) GetBulkModelOnlineRecords(context.Context, *GetBulkModelOnlineRecordsRequest) (*GetBulkModelOnlineRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkModelOnlineRecords not implemented")
}
func (UnimplementedModelServiceServer) GetCumulativeModelOnlineRecords(context.Context, *GetCumulativeModelOnlineRecordsRequest) (*GetCumulativeModelOnlineRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCumulativeModelOnlineRecords not implemented")
}
func (UnimplementedModelServiceServer) GetBulkCumulativeModelOnlineRecords(context.Context, *GetBulkCumulativeModelOnlineRecordsRequest) (*GetBulkCumulativeModelOnlineRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkCumulativeModelOnlineRecords not implemented")
}
func (UnimplementedModelServiceServer) GetModelOnlineSummary(context.Context, *GetModelOnlineSummaryRequest) (*GetModelOnlineSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelOnlineSummary not implemented")
}
func (UnimplementedModelServiceServer) GetBulkModelOnlineSummary(context.Context, *GetBulkModelOnlineSummaryRequest) (*GetBulkModelOnlineSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkModelOnlineSummary not implemented")
}
func (UnimplementedModelServiceServer) GetModelOnlinePrice(context.Context, *GetModelOnlinePriceRequest) (*GetModelOnlinePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelOnlinePrice not implemented")
}
func (UnimplementedModelServiceServer) GetBulkModelOnlinePrice(context.Context, *GetBulkModelOnlinePriceRequest) (*GetBulkModelOnlinePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBulkModelOnlinePrice not implemented")
}

// UnsafeModelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelServiceServer will
// result in compilation errors.
type UnsafeModelServiceServer interface {
	mustEmbedUnimplementedModelServiceServer()
}

func RegisterModelServiceServer(s grpc.ServiceRegistrar, srv ModelServiceServer) {
	s.RegisterService(&ModelService_ServiceDesc, srv)
}

func _ModelService_GetModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_GetModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModels(ctx, req.(*GetModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_ReportModelOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportModelOnlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).ReportModelOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_ReportModelOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).ReportModelOnline(ctx, req.(*ReportModelOnlineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_ReportModelOnlines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportModelOnlinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).ReportModelOnlines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_ReportModelOnlines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).ReportModelOnlines(ctx, req.(*ReportModelOnlinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModelOnlineRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelOnlineRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModelOnlineRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_GetModelOnlineRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModelOnlineRecords(ctx, req.(*GetModelOnlineRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetBulkModelOnlineRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkModelOnlineRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetBulkModelOnlineRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_GetBulkModelOnlineRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetBulkModelOnlineRecords(ctx, req.(*GetBulkModelOnlineRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetCumulativeModelOnlineRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCumulativeModelOnlineRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetCumulativeModelOnlineRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_GetCumulativeModelOnlineRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetCumulativeModelOnlineRecords(ctx, req.(*GetCumulativeModelOnlineRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetBulkCumulativeModelOnlineRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkCumulativeModelOnlineRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetBulkCumulativeModelOnlineRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_GetBulkCumulativeModelOnlineRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetBulkCumulativeModelOnlineRecords(ctx, req.(*GetBulkCumulativeModelOnlineRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModelOnlineSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelOnlineSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModelOnlineSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_GetModelOnlineSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModelOnlineSummary(ctx, req.(*GetModelOnlineSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetBulkModelOnlineSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkModelOnlineSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetBulkModelOnlineSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_GetBulkModelOnlineSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetBulkModelOnlineSummary(ctx, req.(*GetBulkModelOnlineSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetModelOnlinePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelOnlinePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModelOnlinePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_GetModelOnlinePrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModelOnlinePrice(ctx, req.(*GetModelOnlinePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_GetBulkModelOnlinePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBulkModelOnlinePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetBulkModelOnlinePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelService_GetBulkModelOnlinePrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetBulkModelOnlinePrice(ctx, req.(*GetBulkModelOnlinePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModelService_ServiceDesc is the grpc.ServiceDesc for ModelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.metric.v1alpha.ModelService",
	HandlerType: (*ModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModels",
			Handler:    _ModelService_GetModels_Handler,
		},
		{
			MethodName: "ReportModelOnline",
			Handler:    _ModelService_ReportModelOnline_Handler,
		},
		{
			MethodName: "ReportModelOnlines",
			Handler:    _ModelService_ReportModelOnlines_Handler,
		},
		{
			MethodName: "GetModelOnlineRecords",
			Handler:    _ModelService_GetModelOnlineRecords_Handler,
		},
		{
			MethodName: "GetBulkModelOnlineRecords",
			Handler:    _ModelService_GetBulkModelOnlineRecords_Handler,
		},
		{
			MethodName: "GetCumulativeModelOnlineRecords",
			Handler:    _ModelService_GetCumulativeModelOnlineRecords_Handler,
		},
		{
			MethodName: "GetBulkCumulativeModelOnlineRecords",
			Handler:    _ModelService_GetBulkCumulativeModelOnlineRecords_Handler,
		},
		{
			MethodName: "GetModelOnlineSummary",
			Handler:    _ModelService_GetModelOnlineSummary_Handler,
		},
		{
			MethodName: "GetBulkModelOnlineSummary",
			Handler:    _ModelService_GetBulkModelOnlineSummary_Handler,
		},
		{
			MethodName: "GetModelOnlinePrice",
			Handler:    _ModelService_GetModelOnlinePrice_Handler,
		},
		{
			MethodName: "GetBulkModelOnlinePrice",
			Handler:    _ModelService_GetBulkModelOnlinePrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/metric/v1alpha/metric_service.proto",
}
